{"ast":null,"code":"/**\r\n * DevExtreme (ui/calendar/ui.calendar.base_view.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  domAdapter = require(\"../../core/dom_adapter\"),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  dataUtils = require(\"../../core/element_data\"),\n  domUtils = require(\"../../core/utils/dom\"),\n  Widget = require(\"../widget/ui.widget\"),\n  dateUtils = require(\"../../core/utils/date\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  noop = require(\"../../core/utils/common\").noop,\n  dateSerialization = require(\"../../core/utils/date_serialization\"),\n  eventUtils = require(\"../../events/utils\"),\n  clickEvent = require(\"../../events/click\");\nvar abstract = Widget.abstract,\n  CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\",\n  CALENDAR_CELL_CLASS = \"dx-calendar-cell\",\n  CALENDAR_EMPTY_CELL_CLASS = \"dx-calendar-empty-cell\",\n  CALENDAR_TODAY_CLASS = \"dx-calendar-today\",\n  CALENDAR_SELECTED_DATE_CLASS = \"dx-calendar-selected-date\",\n  CALENDAR_CONTOURED_DATE_CLASS = \"dx-calendar-contoured-date\",\n  CALENDAR_DXCLICK_EVENT_NAME = eventUtils.addNamespace(clickEvent.name, \"dxCalendar\"),\n  CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\nvar BaseView = Widget.inherit({\n  _getViewName: function _getViewName() {\n    return \"base\";\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      date: new Date(),\n      focusStateEnabled: false,\n      cellTemplate: null,\n      disabledDates: null,\n      onCellClick: null,\n      rowCount: 3,\n      colCount: 4,\n      allowValueSelection: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n    var value = this.option(\"value\");\n    this.option(\"value\", new Date(value));\n    if (!this.option(\"value\").valueOf()) {\n      this.option(\"value\", new Date(0, 0, 0, 0, 0, 0));\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this._renderImpl();\n  },\n  _renderImpl: function _renderImpl() {\n    this._$table = $(\"<table>\");\n    this.$element().append(this._$table);\n    this._createDisabledDatesHandler();\n    this._renderBody();\n    this._renderContouredDate();\n    this._renderValue();\n    this._renderEvents();\n  },\n  _renderBody: function _renderBody() {\n    this.$body = $(\"<tbody>\").appendTo(this._$table);\n    var that = this,\n      cellTemplate = this.option(\"cellTemplate\");\n    var appendChild = this.option(\"rtl\") ? function (row, cell) {\n      row.insertBefore(cell, row.firstChild);\n    } : function (row, cell) {\n      row.appendChild(cell);\n    };\n    function renderCell(cellIndex) {\n      if (prevCellDate) {\n        dateUtils.fixTimezoneGap(prevCellDate, cellDate);\n      }\n      prevCellDate = cellDate;\n      var cell = domAdapter.createElement(\"td\"),\n        $cell = $(cell),\n        className = CALENDAR_CELL_CLASS;\n      if (that._isTodayCell(cellDate)) {\n        className = className + \" \" + CALENDAR_TODAY_CLASS;\n      }\n      if (that._isDateOutOfRange(cellDate) || that.isDateDisabled(cellDate)) {\n        className = className + \" \" + CALENDAR_EMPTY_CELL_CLASS;\n      }\n      if (that._isOtherView(cellDate)) {\n        className = className + \" \" + CALENDAR_OTHER_VIEW_CLASS;\n      }\n      cell.className = className;\n      cell.setAttribute(\"data-value\", dateSerialization.serializeDate(cellDate, dateUtils.getShortDateFormat()));\n      dataUtils.data(cell, CALENDAR_DATE_VALUE_KEY, cellDate);\n      that.setAria({\n        role: \"option\",\n        label: that.getCellAriaLabel(cellDate)\n      }, $cell);\n      appendChild(row, cell);\n      if (cellTemplate) {\n        cellTemplate.render({\n          model: {\n            text: that._getCellText(cellDate),\n            date: cellDate,\n            view: that._getViewName()\n          },\n          container: domUtils.getPublicElement($cell),\n          index: cellIndex\n        });\n      } else {\n        cell.innerHTML = that._getCellText(cellDate);\n      }\n      cellDate = that._getNextCellData(cellDate);\n    }\n    var prevCellDate,\n      cellDate = this._getFirstCellData(),\n      colCount = this.option(\"colCount\");\n    for (var indexRow = 0, len = this.option(\"rowCount\"); indexRow < len; indexRow++) {\n      var row = domAdapter.createElement(\"tr\");\n      this.$body.get(0).appendChild(row);\n      this._iterateCells(colCount, renderCell);\n    }\n  },\n  _iterateCells: function _iterateCells(colCount, delegate) {\n    var i = 0;\n    while (i < colCount) {\n      delegate(i);\n      ++i;\n    }\n  },\n  _renderEvents: function _renderEvents() {\n    this._createCellClickAction();\n    eventsEngine.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);\n    eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, \"td\", function (e) {\n      if (!$(e.currentTarget).hasClass(CALENDAR_EMPTY_CELL_CLASS)) {\n        this._cellClickAction({\n          event: e,\n          value: $(e.currentTarget).data(CALENDAR_DATE_VALUE_KEY)\n        });\n      }\n    }.bind(this));\n  },\n  _createCellClickAction: function _createCellClickAction() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n  },\n  _createDisabledDatesHandler: function _createDisabledDatesHandler() {\n    var disabledDates = this.option(\"disabledDates\");\n    this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || noop;\n  },\n  _getDefaultDisabledDatesHandler: function _getDefaultDisabledDatesHandler(disabledDates) {\n    return noop;\n  },\n  _isTodayCell: abstract,\n  _isDateOutOfRange: abstract,\n  isDateDisabled: function isDateDisabled(cellDate) {\n    var dateParts = {\n      date: cellDate,\n      view: this._getViewName()\n    };\n    return this._disabledDatesHandler(dateParts);\n  },\n  _isOtherView: abstract,\n  _getCellText: abstract,\n  _getFirstCellData: abstract,\n  _getNextCellData: abstract,\n  _renderContouredDate: function _renderContouredDate(contouredDate) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n    contouredDate = contouredDate || this.option(\"contouredDate\");\n    var $oldContouredCell = this._$table.find(\".\" + CALENDAR_CONTOURED_DATE_CLASS);\n    var $newContouredCell = this._getCellByDate(contouredDate);\n    $oldContouredCell.removeClass(CALENDAR_CONTOURED_DATE_CLASS);\n    $newContouredCell.addClass(CALENDAR_CONTOURED_DATE_CLASS);\n  },\n  _dispose: function _dispose() {\n    this._keyboardProcessor = void 0;\n    this.callBase();\n  },\n  _changeValue: function _changeValue(cellDate) {\n    if (cellDate) {\n      var value = this.option(\"value\"),\n        newValue = value ? new Date(value) : new Date();\n      newValue.setDate(cellDate.getDate());\n      newValue.setMonth(cellDate.getMonth());\n      newValue.setFullYear(cellDate.getFullYear());\n      newValue.setDate(cellDate.getDate());\n      this.option(\"value\", newValue);\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (!this.option(\"allowValueSelection\")) {\n      return;\n    }\n    var value = this.option(\"value\"),\n      selectedCell = this._getCellByDate(value);\n    if (this._selectedCell) {\n      this._selectedCell.removeClass(CALENDAR_SELECTED_DATE_CLASS);\n    }\n    selectedCell.addClass(CALENDAR_SELECTED_DATE_CLASS);\n    this._selectedCell = selectedCell;\n  },\n  getCellAriaLabel: function getCellAriaLabel(date) {\n    return this._getCellText(date);\n  },\n  _getFirstAvailableDate: function _getFirstAvailableDate() {\n    var date = this.option(\"date\"),\n      min = this.option(\"min\");\n    date = dateUtils.getFirstDateView(this._getViewName(), date);\n    return new Date(min && date < min ? min : date);\n  },\n  _getCellByDate: abstract,\n  isBoundary: abstract,\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n    switch (name) {\n      case \"value\":\n        this._renderValue();\n        break;\n      case \"contouredDate\":\n        this._renderContouredDate(args.value);\n        break;\n      case \"onCellClick\":\n        this._createCellClickAction();\n        break;\n      case \"disabledDates\":\n      case \"cellTemplate\":\n        this._invalidate();\n        break;\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = BaseView;","map":null,"metadata":{},"sourceType":"script"}