{"ast":null,"code":"/**\r\n * DevExtreme (core/component_registrator.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"./renderer\");\nvar callbacks = require(\"./component_registrator_callbacks\");\nvar errors = require(\"./errors\");\nvar publicComponentUtils = require(\"./utils/public_component\");\nvar registerComponent = function registerComponent(name, namespace, componentClass) {\n  if (!componentClass) {\n    componentClass = namespace;\n  } else {\n    namespace[name] = componentClass;\n  }\n  publicComponentUtils.name(componentClass, name);\n  callbacks.fire(name, componentClass);\n};\nvar registerRendererComponent = function registerRendererComponent(name, componentClass) {\n  $.fn[name] = function (options) {\n    var result,\n      isMemberInvoke = \"string\" === typeof options;\n    if (isMemberInvoke) {\n      var memberName = options,\n        memberArgs = [].slice.call(arguments).slice(1);\n      this.each(function () {\n        var instance = componentClass.getInstance(this);\n        if (!instance) {\n          throw errors.Error(\"E0009\", name);\n        }\n        var member = instance[memberName],\n          memberValue = member.apply(instance, memberArgs);\n        if (void 0 === result) {\n          result = memberValue;\n        }\n      });\n    } else {\n      this.each(function () {\n        var instance = componentClass.getInstance(this);\n        if (instance) {\n          instance.option(options);\n        } else {\n          new componentClass(this, options);\n        }\n      });\n      result = this;\n    }\n    return result;\n  };\n};\ncallbacks.add(registerRendererComponent);\nmodule.exports = registerComponent;","map":null,"metadata":{},"sourceType":"script"}