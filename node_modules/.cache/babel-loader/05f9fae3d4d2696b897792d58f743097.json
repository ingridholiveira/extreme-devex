{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.context_menu.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom = require(\"../../core/utils/dom\");\nvar _common = require(\"../../core/utils/common\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _context_menu = require(\"../context_menu\");\nvar _context_menu2 = _interopRequireDefault(_context_menu);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar CONTEXT_MENU = \"dx-context-menu\",\n  viewName = {\n    columnHeadersView: \"header\",\n    rowsView: \"content\",\n    footerView: \"footer\",\n    headerPanel: \"headerPanel\"\n  },\n  VIEW_NAMES = [\"columnHeadersView\", \"rowsView\", \"footerView\", \"headerPanel\"];\nvar ContextMenuController = _uiGrid_core2.default.ViewController.inherit({\n  init: function init() {\n    this.createAction(\"onContextMenuPreparing\");\n  },\n  getContextMenuItems: function getContextMenuItems(dxEvent) {\n    if (!dxEvent) {\n      return false;\n    }\n    var view,\n      options,\n      rowIndex,\n      columnIndex,\n      rowOptions,\n      $element,\n      $targetRowElement,\n      $targetCellElement,\n      menuItems,\n      that = this,\n      $targetElement = (0, _renderer2.default)(dxEvent.target);\n    (0, _iterator.each)(VIEW_NAMES, function () {\n      view = that.getView(this);\n      $element = view && view.element();\n      if ($element && ($element.is($targetElement) || $element.find($targetElement).length)) {\n        $targetCellElement = $targetElement.closest(\".dx-row > td\");\n        $targetRowElement = $targetCellElement.parent();\n        rowIndex = view.getRowIndex($targetRowElement);\n        columnIndex = $targetCellElement[0] && $targetCellElement[0].cellIndex;\n        rowOptions = $targetRowElement.data(\"options\");\n        options = {\n          event: dxEvent,\n          targetElement: (0, _dom.getPublicElement)($targetElement),\n          target: viewName[this],\n          rowIndex: rowIndex,\n          row: view._getRows()[rowIndex],\n          columnIndex: columnIndex,\n          column: rowOptions && rowOptions.cells[columnIndex].column\n        };\n        options.items = view.getContextMenuItems && view.getContextMenuItems(options);\n        that.executeAction(\"onContextMenuPreparing\", options);\n        that._contextMenuPrepared(options);\n        menuItems = options.items;\n        if (menuItems) {\n          return false;\n        }\n      }\n    });\n    return menuItems;\n  },\n  _contextMenuPrepared: _common.noop\n});\nvar ContextMenuView = _uiGrid_core2.default.View.inherit({\n  _renderCore: function _renderCore() {\n    var that = this,\n      $element = that.element().addClass(CONTEXT_MENU);\n    this.setAria(\"role\", \"presentation\", $element);\n    this._createComponent($element, _context_menu2.default, {\n      onPositioning: function onPositioning(actionArgs) {\n        var event = actionArgs.event,\n          contextMenuInstance = actionArgs.component,\n          items = that.getController(\"contextMenu\").getContextMenuItems(event);\n        if (items) {\n          contextMenuInstance.option(\"items\", items);\n          event.stopPropagation();\n        } else {\n          actionArgs.cancel = true;\n        }\n      },\n      onItemClick: function onItemClick(params) {\n        params.itemData.onItemClick && params.itemData.onItemClick(params);\n      },\n      cssClass: that.getWidgetContainerClass(),\n      target: that.component.$element()\n    });\n  }\n});\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      onContextMenuPreparing: null\n    };\n  },\n  controllers: {\n    contextMenu: ContextMenuController\n  },\n  views: {\n    contextMenuView: ContextMenuView\n  }\n};","map":null,"metadata":{},"sourceType":"script"}