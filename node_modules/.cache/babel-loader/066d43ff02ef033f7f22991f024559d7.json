{"ast":null,"code":"/**\r\n * DevExtreme (core/templates/child_default_template.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChildDefaultTemplate = void 0;\nvar _template_base = require(\"./template_base\");\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar ChildDefaultTemplate = exports.ChildDefaultTemplate = function (_TemplateBase) {\n  _inherits(ChildDefaultTemplate, _TemplateBase);\n  function ChildDefaultTemplate(name) {\n    _classCallCheck(this, ChildDefaultTemplate);\n    var _this = _possibleConstructorReturn(this, (ChildDefaultTemplate.__proto__ || Object.getPrototypeOf(ChildDefaultTemplate)).call(this));\n    _this.name = name;\n    return _this;\n  }\n  return ChildDefaultTemplate;\n}(_template_base.TemplateBase);","map":null,"metadata":{},"sourceType":"script"}