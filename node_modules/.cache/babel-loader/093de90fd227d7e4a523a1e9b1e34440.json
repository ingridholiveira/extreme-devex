{"ast":null,"code":"/**\r\n * DevExtreme (exporter/svg_creator.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  ajax = require(\"../core/utils/ajax\"),\n  window = require(\"../core/utils/window\").getWindow(),\n  isFunction = require(\"../core/utils/type\").isFunction,\n  each = require(\"../core/utils/iterator\").each,\n  svgUtils = require(\"../core/utils/svg\"),\n  deferredUtils = require(\"../core/utils/deferred\"),\n  when = deferredUtils.when,\n  Deferred = deferredUtils.Deferred;\nexports.svgCreator = {\n  _markup: \"\",\n  _imageArray: {},\n  _imageDeferreds: [],\n  _getBinaryFile: function _getBinaryFile(src, callback) {\n    ajax.sendRequest({\n      url: src,\n      method: \"GET\",\n      responseType: \"arraybuffer\"\n    }).done(callback).fail(function () {\n      callback(false);\n    });\n  },\n  _loadImages: function _loadImages() {\n    var that = this;\n    each(that._imageArray, function (src) {\n      var deferred = new Deferred();\n      that._imageDeferreds.push(deferred);\n      that._getBinaryFile(src, function (response) {\n        if (!response) {\n          delete that._imageArray[src];\n          deferred.resolve();\n          return;\n        }\n        var i,\n          binary = \"\",\n          bytes = new Uint8Array(response),\n          length = bytes.byteLength;\n        for (i = 0; i < length; i++) {\n          binary += String.fromCharCode(bytes[i]);\n        }\n        that._imageArray[src] = \"data:image/png;base64,\" + window.btoa(binary);\n        deferred.resolve();\n      });\n    });\n  },\n  _parseImages: function _parseImages(element) {\n    var href,\n      that = this;\n    if (\"image\" === element.tagName) {\n      href = $(element).attr(\"href\") || $(element).attr(\"xlink:href\");\n      if (!that._imageArray[href]) {\n        that._imageArray[href] = \"\";\n      }\n    }\n    each(element.childNodes, function (_, element) {\n      that._parseImages(element);\n    });\n  },\n  _prepareImages: function _prepareImages(svgElem) {\n    this._parseImages(svgElem);\n    this._loadImages();\n    return when.apply($, this._imageDeferreds);\n  },\n  getData: function getData(data, options) {\n    var markup,\n      that = this,\n      xmlVersion = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>',\n      svgElem = svgUtils.getSvgElement(data),\n      $svgObject = $(svgElem);\n    markup = xmlVersion + svgUtils.getSvgMarkup($svgObject.get(0), options.backgroundColor);\n    return that._prepareImages(svgElem).then(function () {\n      each(that._imageArray, function (href, dataURI) {\n        var regexpString = \"href=['|\\\"]\" + href + \"['|\\\"]\";\n        markup = markup.replace(new RegExp(regexpString, \"gi\"), 'href=\"' + dataURI + '\"');\n      });\n      return isFunction(window.Blob) ? that._getBlob(markup) : that._getBase64(markup);\n    });\n  },\n  _getBlob: function _getBlob(markup) {\n    return new window.Blob([markup], {\n      type: \"image/svg+xml\"\n    });\n  },\n  _getBase64: function _getBase64(markup) {\n    return window.btoa(markup);\n  }\n};\nexports.getData = function (data, options) {\n  return exports.svgCreator.getData(data, options);\n};","map":null,"metadata":{},"sourceType":"script"}