{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.error_handling.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _click = require(\"../../events/click\");\nvar _click2 = _interopRequireDefault(_click);\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar ERROR_ROW_CLASS = \"dx-error-row\",\n  ERROR_MESSAGE_CLASS = \"dx-error-message\",\n  ERROR_CLOSEBUTTON_CLASS = \"dx-closebutton\",\n  ACTION_CLASS = \"action\";\nvar ErrorHandlingController = _uiGrid_core2.default.ViewController.inherit({\n  init: function init() {\n    var that = this;\n    that._columnHeadersView = that.getView(\"columnHeadersView\");\n    that._rowsView = that.getView(\"rowsView\");\n  },\n  _createErrorRow: function _createErrorRow(error, $tableElements) {\n    var $errorRow,\n      $closeButton,\n      that = this,\n      $errorMessage = this._renderErrorMessage(error);\n    if ($tableElements) {\n      $errorRow = (0, _renderer2.default)(\"<tr>\").addClass(ERROR_ROW_CLASS);\n      $closeButton = (0, _renderer2.default)(\"<div>\").addClass(ERROR_CLOSEBUTTON_CLASS).addClass(that.addWidgetPrefix(ACTION_CLASS));\n      _events_engine2.default.on($closeButton, _click2.default.name, that.createAction(function (args) {\n        var $errorRow,\n          e = args.event,\n          errorRowIndex = (0, _renderer2.default)(e.currentTarget).closest(\".\" + ERROR_ROW_CLASS).index();\n        e.stopPropagation();\n        (0, _iterator.each)($tableElements, function (_, tableElement) {\n          $errorRow = (0, _renderer2.default)(tableElement).children(\"tbody\").children(\"tr\").eq(errorRowIndex);\n          that.removeErrorRow($errorRow);\n        });\n        that.getController(\"resizing\") && that.getController(\"resizing\").fireContentReadyAction();\n      }));\n      (0, _renderer2.default)(\"<td>\").attr({\n        colSpan: that.getController(\"columns\").getVisibleColumns().length,\n        role: \"presentation\"\n      }).prepend($closeButton).append($errorMessage).appendTo($errorRow);\n      return $errorRow;\n    }\n    return $errorMessage;\n  },\n  _renderErrorMessage: function _renderErrorMessage(error) {\n    var message = error.url ? error.message.replace(error.url, \"\") : error.message || error,\n      $message = (0, _renderer2.default)(\"<div>\").addClass(ERROR_MESSAGE_CLASS).text(message);\n    if (error.url) {\n      (0, _renderer2.default)(\"<a>\").attr(\"href\", error.url).text(error.url).appendTo($message);\n    }\n    return $message;\n  },\n  renderErrorRow: function renderErrorRow(error, rowIndex, $popupContent) {\n    var $row,\n      $errorMessageElement,\n      $firstErrorRow,\n      rowElements,\n      viewElement,\n      $tableElements,\n      that = this;\n    if ($popupContent) {\n      $popupContent.find(\".\" + ERROR_MESSAGE_CLASS).remove();\n      $errorMessageElement = that._createErrorRow(error);\n      $popupContent.prepend($errorMessageElement);\n      return $errorMessageElement;\n    }\n    viewElement = rowIndex >= 0 || !that._columnHeadersView.isVisible() ? that._rowsView : that._columnHeadersView, $tableElements = $popupContent || viewElement.getTableElements();\n    (0, _iterator.each)($tableElements, function (_, tableElement) {\n      $errorMessageElement = that._createErrorRow(error, $tableElements);\n      $firstErrorRow = $firstErrorRow || $errorMessageElement;\n      if (rowIndex >= 0) {\n        $row = viewElement._getRowElements((0, _renderer2.default)(tableElement)).eq(rowIndex);\n        that.removeErrorRow($row.next());\n        $errorMessageElement.insertAfter($row);\n      } else {\n        var $tbody = (0, _renderer2.default)(tableElement).children(\"tbody\");\n        rowElements = $tbody.children(\"tr\");\n        if (that._columnHeadersView.isVisible()) {\n          that.removeErrorRow(rowElements.last());\n          (0, _renderer2.default)(tableElement).append($errorMessageElement);\n        } else {\n          that.removeErrorRow(rowElements.first());\n          $tbody.first().prepend($errorMessageElement);\n        }\n      }\n    });\n    if (!$popupContent) {\n      var resizingController = that.getController(\"resizing\");\n      resizingController && resizingController.fireContentReadyAction();\n    }\n    return $firstErrorRow;\n  },\n  removeErrorRow: function removeErrorRow($row) {\n    if (!$row) {\n      var $columnHeaders = this._columnHeadersView && this._columnHeadersView.element();\n      $row = $columnHeaders && $columnHeaders.find(\".\" + ERROR_ROW_CLASS);\n      if (!$row || !$row.length) {\n        var $rowsViewElement = this._rowsView.element();\n        $row = $rowsViewElement && $rowsViewElement.find(\".\" + ERROR_ROW_CLASS);\n      }\n    }\n    $row && $row.hasClass(ERROR_ROW_CLASS) && $row.remove();\n  },\n  optionChanged: function optionChanged(args) {\n    var that = this;\n    switch (args.name) {\n      case \"errorRowEnabled\":\n        args.handled = true;\n        break;\n      default:\n        that.callBase(args);\n    }\n  }\n});\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      errorRowEnabled: true\n    };\n  },\n  controllers: {\n    errorHandling: ErrorHandlingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function init() {\n          var that = this,\n            errorHandlingController = that.getController(\"errorHandling\");\n          that.callBase();\n          that.dataErrorOccurred.add(function (error, $popupContent) {\n            if (that.option(\"errorRowEnabled\")) {\n              errorHandlingController.renderErrorRow(error, void 0, $popupContent);\n            }\n          });\n          that.changed.add(function (e) {\n            if (e && \"loadError\" === e.changeType) {\n              return;\n            }\n            var errorHandlingController = that.getController(\"errorHandling\"),\n              editingController = that.getController(\"editing\");\n            if (editingController && !editingController.hasChanges()) {\n              errorHandlingController && errorHandlingController.removeErrorRow();\n            }\n          });\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}