{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _common = require(\"../../core/utils/common\");\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _uiGrid_core3 = require(\"./ui.grid_core.columns_view\");\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _themes = require(\"../themes\");\nvar _themes2 = _interopRequireDefault(_themes);\nvar _button = require(\"../button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _tree_view = require(\"../tree_view\");\nvar _tree_view2 = _interopRequireDefault(_tree_view);\nvar _devices = require(\"../../core/devices\");\nvar _devices2 = _interopRequireDefault(_devices);\nvar _popup = require(\"../popup\");\nvar _popup2 = _interopRequireDefault(_popup);\nvar _type = require(\"../../core/utils/type\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _iterator = require(\"../../core/utils/iterator\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\",\n  COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\",\n  NOTOUCH_ACTION_CLASS = \"notouch-action\",\n  COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\",\n  COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\",\n  COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\",\n  COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\",\n  COLUMN_CHOOSER_ICON_NAME = \"column-chooser\",\n  COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\",\n  TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\",\n  CHECKBOX_SELECTOR = \".dx-checkbox\",\n  CLICK_TIMEOUT = 300,\n  processItems = function processItems(that, chooserColumns) {\n    var item,\n      items = [],\n      isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\n    if (chooserColumns.length) {\n      (0, _iterator.each)(chooserColumns, function (index, column) {\n        item = {\n          text: column.caption,\n          cssClass: column.cssClass,\n          allowHiding: column.allowHiding,\n          expanded: true,\n          id: column.index,\n          disabled: false,\n          disableCheckBox: false === column.allowHiding,\n          parentId: (0, _type.isDefined)(column.ownerBand) ? column.ownerBand : null\n        };\n        if (isSelectMode) {\n          item.selected = column.visible;\n        }\n        items.push(item);\n      });\n    }\n    return items;\n  };\nvar ColumnChooserController = _uiGrid_core2.default.ViewController.inherit({\n  renderShowColumnChooserButton: function renderShowColumnChooserButton($element) {\n    var $columnChooserButton,\n      that = this,\n      columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS),\n      columnChooserEnabled = that.option(\"columnChooser.enabled\"),\n      $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\n    if (columnChooserEnabled) {\n      if (!$showColumnChooserButton.length) {\n        $columnChooserButton = (0, _renderer2.default)(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\n        that._createComponent($columnChooserButton, _button2.default, {\n          icon: COLUMN_CHOOSER_ICON_NAME,\n          onClick: function onClick() {\n            that.getView(\"columnChooserView\").showColumnChooser();\n          },\n          hint: that.option(\"columnChooser.title\"),\n          integrationOptions: {}\n        });\n      } else {\n        $showColumnChooserButton.show();\n      }\n    } else {\n      $showColumnChooserButton.hide();\n    }\n  },\n  getPosition: function getPosition() {\n    var rowsView = this.getView(\"rowsView\");\n    return {\n      my: \"right bottom\",\n      at: \"right bottom\",\n      of: rowsView && rowsView.element(),\n      collision: \"fit\",\n      offset: \"-2 -2\",\n      boundaryOffset: \"2 2\"\n    };\n  }\n});\nvar ColumnChooserView = _uiGrid_core4.default.ColumnsView.inherit({\n  _resizeCore: _common.noop,\n  _isWinDevice: function _isWinDevice() {\n    return !!_devices2.default.real().win;\n  },\n  _updateList: function _updateList(change) {\n    var items,\n      $popupContent = this._popupContainer.$content(),\n      isSelectMode = \"select\" === this.option(\"columnChooser.mode\"),\n      columnChooserList = this._columnChooserList,\n      chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n    if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\n      items = processItems(this, chooserColumns);\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].id === change.columnIndex) {\n          columnChooserList.option(\"items[\" + i + \"].selected\", items[i].selected);\n        }\n      }\n    } else {\n      if (!isSelectMode || !columnChooserList || \"full\" === change) {\n        this._popupContainer._wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\n        items = processItems(this, chooserColumns);\n        this._renderTreeView($popupContent, items);\n      }\n    }\n  },\n  _initializePopupContainer: function _initializePopupContainer() {\n    var that = this,\n      $element = that.element().addClass(that.addWidgetPrefix(COLUMN_CHOOSER_CLASS)),\n      columnChooserOptions = that.option(\"columnChooser\"),\n      themeName = _themes2.default.current(),\n      isGenericTheme = _themes2.default.isGeneric(themeName),\n      isMaterial = _themes2.default.isMaterial(themeName),\n      dxPopupOptions = {\n        visible: false,\n        shading: false,\n        showCloseButton: false,\n        dragEnabled: true,\n        resizeEnabled: true,\n        toolbarItems: [{\n          text: columnChooserOptions.title,\n          toolbar: \"top\",\n          location: isGenericTheme || isMaterial ? \"before\" : \"center\"\n        }],\n        position: that.getController(\"columnChooser\").getPosition(),\n        width: columnChooserOptions.width,\n        height: columnChooserOptions.height,\n        rtlEnabled: that.option(\"rtlEnabled\"),\n        onHidden: function onHidden() {\n          if (that._isWinDevice()) {\n            (0, _renderer2.default)(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n          }\n        },\n        container: columnChooserOptions.container\n      };\n    if (isGenericTheme || isMaterial) {\n      (0, _extend.extend)(dxPopupOptions, {\n        showCloseButton: true\n      });\n    } else {\n      dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\n        shortcut: \"cancel\"\n      };\n    }\n    if (!(0, _type.isDefined)(this._popupContainer)) {\n      that._popupContainer = that._createComponent($element, _popup2.default, dxPopupOptions);\n      that._popupContainer.on(\"optionChanged\", function (args) {\n        if (\"visible\" === args.name) {\n          that.renderCompleted.fire();\n        }\n      });\n    } else {\n      this._popupContainer.option(dxPopupOptions);\n    }\n  },\n  _renderCore: function _renderCore(change) {\n    if (this._popupContainer) {\n      this._updateList(change);\n    }\n  },\n  _renderTreeView: function _renderTreeView($container, items) {\n    var scrollTop,\n      scrollableInstance,\n      that = this,\n      columnChooser = this.option(\"columnChooser\"),\n      isSelectMode = \"select\" === columnChooser.mode,\n      treeViewConfig = {\n        items: items,\n        dataStructure: \"plain\",\n        activeStateEnabled: true,\n        focusStateEnabled: true,\n        hoverStateEnabled: true,\n        itemTemplate: \"item\",\n        showCheckBoxesMode: \"none\",\n        rootValue: null,\n        searchEnabled: columnChooser.allowSearch,\n        searchTimeout: columnChooser.searchTimeout,\n        onItemRendered: function onItemRendered(e) {\n          if (e.itemData.disableCheckBox) {\n            var $treeViewNode = (0, _renderer2.default)(e.itemElement).closest(TREEVIEW_NODE_SELECTOR),\n              checkBoxInstance = void 0,\n              $checkBox = void 0;\n            if ($treeViewNode.length) {\n              $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\n              if ($checkBox.length) {\n                checkBoxInstance = $checkBox.data(\"dxCheckBox\");\n                checkBoxInstance && checkBoxInstance.option(\"disabled\", true);\n              }\n            }\n          }\n        }\n      };\n    scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\n    scrollTop = scrollableInstance && scrollableInstance.scrollTop();\n    if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS));\n    }\n    treeViewConfig.onContentReady = function (e) {\n      (0, _common.deferUpdate)(function () {\n        if (scrollTop) {\n          var scrollable = (0, _renderer2.default)(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\n          scrollable && scrollable.scrollTo({\n            y: scrollTop\n          });\n        }\n        that.renderCompleted.fire();\n      });\n    };\n    if (this._isWinDevice()) {\n      treeViewConfig.useNativeScrolling = false;\n    }\n    (0, _extend.extend)(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\n    if (this._columnChooserList) {\n      if (!treeViewConfig.searchEnabled) {\n        treeViewConfig.searchValue = \"\";\n      }\n      this._columnChooserList.option(treeViewConfig);\n    } else {\n      this._columnChooserList = this._createComponent($container, _tree_view2.default, treeViewConfig);\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS));\n    }\n  },\n  _prepareDragModeConfig: function _prepareDragModeConfig() {\n    var columnChooserOptions = this.option(\"columnChooser\");\n    return {\n      noDataText: columnChooserOptions.emptyPanelText,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      itemTemplate: function itemTemplate(data, index, item) {\n        (0, _renderer2.default)(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS);\n      }\n    };\n  },\n  _prepareSelectModeConfig: function _prepareSelectModeConfig() {\n    var that = this,\n      selectionChangedHandler = function selectionChangedHandler(e) {\n        var visibleColumns = that._columnsController.getVisibleColumns().filter(function (item) {\n            return !item.command;\n          }),\n          isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\n        if (isLastColumnUnselected) {\n          e.component.selectItem(e.itemElement);\n        } else {\n          setTimeout(function () {\n            that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected);\n          }, CLICK_TIMEOUT);\n        }\n      };\n    return {\n      selectNodesRecursive: false,\n      showCheckBoxesMode: \"normal\",\n      onItemSelectionChanged: selectionChangedHandler\n    };\n  },\n  _columnOptionChanged: function _columnOptionChanged(e) {\n    var changeTypes = e.changeTypes,\n      optionNames = e.optionNames,\n      isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    this.callBase(e);\n    if (isSelectMode) {\n      if (optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex) {\n        this.render(null, {\n          changeType: \"selection\",\n          columnIndex: e.columnIndex\n        });\n      } else {\n        if (optionNames.showInColumnChooser || optionNames.visible || changeTypes.columns && optionNames.all) {\n          this.render(null, \"full\");\n        }\n      }\n    }\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"columnChooser\":\n        this._initializePopupContainer();\n        this.render(null, \"full\");\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  getColumnElements: function getColumnElements() {\n    var $node,\n      item,\n      result = [],\n      isSelectMode = \"select\" === this.option(\"columnChooser.mode\"),\n      chooserColumns = this._columnsController.getChooserColumns(isSelectMode),\n      $content = this._popupContainer && this._popupContainer.$content(),\n      $nodes = $content && $content.find(\".dx-treeview-node\");\n    if ($nodes) {\n      chooserColumns.forEach(function (column) {\n        $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\n        item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\n        result.push(item);\n      });\n    }\n    return (0, _renderer2.default)(result);\n  },\n  getName: function getName() {\n    return \"columnChooser\";\n  },\n  getColumns: function getColumns() {\n    return this._columnsController.getChooserColumns();\n  },\n  allowDragging: function allowDragging(column, sourceLocation) {\n    var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\n    return this.isColumnChooserVisible() && columnVisible;\n  },\n  getBoundingRect: function getBoundingRect() {\n    var offset,\n      that = this,\n      container = that._popupContainer && that._popupContainer._container();\n    if (container && container.is(\":visible\")) {\n      offset = container.offset();\n      return {\n        left: offset.left,\n        top: offset.top,\n        right: offset.left + container.outerWidth(),\n        bottom: offset.top + container.outerHeight()\n      };\n    }\n    return null;\n  },\n  showColumnChooser: function showColumnChooser() {\n    if (!this._popupContainer) {\n      this._initializePopupContainer();\n      this.render();\n    }\n    this._popupContainer.show();\n    if (this._isWinDevice()) {\n      (0, _renderer2.default)(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n    }\n  },\n  hideColumnChooser: function hideColumnChooser() {\n    if (this._popupContainer) {\n      this._popupContainer.hide();\n    }\n  },\n  isColumnChooserVisible: function isColumnChooserVisible() {\n    var popupContainer = this._popupContainer;\n    return popupContainer && popupContainer.option(\"visible\");\n  },\n  publicMethods: function publicMethods() {\n    return [\"showColumnChooser\", \"hideColumnChooser\"];\n  }\n});\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      columnChooser: {\n        enabled: false,\n        allowSearch: false,\n        searchTimeout: 500,\n        mode: \"dragAndDrop\",\n        width: 250,\n        height: 260,\n        title: _message2.default.format(\"dxDataGrid-columnChooserTitle\"),\n        emptyPanelText: _message2.default.format(\"dxDataGrid-columnChooserEmptyText\"),\n        container: void 0\n      }\n    };\n  },\n  controllers: {\n    columnChooser: ColumnChooserController\n  },\n  views: {\n    columnChooserView: ColumnChooserView\n  },\n  extenders: {\n    views: {\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase();\n          return this._appendColumnChooserItem(items);\n        },\n        _appendColumnChooserItem: function _appendColumnChooserItem(items) {\n          var that = this,\n            columnChooserEnabled = that.option(\"columnChooser.enabled\");\n          if (columnChooserEnabled) {\n            var onClickHandler = function onClickHandler() {\n                that.component.getView(\"columnChooserView\").showColumnChooser();\n              },\n              onInitialized = function onInitialized(e) {\n                (0, _renderer2.default)(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)));\n              },\n              hintText = that.option(\"columnChooser.title\"),\n              toolbarItem = {\n                widget: \"dxButton\",\n                options: {\n                  icon: COLUMN_CHOOSER_ICON_NAME,\n                  onClick: onClickHandler,\n                  hint: hintText,\n                  text: hintText,\n                  onInitialized: onInitialized\n                },\n                showText: \"inMenu\",\n                location: \"after\",\n                name: \"columnChooserButton\",\n                locateInMenu: \"auto\",\n                sortIndex: 40\n              };\n            items.push(toolbarItem);\n          }\n          return items;\n        },\n        optionChanged: function optionChanged(args) {\n          switch (args.name) {\n            case \"columnChooser\":\n              this._invalidate();\n              args.handled = true;\n              break;\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function isVisible() {\n          var that = this,\n            columnChooserEnabled = that.option(\"columnChooser.enabled\");\n          return that.callBase() || columnChooserEnabled;\n        }\n      }\n    },\n    controllers: {\n      columns: {\n        allowMoveColumn: function allowMoveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var columnChooserMode = this.option(\"columnChooser.mode\"),\n            isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\n          return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}