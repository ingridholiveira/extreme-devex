{"ast":null,"code":"/**\r\n * DevExtreme (ui/drop_down_editor/ui.drop_down_button.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (void 0 === getter) {\n        return;\n      }\n      return getter.call(receiver);\n    }\n  }\n};\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _button = require(\"../text_box/texteditor_button_collection/button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _button3 = require(\"../button\");\nvar _button4 = _interopRequireDefault(_button3);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar DROP_DOWN_EDITOR_BUTTON_CLASS = \"dx-dropdowneditor-button\";\nvar DROP_DOWN_EDITOR_BUTTON_VISIBLE = \"dx-dropdowneditor-button-visible\";\nvar BUTTON_MESSAGE = \"dxDropDownEditor-selectLabel\";\nvar ClearButton = function (_TextEditorButton) {\n  _inherits(ClearButton, _TextEditorButton);\n  function ClearButton() {\n    _classCallCheck(this, ClearButton);\n    return _possibleConstructorReturn(this, (ClearButton.__proto__ || Object.getPrototypeOf(ClearButton)).apply(this, arguments));\n  }\n  _createClass(ClearButton, [{\n    key: \"_attachEvents\",\n    value: function value(instance) {\n      var editor = this.editor;\n      instance.option(\"onClick\", function (e) {\n        !editor.option(\"openOnFieldClick\") && editor._openHandler(e);\n      });\n      _events_engine2.default.on(instance.$element(), \"mousedown\", function (e) {\n        e.preventDefault();\n      });\n    }\n  }, {\n    key: \"_create\",\n    value: function value() {\n      var editor = this.editor;\n      var $element = (0, _renderer2.default)(\"<div>\");\n      var options = this._getOptions();\n      this._addToContainer($element);\n      var instance = editor._createComponent($element, _button4.default, options);\n      instance.setAria(\"label\", _message2.default.format(BUTTON_MESSAGE));\n      this._legacyRender(editor.$element(), $element, options.visible);\n      return {\n        $element: $element,\n        instance: instance\n      };\n    }\n  }, {\n    key: \"_getOptions\",\n    value: function value() {\n      var editor = this.editor;\n      var visible = this._isVisible();\n      var isReadOnly = editor.option(\"readOnly\");\n      var template = editor._getTemplateByOption(\"dropDownButtonTemplate\");\n      return {\n        focusStateEnabled: false,\n        hoverStateEnabled: false,\n        activeStateEnabled: false,\n        useInkRipple: false,\n        disabled: isReadOnly,\n        visible: visible,\n        template: template\n      };\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function value() {\n      var editor = this.editor;\n      return _get(ClearButton.prototype.__proto__ || Object.getPrototypeOf(ClearButton.prototype), \"_isVisible\", this).call(this) && editor.option(\"showDropDownButton\");\n    }\n  }, {\n    key: \"_legacyRender\",\n    value: function value($editor, $element, isVisible) {\n      $editor.toggleClass(DROP_DOWN_EDITOR_BUTTON_VISIBLE, isVisible);\n      if ($element) {\n        $element.removeClass(\"dx-button\");\n        $element.addClass(DROP_DOWN_EDITOR_BUTTON_CLASS);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function value() {\n      var shouldUpdate = _get(ClearButton.prototype.__proto__ || Object.getPrototypeOf(ClearButton.prototype), \"update\", this).call(this);\n      if (shouldUpdate) {\n        var editor = this.editor,\n          instance = this.instance;\n        var $editor = editor.$element();\n        var options = this._getOptions();\n        instance && instance.option(options);\n        this._legacyRender($editor, instance && instance.$element(), options.visible);\n      }\n    }\n  }]);\n  return ClearButton;\n}(_button2.default);\nexports.default = ClearButton;","map":null,"metadata":{},"sourceType":"script"}