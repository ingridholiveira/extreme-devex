{"ast":null,"code":"/**\r\n * DevExtreme (ui/widget/ui.keyboard_processor.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _class = require(\"../../core/class\");\nvar _class2 = _interopRequireDefault(_class);\nvar _array = require(\"../../core/utils/array\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _utils = require(\"../../events/utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar COMPOSITION_START_EVENT = \"compositionstart\";\nvar COMPOSITION_END_EVENT = \"compositionend\";\nvar KEYDOWN_EVENT = \"keydown\";\nvar NAMESPACE = \"KeyboardProcessor\";\nvar KeyboardProcessor = _class2.default.inherit({\n  _keydown: (0, _utils.addNamespace)(KEYDOWN_EVENT, NAMESPACE),\n  _compositionStart: (0, _utils.addNamespace)(COMPOSITION_START_EVENT, NAMESPACE),\n  _compositionEnd: (0, _utils.addNamespace)(COMPOSITION_END_EVENT, NAMESPACE),\n  ctor: function ctor(options) {\n    var _this = this;\n    options = options || {};\n    if (options.element) {\n      this._element = (0, _renderer2.default)(options.element);\n    }\n    if (options.focusTarget) {\n      this._focusTarget = options.focusTarget;\n    }\n    this._handler = options.handler;\n    this._context = options.context;\n    this._childProcessors = [];\n    if (this._element) {\n      this._processFunction = function (e) {\n        var isNotFocusTarget = _this._focusTarget && _this._focusTarget !== e.target && (0, _array.inArray)(e.target, _this._focusTarget) < 0;\n        var shouldSkipProcessing = _this._isComposingJustFinished && 229 === e.which || _this._isComposing || isNotFocusTarget;\n        _this._isComposingJustFinished = false;\n        if (!shouldSkipProcessing) {\n          _this.process(e);\n        }\n      };\n      this._toggleProcessingWithContext = this.toggleProcessing.bind(this);\n      _events_engine2.default.on(this._element, this._keydown, this._processFunction);\n      _events_engine2.default.on(this._element, this._compositionStart, this._toggleProcessingWithContext);\n      _events_engine2.default.on(this._element, this._compositionEnd, this._toggleProcessingWithContext);\n    }\n  },\n  dispose: function dispose() {\n    if (this._element) {\n      _events_engine2.default.off(this._element, this._keydown, this._processFunction);\n      _events_engine2.default.off(this._element, this._compositionStart, this._toggleProcessingWithContext);\n      _events_engine2.default.off(this._element, this._compositionEnd, this._toggleProcessingWithContext);\n    }\n    this._element = void 0;\n    this._handler = void 0;\n    this._context = void 0;\n    this._childProcessors = void 0;\n  },\n  clearChildren: function clearChildren() {\n    this._childProcessors = [];\n  },\n  push: function push(child) {\n    if (!this._childProcessors) {\n      this.clearChildren();\n    }\n    this._childProcessors.push(child);\n    return child;\n  },\n  attachChildProcessor: function attachChildProcessor() {\n    var childProcessor = new KeyboardProcessor();\n    this._childProcessors.push(childProcessor);\n    return childProcessor;\n  },\n  reinitialize: function reinitialize(childHandler, childContext) {\n    this._context = childContext;\n    this._handler = childHandler;\n    return this;\n  },\n  process: function process(e) {\n    var args = {\n      keyName: (0, _utils.normalizeKeyName)(e),\n      key: e.key,\n      code: e.code,\n      ctrl: e.ctrlKey,\n      location: e.location,\n      metaKey: e.metaKey,\n      shift: e.shiftKey,\n      alt: e.altKey,\n      which: e.which,\n      originalEvent: e\n    };\n    var handlerResult = this._handler && this._handler.call(this._context, args);\n    if (handlerResult && this._childProcessors) {\n      (0, _iterator.each)(this._childProcessors, function (index, childProcessor) {\n        childProcessor.process(e);\n      });\n    }\n  },\n  toggleProcessing: function toggleProcessing(_ref) {\n    var type = _ref.type;\n    this._isComposing = type === COMPOSITION_START_EVENT;\n    this._isComposingJustFinished = !this._isComposing;\n  }\n});\nmodule.exports = KeyboardProcessor;","map":null,"metadata":{},"sourceType":"script"}