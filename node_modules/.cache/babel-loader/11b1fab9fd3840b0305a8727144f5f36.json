{"ast":null,"code":"/**\r\n * DevExtreme (localization/intl/number.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _config = require(\"../../core/config\");\nvar _config2 = _interopRequireDefault(_config);\nvar _core = require(\"../core\");\nvar _version = require(\"../../core/version\");\nvar _version2 = _interopRequireDefault(_version);\nvar _version3 = require(\"../../core/utils/version\");\nvar _open_xml_currency_format = require(\"../open_xml_currency_format\");\nvar _open_xml_currency_format2 = _interopRequireDefault(_open_xml_currency_format);\nvar _accounting_formats = require(\"../cldr-data/accounting_formats\");\nvar _accounting_formats2 = _interopRequireDefault(_accounting_formats);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\nvar formattersCache = {};\nvar getFormatter = function getFormatter(format) {\n  var key = (0, _core.locale)() + \"/\" + JSON.stringify(format);\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.NumberFormat((0, _core.locale)(), format).format;\n  }\n  return formattersCache[key];\n};\nvar getCurrencyFormatter = function getCurrencyFormatter(currency) {\n  return new Intl.NumberFormat((0, _core.locale)(), {\n    style: \"currency\",\n    currency: currency\n  });\n};\nmodule.exports = {\n  engine: function engine() {\n    return \"intl\";\n  },\n  _formatNumberCore: function _formatNumberCore(value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this.callBase.apply(this, arguments);\n    }\n    return getFormatter(this._normalizeFormatConfig(format, formatConfig))(value);\n  },\n  _normalizeFormatConfig: function _normalizeFormatConfig(format, formatConfig, value) {\n    var config = void 0;\n    if (\"decimal\" === format) {\n      config = {\n        minimumIntegerDigits: formatConfig.precision || void 0,\n        useGrouping: false,\n        maximumFractionDigits: String(value).length,\n        round: value < 0 ? \"ceil\" : \"floor\"\n      };\n    } else {\n      config = this._getPrecisionConfig(formatConfig.precision);\n    }\n    if (\"percent\" === format) {\n      config.style = \"percent\";\n    } else {\n      if (\"currency\" === format) {\n        config.style = \"currency\";\n        config.currency = formatConfig.currency || (0, _config2.default)().defaultCurrency;\n      }\n    }\n    return config;\n  },\n  _getPrecisionConfig: function _getPrecisionConfig(precision) {\n    var config = void 0;\n    if (null === precision) {\n      config = {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 20\n      };\n    } else {\n      config = {\n        minimumFractionDigits: precision || 0,\n        maximumFractionDigits: precision || 0\n      };\n    }\n    return config;\n  },\n  format: function format(value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n    _format = this._normalizeFormat(_format);\n    if (\"default\" === _format.currency) {\n      _format.currency = (0, _config2.default)().defaultCurrency;\n    }\n    if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\n      return getFormatter(_format)(value);\n    }\n    return this.callBase.apply(this, arguments);\n  },\n  parse: function parse(text, format) {\n    if ((0, _version3.compare)(_version2.default, \"17.2.8\") >= 0) {\n      return this.callBase.apply(this, arguments);\n    }\n    if (!text) {\n      return;\n    }\n    if (format && format.parser) {\n      return format.parser(text);\n    }\n    text = this._normalizeNumber(text, format);\n    if (text.length > 15) {\n      return NaN;\n    }\n    return parseFloat(text);\n  },\n  _normalizeNumber: function _normalizeNumber(text, format) {\n    var isExponentialRegexp = /^[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)+$/;\n    var legitDecimalSeparator = \".\";\n    if (this.convertDigits) {\n      text = this.convertDigits(text, true);\n    }\n    if (isExponentialRegexp.test(text)) {\n      return text;\n    }\n    var decimalSeparator = this._getDecimalSeparator(format);\n    var cleanUpRegexp = new RegExp(\"[^0-9-\\\\\" + decimalSeparator + \"]\", \"g\");\n    return text.replace(cleanUpRegexp, \"\").replace(decimalSeparator, legitDecimalSeparator);\n  },\n  _getDecimalSeparator: function _getDecimalSeparator(format) {\n    return getFormatter(format)(.1)[1];\n  },\n  _getCurrencySymbolInfo: function _getCurrencySymbolInfo(currency) {\n    var formatter = getCurrencyFormatter(currency);\n    return this._extractCurrencySymbolInfo(formatter.format(0));\n  },\n  _extractCurrencySymbolInfo: function _extractCurrencySymbolInfo(currencyValueString) {\n    var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\n    var position = match[1] ? \"before\" : \"after\";\n    var symbol = match[1] || match[4] || \"\";\n    var delimiter = match[2] || match[3] || \"\";\n    return {\n      position: position,\n      symbol: symbol,\n      delimiter: delimiter\n    };\n  },\n  getCurrencySymbol: function getCurrencySymbol(currency) {\n    if (!currency) {\n      currency = (0, _config2.default)().defaultCurrency;\n    }\n    var symbolInfo = this._getCurrencySymbolInfo(currency);\n    return {\n      symbol: symbolInfo.symbol\n    };\n  },\n  getOpenXmlCurrencyFormat: function getOpenXmlCurrencyFormat(currency) {\n    var currencyValue = currency || (0, _config2.default)().defaultCurrency;\n    var currencySymbol = this._getCurrencySymbolInfo(currencyValue).symbol;\n    return (0, _open_xml_currency_format2.default)(currencySymbol, _accounting_formats2.default[(0, _core.locale)()]);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}