{"ast":null,"code":"/**\r\n * DevExtreme (ui/drop_down_editor/ui.drop_down_editor.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  AsyncTemplateMixin = require(\"../shared/async_template_mixin\"),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  Guid = require(\"../../core/guid\"),\n  registerComponent = require(\"../../core/component_registrator\"),\n  commonUtils = require(\"../../core/utils/common\"),\n  domUtils = require(\"../../core/utils/dom\"),\n  focused = require(\"../widget/selectors\").focused,\n  each = require(\"../../core/utils/iterator\").each,\n  isDefined = require(\"../../core/utils/type\").isDefined,\n  extend = require(\"../../core/utils/extend\").extend,\n  getPublicElement = require(\"../../core/utils/dom\").getPublicElement,\n  errors = require(\"../widget/ui.errors\"),\n  positionUtils = require(\"../../animation/position\"),\n  getDefaultAlignment = require(\"../../core/utils/position\").getDefaultAlignment,\n  DropDownButton = require(\"./ui.drop_down_button\").default,\n  messageLocalization = require(\"../../localization/message\"),\n  eventUtils = require(\"../../events/utils\"),\n  TextBox = require(\"../text_box\"),\n  clickEvent = require(\"../../events/click\"),\n  FunctionTemplate = require(\"../../core/templates/function_template\").FunctionTemplate,\n  Popup = require(\"../popup\");\nvar DROP_DOWN_EDITOR_CLASS = \"dx-dropdowneditor\",\n  DROP_DOWN_EDITOR_INPUT_WRAPPER = \"dx-dropdowneditor-input-wrapper\",\n  DROP_DOWN_EDITOR_BUTTON_ICON = \"dx-dropdowneditor-icon\",\n  DROP_DOWN_EDITOR_OVERLAY = \"dx-dropdowneditor-overlay\",\n  DROP_DOWN_EDITOR_OVERLAY_FLIPPED = \"dx-dropdowneditor-overlay-flipped\",\n  DROP_DOWN_EDITOR_ACTIVE = \"dx-dropdowneditor-active\",\n  DROP_DOWN_EDITOR_FIELD_CLICKABLE = \"dx-dropdowneditor-field-clickable\",\n  DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER = \"dx-dropdowneditor-field-template-wrapper\";\nvar DropDownEditor = TextBox.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var homeEndHandler = function homeEndHandler(e) {\n      if (this.option(\"opened\")) {\n        e.preventDefault();\n        return true;\n      }\n      return false;\n    };\n    return extend({}, this.callBase(), {\n      tab: function tab(e) {\n        if (!this.option(\"opened\")) {\n          return;\n        }\n        if (\"instantly\" === this.option(\"applyValueMode\")) {\n          this.close();\n          return;\n        }\n        var $focusableElement = e.shiftKey ? this._getLastPopupElement() : this._getFirstPopupElement();\n        $focusableElement && eventsEngine.trigger($focusableElement, \"focus\");\n        e.preventDefault();\n      },\n      escape: function escape(e) {\n        if (this.option(\"opened\")) {\n          e.preventDefault();\n        }\n        this.close();\n      },\n      upArrow: function upArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.altKey) {\n          this.close();\n          return false;\n        }\n        return true;\n      },\n      downArrow: function downArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.altKey) {\n          this._validatedOpening();\n          return false;\n        }\n        return true;\n      },\n      enter: function enter(e) {\n        if (this.option(\"opened\")) {\n          e.preventDefault();\n          this._valueChangeEventHandler(e);\n        }\n        return true;\n      },\n      home: homeEndHandler,\n      end: homeEndHandler\n    });\n  },\n  _getDefaultButtons: function _getDefaultButtons() {\n    return this.callBase().concat([{\n      name: \"dropDown\",\n      Ctor: DropDownButton\n    }]);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: null,\n      onOpened: null,\n      onClosed: null,\n      opened: false,\n      acceptCustomValue: true,\n      applyValueMode: \"instantly\",\n      deferRendering: true,\n      activeStateEnabled: true,\n      dropDownButtonTemplate: \"dropDownButton\",\n      fieldTemplate: null,\n      contentTemplate: null,\n      openOnFieldClick: false,\n      showDropDownButton: true,\n      buttons: void 0,\n      dropDownOptions: {},\n      popupPosition: this._getDefaultPopupPosition(),\n      onPopupInitialized: null,\n      applyButtonText: messageLocalization.format(\"OK\"),\n      cancelButtonText: messageLocalization.format(\"Cancel\"),\n      buttonsLocation: \"default\",\n      showPopupTitle: false,\n      useHiddenSubmitElement: false\n    });\n  },\n  _getDefaultPopupPosition: function _getDefaultPopupPosition() {\n    var position = getDefaultAlignment(this.option(\"rtlEnabled\"));\n    return {\n      offset: {\n        h: 0,\n        v: -1\n      },\n      my: position + \" top\",\n      at: position + \" bottom\",\n      collision: \"flip flip\"\n    };\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device(_device) {\n        var isGeneric = \"generic\" === _device.platform;\n        return isGeneric;\n      },\n      options: {\n        popupPosition: {\n          offset: {\n            v: 0\n          }\n        }\n      }\n    }]);\n  },\n  _inputWrapper: function _inputWrapper() {\n    return this.$element().find(\".\" + DROP_DOWN_EDITOR_INPUT_WRAPPER);\n  },\n  _init: function _init() {\n    this.callBase();\n    this._initVisibilityActions();\n    this._initPopupInitializedAction();\n    this._initInnerOptionCache(\"dropDownOptions\");\n  },\n  _initVisibilityActions: function _initVisibilityActions() {\n    this._openAction = this._createActionByOption(\"onOpened\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this._closeAction = this._createActionByOption(\"onClosed\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initPopupInitializedAction: function _initPopupInitializedAction() {\n    this._popupInitializedAction = this._createActionByOption(\"onPopupInitialized\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSubmitElement();\n    this.callBase();\n    this.$element().addClass(DROP_DOWN_EDITOR_CLASS);\n    this.setAria(\"role\", \"combobox\");\n  },\n  _render: function _render() {\n    this.callBase();\n    this._renderOpenHandler();\n    this._renderOpenedState();\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    if (!this.option(\"deferRendering\")) {\n      this._createPopup();\n    }\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n    this.$element().wrapInner($(\"<div>\").addClass(DROP_DOWN_EDITOR_INPUT_WRAPPER));\n    this._$container = this.$element().children().eq(0);\n    this._setDefaultAria();\n  },\n  _setDefaultAria: function _setDefaultAria() {\n    this.setAria({\n      haspopup: \"true\",\n      autocomplete: \"list\"\n    });\n  },\n  _readOnlyPropValue: function _readOnlyPropValue() {\n    return !this.option(\"acceptCustomValue\") || this.callBase();\n  },\n  _cleanFocusState: function _cleanFocusState() {\n    this.callBase();\n    if (this.option(\"fieldTemplate\")) {\n      this._detachFocusEvents();\n    }\n  },\n  _getFieldTemplate: function _getFieldTemplate() {\n    return this.option(\"fieldTemplate\") && this._getTemplateByOption(\"fieldTemplate\");\n  },\n  _renderField: function _renderField() {\n    var fieldTemplate = this._getFieldTemplate();\n    fieldTemplate && this._renderTemplatedField(fieldTemplate, this._fieldRenderData());\n  },\n  _renderPlaceholder: function _renderPlaceholder() {\n    var hasFieldTemplate = !!this._getFieldTemplate();\n    if (!hasFieldTemplate) {\n      this.callBase();\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      this._setSubmitValue();\n    }\n    var promise = this.callBase();\n    promise.always(this._renderField.bind(this));\n  },\n  _renderTemplatedField: function _renderTemplatedField(fieldTemplate, data) {\n    var _this = this;\n    var isFocused = focused(this._input());\n    var $container = this._$container;\n    this._disposeKeyboardProcessor();\n    var beforeButtonsContainerParent = this._$beforeButtonsContainer && this._$beforeButtonsContainer[0].parentNode;\n    var afterButtonsContainerParent = this._$afterButtonsContainer && this._$afterButtonsContainer[0].parentNode;\n    beforeButtonsContainerParent && beforeButtonsContainerParent.removeChild(this._$beforeButtonsContainer[0]);\n    afterButtonsContainerParent && afterButtonsContainerParent.removeChild(this._$afterButtonsContainer[0]);\n    this._detachFocusEvents();\n    $container.empty();\n    var $templateWrapper = $(\"<div>\").addClass(DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER).appendTo($container);\n    fieldTemplate.render({\n      model: data,\n      container: domUtils.getPublicElement($templateWrapper),\n      onRendered: function onRendered() {\n        var $input = _this._input();\n        if (!$input.length) {\n          throw errors.Error(\"E1010\");\n        }\n        _this._refreshEvents();\n        _this._refreshValueChangeEvent();\n        _this._renderFocusState();\n        isFocused && eventsEngine.trigger($input, \"focus\");\n      }\n    });\n    $container.prepend(this._$beforeButtonsContainer);\n    $container.append(this._$afterButtonsContainer);\n  },\n  _fieldRenderData: function _fieldRenderData() {\n    return this.option(\"value\");\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n    this._defaultTemplates.dropDownButton = new FunctionTemplate(function (options) {\n      var $icon = $(\"<div>\").addClass(DROP_DOWN_EDITOR_BUTTON_ICON);\n      $(options.container).append($icon);\n    });\n  },\n  _renderOpenHandler: function _renderOpenHandler() {\n    var that = this,\n      $inputWrapper = that._inputWrapper(),\n      eventName = eventUtils.addNamespace(clickEvent.name, that.NAME),\n      openOnFieldClick = that.option(\"openOnFieldClick\");\n    eventsEngine.off($inputWrapper, eventName);\n    eventsEngine.on($inputWrapper, eventName, that._getInputClickHandler(openOnFieldClick));\n    that.$element().toggleClass(DROP_DOWN_EDITOR_FIELD_CLICKABLE, openOnFieldClick);\n    if (openOnFieldClick) {\n      that._openOnFieldClickAction = that._createAction(that._openHandler.bind(that));\n    }\n  },\n  _getInputClickHandler: function _getInputClickHandler(openOnFieldClick) {\n    var that = this;\n    return openOnFieldClick ? function (e) {\n      that._executeOpenAction(e);\n    } : function (e) {\n      that._focusInput();\n    };\n  },\n  _openHandler: function _openHandler() {\n    this._toggleOpenState();\n  },\n  _executeOpenAction: function _executeOpenAction(e) {\n    this._openOnFieldClickAction({\n      event: e\n    });\n  },\n  _keyboardEventBindingTarget: function _keyboardEventBindingTarget() {\n    return this._input();\n  },\n  _focusInput: function _focusInput() {\n    if (this.option(\"disabled\")) {\n      return false;\n    }\n    if (this.option(\"focusStateEnabled\") && !focused(this._input())) {\n      eventsEngine.trigger(this._input(), \"focus\");\n    }\n    return true;\n  },\n  _toggleOpenState: function _toggleOpenState(isVisible) {\n    if (!this._focusInput()) {\n      return;\n    }\n    if (!this.option(\"readOnly\")) {\n      isVisible = arguments.length ? isVisible : !this.option(\"opened\");\n      this.option(\"opened\", isVisible);\n    }\n  },\n  _renderOpenedState: function _renderOpenedState() {\n    var opened = this.option(\"opened\");\n    if (opened) {\n      this._createPopup();\n    }\n    this.$element().toggleClass(DROP_DOWN_EDITOR_ACTIVE, opened);\n    this._setPopupOption(\"visible\", opened);\n    this.setAria({\n      expanded: opened\n    });\n    this.setAria(\"owns\", (opened || void 0) && this._popupContentId, this.$element());\n  },\n  _createPopup: function _createPopup() {\n    if (this._$popup) {\n      return;\n    }\n    this._$popup = $(\"<div>\").addClass(DROP_DOWN_EDITOR_OVERLAY).addClass(this.option(\"customOverlayCssClass\")).appendTo(this.$element());\n    this._renderPopup();\n    this._renderPopupContent();\n  },\n  _renderPopup: function _renderPopup() {\n    this._popup = this._createComponent(this._$popup, Popup, extend(this._popupConfig(), this._getInnerOptionsCache(\"dropDownOptions\")));\n    this._popup.on({\n      showing: this._popupShowingHandler.bind(this),\n      shown: this._popupShownHandler.bind(this),\n      hiding: this._popupHidingHandler.bind(this),\n      hidden: this._popupHiddenHandler.bind(this)\n    });\n    this._popup.option(\"onContentReady\", this._contentReadyHandler.bind(this));\n    this._contentReadyHandler();\n    this._setPopupContentId(this._popup.$content());\n    this._bindInnerWidgetOptions(this._popup, \"dropDownOptions\");\n  },\n  _setPopupContentId: function _setPopupContentId($popupContent) {\n    this._popupContentId = \"dx-\" + new Guid();\n    this.setAria(\"id\", this._popupContentId, $popupContent);\n  },\n  _contentReadyHandler: commonUtils.noop,\n  _popupConfig: function _popupConfig() {\n    return {\n      onInitialized: this._popupInitializedHandler(),\n      position: extend(this.option(\"popupPosition\"), {\n        of: this.$element()\n      }),\n      showTitle: this.option(\"showPopupTitle\"),\n      width: \"auto\",\n      height: \"auto\",\n      shading: false,\n      closeOnTargetScroll: true,\n      closeOnOutsideClick: this._closeOutsideDropDownHandler.bind(this),\n      animation: {\n        show: {\n          type: \"fade\",\n          duration: 0,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          from: 1,\n          to: 0\n        }\n      },\n      deferRendering: false,\n      focusStateEnabled: false,\n      showCloseButton: false,\n      toolbarItems: this._getPopupToolbarItems(),\n      onPositioned: this._popupPositionedHandler.bind(this),\n      fullScreen: false\n    };\n  },\n  _popupInitializedHandler: function _popupInitializedHandler() {\n    if (!this.option(\"onPopupInitialized\")) {\n      return;\n    }\n    return function (e) {\n      this._popupInitializedAction({\n        popup: e.component\n      });\n    }.bind(this);\n  },\n  _popupPositionedHandler: function _popupPositionedHandler(e) {\n    e.position && this._popup.overlayContent().toggleClass(DROP_DOWN_EDITOR_OVERLAY_FLIPPED, e.position.v.flip);\n  },\n  _popupShowingHandler: commonUtils.noop,\n  _popupHidingHandler: function _popupHidingHandler() {\n    this.option(\"opened\", false);\n  },\n  _popupShownHandler: function _popupShownHandler() {\n    this._openAction();\n    if (this._$validationMessage) {\n      this._$validationMessage.dxOverlay(\"option\", \"position\", this._getValidationMessagePosition());\n    }\n  },\n  _popupHiddenHandler: function _popupHiddenHandler() {\n    this._closeAction();\n    if (this._$validationMessage) {\n      this._$validationMessage.dxOverlay(\"option\", \"position\", this._getValidationMessagePosition());\n    }\n  },\n  _getValidationMessagePosition: function _getValidationMessagePosition() {\n    var positionRequest = \"below\";\n    if (this._popup && this._popup.option(\"visible\")) {\n      var myTop = positionUtils.setup(this.$element()).top,\n        popupTop = positionUtils.setup(this._popup.$content()).top;\n      positionRequest = myTop + this.option(\"popupPosition\").offset.v > popupTop ? \"below\" : \"above\";\n    }\n    return this.callBase(positionRequest);\n  },\n  _renderPopupContent: function _renderPopupContent() {\n    var contentTemplate = this._getTemplateByOption(\"contentTemplate\");\n    if (!(contentTemplate && this.option(\"contentTemplate\"))) {\n      return;\n    }\n    var $popupContent = this._popup.$content(),\n      templateData = {\n        value: this._fieldRenderData(),\n        component: this\n      };\n    $popupContent.empty();\n    contentTemplate.render({\n      container: domUtils.getPublicElement($popupContent),\n      model: templateData\n    });\n  },\n  _closeOutsideDropDownHandler: function _closeOutsideDropDownHandler(_ref) {\n    var target = _ref.target;\n    var $target = $(target);\n    var dropDownButton = this.getButton(\"dropDown\");\n    var $dropDownButton = dropDownButton && dropDownButton.$element();\n    var isInputClicked = !!$target.closest(this.$element()).length;\n    var isDropDownButtonClicked = !!$target.closest($dropDownButton).length;\n    var isOutsideClick = !isInputClicked && !isDropDownButtonClicked;\n    return isOutsideClick;\n  },\n  _clean: function _clean() {\n    delete this._openOnFieldClickAction;\n    if (this._$popup) {\n      this._$popup.remove();\n      delete this._$popup;\n      delete this._popup;\n    }\n    this.callBase();\n  },\n  _setPopupOption: function _setPopupOption(optionName, value) {\n    this._setWidgetOption(\"_popup\", arguments);\n  },\n  _validatedOpening: function _validatedOpening() {\n    if (!this.option(\"readOnly\")) {\n      this._toggleOpenState(true);\n    }\n  },\n  _getPopupToolbarItems: function _getPopupToolbarItems() {\n    return \"useButtons\" === this.option(\"applyValueMode\") ? this._popupToolbarItemsConfig() : [];\n  },\n  _getFirstPopupElement: function _getFirstPopupElement() {\n    return this._popup._wrapper().find(\".dx-popup-done.dx-button\");\n  },\n  _getLastPopupElement: function _getLastPopupElement() {\n    return this._popup._wrapper().find(\".dx-popup-cancel.dx-button\");\n  },\n  _popupElementTabHandler: function _popupElementTabHandler(e) {\n    var $element = $(e.currentTarget);\n    if (e.shiftKey && $element.is(this._getFirstPopupElement()) || !e.shiftKey && $element.is(this._getLastPopupElement())) {\n      eventsEngine.trigger(this._input(), \"focus\");\n      e.preventDefault();\n    }\n  },\n  _popupElementEscHandler: function _popupElementEscHandler() {\n    eventsEngine.trigger(this._input(), \"focus\");\n    this.close();\n  },\n  _popupButtonInitializedHandler: function _popupButtonInitializedHandler(e) {\n    e.component.registerKeyHandler(\"tab\", this._popupElementTabHandler.bind(this));\n    e.component.registerKeyHandler(\"escape\", this._popupElementEscHandler.bind(this));\n  },\n  _popupToolbarItemsConfig: function _popupToolbarItemsConfig() {\n    var buttonsConfig = [{\n      shortcut: \"done\",\n      options: {\n        onClick: this._applyButtonHandler.bind(this),\n        text: this.option(\"applyButtonText\"),\n        onInitialized: this._popupButtonInitializedHandler.bind(this)\n      }\n    }, {\n      shortcut: \"cancel\",\n      options: {\n        onClick: this._cancelButtonHandler.bind(this),\n        text: this.option(\"cancelButtonText\"),\n        onInitialized: this._popupButtonInitializedHandler.bind(this)\n      }\n    }];\n    return this._applyButtonsLocation(buttonsConfig);\n  },\n  _applyButtonsLocation: function _applyButtonsLocation(buttonsConfig) {\n    var buttonsLocation = this.option(\"buttonsLocation\"),\n      resultConfig = buttonsConfig;\n    if (\"default\" !== buttonsLocation) {\n      var position = commonUtils.splitPair(buttonsLocation);\n      each(resultConfig, function (_, element) {\n        extend(element, {\n          toolbar: position[0],\n          location: position[1]\n        });\n      });\n    }\n    return resultConfig;\n  },\n  _applyButtonHandler: function _applyButtonHandler() {\n    this.close();\n    this.option(\"focusStateEnabled\") && this.focus();\n  },\n  _cancelButtonHandler: function _cancelButtonHandler() {\n    this.close();\n    this.option(\"focusStateEnabled\") && this.focus();\n  },\n  _updatePopupWidth: commonUtils.noop,\n  _popupOptionChanged: function _popupOptionChanged(args) {\n    var options = this._getOptionsFromContainer(args);\n    this._setPopupOption(options);\n    if (Object.keys(options).indexOf(\"width\") !== -1 && void 0 === options.width) {\n      this._updatePopupWidth();\n    }\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n    }\n  },\n  _setSubmitValue: function _setSubmitValue() {\n    this._getSubmitElement().val(this.option(\"value\"));\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    if (this.option(\"useHiddenSubmitElement\")) {\n      return this._$submitElement;\n    } else {\n      return this.callBase();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"opened\":\n        this._renderOpenedState();\n        break;\n      case \"onOpened\":\n      case \"onClosed\":\n        this._initVisibilityActions();\n        break;\n      case \"onPopupInitialized\":\n        this._initPopupInitializedAction();\n        break;\n      case \"fieldTemplate\":\n        if (isDefined(args.value)) {\n          this._renderField();\n        } else {\n          this._invalidate();\n        }\n        break;\n      case \"contentTemplate\":\n      case \"acceptCustomValue\":\n      case \"openOnFieldClick\":\n        this._invalidate();\n        break;\n      case \"dropDownButtonTemplate\":\n      case \"showDropDownButton\":\n        this._updateButtons([\"dropDown\"]);\n        break;\n      case \"dropDownOptions\":\n        this._popupOptionChanged(args);\n        this._cacheInnerOptions(\"dropDownOptions\", args.value);\n        break;\n      case \"popupPosition\":\n      case \"deferRendering\":\n        break;\n      case \"applyValueMode\":\n      case \"applyButtonText\":\n      case \"cancelButtonText\":\n      case \"buttonsLocation\":\n        this._setPopupOption(\"toolbarItems\", this._getPopupToolbarItems());\n        break;\n      case \"showPopupTitle\":\n        this._setPopupOption(\"showTitle\", args.value);\n        break;\n      case \"useHiddenSubmitElement\":\n        if (this._$submitElement) {\n          this._$submitElement.remove();\n          this._$submitElement = void 0;\n        }\n        this._renderSubmitElement();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  open: function open() {\n    this.option(\"opened\", true);\n  },\n  close: function close() {\n    this.option(\"opened\", false);\n  },\n  field: function field() {\n    return getPublicElement(this._input());\n  },\n  content: function content() {\n    return this._popup ? this._popup.content() : null;\n  }\n}).include(AsyncTemplateMixin);\nregisterComponent(\"dxDropDownEditor\", DropDownEditor);\nmodule.exports = DropDownEditor;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}