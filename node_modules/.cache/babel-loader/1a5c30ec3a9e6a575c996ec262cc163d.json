{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.virtual_columns.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _window = require(\"../../core/utils/window\");\nvar _uiGrid_core = require(\"./ui.grid_core.virtual_columns_core\");\nvar DEFAULT_COLUMN_WIDTH = 50;\nvar VirtualScrollingRowsViewExtender = {\n  _resizeCore: function _resizeCore() {\n    this.callBase.apply(this, arguments);\n    this._columnsController.resize();\n  },\n  _handleScroll: function _handleScroll(e) {\n    var that = this,\n      scrollable = this.getScrollable(),\n      left = e.scrollOffset.left;\n    that.callBase.apply(that, arguments);\n    if (that.option(\"rtlEnabled\") && scrollable) {\n      left = scrollable.$content().width() - scrollable.$element().width() - left;\n    }\n    that._columnsController.setScrollPosition(left);\n  }\n};\nvar HeaderFooterViewExtender = {\n  _renderCore: function _renderCore() {\n    var that = this,\n      scrollLeft = that._scrollLeft;\n    that.callBase.apply(that, arguments);\n    if (that._columnsController.isVirtualMode() && scrollLeft >= 0) {\n      that._scrollLeft = 0;\n      that.scrollTo({\n        left: scrollLeft\n      });\n    }\n  }\n};\nvar ColumnsControllerExtender = function () {\n  var getWidths = function getWidths(columns) {\n    return columns.map(function (column) {\n      return column.visibleWidth || parseFloat(column.width) || DEFAULT_COLUMN_WIDTH;\n    });\n  };\n  var members = {\n    init: function init() {\n      var that = this;\n      that.callBase();\n      that._beginPageIndex = 0;\n      that._endPageIndex = 0;\n      that._position = 0;\n      that._virtualVisibleColumns = {};\n    },\n    resetColumnsCache: function resetColumnsCache() {\n      this.callBase();\n      this._virtualVisibleColumns = {};\n    },\n    getBeginPageIndex: function getBeginPageIndex(position) {\n      var visibleColumns = this.getVisibleColumns(void 0, true),\n        widths = getWidths(visibleColumns),\n        currentPosition = 0;\n      for (var index = 0; index < widths.length; index++) {\n        if (currentPosition >= position) {\n          return Math.floor(index / this.getColumnPageSize());\n        }\n        currentPosition += widths[index];\n      }\n      return 0;\n    },\n    getTotalWidth: function getTotalWidth() {\n      var width = this.option(\"width\");\n      if (\"number\" === typeof width) {\n        return width;\n      }\n      return this.getController(\"resizing\")._lastWidth || this.component.$element().outerWidth();\n    },\n    getEndPageIndex: function getEndPageIndex(position) {\n      var visibleColumns = this.getVisibleColumns(void 0, true),\n        widths = getWidths(visibleColumns),\n        currentPosition = 0;\n      position += this.getTotalWidth();\n      for (var index = 0; index < widths.length; index++) {\n        if (currentPosition >= position) {\n          return Math.ceil(index / this.getColumnPageSize());\n        }\n        currentPosition += widths[index];\n      }\n      return Math.ceil(widths.length / this.getColumnPageSize());\n    },\n    getColumnPageSize: function getColumnPageSize() {\n      return this.option(\"scrolling.columnPageSize\");\n    },\n    _fireColumnsChanged: function _fireColumnsChanged() {\n      var date = new Date();\n      this.columnsChanged.fire({\n        optionNames: {\n          all: true,\n          length: 1\n        },\n        changeTypes: {\n          columns: true,\n          length: 1\n        }\n      });\n      this._renderTime = new Date() - date;\n    },\n    setScrollPosition: function setScrollPosition(position) {\n      var that = this,\n        renderingThreshold = that.option(\"scrolling.columnRenderingThreshold\");\n      if (that._renderTime > renderingThreshold) {\n        clearTimeout(that._changedTimeout);\n        that._changedTimeout = setTimeout(function () {\n          that._setScrollPositionCore(position);\n        }, that.option(\"scrolling.timeout\"));\n      } else {\n        that._setScrollPositionCore(position);\n      }\n    },\n    isVirtualMode: function isVirtualMode() {\n      return (0, _window.hasWindow)() && \"virtual\" === this.option(\"scrolling.columnRenderingMode\");\n    },\n    resize: function resize() {\n      this._setScrollPositionCore(this._position);\n    },\n    _setScrollPositionCore: function _setScrollPositionCore(position) {\n      var that = this;\n      if (that.isVirtualMode()) {\n        var beginPageIndex = that.getBeginPageIndex(position),\n          endPageIndex = that.getEndPageIndex(position),\n          needColumnsChanged = position < that._position ? that._beginPageIndex > beginPageIndex : that._endPageIndex < endPageIndex;\n        that._position = position;\n        if (needColumnsChanged) {\n          that._beginPageIndex = beginPageIndex;\n          that._endPageIndex = endPageIndex;\n          that._fireColumnsChanged();\n        }\n      }\n    },\n    getFixedColumns: function getFixedColumns(rowIndex, isBase) {\n      var fixedColumns = this.callBase(rowIndex);\n      if (this.isVirtualMode() && !isBase && fixedColumns.length) {\n        var transparentColumnIndex = fixedColumns.map(function (c) {\n          return c.command;\n        }).indexOf(\"transparent\");\n        fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - this.callBase().length + 1;\n        return fixedColumns;\n      }\n      return fixedColumns;\n    },\n    getVisibleColumns: function getVisibleColumns(rowIndex, isBase) {\n      if (isBase || !this.isVirtualMode()) {\n        return this.callBase(rowIndex);\n      }\n      if (!this._beginPageIndex && !this._endPageIndex) {\n        this._beginPageIndex = this.getBeginPageIndex(this._position);\n        this._endPageIndex = this.getEndPageIndex(this._position);\n      }\n      var beginPageIndex = this._beginPageIndex,\n        endPageIndex = this._endPageIndex,\n        visibleColumnsHash = rowIndex + \"-\" + beginPageIndex + \"-\" + endPageIndex;\n      if (this._virtualVisibleColumns[visibleColumnsHash]) {\n        return this._virtualVisibleColumns[visibleColumnsHash];\n      }\n      var visibleColumns = this.callBase(),\n        rowCount = this.getRowCount(),\n        pageSize = this.getColumnPageSize(),\n        startIndex = beginPageIndex * pageSize,\n        endIndex = endPageIndex * pageSize,\n        fixedColumns = this.getFixedColumns(void 0, true),\n        transparentColumnIndex = fixedColumns.map(function (c) {\n          return c.command;\n        }).indexOf(\"transparent\");\n      var beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;\n      var beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);\n      var beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);\n      var beginWidth = getWidths(beginColumns).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      if (!beginWidth) {\n        startIndex = 0;\n      }\n      var endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;\n      var endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);\n      var endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);\n      var endWidth = getWidths(endColumns).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      if (!endWidth) {\n        endIndex = visibleColumns.length;\n      }\n      if (rowCount > 1 && \"number\" === typeof rowIndex) {\n        var columnsInfo = [];\n        for (var i = 0; i < rowCount; i++) {\n          columnsInfo.push(this.callBase(i));\n        }\n        beginFixedColumns = (0, _uiGrid_core.createColumnsInfo)(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];\n        endFixedColumns = (0, _uiGrid_core.createColumnsInfo)(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];\n        visibleColumns = (0, _uiGrid_core.createColumnsInfo)(columnsInfo, startIndex, endIndex)[rowIndex] || [];\n      } else {\n        visibleColumns = visibleColumns.slice(startIndex, endIndex);\n      }\n      if (beginWidth) {\n        visibleColumns.unshift({\n          command: \"virtual\",\n          width: beginWidth\n        });\n        visibleColumns = beginFixedColumns.concat(visibleColumns);\n      }\n      if (endWidth) {\n        visibleColumns.push({\n          command: \"virtual\",\n          width: endWidth\n        });\n        visibleColumns = visibleColumns.concat(endFixedColumns);\n      }\n      this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;\n      return visibleColumns;\n    },\n    dispose: function dispose() {\n      clearTimeout(this._changedTimeout);\n      this.callBase.apply(this, arguments);\n    }\n  };\n  return members;\n}();\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      scrolling: {\n        columnRenderingMode: \"standard\",\n        columnPageSize: 5,\n        columnRenderingThreshold: 300\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      columns: ColumnsControllerExtender\n    },\n    views: {\n      columnHeadersView: HeaderFooterViewExtender,\n      footerView: HeaderFooterViewExtender,\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}