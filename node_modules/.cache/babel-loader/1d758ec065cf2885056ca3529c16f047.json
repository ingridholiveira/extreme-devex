{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  noop = require(\"../../core/utils/common\").noop,\n  Class = require(\"../../core/class\"),\n  dateLocalization = require(\"../../localization/date\");\nvar abstract = Class.abstract;\nvar DateBoxStrategy = Class.inherit({\n  ctor: function ctor(dateBox) {\n    this.dateBox = dateBox;\n  },\n  widgetOption: function widgetOption() {\n    return this._widget && this._widget.option.apply(this._widget, arguments);\n  },\n  _renderWidget: function _renderWidget(element) {\n    element = element || $(\"<div>\");\n    this._widget = this._createWidget(element);\n    this._widget.$element().appendTo(this._getWidgetContainer());\n  },\n  _createWidget: function _createWidget(element) {\n    var widgetName = this._getWidgetName();\n    var widgetOptions = this._getWidgetOptions();\n    return this.dateBox._createComponent(element, widgetName, widgetOptions);\n  },\n  _getWidgetOptions: abstract,\n  _getWidgetName: abstract,\n  getDefaultOptions: function getDefaultOptions() {\n    return {\n      mode: \"text\"\n    };\n  },\n  getDisplayFormat: abstract,\n  supportedKeys: noop,\n  attachKeyboardEvents: function attachKeyboardEvents(keyboardProcessor) {\n    this._widgetKeyboardProcessor = keyboardProcessor.attachChildProcessor();\n  },\n  getParsedText: function getParsedText(text, format) {\n    var value = dateLocalization.parse(text, format);\n    return value ? value : dateLocalization.parse(text);\n  },\n  renderInputMinMax: noop,\n  renderOpenedState: function renderOpenedState() {\n    this._updateValue();\n  },\n  popupConfig: abstract,\n  renderPopupContent: function renderPopupContent() {\n    var popup = this._getPopup();\n    this._renderWidget();\n    var $popupContent = popup.$content().parent();\n    eventsEngine.off($popupContent, \"mousedown\");\n    eventsEngine.on($popupContent, \"mousedown\", this._preventFocusOnPopup.bind(this));\n  },\n  getFirstPopupElement: noop,\n  getLastPopupElement: noop,\n  _preventFocusOnPopup: function _preventFocusOnPopup(e) {\n    e.preventDefault();\n  },\n  _getWidgetContainer: function _getWidgetContainer() {\n    return this._getPopup().$content();\n  },\n  _getPopup: function _getPopup() {\n    return this.dateBox._popup;\n  },\n  popupShowingHandler: noop,\n  popupHiddenHandler: noop,\n  _updateValue: function _updateValue() {\n    this._widget && this._widget.option(\"value\", this.dateBoxValue());\n  },\n  _valueChangedHandler: function _valueChangedHandler(args) {\n    if (this.dateBox.option(\"opened\") && \"instantly\" === this.dateBox.option(\"applyValueMode\")) {\n      this.dateBoxValue(args.value);\n    }\n  },\n  useCurrentDateByDefault: noop,\n  getDefaultDate: function getDefaultDate() {\n    return new Date();\n  },\n  textChangedHandler: noop,\n  renderValue: function renderValue() {\n    if (this.dateBox.option(\"opened\")) {\n      this._updateValue();\n    }\n  },\n  getValue: function getValue() {\n    return this._widget.option(\"value\");\n  },\n  isAdaptivityChanged: function isAdaptivityChanged() {\n    return false;\n  },\n  dispose: function dispose() {\n    var popup = this._getPopup();\n    if (popup) {\n      popup.$content().empty();\n    }\n  },\n  dateBoxValue: function dateBoxValue() {\n    if (arguments.length) {\n      return this.dateBox.dateValue.apply(this.dateBox, arguments);\n    } else {\n      return this.dateBox.dateOption.apply(this.dateBox, [\"value\"]);\n    }\n  }\n});\nmodule.exports = DateBoxStrategy;","map":null,"metadata":{},"sourceType":"script"}