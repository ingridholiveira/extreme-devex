{"ast":null,"code":"/**\r\n * DevExtreme (ui/tabs.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _devices = require(\"../core/devices\");\nvar _devices2 = _interopRequireDefault(_devices);\nvar _component_registrator = require(\"../core/component_registrator\");\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\nvar _button = require(\"./button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _utils = require(\"./widget/utils.ink_ripple\");\nvar _utils2 = _interopRequireDefault(_utils);\nvar _utils3 = require(\"../events/utils\");\nvar _extend = require(\"../core/utils/extend\");\nvar _type = require(\"../core/utils/type\");\nvar _pointer = require(\"../events/pointer\");\nvar _pointer2 = _interopRequireDefault(_pointer);\nvar _iterator = require(\"../core/utils/iterator\");\nvar _item = require(\"./tabs/item\");\nvar _item2 = _interopRequireDefault(_item);\nvar _themes = require(\"./themes\");\nvar _themes2 = _interopRequireDefault(_themes);\nvar _hold = require(\"../events/hold\");\nvar _hold2 = _interopRequireDefault(_hold);\nvar _ui = require(\"./scroll_view/ui.scrollable\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _uiCollection_widget = require(\"./collection/ui.collection_widget.live_update\");\nvar _uiCollection_widget2 = _interopRequireDefault(_uiCollection_widget);\nvar _icon = require(\"../core/utils/icon\");\nvar _bindable_template = require(\"../core/templates/bindable_template\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar TABS_CLASS = \"dx-tabs\";\nvar TABS_WRAPPER_CLASS = \"dx-tabs-wrapper\";\nvar TABS_EXPANDED_CLASS = \"dx-tabs-expanded\";\nvar TABS_STRETCHED_CLASS = \"dx-tabs-stretched\";\nvar TABS_SCROLLABLE_CLASS = \"dx-tabs-scrollable\";\nvar TABS_NAV_BUTTONS_CLASS = \"dx-tabs-nav-buttons\";\nvar OVERFLOW_HIDDEN_CLASS = \"dx-overflow-hidden\";\nvar TABS_ITEM_CLASS = \"dx-tab\";\nvar TABS_ITEM_SELECTED_CLASS = \"dx-tab-selected\";\nvar TABS_NAV_BUTTON_CLASS = \"dx-tabs-nav-button\";\nvar TABS_LEFT_NAV_BUTTON_CLASS = \"dx-tabs-nav-button-left\";\nvar TABS_RIGHT_NAV_BUTTON_CLASS = \"dx-tabs-nav-button-right\";\nvar TABS_ITEM_TEXT_CLASS = \"dx-tab-text\";\nvar TABS_ITEM_DATA_KEY = \"dxTabData\";\nvar BUTTON_NEXT_ICON = \"chevronnext\";\nvar BUTTON_PREV_ICON = \"chevronprev\";\nvar FEEDBACK_HIDE_TIMEOUT = 100;\nvar FEEDBACK_DURATION_INTERVAL = 5;\nvar FEEDBACK_SCROLL_TIMEOUT = 300;\nvar TAB_OFFSET = 30;\nvar Tabs = _uiCollection_widget2.default.inherit({\n  _activeStateUnit: \".\" + TABS_ITEM_CLASS,\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      hoverStateEnabled: true,\n      showNavButtons: true,\n      scrollByContent: true,\n      scrollingEnabled: true,\n      selectionMode: \"single\",\n      activeStateEnabled: true,\n      selectionRequired: false,\n      selectOnFocus: true,\n      loopItemFocus: false,\n      useInkRipple: false,\n      badgeExpr: function badgeExpr(data) {\n        return data ? data.badge : void 0;\n      }\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    var themeName = _themes2.default.current();\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" !== _devices2.default.real().deviceType;\n      },\n      options: {\n        showNavButtons: false\n      }\n    }, {\n      device: {\n        deviceType: \"desktop\"\n      },\n      options: {\n        scrollByContent: false\n      }\n    }, {\n      device: function device() {\n        return \"desktop\" === _devices2.default.real().deviceType && !_devices2.default.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        return _themes2.default.isMaterial(themeName);\n      },\n      options: {\n        useInkRipple: true,\n        selectOnFocus: false\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n    this.setAria(\"role\", \"tablist\");\n    this.$element().addClass(TABS_CLASS);\n    this._renderWrapper();\n    this._renderMultiple();\n    this._feedbackHideTimeout = FEEDBACK_HIDE_TIMEOUT;\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n    this._defaultTemplates.item = new _bindable_template.BindableTemplate(function ($container, data) {\n      if ((0, _type.isPlainObject)(data)) {\n        this._prepareDefaultItemTemplate(data, $container);\n      } else {\n        $container.text(String(data));\n      }\n      var $iconElement = (0, _icon.getImageContainer)(data.icon);\n      $container.wrapInner((0, _renderer2.default)(\"<span>\").addClass(TABS_ITEM_TEXT_CLASS));\n      $iconElement && $iconElement.prependTo($container);\n    }.bind(this), [\"text\", \"html\", \"icon\"], this.option(\"integrationOptions.watchMethod\"));\n  },\n  _itemClass: function _itemClass() {\n    return TABS_ITEM_CLASS;\n  },\n  _selectedItemClass: function _selectedItemClass() {\n    return TABS_ITEM_SELECTED_CLASS;\n  },\n  _itemDataKey: function _itemDataKey() {\n    return TABS_ITEM_DATA_KEY;\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this.setAria(\"role\", \"tab\", this.itemElements());\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this.$element().addClass(OVERFLOW_HIDDEN_CLASS);\n  },\n  _render: function _render() {\n    this.callBase();\n    this._renderScrolling();\n  },\n  _renderScrolling: function _renderScrolling() {\n    var removeClasses = [TABS_STRETCHED_CLASS, TABS_EXPANDED_CLASS, OVERFLOW_HIDDEN_CLASS];\n    this.$element().removeClass(removeClasses.join(\" \"));\n    if (this.option(\"scrollingEnabled\") && this._isItemsWidthExceeded()) {\n      if (!this._scrollable) {\n        this._renderScrollable();\n        this._renderNavButtons();\n      }\n      this._scrollable.update();\n      this._updateNavButtonsVisibility();\n      if (this.option(\"rtlEnabled\")) {\n        this._scrollable.scrollTo({\n          left: this._scrollable.scrollWidth() - this._scrollable.clientWidth()\n        });\n      }\n      this._scrollToItem(this.option(\"selectedItem\"));\n    }\n    if (!(this.option(\"scrollingEnabled\") && this._isItemsWidthExceeded())) {\n      this._cleanScrolling();\n      if (this._needStretchItems() && !this._isItemsWidthExceeded()) {\n        this.$element().addClass(TABS_STRETCHED_CLASS);\n      }\n      this.$element().removeClass(TABS_NAV_BUTTONS_CLASS).addClass(TABS_EXPANDED_CLASS);\n    }\n  },\n  _isItemsWidthExceeded: function _isItemsWidthExceeded() {\n    var tabItemsWidth = this._getSummaryItemsWidth(this._getVisibleItems(), true);\n    return tabItemsWidth - 1 > this.$element().width();\n  },\n  _needStretchItems: function _needStretchItems() {\n    var $visibleItems = this._getVisibleItems(),\n      elementWidth = this.$element().width(),\n      itemsWidth = [];\n    (0, _iterator.each)($visibleItems, function (_, item) {\n      itemsWidth.push((0, _renderer2.default)(item).outerWidth(true));\n    });\n    var maxTabWidth = Math.max.apply(null, itemsWidth);\n    return maxTabWidth > elementWidth / $visibleItems.length;\n  },\n  _cleanNavButtons: function _cleanNavButtons() {\n    if (!this._leftButton || !this._rightButton) {\n      return;\n    }\n    this._leftButton.$element().remove();\n    this._rightButton.$element().remove();\n    this._leftButton = null;\n    this._rightButton = null;\n  },\n  _cleanScrolling: function _cleanScrolling() {\n    if (!this._scrollable) {\n      return;\n    }\n    this._$wrapper.appendTo(this.$element());\n    this._scrollable.$element().remove();\n    this._scrollable = null;\n    this._cleanNavButtons();\n  },\n  _renderInkRipple: function _renderInkRipple() {\n    this._inkRipple = _utils2.default.render();\n  },\n  _toggleActiveState: function _toggleActiveState($element, value, e) {\n    this.callBase.apply(this, arguments);\n    if (!this._inkRipple) {\n      return;\n    }\n    var config = {\n      element: $element,\n      event: e\n    };\n    if (value) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _renderMultiple: function _renderMultiple() {\n    if (\"multiple\" === this.option(\"selectionMode\")) {\n      this.option(\"selectOnFocus\", false);\n    }\n  },\n  _renderWrapper: function _renderWrapper() {\n    this._$wrapper = (0, _renderer2.default)(\"<div>\").addClass(TABS_WRAPPER_CLASS);\n    this.$element().append(this._$wrapper);\n  },\n  _itemContainer: function _itemContainer() {\n    return this._$wrapper;\n  },\n  _renderScrollable: function _renderScrollable() {\n    var $itemContainer = this.$element().wrapInner((0, _renderer2.default)(\"<div>\").addClass(TABS_SCROLLABLE_CLASS)).children();\n    this._scrollable = this._createComponent($itemContainer, _ui2.default, {\n      direction: \"horizontal\",\n      showScrollbar: false,\n      useKeyboard: false,\n      useNative: false,\n      scrollByContent: this.option(\"scrollByContent\"),\n      onScroll: this._updateNavButtonsVisibility.bind(this)\n    });\n    this.$element().append(this._scrollable.$element());\n  },\n  _scrollToItem: function _scrollToItem(itemData) {\n    if (!this._scrollable) {\n      return;\n    }\n    var $item = this._editStrategy.getItemElement(itemData);\n    this._scrollable.scrollToElement($item);\n  },\n  _renderNavButtons: function _renderNavButtons() {\n    this.$element().toggleClass(TABS_NAV_BUTTONS_CLASS, this.option(\"showNavButtons\"));\n    if (!this.option(\"showNavButtons\")) {\n      return;\n    }\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    this._leftButton = this._createNavButton(-TAB_OFFSET, rtlEnabled ? BUTTON_NEXT_ICON : BUTTON_PREV_ICON);\n    var $leftButton = this._leftButton.$element();\n    $leftButton.addClass(TABS_LEFT_NAV_BUTTON_CLASS);\n    this.$element().prepend($leftButton);\n    this._rightButton = this._createNavButton(TAB_OFFSET, rtlEnabled ? BUTTON_PREV_ICON : BUTTON_NEXT_ICON);\n    var $rightButton = this._rightButton.$element();\n    $rightButton.addClass(TABS_RIGHT_NAV_BUTTON_CLASS);\n    this.$element().append($rightButton);\n  },\n  _updateNavButtonsVisibility: function _updateNavButtonsVisibility() {\n    this._leftButton && this._leftButton.option(\"disabled\", this._scrollable.scrollLeft() <= 0);\n    this._rightButton && this._rightButton.option(\"disabled\", this._scrollable.scrollLeft() >= Math.round(this._scrollable.scrollWidth() - this._scrollable.clientWidth()));\n  },\n  _updateScrollPosition: function _updateScrollPosition(offset, duration) {\n    this._scrollable.update();\n    this._scrollable.scrollBy(offset / duration);\n  },\n  _createNavButton: function _createNavButton(offset, icon) {\n    var that = this;\n    var holdAction = that._createAction(function () {\n        that._holdInterval = setInterval(function () {\n          that._updateScrollPosition(offset, FEEDBACK_DURATION_INTERVAL);\n        }, FEEDBACK_DURATION_INTERVAL);\n      }),\n      holdEventName = (0, _utils3.addNamespace)(_hold2.default.name, \"dxNavButton\"),\n      pointerUpEventName = (0, _utils3.addNamespace)(_pointer2.default.up, \"dxNavButton\"),\n      pointerOutEventName = (0, _utils3.addNamespace)(_pointer2.default.out, \"dxNavButton\");\n    var navButton = this._createComponent((0, _renderer2.default)(\"<div>\").addClass(TABS_NAV_BUTTON_CLASS), _button2.default, {\n      focusStateEnabled: false,\n      icon: icon,\n      onClick: function onClick() {\n        that._updateScrollPosition(offset, 1);\n      },\n      integrationOptions: {}\n    });\n    var $navButton = navButton.$element();\n    _events_engine2.default.on($navButton, holdEventName, {\n      timeout: FEEDBACK_SCROLL_TIMEOUT\n    }, function (e) {\n      holdAction({\n        event: e\n      });\n    }.bind(this));\n    _events_engine2.default.on($navButton, pointerUpEventName, function () {\n      that._clearInterval();\n    });\n    _events_engine2.default.on($navButton, pointerOutEventName, function () {\n      that._clearInterval();\n    });\n    return navButton;\n  },\n  _clearInterval: function _clearInterval() {\n    if (this._holdInterval) {\n      clearInterval(this._holdInterval);\n    }\n  },\n  _updateSelection: function _updateSelection(addedSelection) {\n    this._scrollable && this._scrollable.scrollToElement(this.itemElements().eq(addedSelection[0]), {\n      left: 1,\n      right: 1\n    });\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._dimensionChanged();\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this._renderScrolling();\n  },\n  _itemSelectHandler: function _itemSelectHandler(e) {\n    if (\"single\" === this.option(\"selectionMode\") && this.isItemSelected(e.currentTarget)) {\n      return;\n    }\n    this.callBase(e);\n  },\n  _clean: function _clean() {\n    this._cleanScrolling();\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"useInkRipple\":\n      case \"scrollingEnabled\":\n      case \"showNavButtons\":\n        this._invalidate();\n        break;\n      case \"scrollByContent\":\n        this._scrollable && this._scrollable.option(args.name, args.value);\n        break;\n      case \"width\":\n        this.callBase(args);\n        this._dimensionChanged();\n        break;\n      case \"selectionMode\":\n        this._renderMultiple();\n        this.callBase(args);\n        break;\n      case \"badgeExpr\":\n        this._invalidate();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _afterItemElementInserted: function _afterItemElementInserted() {\n    this.callBase();\n    this._renderScrolling();\n  },\n  _afterItemElementDeleted: function _afterItemElementDeleted($item, deletedActionArgs) {\n    this.callBase($item, deletedActionArgs);\n    this._renderScrolling();\n  }\n});\nTabs.ItemClass = _item2.default;\n(0, _component_registrator2.default)(\"dxTabs\", Tabs);\nmodule.exports = Tabs;\nmodule.exports.getTabsExpandedClass = TABS_EXPANDED_CLASS;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}