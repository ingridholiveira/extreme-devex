{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.filter_custom_operations.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _filter_builder = require(\"../filter_builder/filter_builder\");\nvar $ = require(\"../../core/renderer\"),\n  messageLocalization = require(\"../../localization/message\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  DataSourceModule = require(\"../../data/data_source/data_source\"),\n  deferredUtils = require(\"../../core/utils/deferred\"),\n  utils = require(\"../filter_builder/utils\");\nfunction baseOperation(grid) {\n  var calculateFilterExpression = function calculateFilterExpression(filterValue, field) {\n    var result = [],\n      lastIndex = filterValue.length - 1;\n    filterValue && filterValue.forEach(function (value, index) {\n      if (utils.isCondition(value) || utils.isGroup(value)) {\n        var filterExpression = utils.getFilterExpression(value, [field], [], \"headerFilter\");\n        result.push(filterExpression);\n      } else {\n        result.push(utils.getFilterExpression([field.dataField, \"=\", value], [field], [], \"headerFilter\"));\n      }\n      index !== lastIndex && result.push(\"or\");\n    });\n    if (1 === result.length) {\n      result = result[0];\n    }\n    return result;\n  };\n  var getFullText = function getFullText(itemText, parentText) {\n    return parentText ? parentText + \"/\" + itemText : itemText;\n  };\n  var getSelectedItemsTexts = function getSelectedItemsTexts(items, parentText) {\n    var result = [];\n    items.forEach(function (item) {\n      if (item.items) {\n        var selectedItemsTexts = getSelectedItemsTexts(item.items, getFullText(item.text, parentText));\n        result = result.concat(selectedItemsTexts);\n      }\n      item.selected && result.push(getFullText(item.text, parentText));\n    });\n    return result;\n  };\n  var headerFilterController = grid && grid.getController(\"headerFilter\"),\n    customizeText = function customizeText(fieldInfo) {\n      var value = fieldInfo.value,\n        column = grid.columnOption(fieldInfo.field.dataField),\n        headerFilter = column && column.headerFilter,\n        lookup = column && column.lookup;\n      if (headerFilter && headerFilter.dataSource || lookup && lookup.dataSource) {\n        column = extend({}, column, {\n          filterType: \"include\",\n          filterValues: [value]\n        });\n        var dataSourceOptions = headerFilterController.getDataSource(column);\n        dataSourceOptions.paginate = false;\n        var headerFilterDataSource = headerFilter && headerFilter.dataSource;\n        if (!headerFilterDataSource && lookup.items) {\n          dataSourceOptions.store = lookup.items;\n        }\n        var dataSource = new DataSourceModule.DataSource(dataSourceOptions),\n          result = new deferredUtils.Deferred();\n        dataSource.load().done(function (items) {\n          result.resolve(getSelectedItemsTexts(items)[0]);\n        });\n        return result;\n      } else {\n        var text = headerFilterController.getHeaderItemText(value, column, 0, grid.option(\"headerFilter\"));\n        return text;\n      }\n    };\n  return {\n    dataTypes: [\"string\", \"date\", \"datetime\", \"number\", \"boolean\", \"object\"],\n    calculateFilterExpression: calculateFilterExpression,\n    editorTemplate: function editorTemplate(conditionInfo, container) {\n      var div = $(\"<div>\").addClass(\"dx-filterbuilder-item-value-text\").appendTo(container),\n        column = extend(true, {}, grid.columnOption(conditionInfo.field.dataField));\n      (0, _filter_builder.renderValueText)(div, conditionInfo.text && conditionInfo.text.split(\"|\"));\n      var setValue = function setValue(value) {\n        conditionInfo.setValue(value);\n      };\n      column.filterType = \"include\";\n      column.filterValues = conditionInfo.value ? conditionInfo.value.slice() : [];\n      headerFilterController.showHeaderFilterMenuBase({\n        columnElement: div,\n        column: column,\n        apply: function apply() {\n          setValue(this.filterValues);\n          headerFilterController.hideHeaderFilterMenu();\n        },\n        onHidden: function onHidden() {\n          conditionInfo.closeEditor();\n        },\n        isFilterBuilder: true\n      });\n      return container;\n    },\n    customizeText: customizeText\n  };\n}\nfunction anyOf(grid) {\n  return extend(baseOperation(grid), {\n    name: \"anyof\",\n    icon: \"selectall\",\n    caption: messageLocalization.format(\"dxFilterBuilder-filterOperationAnyOf\")\n  });\n}\nfunction noneOf(grid) {\n  var baseOp = baseOperation(grid);\n  return extend({}, baseOp, {\n    calculateFilterExpression: function calculateFilterExpression(filterValue, field) {\n      var baseFilter = baseOp.calculateFilterExpression(filterValue, field);\n      if (!baseFilter || 0 === baseFilter.length) {\n        return null;\n      }\n      return \"!\" === baseFilter[0] ? baseFilter : [\"!\", baseFilter];\n    },\n    name: \"noneof\",\n    icon: \"unselectall\",\n    caption: messageLocalization.format(\"dxFilterBuilder-filterOperationNoneOf\")\n  });\n}\nexports.anyOf = anyOf;\nexports.noneOf = noneOf;","map":null,"metadata":{},"sourceType":"script"}