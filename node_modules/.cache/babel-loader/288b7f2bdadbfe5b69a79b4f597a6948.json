{"ast":null,"code":"/**\r\n * DevExtreme (ui/shared/ui.editor_factory_mixin.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  noop = require(\"../../core/utils/common\").noop,\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  typeUtils = require(\"../../core/utils/type\"),\n  isWrapped = require(\"../../core/utils/variable_wrapper\").isWrapped,\n  compileGetter = require(\"../../core/utils/data\").compileGetter,\n  browser = require(\"../../core/utils/browser\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  devices = require(\"../../core/devices\"),\n  getPublicElement = require(\"../../core/utils/dom\").getPublicElement,\n  normalizeDataSourceOptions = require(\"../../data/data_source/data_source\").normalizeDataSourceOptions,\n  normalizeKeyName = require(\"../../events/utils\").normalizeKeyName;\nrequire(\"../text_box\");\nrequire(\"../number_box\");\nrequire(\"../check_box\");\nrequire(\"../select_box\");\nrequire(\"../date_box\");\nvar CHECKBOX_SIZE_CLASS = \"checkbox-size\",\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  EDITOR_INLINE_BLOCK = \"dx-editor-inline-block\";\nvar EditorFactoryMixin = function () {\n  var getResultConfig = function getResultConfig(config, options) {\n    return extend(config, {\n      readOnly: options.readOnly,\n      placeholder: options.placeholder,\n      inputAttr: {\n        id: options.id\n      },\n      tabIndex: options.tabIndex\n    }, options.editorOptions);\n  };\n  var checkEnterBug = function checkEnterBug() {\n    return browser.msie || browser.mozilla || devices.real().ios;\n  };\n  var getTextEditorConfig = function getTextEditorConfig(options) {\n    var data = {},\n      isEnterBug = checkEnterBug(),\n      sharedData = options.sharedData || data;\n    return getResultConfig({\n      placeholder: options.placeholder,\n      width: options.width,\n      value: options.value,\n      onValueChanged: function onValueChanged(e) {\n        var needDelayedUpdate = \"filterRow\" === options.parentType || \"searchPanel\" === options.parentType,\n          isInputOrKeyUpEvent = e.event && (\"input\" === e.event.type || \"keyup\" === e.event.type),\n          updateValue = function updateValue(e, notFireEvent) {\n            options && options.setValue(e.value, notFireEvent);\n          };\n        clearTimeout(data.valueChangeTimeout);\n        if (isInputOrKeyUpEvent && needDelayedUpdate) {\n          sharedData.valueChangeTimeout = data.valueChangeTimeout = setTimeout(function () {\n            updateValue(e, data.valueChangeTimeout !== sharedData.valueChangeTimeout);\n          }, typeUtils.isDefined(options.updateValueTimeout) ? options.updateValueTimeout : 0);\n        } else {\n          updateValue(e);\n        }\n      },\n      onKeyDown: function onKeyDown(e) {\n        if (isEnterBug && \"enter\" === normalizeKeyName(e.event)) {\n          eventsEngine.trigger($(e.component._input()), \"change\");\n        }\n      },\n      valueChangeEvent: \"change\" + (\"filterRow\" === options.parentType ? \" keyup input\" : \"\")\n    }, options);\n  };\n  var prepareDateBox = function prepareDateBox(options) {\n    options.editorName = \"dxDateBox\";\n    options.editorOptions = getResultConfig({\n      value: options.value,\n      onValueChanged: function onValueChanged(args) {\n        options.setValue(args.value);\n      },\n      onKeyDown: function onKeyDown(e) {\n        if (checkEnterBug() && \"enter\" === normalizeKeyName(e.event)) {\n          e.component.blur();\n          e.component.focus();\n        }\n      },\n      displayFormat: options.format,\n      type: options.dataType,\n      formatWidthCalculator: null,\n      dateSerializationFormat: null,\n      width: \"filterBuilder\" === options.parentType ? void 0 : \"auto\"\n    }, options);\n  };\n  var prepareTextBox = function prepareTextBox(options) {\n    var config = getTextEditorConfig(options),\n      isSearching = \"searchPanel\" === options.parentType,\n      toString = function toString(value) {\n        return typeUtils.isDefined(value) ? value.toString() : \"\";\n      };\n    if (options.editorType && \"dxTextBox\" !== options.editorType) {\n      config.value = options.value;\n    } else {\n      config.value = toString(options.value);\n    }\n    config.valueChangeEvent += isSearching ? \" keyup input search\" : \"\";\n    config.mode = config.mode || (isSearching ? \"search\" : \"text\");\n    options.editorName = \"dxTextBox\";\n    options.editorOptions = config;\n  };\n  var prepareNumberBox = function prepareNumberBox(options) {\n    var config = getTextEditorConfig(options);\n    config.value = typeUtils.isDefined(options.value) ? options.value : null;\n    options.editorName = \"dxNumberBox\";\n    options.editorOptions = config;\n  };\n  var prepareBooleanEditor = function prepareBooleanEditor(options) {\n    if (\"filterRow\" === options.parentType || \"filterBuilder\" === options.parentType) {\n      prepareSelectBox(extend(options, {\n        lookup: {\n          displayExpr: function displayExpr(data) {\n            if (true === data) {\n              return options.trueText || \"true\";\n            } else {\n              if (false === data) {\n                return options.falseText || \"false\";\n              }\n            }\n          },\n          dataSource: [true, false]\n        }\n      }));\n    } else {\n      prepareCheckBox(options);\n    }\n  };\n  var prepareSelectBox = function prepareSelectBox(options) {\n    var displayGetter,\n      dataSource,\n      postProcess,\n      lookup = options.lookup,\n      isFilterRow = \"filterRow\" === options.parentType;\n    if (lookup) {\n      displayGetter = compileGetter(lookup.displayExpr);\n      dataSource = lookup.dataSource;\n      if (typeUtils.isFunction(dataSource) && !isWrapped(dataSource)) {\n        dataSource = dataSource(options.row || {});\n      }\n      if (typeUtils.isObject(dataSource) || Array.isArray(dataSource)) {\n        dataSource = normalizeDataSourceOptions(dataSource);\n        if (isFilterRow) {\n          postProcess = dataSource.postProcess;\n          dataSource.postProcess = function (items) {\n            if (0 === this.pageIndex()) {\n              items = items.slice(0);\n              items.unshift(null);\n            }\n            if (postProcess) {\n              return postProcess.call(this, items);\n            }\n            return items;\n          };\n        }\n      }\n      var allowClearing = Boolean(lookup.allowClearing && !isFilterRow);\n      options.editorName = \"dxSelectBox\";\n      options.editorOptions = getResultConfig({\n        searchEnabled: true,\n        value: options.value,\n        valueExpr: options.lookup.valueExpr,\n        searchExpr: options.lookup.searchExpr || options.lookup.displayExpr,\n        allowClearing: allowClearing,\n        showClearButton: allowClearing,\n        displayExpr: function displayExpr(data) {\n          if (null === data) {\n            return options.showAllText;\n          }\n          return displayGetter(data);\n        },\n        dataSource: dataSource,\n        onValueChanged: function onValueChanged(e) {\n          var params = [e.value];\n          !isFilterRow && params.push(e.component.option(\"text\"));\n          options.setValue.apply(this, params);\n        }\n      }, options);\n    }\n  };\n  var prepareCheckBox = function prepareCheckBox(options) {\n    options.editorName = \"dxCheckBox\";\n    options.editorOptions = getResultConfig({\n      value: typeUtils.isDefined(options.value) ? options.value : void 0,\n      hoverStateEnabled: !options.readOnly,\n      focusStateEnabled: !options.readOnly,\n      activeStateEnabled: false,\n      onValueChanged: function onValueChanged(e) {\n        options.setValue && options.setValue(e.value, e);\n      }\n    }, options);\n  };\n  var createEditorCore = function createEditorCore(that, options) {\n    var $editorElement = $(options.editorElement);\n    if (options.editorName && options.editorOptions && $editorElement[options.editorName]) {\n      if (\"dxCheckBox\" === options.editorName) {\n        if (!options.isOnForm) {\n          $editorElement.addClass(that.addWidgetPrefix(CHECKBOX_SIZE_CLASS));\n          $editorElement.parent().addClass(EDITOR_INLINE_BLOCK);\n        }\n        if (options.command || options.editorOptions.readOnly) {\n          $editorElement.parent().addClass(CELL_FOCUS_DISABLED_CLASS);\n        }\n      }\n      that._createComponent($editorElement, options.editorName, options.editorOptions);\n      if (\"dxTextBox\" === options.editorName) {\n        $editorElement.dxTextBox(\"instance\").registerKeyHandler(\"enter\", noop);\n      }\n      if (\"dxTextArea\" === options.editorName) {\n        $editorElement.dxTextArea(\"instance\").registerKeyHandler(\"enter\", function (event) {\n          if (\"enter\" === normalizeKeyName(event) && !event.ctrlKey && !event.shiftKey) {\n            event.stopPropagation();\n          }\n        });\n      }\n    }\n  };\n  return {\n    createEditor: function createEditor($container, options) {\n      var editorName = void 0;\n      options.cancel = false;\n      options.editorElement = getPublicElement($container);\n      if (!typeUtils.isDefined(options.tabIndex)) {\n        options.tabIndex = this.option(\"tabIndex\");\n      }\n      if (options.lookup) {\n        prepareSelectBox(options);\n      } else {\n        switch (options.dataType) {\n          case \"date\":\n          case \"datetime\":\n            prepareDateBox(options);\n            break;\n          case \"boolean\":\n            prepareBooleanEditor(options);\n            break;\n          case \"number\":\n            prepareNumberBox(options);\n            break;\n          default:\n            prepareTextBox(options);\n        }\n      }\n      editorName = options.editorName;\n      this.executeAction(\"onEditorPreparing\", options);\n      if (options.cancel) {\n        return;\n      } else {\n        if (\"dataRow\" === options.parentType && options.editorType && editorName === options.editorName) {\n          options.editorName = options.editorType;\n        }\n      }\n      createEditorCore(this, options);\n      this.executeAction(\"onEditorPrepared\", options);\n    }\n  };\n}();\nmodule.exports = EditorFactoryMixin;","map":null,"metadata":{},"sourceType":"script"}