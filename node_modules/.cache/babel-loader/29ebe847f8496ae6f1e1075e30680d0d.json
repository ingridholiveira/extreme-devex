{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/array_compare.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findChanges = void 0;\nvar _type = require(\"./type\");\nvar getKeyWrapper = function getKeyWrapper(item, getKey) {\n  var key = getKey(item);\n  if ((0, _type.isObject)(key)) {\n    try {\n      return JSON.stringify(key);\n    } catch (e) {\n      return key;\n    }\n  }\n  return key;\n};\nvar getSameNewByOld = function getSameNewByOld(oldItem, newItems, newIndexByKey, getKey) {\n  var key = getKeyWrapper(oldItem, getKey);\n  return newItems[newIndexByKey[key]];\n};\nvar findChanges = exports.findChanges = function (oldItems, newItems, getKey, isItemEquals) {\n  var oldIndexByKey = {},\n    newIndexByKey = {},\n    addedCount = 0,\n    removeCount = 0,\n    result = [];\n  oldItems.forEach(function (item, index) {\n    var key = getKeyWrapper(item, getKey);\n    oldIndexByKey[key] = index;\n  });\n  newItems.forEach(function (item, index) {\n    var key = getKeyWrapper(item, getKey);\n    newIndexByKey[key] = index;\n  });\n  var itemCount = Math.max(oldItems.length, newItems.length);\n  for (var index = 0; index < itemCount + addedCount; index++) {\n    var newItem = newItems[index],\n      oldNextIndex = index - addedCount + removeCount,\n      nextOldItem = oldItems[oldNextIndex],\n      isRemoved = !newItem || nextOldItem && !getSameNewByOld(nextOldItem, newItems, newIndexByKey, getKey);\n    if (isRemoved) {\n      if (nextOldItem) {\n        result.push({\n          type: \"remove\",\n          key: getKey(nextOldItem),\n          index: index,\n          oldItem: nextOldItem\n        });\n        removeCount++;\n        index--;\n      }\n    } else {\n      var key = getKeyWrapper(newItem, getKey),\n        oldIndex = oldIndexByKey[key],\n        oldItem = oldItems[oldIndex];\n      if (!oldItem) {\n        addedCount++;\n        result.push({\n          type: \"insert\",\n          data: newItem,\n          index: index\n        });\n      } else {\n        if (oldIndex === oldNextIndex) {\n          if (!isItemEquals(oldItem, newItem)) {\n            result.push({\n              type: \"update\",\n              data: newItem,\n              key: getKey(newItem),\n              index: index,\n              oldItem: oldItem\n            });\n          }\n        } else {\n          return;\n        }\n      }\n    }\n  }\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}