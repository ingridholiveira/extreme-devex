{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.modules.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _class = require(\"../../core/class\");\nvar _class2 = _interopRequireDefault(_class);\nvar _callbacks = require(\"../../core/utils/callbacks\");\nvar _callbacks2 = _interopRequireDefault(_callbacks);\nvar _common = require(\"../../core/utils/common\");\nvar _type = require(\"../../core/utils/type\");\nvar _array = require(\"../../core/utils/array\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _window = require(\"../../core/utils/window\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar WIDGET_WITH_LEGACY_CONTAINER_NAME = \"dxDataGrid\";\nvar ModuleItem = _class2.default.inherit({\n  _endUpdateCore: function _endUpdateCore() {},\n  ctor: function ctor(component) {\n    var that = this;\n    that._updateLockCount = 0;\n    that.component = component;\n    that._actions = {};\n    that._actionConfigs = {};\n    (0, _iterator.each)(this.callbackNames() || [], function (index, name) {\n      var flags = that.callbackFlags(name) || {};\n      flags.unique = true, flags.syncStrategy = true;\n      that[this] = (0, _callbacks2.default)(flags);\n    });\n  },\n  init: function init() {},\n  callbackNames: function callbackNames() {},\n  callbackFlags: function callbackFlags() {},\n  publicMethods: function publicMethods() {},\n  beginUpdate: function beginUpdate() {\n    this._updateLockCount++;\n  },\n  endUpdate: function endUpdate() {\n    if (this._updateLockCount > 0) {\n      this._updateLockCount--;\n      if (!this._updateLockCount) {\n        this._endUpdateCore();\n      }\n    }\n  },\n  option: function option(name) {\n    var component = this.component,\n      optionCache = component._optionCache;\n    if (1 === arguments.length && optionCache) {\n      if (!(name in optionCache)) {\n        optionCache[name] = component.option(name);\n      }\n      return optionCache[name];\n    }\n    return component.option.apply(component, arguments);\n  },\n  localize: function localize(name) {\n    var optionCache = this.component._optionCache;\n    if (optionCache) {\n      if (!(name in optionCache)) {\n        optionCache[name] = _message2.default.format(name);\n      }\n      return optionCache[name];\n    }\n    return _message2.default.format(name);\n  },\n  on: function on() {\n    return this.component.on.apply(this.component, arguments);\n  },\n  off: function off() {\n    return this.component.off.apply(this.component, arguments);\n  },\n  optionChanged: function optionChanged(args) {\n    if (args.name in this._actions) {\n      this.createAction(args.name, this._actionConfigs[args.name]);\n      args.handled = true;\n    }\n  },\n  getAction: function getAction(actionName) {\n    return this._actions[actionName];\n  },\n  setAria: function setAria(name, value, $target) {\n    var target = $target.get(0),\n      prefix = \"role\" !== name && \"id\" !== name ? \"aria-\" : \"\";\n    if (target.setAttribute) {\n      target.setAttribute(prefix + name, value);\n    } else {\n      $target.attr(prefix + name, value);\n    }\n  },\n  _createComponent: function _createComponent() {\n    return this.component._createComponent.apply(this.component, arguments);\n  },\n  getController: function getController(name) {\n    return this.component._controllers[name];\n  },\n  createAction: function createAction(actionName, config) {\n    var action;\n    if ((0, _type.isFunction)(actionName)) {\n      action = this.component._createAction(actionName.bind(this), config);\n      return function (e) {\n        action({\n          event: e\n        });\n      };\n    } else {\n      this._actions[actionName] = this.component._createActionByOption(actionName, config);\n      this._actionConfigs[actionName] = config;\n    }\n  },\n  executeAction: function executeAction(actionName, options) {\n    var action = this._actions[actionName];\n    return action && action(options);\n  },\n  dispose: function dispose() {\n    var that = this;\n    (0, _iterator.each)(that.callbackNames() || [], function () {\n      that[this].empty();\n    });\n  },\n  addWidgetPrefix: function addWidgetPrefix(className) {\n    var componentName = this.component.NAME;\n    return \"dx-\" + componentName.slice(2).toLowerCase() + (className ? \"-\" + className : \"\");\n  },\n  getWidgetContainerClass: function getWidgetContainerClass() {\n    var containerName = this.component.NAME === WIDGET_WITH_LEGACY_CONTAINER_NAME ? null : \"container\";\n    return this.addWidgetPrefix(containerName);\n  }\n});\nvar Controller = ModuleItem;\nvar ViewController = Controller.inherit({\n  getView: function getView(name) {\n    return this.component._views[name];\n  },\n  getViews: function getViews() {\n    return this.component._views;\n  }\n});\nvar View = ModuleItem.inherit({\n  _isReady: function _isReady() {\n    return this.component.isReady();\n  },\n  _endUpdateCore: function _endUpdateCore() {\n    this.callBase();\n    if (!this._isReady() && this._requireReady) {\n      this._requireRender = false;\n      this.component._requireResize = false;\n    }\n    if (this._requireRender) {\n      this._requireRender = false;\n      this.render(this._$parent);\n    }\n  },\n  _invalidate: function _invalidate(requireResize, requireReady) {\n    this._requireRender = true;\n    this.component._requireResize = (0, _window.hasWindow)() && (this.component._requireResize || requireResize);\n    this._requireReady = this._requireReady || requireReady;\n  },\n  _renderCore: function _renderCore() {},\n  _resizeCore: function _resizeCore() {},\n  _afterRender: function _afterRender() {},\n  _parentElement: function _parentElement() {\n    return this._$parent;\n  },\n  ctor: function ctor(component) {\n    this.callBase(component);\n    this.renderCompleted = (0, _callbacks2.default)();\n    this.resizeCompleted = (0, _callbacks2.default)();\n  },\n  element: function element() {\n    return this._$element;\n  },\n  getElementHeight: function getElementHeight() {\n    var $element = this.element();\n    if (!$element) {\n      return 0;\n    }\n    var marginTop = parseFloat($element.css(\"marginTop\")) || 0,\n      marginBottom = parseFloat($element.css(\"marginBottom\")) || 0,\n      offsetHeight = $element.get(0).offsetHeight;\n    return offsetHeight + marginTop + marginBottom;\n  },\n  isVisible: function isVisible() {\n    return true;\n  },\n  getTemplate: function getTemplate(name) {\n    return this.component._getTemplate(name);\n  },\n  render: function render($parent, options) {\n    var $element = this._$element,\n      isVisible = this.isVisible();\n    if (!$element && !$parent) {\n      return;\n    }\n    this._requireReady = false;\n    if (!$element) {\n      $element = this._$element = (0, _renderer2.default)(\"<div>\").appendTo($parent);\n      this._$parent = $parent;\n    }\n    $element.toggleClass(\"dx-hidden\", !isVisible);\n    if (isVisible) {\n      this.component._optionCache = {};\n      this._renderCore(options);\n      this.component._optionCache = void 0;\n      this._afterRender($parent);\n      this.renderCompleted.fire(options);\n    }\n  },\n  resize: function resize() {\n    this.isResizing = true;\n    this._resizeCore();\n    this.resizeCompleted.fire();\n    this.isResizing = false;\n  },\n  focus: function focus() {\n    _events_engine2.default.trigger(this.element(), \"focus\");\n  }\n});\nvar MODULES_ORDER_MAX_INDEX = 1e6;\nvar processModules = function processModules(that, componentClass) {\n  var modules = componentClass.modules,\n    modulesOrder = componentClass.modulesOrder,\n    controllerTypes = componentClass.controllerTypes || {},\n    viewTypes = componentClass.viewTypes || {};\n  if (!componentClass.controllerTypes) {\n    if (modulesOrder) {\n      modules.sort(function (module1, module2) {\n        var orderIndex1 = (0, _array.inArray)(module1.name, modulesOrder);\n        var orderIndex2 = (0, _array.inArray)(module2.name, modulesOrder);\n        if (orderIndex1 < 0) {\n          orderIndex1 = MODULES_ORDER_MAX_INDEX;\n        }\n        if (orderIndex2 < 0) {\n          orderIndex2 = MODULES_ORDER_MAX_INDEX;\n        }\n        return orderIndex1 - orderIndex2;\n      });\n    }\n    (0, _iterator.each)(modules, function () {\n      var controllers = this.controllers,\n        moduleName = this.name,\n        views = this.views;\n      controllers && (0, _iterator.each)(controllers, function (name, type) {\n        if (controllerTypes[name]) {\n          throw _ui2.default.Error(\"E1001\", moduleName, name);\n        } else {\n          if (!(type && type.subclassOf && type.subclassOf(Controller))) {\n            type.subclassOf(Controller);\n            throw _ui2.default.Error(\"E1002\", moduleName, name);\n          }\n        }\n        controllerTypes[name] = type;\n      });\n      views && (0, _iterator.each)(views, function (name, type) {\n        if (viewTypes[name]) {\n          throw _ui2.default.Error(\"E1003\", moduleName, name);\n        } else {\n          if (!(type && type.subclassOf && type.subclassOf(View))) {\n            throw _ui2.default.Error(\"E1004\", moduleName, name);\n          }\n        }\n        viewTypes[name] = type;\n      });\n    });\n    (0, _iterator.each)(modules, function () {\n      var extenders = this.extenders;\n      if (extenders) {\n        extenders.controllers && (0, _iterator.each)(extenders.controllers, function (name, extender) {\n          if (controllerTypes[name]) {\n            controllerTypes[name] = controllerTypes[name].inherit(extender);\n          }\n        });\n        extenders.views && (0, _iterator.each)(extenders.views, function (name, extender) {\n          if (viewTypes[name]) {\n            viewTypes[name] = viewTypes[name].inherit(extender);\n          }\n        });\n      }\n    });\n    componentClass.controllerTypes = controllerTypes;\n    componentClass.viewTypes = viewTypes;\n  }\n  var registerPublicMethods = function registerPublicMethods(that, name, moduleItem) {\n    var publicMethods = moduleItem.publicMethods();\n    if (publicMethods) {\n      (0, _iterator.each)(publicMethods, function (index, methodName) {\n        if (moduleItem[methodName]) {\n          if (!that[methodName]) {\n            that[methodName] = function () {\n              return moduleItem[methodName].apply(moduleItem, arguments);\n            };\n          } else {\n            throw _ui2.default.Error(\"E1005\", methodName);\n          }\n        } else {\n          throw _ui2.default.Error(\"E1006\", name, methodName);\n        }\n      });\n    }\n  };\n  var createModuleItems = function createModuleItems(moduleTypes) {\n    var moduleItems = {};\n    (0, _iterator.each)(moduleTypes, function (name, moduleType) {\n      var moduleItem = new moduleType(that);\n      moduleItem.name = name;\n      registerPublicMethods(that, name, moduleItem);\n      moduleItems[name] = moduleItem;\n    });\n    return moduleItems;\n  };\n  that._controllers = createModuleItems(controllerTypes);\n  that._views = createModuleItems(viewTypes);\n};\nvar callModuleItemsMethod = function callModuleItemsMethod(that, methodName, args) {\n  args = args || [];\n  if (that._controllers) {\n    (0, _iterator.each)(that._controllers, function () {\n      this[methodName] && this[methodName].apply(this, args);\n    });\n  }\n  if (that._views) {\n    (0, _iterator.each)(that._views, function () {\n      this[methodName] && this[methodName].apply(this, args);\n    });\n  }\n};\nmodule.exports = {\n  modules: [],\n  View: View,\n  ViewController: ViewController,\n  Controller: Controller,\n  registerModule: function registerModule(name, module) {\n    var i,\n      modules = this.modules;\n    for (i = 0; i < modules.length; i++) {\n      if (modules[i].name === name) {\n        return;\n      }\n    }\n    module.name = name;\n    modules.push(module);\n    delete this.controllerTypes;\n    delete this.viewTypes;\n  },\n  registerModulesOrder: function registerModulesOrder(moduleNames) {\n    this.modulesOrder = moduleNames;\n  },\n  unregisterModule: function unregisterModule(name) {\n    this.modules = (0, _common.grep)(this.modules, function (module) {\n      return module.name !== name;\n    });\n    delete this.controllerTypes;\n    delete this.viewTypes;\n  },\n  processModules: processModules,\n  callModuleItemsMethod: callModuleItemsMethod\n};","map":null,"metadata":{},"sourceType":"script"}