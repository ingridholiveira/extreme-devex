{"ast":null,"code":"/**\r\n * DevExtreme (core/action.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"./renderer\"),\n  config = require(\"./config\"),\n  window = require(\"./utils/window\").getWindow(),\n  typeUtils = require(\"./utils/type\"),\n  each = require(\"./utils/iterator\").each,\n  Class = require(\"./class\"),\n  errors = require(\"./errors\");\nvar Action = Class.inherit({\n  ctor: function ctor(action, config) {\n    config = config || {};\n    this._action = action;\n    this._context = config.context || window;\n    this._beforeExecute = config.beforeExecute;\n    this._afterExecute = config.afterExecute;\n    this._component = config.component;\n    this._validatingTargetName = config.validatingTargetName;\n    var excludeValidators = this._excludeValidators = {};\n    if (config.excludeValidators) {\n      for (var i = 0; i < config.excludeValidators.length; i++) {\n        excludeValidators[config.excludeValidators[i]] = true;\n      }\n    }\n  },\n  execute: function execute() {\n    var e = {\n      action: this._action,\n      args: Array.prototype.slice.call(arguments),\n      context: this._context,\n      component: this._component,\n      validatingTargetName: this._validatingTargetName,\n      cancel: false,\n      handled: false\n    };\n    var beforeExecute = this._beforeExecute,\n      afterExecute = this._afterExecute;\n    var argsBag = e.args[0] || {};\n    if (!(\"jQueryEvent\" in argsBag) && argsBag.event && config().useJQuery) {\n      Object.defineProperty(argsBag, \"jQueryEvent\", {\n        get: function get() {\n          errors.log(\"W0003\", \"Handler argument\", \"jQueryEvent\", \"17.2\", \"Use the 'event' field instead\");\n          return argsBag.event;\n        },\n        set: function set(value) {\n          errors.log(\"W0003\", \"Handler argument\", \"jQueryEvent\", \"17.2\", \"Use the 'event' field instead\");\n          argsBag.event = value;\n        }\n      });\n    }\n    if (!this._validateAction(e)) {\n      return;\n    }\n    beforeExecute && beforeExecute.call(this._context, e);\n    if (e.cancel) {\n      return;\n    }\n    var result = this._executeAction(e);\n    if (argsBag.cancel) {\n      return;\n    }\n    afterExecute && afterExecute.call(this._context, e);\n    return result;\n  },\n  _validateAction: function _validateAction(e) {\n    var excludeValidators = this._excludeValidators,\n      executors = Action.executors;\n    for (var name in executors) {\n      if (!excludeValidators[name]) {\n        var executor = executors[name];\n        if (executor.validate) {\n          executor.validate(e);\n        }\n        if (e.cancel) {\n          return false;\n        }\n      }\n    }\n    return true;\n  },\n  _executeAction: function _executeAction(e) {\n    var result,\n      executors = Action.executors;\n    for (var name in executors) {\n      var executor = executors[name];\n      if (executor.execute) {\n        executor.execute(e);\n      }\n      if (e.handled) {\n        result = e.result;\n        break;\n      }\n    }\n    return result;\n  }\n});\nAction.executors = {};\nAction.registerExecutor = function (name, executor) {\n  if (typeUtils.isPlainObject(name)) {\n    each(name, Action.registerExecutor);\n    return;\n  }\n  Action.executors[name] = executor;\n};\nAction.unregisterExecutor = function () {\n  var args = [].slice.call(arguments);\n  each(args, function () {\n    delete Action.executors[this];\n  });\n};\nAction.registerExecutor({\n  undefined: {\n    execute: function execute(e) {\n      if (!e.action) {\n        e.result = void 0;\n        e.handled = true;\n      }\n    }\n  },\n  func: {\n    execute: function execute(e) {\n      if (typeUtils.isFunction(e.action)) {\n        e.result = e.action.call(e.context, e.args[0]);\n        e.handled = true;\n      }\n    }\n  }\n});\nvar createValidatorByTargetElement = function createValidatorByTargetElement(condition) {\n  return function (e) {\n    if (!e.args.length) {\n      return;\n    }\n    var args = e.args[0],\n      element = args[e.validatingTargetName] || args.element;\n    if (element && condition($(element))) {\n      e.cancel = true;\n    }\n  };\n};\nAction.registerExecutor({\n  disabled: {\n    validate: createValidatorByTargetElement(function ($target) {\n      return $target.is(\".dx-state-disabled, .dx-state-disabled *\");\n    })\n  },\n  readOnly: {\n    validate: createValidatorByTargetElement(function ($target) {\n      return $target.is(\".dx-state-readonly, .dx-state-readonly *\");\n    })\n  }\n});\nmodule.exports = Action;","map":null,"metadata":{},"sourceType":"script"}