{"ast":null,"code":"/**\r\n * DevExtreme (ui/list/ui.list.edit.strategy.grouped.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  isNumeric = require(\"../../core/utils/type\").isNumeric,\n  each = require(\"../../core/utils/iterator\").each,\n  queryByOptions = require(\"../../data/store_helper\").queryByOptions,\n  query = require(\"../../data/query\"),\n  EditStrategy = require(\"../collection/ui.collection_widget.edit.strategy.plain\");\nvar LIST_ITEM_CLASS = \"dx-list-item\",\n  LIST_GROUP_CLASS = \"dx-list-group\";\nvar SELECTION_SHIFT = 20,\n  SELECTION_MASK = 2303;\nvar combineIndex = function combineIndex(indices) {\n  return (indices.group << SELECTION_SHIFT) + indices.item;\n};\nvar splitIndex = function splitIndex(combinedIndex) {\n  return {\n    group: combinedIndex >> SELECTION_SHIFT,\n    item: combinedIndex & SELECTION_MASK\n  };\n};\nvar GroupedEditStrategy = EditStrategy.inherit({\n  _groupElements: function _groupElements() {\n    return this._collectionWidget._itemContainer().find(\".\" + LIST_GROUP_CLASS);\n  },\n  _groupItemElements: function _groupItemElements($group) {\n    return $group.find(\".\" + LIST_ITEM_CLASS);\n  },\n  getIndexByItemData: function getIndexByItemData(itemData) {\n    var groups = this._collectionWidget.option(\"items\"),\n      index = false;\n    if (!itemData) {\n      return false;\n    }\n    if (itemData.items && itemData.items.length) {\n      itemData = itemData.items[0];\n    }\n    each(groups, function (groupIndex, group) {\n      if (!group.items) {\n        return false;\n      }\n      each(group.items, function (itemIndex, item) {\n        if (item !== itemData) {\n          return true;\n        }\n        index = {\n          group: groupIndex,\n          item: itemIndex\n        };\n        return false;\n      });\n      if (index) {\n        return false;\n      }\n    });\n    return index;\n  },\n  getItemDataByIndex: function getItemDataByIndex(index) {\n    var items = this._collectionWidget.option(\"items\");\n    if (isNumeric(index)) {\n      return this.itemsGetter()[index];\n    }\n    return index && items[index.group] && items[index.group].items[index.item] || null;\n  },\n  itemsGetter: function itemsGetter() {\n    var resultItems = [],\n      items = this._collectionWidget.option(\"items\");\n    for (var i = 0; i < items.length; i++) {\n      if (items[i] && items[i].items) {\n        resultItems = resultItems.concat(items[i].items);\n      } else {\n        resultItems.push(items[i]);\n      }\n    }\n    return resultItems;\n  },\n  deleteItemAtIndex: function deleteItemAtIndex(index) {\n    var indices = splitIndex(index),\n      itemGroup = this._collectionWidget.option(\"items\")[indices.group].items;\n    itemGroup.splice(indices.item, 1);\n  },\n  getKeysByItems: function getKeysByItems(items) {\n    var plainItems = [];\n    for (var i = 0; i < items.length; i++) {\n      if (items[i] && items[i].items) {\n        plainItems = plainItems.concat(items[i].items);\n      } else {\n        plainItems.push(items[i]);\n      }\n    }\n    var result = [];\n    for (i = 0; i < plainItems.length; i++) {\n      result.push(this._collectionWidget.keyOf(plainItems[i]));\n    }\n    return result;\n  },\n  getIndexByKey: function getIndexByKey(key, items) {\n    var groups = items || this._collectionWidget.option(\"items\"),\n      index = -1,\n      that = this;\n    each(groups, function (groupIndex, group) {\n      if (!group.items) {\n        return;\n      }\n      var keys = that.getKeysByItems(group.items);\n      each(keys, function (keyIndex, itemKey) {\n        if (that._equalKeys(itemKey, key)) {\n          index = {\n            group: groupIndex,\n            item: keyIndex\n          };\n          return false;\n        }\n      });\n      if (index !== -1) {\n        return false;\n      }\n    });\n    return index;\n  },\n  _getGroups: function _getGroups(items) {\n    var dataSource = this._collectionWidget.getDataSource(),\n      group = dataSource && dataSource.group();\n    if (group) {\n      return queryByOptions(query(items), {\n        group: group\n      }).toArray();\n    }\n    return this._collectionWidget.option(\"items\");\n  },\n  getItemsByKeys: function getItemsByKeys(keys, items) {\n    var result = [];\n    each(keys, function (_, key) {\n      var getItemMeta = function (groups) {\n        var index = this.getIndexByKey(key, groups);\n        var group = index && groups[index.group];\n        if (!group) {\n          return;\n        }\n        return {\n          groupKey: group.key,\n          item: group.items[index.item]\n        };\n      }.bind(this);\n      var itemMeta = getItemMeta(this._getGroups(items));\n      if (!itemMeta) {\n        return;\n      }\n      var groupKey = itemMeta.groupKey;\n      var item = itemMeta.item;\n      var selectedGroup;\n      each(result, function (_, item) {\n        if (item.key === groupKey) {\n          selectedGroup = item;\n          return false;\n        }\n      });\n      if (!selectedGroup) {\n        selectedGroup = {\n          key: groupKey,\n          items: []\n        };\n        result.push(selectedGroup);\n      }\n      selectedGroup.items.push(item);\n    }.bind(this));\n    return result;\n  },\n  moveItemAtIndexToIndex: function moveItemAtIndexToIndex(movingIndex, destinationIndex) {\n    var items = this._collectionWidget.option(\"items\"),\n      movingIndices = splitIndex(movingIndex),\n      destinationIndices = splitIndex(destinationIndex),\n      movingItemGroup = items[movingIndices.group].items,\n      destinationItemGroup = items[destinationIndices.group].items,\n      movedItemData = movingItemGroup[movingIndices.item];\n    movingItemGroup.splice(movingIndices.item, 1);\n    destinationItemGroup.splice(destinationIndices.item, 0, movedItemData);\n  },\n  _isItemIndex: function _isItemIndex(index) {\n    return index && isNumeric(index.group) && isNumeric(index.item);\n  },\n  _getNormalizedItemIndex: function _getNormalizedItemIndex(itemElement) {\n    var $item = $(itemElement),\n      $group = $item.closest(\".\" + LIST_GROUP_CLASS);\n    if (!$group.length) {\n      return -1;\n    }\n    return combineIndex({\n      group: this._groupElements().index($group),\n      item: this._groupItemElements($group).index($item)\n    });\n  },\n  _normalizeItemIndex: function _normalizeItemIndex(index) {\n    return combineIndex(index);\n  },\n  _denormalizeItemIndex: function _denormalizeItemIndex(index) {\n    return splitIndex(index);\n  },\n  _getItemByNormalizedIndex: function _getItemByNormalizedIndex(index) {\n    var indices = splitIndex(index),\n      $group = this._groupElements().eq(indices.group);\n    return this._groupItemElements($group).eq(indices.item);\n  },\n  _itemsFromSameParent: function _itemsFromSameParent(firstIndex, secondIndex) {\n    return splitIndex(firstIndex).group === splitIndex(secondIndex).group;\n  }\n});\nmodule.exports = GroupedEditStrategy;","map":null,"metadata":{},"sourceType":"script"}