{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.strategy.default.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (void 0 === getter) {\n        return;\n      }\n      return getter.call(receiver);\n    }\n  }\n};\nvar _uiText_editorMaskStrategy = require(\"./ui.text_editor.mask.strategy.base\");\nvar _uiText_editorMaskStrategy2 = _interopRequireDefault(_uiText_editorMaskStrategy);\nvar _utils = require(\"../../events/utils\");\nvar _promise = require(\"../../core/polyfills/promise\");\nvar _promise2 = _interopRequireDefault(_promise);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar BACKSPACE_INPUT_TYPE = \"deleteContentBackward\";\nvar EMPTY_CHAR = \" \";\nvar DefaultMaskStrategy = function (_BaseMaskStrategy) {\n  _inherits(DefaultMaskStrategy, _BaseMaskStrategy);\n  function DefaultMaskStrategy() {\n    _classCallCheck(this, DefaultMaskStrategy);\n    return _possibleConstructorReturn(this, (DefaultMaskStrategy.__proto__ || Object.getPrototypeOf(DefaultMaskStrategy)).apply(this, arguments));\n  }\n  _createClass(DefaultMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function value() {\n      return \"default\";\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function value() {\n      return [].concat(_toConsumableArray(_get(DefaultMaskStrategy.prototype.__proto__ || Object.getPrototypeOf(DefaultMaskStrategy.prototype), \"getHandleEventNames\", this).call(this)), [\"keyPress\"]);\n    }\n  }, {\n    key: \"_keyPressHandler\",\n    value: function value(event) {\n      if (this._keyPressHandled) {\n        return;\n      }\n      this._keyPressHandled = true;\n      if (this.editor._isControlKeyFired(event)) {\n        return;\n      }\n      var editor = this.editor;\n      editor._maskKeyHandler(event, function () {\n        return editor._handleKey((0, _utils.getChar)(event));\n      });\n    }\n  }, {\n    key: \"_inputHandler\",\n    value: function value(event) {\n      if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {\n        this._handleBackspaceInput(event);\n      }\n      if (this._keyPressHandled) {\n        return;\n      }\n      this._keyPressHandled = true;\n      var inputValue = this.editorInput().val();\n      var caret = this.editorCaret();\n      if (!caret.end) {\n        return;\n      }\n      caret.start = caret.end - 1;\n      var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);\n      var char = inputValue[caret.start];\n      this.editorInput().val(oldValue);\n      this._inputHandlerTimer = setTimeout(function () {\n        var _this2 = this;\n        this._caret({\n          start: caret.start,\n          end: caret.start\n        });\n        this._maskKeyHandler(event, function () {\n          return _this2._handleKey(char);\n        });\n      }.bind(this.editor));\n    }\n  }, {\n    key: \"_backspaceHandler\",\n    value: function value(event) {\n      var _this3 = this;\n      var editor = this.editor;\n      this._keyPressHandled = true;\n      var afterBackspaceHandler = function afterBackspaceHandler(needAdjustCaret, callBack) {\n        if (needAdjustCaret) {\n          editor._direction(_this3.DIRECTION.FORWARD);\n          editor._adjustCaret();\n        }\n        var currentCaret = _this3.editorCaret();\n        return new _promise2.default(function (resolve) {\n          clearTimeout(_this3._backspaceHandlerTimeout);\n          _this3._backspaceHandlerTimeout = setTimeout(function () {\n            callBack(currentCaret);\n            resolve();\n          });\n        });\n      };\n      editor._maskKeyHandler(event, function () {\n        if (editor._hasSelection()) {\n          return afterBackspaceHandler(true, function (currentCaret) {\n            editor._displayMask(currentCaret);\n            editor._maskRulesChain.reset();\n          });\n        }\n        if (editor._tryMoveCaretBackward()) {\n          return afterBackspaceHandler(false, function (currentCaret) {\n            _this3.editorCaret(currentCaret);\n          });\n        }\n        editor._handleKey(EMPTY_CHAR, _this3.DIRECTION.BACKWARD);\n        return afterBackspaceHandler(true, function (currentCaret) {\n          editor._displayMask(currentCaret);\n          editor._maskRulesChain.reset();\n        });\n      });\n    }\n  }, {\n    key: \"_backspaceInputHandled\",\n    value: function value(inputType) {\n      return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;\n    }\n  }, {\n    key: \"_handleBackspaceInput\",\n    value: function value(event) {\n      var _editorCaret = this.editorCaret(),\n        start = _editorCaret.start,\n        end = _editorCaret.end;\n      this.editorCaret({\n        start: start + 1,\n        end: end + 1\n      });\n      this._backspaceHandler(event);\n    }\n  }, {\n    key: \"clean\",\n    value: function value() {\n      _get(DefaultMaskStrategy.prototype.__proto__ || Object.getPrototypeOf(DefaultMaskStrategy.prototype), \"clean\", this).call(this);\n      clearTimeout(this._inputHandlerTimer);\n    }\n  }]);\n  return DefaultMaskStrategy;\n}(_uiText_editorMaskStrategy2.default);\nexports.default = DefaultMaskStrategy;","map":null,"metadata":{},"sourceType":"script"}