{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/date_serialization.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar config = require(\"../config\"),\n  getLDMLFormatter = require(\"../../localization/ldml/date.formatter\").getFormatter,\n  defaultDateNames = require(\"../../localization/default_date_names\"),\n  typeUtils = require(\"./type\"),\n  isString = typeUtils.isString,\n  isDate = typeUtils.isDate,\n  isNumber = typeUtils.isNumeric;\nvar NUMBER_SERIALIZATION_FORMAT = \"number\",\n  DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\",\n  DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\nvar MILLISECOND_LENGHT = 3;\nvar dateParser = function dateParser(text, skipISO8601Parsing) {\n  var result;\n  var parsedValue;\n  if (isString(text) && !skipISO8601Parsing) {\n    result = parseISO8601String(text);\n  }\n  if (!result) {\n    parsedValue = !isDate(text) && Date.parse(text);\n    result = isNumber(parsedValue) ? new Date(parsedValue) : text;\n  }\n  return result;\n};\nvar parseISO8601String = function parseISO8601String(text) {\n  var parts = text.match(ISO8601_PATTERN);\n  var timePart = function timePart(part) {\n    return +part || 0;\n  };\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n    if (parts) {\n      return new Date(0, 0, 0, timePart(parts[1]), timePart(parts[2]), timePart(parts[4]));\n    }\n    return;\n  }\n  var year = parts[1],\n    month = --parts[3],\n    day = parts[5],\n    timeZoneHour = 0,\n    timeZoneMinute = 0;\n  timeZoneHour = timePart(parts[14]);\n  timeZoneMinute = timePart(parts[16]);\n  if (\"-\" === parts[13]) {\n    timeZoneHour = -timeZoneHour;\n    timeZoneMinute = -timeZoneMinute;\n  }\n  var hour = timePart(parts[6]) - timeZoneHour,\n    minute = timePart(parts[8]) - timeZoneMinute,\n    second = timePart(parts[10]),\n    parseMilliseconds = function parseMilliseconds(part) {\n      part = part || \"\";\n      return timePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length);\n    },\n    millisecond = parseMilliseconds(parts[11]);\n  if (parts[12]) {\n    return new Date(Date.UTC(year, month, day, hour, minute, second, millisecond));\n  }\n  return new Date(year, month, day, hour, minute, second, millisecond);\n};\nvar getIso8601Format = function getIso8601Format(text, useUtc) {\n  var parts = text.match(ISO8601_PATTERN),\n    result = \"\";\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n    if (parts) {\n      return parts[3] ? \"HH:mm:ss\" : \"HH:mm\";\n    }\n    return;\n  }\n  for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\n    if (parts[i]) {\n      result += ISO8601_PATTERN_PARTS[i] || parts[i];\n    }\n  }\n  if (\"Z\" === parts[12]) {\n    result += \"'Z'\";\n  }\n  if (parts[14]) {\n    if (parts[15]) {\n      result += \"xxx\";\n    } else {\n      if (parts[16]) {\n        result += \"xx\";\n      } else {\n        result += \"x\";\n      }\n    }\n  }\n  return result;\n};\nvar deserializeDate = function deserializeDate(value) {\n  if (\"number\" === typeof value) {\n    return new Date(value);\n  }\n  return dateParser(value, !config().forceIsoDateParsing);\n};\nvar serializeDate = function serializeDate(value, serializationFormat) {\n  if (!serializationFormat) {\n    return value;\n  }\n  if (!isDate(value)) {\n    return null;\n  }\n  if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\n    return value && value.valueOf ? value.valueOf() : null;\n  }\n  return getLDMLFormatter(serializationFormat, defaultDateNames)(value);\n};\nvar getDateSerializationFormat = function getDateSerializationFormat(value) {\n  if (\"number\" === typeof value) {\n    return NUMBER_SERIALIZATION_FORMAT;\n  } else {\n    if (isString(value)) {\n      var format;\n      if (config().forceIsoDateParsing) {\n        format = getIso8601Format(value);\n      }\n      if (format) {\n        return format;\n      } else {\n        if (value.indexOf(\":\") >= 0) {\n          return DATETIME_SERIALIZATION_FORMAT;\n        } else {\n          return DATE_SERIALIZATION_FORMAT;\n        }\n      }\n    } else {\n      if (value) {\n        return null;\n      }\n    }\n  }\n};\nmodule.exports = {\n  dateParser: dateParser,\n  deserializeDate: deserializeDate,\n  serializeDate: serializeDate,\n  getDateSerializationFormat: getDateSerializationFormat\n};","map":null,"metadata":{},"sourceType":"script"}