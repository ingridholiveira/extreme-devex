{"ast":null,"code":"/**\r\n * DevExtreme (ui/select_box.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  commonUtils = require(\"../core/utils/common\"),\n  typeUtils = require(\"../core/utils/type\"),\n  isDefined = typeUtils.isDefined,\n  isPromise = typeUtils.isPromise,\n  extend = require(\"../core/utils/extend\").extend,\n  inArray = require(\"../core/utils/array\").inArray,\n  each = require(\"../core/utils/iterator\").each,\n  deferredUtils = require(\"../core/utils/deferred\"),\n  getPublicElement = require(\"../core/utils/dom\").getPublicElement,\n  Deferred = deferredUtils.Deferred,\n  errors = require(\"../core/errors\"),\n  domAdapter = require(\"../core/dom_adapter\"),\n  inkRipple = require(\"./widget/utils.ink_ripple\"),\n  messageLocalization = require(\"../localization/message\"),\n  registerComponent = require(\"../core/component_registrator\"),\n  DropDownList = require(\"./drop_down_editor/ui.drop_down_list\");\nvar DISABLED_STATE_SELECTOR = \".dx-state-disabled\",\n  SELECTBOX_CLASS = \"dx-selectbox\",\n  SELECTBOX_POPUP_CLASS = \"dx-selectbox-popup\",\n  SELECTBOX_CONTAINER_CLASS = \"dx-selectbox-container\",\n  SELECTBOX_POPUP_WRAPPER_CLASS = \"dx-selectbox-popup-wrapper\";\nvar SelectBox = DropDownList.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var that = this,\n      parent = this.callBase(),\n      clearSelectBox = function clearSelectBox(e) {\n        var isEditable = this._isEditable();\n        if (!isEditable) {\n          if (this.option(\"showClearButton\")) {\n            e.preventDefault();\n            this.reset();\n          }\n        } else {\n          if (this._valueSubstituted()) {\n            this._preventFiltering = true;\n          }\n        }\n        this._preventSubstitution = true;\n      };\n    var searchIfNeeded = function searchIfNeeded() {\n      if (that.option(\"searchEnabled\") && that._valueSubstituted()) {\n        that._searchHandler();\n      }\n    };\n    return extend({}, parent, {\n      tab: function tab() {\n        if (this.option(\"opened\") && \"instantly\" === this.option(\"applyValueMode\")) {\n          this._cleanInputSelection();\n        }\n        if (this._wasSearch()) {\n          this._clearFilter();\n        }\n        parent.tab && parent.tab.apply(this, arguments);\n      },\n      upArrow: function upArrow() {\n        if (parent.upArrow && parent.upArrow.apply(this, arguments)) {\n          if (!this.option(\"opened\")) {\n            this._setNextValue(-1);\n          }\n          return true;\n        }\n      },\n      downArrow: function downArrow() {\n        if (parent.downArrow && parent.downArrow.apply(this, arguments)) {\n          if (!this.option(\"opened\")) {\n            this._setNextValue(1);\n          }\n          return true;\n        }\n      },\n      leftArrow: function leftArrow() {\n        searchIfNeeded();\n        parent.leftArrow && parent.leftArrow.apply(this, arguments);\n      },\n      rightArrow: function rightArrow() {\n        searchIfNeeded();\n        parent.rightArrow && parent.rightArrow.apply(this, arguments);\n      },\n      home: function home() {\n        searchIfNeeded();\n        parent.home && parent.home.apply(this, arguments);\n      },\n      end: function end() {\n        searchIfNeeded();\n        parent.end && parent.end.apply(this, arguments);\n      },\n      escape: function escape() {\n        parent.escape && parent.escape.apply(this, arguments);\n        this._cancelEditing();\n      },\n      enter: function enter(e) {\n        var isOpened = this.option(\"opened\");\n        var inputText = this._input().val().trim();\n        var isCustomText = inputText && this._list && !this._list.option(\"focusedElement\");\n        if (!inputText && this.option(\"value\") && this.option(\"allowClearing\")) {\n          this.option({\n            selectedItem: null,\n            value: null\n          });\n          this.close();\n        } else {\n          if (this.option(\"acceptCustomValue\")) {\n            e.preventDefault();\n            if (isCustomText) {\n              this._valueChangeEventHandler();\n              if (isOpened) {\n                this._toggleOpenState();\n              }\n            }\n            return isOpened;\n          }\n          if (parent.enter && parent.enter.apply(this, arguments)) {\n            return isOpened;\n          }\n        }\n      },\n      space: function space(e) {\n        var isOpened = this.option(\"opened\"),\n          isSearchEnabled = this.option(\"searchEnabled\"),\n          acceptCustomValue = this.option(\"acceptCustomValue\");\n        if (!isOpened || isSearchEnabled || acceptCustomValue) {\n          return;\n        }\n        e.preventDefault();\n        this._valueChangeEventHandler(e);\n        return true;\n      },\n      backspace: clearSelectBox,\n      del: clearSelectBox\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      placeholder: messageLocalization.format(\"Select\"),\n      fieldTemplate: null,\n      valueChangeEvent: \"change\",\n      acceptCustomValue: false,\n      onCustomItemCreating: function onCustomItemCreating(e) {\n        if (!isDefined(e.customItem)) {\n          e.customItem = e.text;\n        }\n      },\n      showSelectionControls: false,\n      autocompletionEnabled: true,\n      allowClearing: true,\n      tooltipEnabled: false,\n      openOnFieldClick: true,\n      showDropDownButton: true,\n      displayCustomValue: false,\n      _isAdaptablePopupPosition: false,\n      useInkRipple: false,\n      useHiddenSubmitElement: true\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n    this._initCustomItemCreatingAction();\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(SELECTBOX_CLASS);\n    this._renderTooltip();\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this.callBase();\n    this._$container.addClass(SELECTBOX_CONTAINER_CLASS);\n  },\n  _renderInkRipple: function _renderInkRipple() {\n    this._inkRipple = inkRipple.render();\n  },\n  _toggleActiveState: function _toggleActiveState($element, value, e) {\n    this.callBase.apply(this, arguments);\n    if (!this._inkRipple || this._isEditable()) {\n      return;\n    }\n    var config = {\n      element: this._inputWrapper(),\n      event: e\n    };\n    if (value) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _createPopup: function _createPopup() {\n    this.callBase();\n    this._popup.$element().addClass(SELECTBOX_POPUP_CLASS);\n  },\n  _popupWrapperClass: function _popupWrapperClass() {\n    return this.callBase() + \" \" + SELECTBOX_POPUP_WRAPPER_CLASS;\n  },\n  _cancelEditing: function _cancelEditing() {\n    if (!this.option(\"searchEnabled\") && this._list) {\n      this._focusListElement(null);\n      this._updateField(this.option(\"selectedItem\"));\n    }\n  },\n  _renderOpenedState: function _renderOpenedState() {\n    this.callBase();\n    if (this.option(\"opened\")) {\n      this._scrollToSelectedItem();\n      this._focusSelectedElement();\n    }\n  },\n  _focusSelectedElement: function _focusSelectedElement() {\n    var searchValue = this._searchValue();\n    if (!searchValue) {\n      this._focusListElement(null);\n      return;\n    }\n    var $listItems = this._list._itemElements(),\n      index = inArray(this.option(\"selectedItem\"), this.option(\"items\")),\n      focusedElement = index >= 0 && !this._isCustomItemSelected() ? $listItems.eq(index) : null;\n    this._focusListElement(focusedElement);\n  },\n  _renderFocusedElement: function _renderFocusedElement() {\n    if (!this._list) {\n      return;\n    }\n    var searchValue = this._searchValue();\n    if (!searchValue || this.option(\"acceptCustomValue\")) {\n      this._focusListElement(null);\n      return;\n    }\n    var $listItems = this._list._itemElements(),\n      focusedElement = $listItems.not(DISABLED_STATE_SELECTOR).eq(0);\n    this._focusListElement(focusedElement);\n  },\n  _focusListElement: function _focusListElement(element) {\n    this._preventInputValueRender = true;\n    this._list.option(\"focusedElement\", getPublicElement(element));\n    delete this._preventInputValueRender;\n  },\n  _scrollToSelectedItem: function _scrollToSelectedItem() {\n    this._list && this._list.scrollToItem(this._list.option(\"selectedItem\"));\n  },\n  _listContentReadyHandler: function _listContentReadyHandler() {\n    this.callBase();\n    var isPaginate = this._dataSource && this._dataSource.paginate();\n    if (isPaginate && this._needPopupRepaint()) {\n      return;\n    }\n    this._scrollToSelectedItem();\n  },\n  _renderValue: function _renderValue() {\n    this._renderInputValue();\n    this._setSubmitValue();\n    return new Deferred().resolve();\n  },\n  _renderInputValue: function _renderInputValue() {\n    return this.callBase().always(function () {\n      this._renderInputValueAsync();\n    }.bind(this));\n  },\n  _renderInputValueAsync: function _renderInputValueAsync() {\n    this._renderTooltip();\n    this._renderInputValueImpl().always(function () {\n      this._refreshSelected();\n    }.bind(this));\n  },\n  _renderInputValueImpl: function _renderInputValueImpl() {\n    this._renderField();\n    return new Deferred().resolve();\n  },\n  _setNextItem: function _setNextItem(step) {\n    var item = this._calcNextItem(step),\n      value = this._valueGetter(item);\n    this._setValue(value);\n  },\n  _setNextValue: function _setNextValue(step) {\n    var dataSourceIsLoaded = this._dataSource.isLoaded() ? new Deferred().resolve() : this._dataSource.load();\n    dataSourceIsLoaded.done(function () {\n      var selectedIndex = this._getSelectedIndex(),\n        isLastPage = this._dataSource.isLastPage(),\n        isLastItem = selectedIndex === this._items().length - 1;\n      if (!isLastPage && isLastItem && step > 0) {\n        if (!this._popup) {\n          this._createPopup();\n        }\n        this._list._loadNextPage().done(this._setNextItem.bind(this, step));\n      } else {\n        this._setNextItem(step);\n      }\n    }.bind(this));\n  },\n  _setSelectedItem: function _setSelectedItem(item) {\n    var isUnknownItem = !this._isCustomValueAllowed() && void 0 === item;\n    this.callBase(isUnknownItem ? null : item);\n  },\n  _isCustomValueAllowed: function _isCustomValueAllowed() {\n    return this.option(\"acceptCustomValue\") || this.callBase();\n  },\n  _displayValue: function _displayValue(item) {\n    item = !isDefined(item) && this._isCustomValueAllowed() ? this.option(\"value\") : item;\n    return this.callBase(item);\n  },\n  _listConfig: function _listConfig() {\n    var result = extend(this.callBase(), {\n      pageLoadMode: \"scrollBottom\",\n      onSelectionChanged: this._getSelectionChangeHandler(),\n      selectedItem: this.option(\"selectedItem\"),\n      onFocusedItemChanged: this._listFocusedItemChangeHandler.bind(this)\n    });\n    if (this.option(\"showSelectionControls\")) {\n      extend(result, {\n        showSelectionControls: true,\n        selectionByClick: true\n      });\n    }\n    return result;\n  },\n  _listFocusedItemChangeHandler: function _listFocusedItemChangeHandler(e) {\n    if (this._preventInputValueRender) {\n      return;\n    }\n    var list = e.component,\n      focusedElement = $(list.option(\"focusedElement\")),\n      focusedItem = list._getItemData(focusedElement);\n    this._updateField(focusedItem);\n  },\n  _updateField: function _updateField(item) {\n    var fieldTemplate = this._getTemplateByOption(\"fieldTemplate\");\n    if (!(fieldTemplate && this.option(\"fieldTemplate\"))) {\n      this._renderDisplayText(this._displayGetter(item));\n      return;\n    }\n    this._renderField();\n  },\n  _getSelectionChangeHandler: function _getSelectionChangeHandler() {\n    return this.option(\"showSelectionControls\") ? this._selectionChangeHandler.bind(this) : commonUtils.noop;\n  },\n  _selectionChangeHandler: function _selectionChangeHandler(e) {\n    each(e.addedItems || [], function (_, addedItem) {\n      this._setValue(this._valueGetter(addedItem));\n    }.bind(this));\n  },\n  _getActualSearchValue: function _getActualSearchValue() {\n    return this._dataSource.searchValue();\n  },\n  _toggleOpenState: function _toggleOpenState(isVisible) {\n    if (this.option(\"disabled\")) {\n      return;\n    }\n    isVisible = arguments.length ? isVisible : !this.option(\"opened\");\n    if (!isVisible) {\n      this._restoreInputText();\n    }\n    if (this._wasSearch() && isVisible) {\n      this._wasSearch(false);\n      var showDataImmediately = this.option(\"showDataBeforeSearch\") || 0 === this.option(\"minSearchLength\");\n      if (showDataImmediately && this._dataSource) {\n        if (this._searchTimer) {\n          return;\n        }\n        var searchValue = this._getActualSearchValue();\n        searchValue && this._wasSearch(true);\n        this._filterDataSource(searchValue || null);\n      } else {\n        this._setListOption(\"items\", []);\n      }\n    }\n    if (isVisible) {\n      this._scrollToSelectedItem();\n    }\n    this.callBase(isVisible);\n  },\n  _renderTooltip: function _renderTooltip() {\n    if (this.option(\"tooltipEnabled\")) {\n      this.$element().attr(\"title\", this.option(\"displayValue\"));\n    }\n  },\n  _renderDimensions: function _renderDimensions() {\n    this.callBase();\n    this._setPopupOption(\"width\");\n  },\n  _isValueEqualInputText: function _isValueEqualInputText() {\n    var initialSelectedItem = this.option(\"selectedItem\");\n    var value = this._displayGetter(initialSelectedItem);\n    var displayValue = value ? String(value) : \"\";\n    var inputText = this._searchValue();\n    return displayValue === inputText;\n  },\n  _popupHidingHandler: function _popupHidingHandler() {\n    if (this._isValueEqualInputText()) {\n      this._cancelEditing();\n    }\n    this.callBase();\n  },\n  _restoreInputText: function _restoreInputText() {\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n    this._loadItemDeferred && this._loadItemDeferred.always(function () {\n      var initialSelectedItem = this.option(\"selectedItem\");\n      if (this.option(\"acceptCustomValue\")) {\n        this._updateField(initialSelectedItem);\n        return;\n      }\n      if (this.option(\"searchEnabled\")) {\n        if (!this._searchValue() && this.option(\"allowClearing\")) {\n          this._clearTextValue();\n          return;\n        }\n      }\n      if (this._isValueEqualInputText()) {\n        return;\n      }\n      this._renderInputValue().always(function (selectedItem) {\n        var newSelectedItem = commonUtils.ensureDefined(selectedItem, initialSelectedItem);\n        this._setSelectedItem(newSelectedItem);\n        this._updateField(newSelectedItem);\n        this._clearFilter();\n      }.bind(this));\n    }.bind(this));\n  },\n  _focusOutHandler: function _focusOutHandler(e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this._clearSearchTimer();\n      this._restoreInputText();\n    }\n    this.callBase(e);\n  },\n  _clearTextValue: function _clearTextValue() {\n    this.option(\"value\", null);\n  },\n  _shouldOpenPopup: function _shouldOpenPopup() {\n    return this._needPassDataSourceToList();\n  },\n  _isFocused: function _isFocused() {\n    var activeElement = domAdapter.getActiveElement();\n    return this.callBase() && $(activeElement).closest(this._input()).length > 0;\n  },\n  _renderValueChangeEvent: function _renderValueChangeEvent() {\n    if (this._isEditable()) {\n      this.callBase();\n    }\n  },\n  _isEditable: function _isEditable() {\n    return this.option(\"acceptCustomValue\") || this.option(\"searchEnabled\");\n  },\n  _fieldRenderData: function _fieldRenderData() {\n    var $listFocused = this._list && this.option(\"opened\") && $(this._list.option(\"focusedElement\"));\n    if ($listFocused && $listFocused.length) {\n      return this._list._getItemData($listFocused);\n    }\n    return this.option(\"selectedItem\");\n  },\n  _readOnlyPropValue: function _readOnlyPropValue() {\n    return !this._isEditable() || this.option(\"readOnly\");\n  },\n  _isSelectedValue: function _isSelectedValue(value) {\n    return this._isValueEquals(value, this.option(\"value\"));\n  },\n  _shouldCloseOnItemClick: function _shouldCloseOnItemClick() {\n    return !(this.option(\"showSelectionControls\") && \"single\" !== this.option(\"selectionMode\"));\n  },\n  _listItemClickHandler: function _listItemClickHandler(e) {\n    var previousValue = this._getCurrentValue();\n    this._focusListElement($(e.itemElement));\n    this._saveValueChangeEvent(e.event);\n    if (this._shouldClearFilter()) {\n      this._clearFilter();\n    }\n    this._completeSelection(this._valueGetter(e.itemData));\n    if (this._shouldCloseOnItemClick()) {\n      this.option(\"opened\", false);\n    }\n    if (this.option(\"searchEnabled\") && previousValue === this._valueGetter(e.itemData)) {\n      this._updateField(e.itemData);\n    }\n  },\n  _shouldClearFilter: function _shouldClearFilter() {\n    return this._wasSearch();\n  },\n  _completeSelection: function _completeSelection(value) {\n    this._setValue(value);\n  },\n  _loadItem: function _loadItem(value, cache) {\n    var that = this,\n      deferred = new Deferred();\n    this.callBase(value, cache).done(function (item) {\n      deferred.resolve(item);\n    }.bind(this)).fail(function () {\n      var selectedItem = that.option(\"selectedItem\");\n      if (that.option(\"acceptCustomValue\") && value === that._valueGetter(selectedItem)) {\n        deferred.resolve(selectedItem);\n      } else {\n        deferred.reject();\n      }\n    }.bind(this));\n    return deferred.promise();\n  },\n  _loadInputValue: function _loadInputValue(value, callback) {\n    this._loadItemDeferred = this._loadItem(value).always(callback);\n    return this._loadItemDeferred;\n  },\n  _isCustomItemSelected: function _isCustomItemSelected() {\n    var selectedItem = this.option(\"selectedItem\"),\n      searchValue = this._searchValue(),\n      selectedItemText = this._displayGetter(selectedItem);\n    return !selectedItemText || searchValue !== selectedItemText.toString();\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler() {\n    if (this.option(\"acceptCustomValue\") && this._isCustomItemSelected()) {\n      this._customItemAddedHandler();\n    }\n  },\n  _initCustomItemCreatingAction: function _initCustomItemCreatingAction() {\n    this._customItemCreatingAction = this._createActionByOption(\"onCustomItemCreating\");\n  },\n  _createCustomItem: function _createCustomItem(text) {\n    var params = {\n        text: text\n      },\n      actionResult = this._customItemCreatingAction(params),\n      item = commonUtils.ensureDefined(actionResult, params.customItem);\n    if (isDefined(actionResult)) {\n      errors.log(\"W0015\", \"onCustomItemCreating\", \"customItem\");\n    }\n    return item;\n  },\n  _customItemAddedHandler: function _customItemAddedHandler() {\n    var searchValue = this._searchValue(),\n      item = this._createCustomItem(searchValue);\n    if (void 0 === item) {\n      this._renderValue();\n      throw errors.Error(\"E0121\");\n    }\n    if (isPromise(item)) {\n      deferredUtils.fromPromise(item).done(this._setCustomItem.bind(this)).fail(this._setCustomItem.bind(this, null));\n    } else {\n      this._setCustomItem(item);\n    }\n  },\n  _setCustomItem: function _setCustomItem(item) {\n    if (this._disposed) {\n      return;\n    }\n    item = item || null;\n    this.option(\"selectedItem\", item);\n    if (this._shouldClearFilter()) {\n      this._filterDataSource(null);\n    }\n    this._setValue(this._valueGetter(item));\n    this._renderDisplayText(this._displayGetter(item));\n  },\n  _clearValueHandler: function _clearValueHandler(e) {\n    this.callBase(e);\n    return false;\n  },\n  _wasSearch: function _wasSearch(value) {\n    if (!arguments.length) {\n      return this._wasSearchValue;\n    }\n    this._wasSearchValue = value;\n  },\n  _searchHandler: function _searchHandler(e) {\n    if (this._preventFiltering) {\n      delete this._preventFiltering;\n      return;\n    }\n    if (this._needPassDataSourceToList()) {\n      this._wasSearch(true);\n    }\n    this.callBase(e);\n  },\n  _dataSourceFiltered: function _dataSourceFiltered(searchValue) {\n    this.callBase();\n    if (null !== searchValue) {\n      this._renderInputSubstitution();\n      this._renderFocusedElement();\n    }\n  },\n  _valueSubstituted: function _valueSubstituted() {\n    var input = this._input().get(0),\n      isAllSelected = 0 === input.selectionStart && input.selectionEnd === this._searchValue().length,\n      inputHasSelection = input.selectionStart !== input.selectionEnd;\n    return this._wasSearch() && inputHasSelection && !isAllSelected;\n  },\n  _shouldSubstitutionBeRendered: function _shouldSubstitutionBeRendered() {\n    return this.option(\"autocompletionEnabled\") && !this._preventSubstitution && this.option(\"searchEnabled\") && !this.option(\"acceptCustomValue\") && \"startswith\" === this.option(\"searchMode\");\n  },\n  _renderInputSubstitution: function _renderInputSubstitution() {\n    if (!this._shouldSubstitutionBeRendered()) {\n      delete this._preventSubstitution;\n      return;\n    }\n    var item = this._list && this._getPlainItems(this._list.option(\"items\"))[0];\n    if (!item) {\n      return;\n    }\n    var $input = this._input(),\n      valueLength = $input.val().length;\n    if (0 === valueLength) {\n      return;\n    }\n    var inputElement = $input.get(0),\n      displayValue = this._displayGetter(item).toString();\n    inputElement.value = displayValue;\n    this._caret({\n      start: valueLength,\n      end: displayValue.length\n    });\n  },\n  _cleanInputSelection: function _cleanInputSelection() {\n    var inputElement = this._input().get(0),\n      endPosition = inputElement.value.length;\n    inputElement.selectionStart = endPosition;\n    inputElement.selectionEnd = endPosition;\n  },\n  _dispose: function _dispose() {\n    this._renderInputValueAsync = commonUtils.noop;\n    delete this._loadItemDeferred;\n    this.callBase();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"_isAdaptablePopupPosition\":\n      case \"autocompletionEnabled\":\n        break;\n      case \"onCustomItemCreating\":\n        this._initCustomItemCreatingAction();\n        break;\n      case \"tooltipEnabled\":\n        this._renderTooltip();\n        break;\n      case \"displayCustomValue\":\n      case \"acceptCustomValue\":\n      case \"showSelectionControls\":\n      case \"useInkRipple\":\n        this._invalidate();\n        break;\n      case \"selectedItem\":\n        if (args.previousValue !== args.value) {\n          this.callBase(args);\n        }\n        break;\n      case \"allowClearing\":\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function _clean() {\n    delete this._inkRipple;\n    this.callBase();\n  }\n});\nregisterComponent(\"dxSelectBox\", SelectBox);\nmodule.exports = SelectBox;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}