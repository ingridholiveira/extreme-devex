{"ast":null,"code":"/**\r\n * DevExtreme (data/utils.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../core/utils/type\");\nvar _type2 = _interopRequireDefault(_type);\nvar _dom_adapter = require(\"../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _ready_callbacks = require(\"../core/utils/ready_callbacks\");\nvar _window = require(\"../core/utils/window\");\nvar _iterator = require(\"../core/utils/iterator\");\nvar _data = require(\"../core/utils/data\");\nvar _deferred = require(\"../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nvar XHR_ERROR_UNLOAD = \"DEVEXTREME_XHR_ERROR_UNLOAD\";\nvar normalizeBinaryCriterion = function normalizeBinaryCriterion(crit) {\n  return [crit[0], crit.length < 3 ? \"=\" : String(crit[1]).toLowerCase(), crit.length < 2 ? true : crit[crit.length - 1]];\n};\nvar normalizeSortingInfo = function normalizeSortingInfo(info) {\n  if (!Array.isArray(info)) {\n    info = [info];\n  }\n  return (0, _iterator.map)(info, function (i) {\n    var result = {\n      selector: (0, _type.isFunction)(i) || \"string\" === typeof i ? i : i.getter || i.field || i.selector,\n      desc: !!(i.desc || \"d\" === String(i.dir).charAt(0).toLowerCase())\n    };\n    if (i.compare) {\n      result.compare = i.compare;\n    }\n    return result;\n  });\n};\nvar errorMessageFromXhr = function () {\n  var textStatusMessages = {\n    timeout: \"Network connection timeout\",\n    error: \"Unspecified network error\",\n    parsererror: \"Unexpected server response\"\n  };\n  var explainTextStatus = function explainTextStatus(textStatus) {\n    var result = textStatusMessages[textStatus];\n    if (!result) {\n      return textStatus;\n    }\n    return result;\n  };\n  var unloading;\n  (0, _ready_callbacks.add)(function () {\n    var window = (0, _window.getWindow)();\n    _dom_adapter2.default.listen(window, \"beforeunload\", function () {\n      unloading = true;\n    });\n  });\n  return function (xhr, textStatus) {\n    if (unloading) {\n      return XHR_ERROR_UNLOAD;\n    }\n    if (xhr.status < 400) {\n      return explainTextStatus(textStatus);\n    }\n    return xhr.statusText;\n  };\n}();\nvar aggregators = {\n  count: {\n    seed: 0,\n    step: function step(count) {\n      return 1 + count;\n    }\n  },\n  sum: {\n    seed: 0,\n    step: function step(sum, item) {\n      return sum + item;\n    }\n  },\n  min: {\n    step: function step(min, item) {\n      return item < min ? item : min;\n    }\n  },\n  max: {\n    step: function step(max, item) {\n      return item > max ? item : max;\n    }\n  },\n  avg: {\n    seed: [0, 0],\n    step: function step(pair, value) {\n      return [pair[0] + value, pair[1] + 1];\n    },\n    finalize: function finalize(pair) {\n      return pair[1] ? pair[0] / pair[1] : NaN;\n    }\n  }\n};\nvar processRequestResultLock = function () {\n  var lockDeferred,\n    lockCount = 0;\n  var obtain = function obtain() {\n    if (0 === lockCount) {\n      lockDeferred = new _deferred.Deferred();\n    }\n    lockCount++;\n  };\n  var release = function release() {\n    lockCount--;\n    if (lockCount < 1) {\n      lockDeferred.resolve();\n    }\n  };\n  var promise = function promise() {\n    var deferred = 0 === lockCount ? new _deferred.Deferred().resolve() : lockDeferred;\n    return deferred.promise();\n  };\n  var reset = function reset() {\n    lockCount = 0;\n    if (lockDeferred) {\n      lockDeferred.resolve();\n    }\n  };\n  return {\n    obtain: obtain,\n    release: release,\n    promise: promise,\n    reset: reset\n  };\n}();\nfunction isDisjunctiveOperator(condition) {\n  return /^(or|\\|\\||\\|)$/i.test(condition);\n}\nfunction isConjunctiveOperator(condition) {\n  return /^(and|&&|&)$/i.test(condition);\n}\nvar keysEqual = function keysEqual(keyExpr, key1, key2) {\n  if (Array.isArray(keyExpr)) {\n    var name,\n      names = (0, _iterator.map)(key1, function (v, k) {\n        return k;\n      });\n    for (var i = 0; i < names.length; i++) {\n      name = names[i];\n      if ((0, _data.toComparable)(key1[name], true) != (0, _data.toComparable)(key2[name], true)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return (0, _data.toComparable)(key1, true) == (0, _data.toComparable)(key2, true);\n};\nvar BASE64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar base64_encode = function base64_encode(input) {\n  if (!Array.isArray(input)) {\n    input = stringToByteArray(String(input));\n  }\n  var result = \"\";\n  function getBase64Char(index) {\n    return BASE64_CHARS.charAt(index);\n  }\n  for (var i = 0; i < input.length; i += 3) {\n    var octet1 = input[i],\n      octet2 = input[i + 1],\n      octet3 = input[i + 2];\n    result += (0, _iterator.map)([octet1 >> 2, (3 & octet1) << 4 | octet2 >> 4, isNaN(octet2) ? 64 : (15 & octet2) << 2 | octet3 >> 6, isNaN(octet3) ? 64 : 63 & octet3], getBase64Char).join(\"\");\n  }\n  return result;\n};\nvar stringToByteArray = function stringToByteArray(str) {\n  var code,\n    i,\n    bytes = [];\n  for (i = 0; i < str.length; i++) {\n    code = str.charCodeAt(i);\n    if (code < 128) {\n      bytes.push(code);\n    } else {\n      if (code < 2048) {\n        bytes.push(192 + (code >> 6), 128 + (63 & code));\n      } else {\n        if (code < 65536) {\n          bytes.push(224 + (code >> 12), 128 + (code >> 6 & 63), 128 + (63 & code));\n        } else {\n          if (code < 2097152) {\n            bytes.push(240 + (code >> 18), 128 + (code >> 12 & 63), 128 + (code >> 6 & 63), 128 + (63 & code));\n          }\n        }\n      }\n    }\n  }\n  return bytes;\n};\nvar isUnaryOperation = function isUnaryOperation(crit) {\n  return \"!\" === crit[0] && Array.isArray(crit[1]);\n};\nvar isGroupOperator = function isGroupOperator(value) {\n  return \"and\" === value || \"or\" === value;\n};\nvar isGroupCriterion = function isGroupCriterion(crit) {\n  var first = crit[0],\n    second = crit[1];\n  if (Array.isArray(first)) {\n    return true;\n  }\n  if (_type2.default.isFunction(first)) {\n    if (Array.isArray(second) || _type2.default.isFunction(second) || isGroupOperator(second)) {\n      return true;\n    }\n  }\n  return false;\n};\nvar trivialPromise = function trivialPromise() {\n  var d = new _deferred.Deferred();\n  return d.resolve.apply(d, arguments).promise();\n};\nvar rejectedPromise = function rejectedPromise() {\n  var d = new _deferred.Deferred();\n  return d.reject.apply(d, arguments).promise();\n};\nfunction throttle(func, timeout) {\n  var timeoutId, lastArgs;\n  return function () {\n    var _this = this;\n    lastArgs = arguments;\n    if (!timeoutId) {\n      timeoutId = setTimeout(function () {\n        timeoutId = void 0;\n        if (lastArgs) {\n          func.call(_this, lastArgs);\n        }\n      }, (0, _type.isFunction)(timeout) ? timeout() : timeout);\n    }\n    return timeoutId;\n  };\n}\nfunction throttleChanges(func, timeout) {\n  var cache = [],\n    throttled = throttle(function () {\n      func.call(this, cache);\n      cache = [];\n    }, timeout);\n  return function (changes) {\n    if (Array.isArray(changes)) {\n      var _cache;\n      (_cache = cache).push.apply(_cache, _toConsumableArray(changes));\n    }\n    return throttled.call(this, cache);\n  };\n}\nvar utils = {\n  XHR_ERROR_UNLOAD: XHR_ERROR_UNLOAD,\n  normalizeBinaryCriterion: normalizeBinaryCriterion,\n  normalizeSortingInfo: normalizeSortingInfo,\n  errorMessageFromXhr: errorMessageFromXhr,\n  aggregators: aggregators,\n  keysEqual: keysEqual,\n  throttleChanges: throttleChanges,\n  trivialPromise: trivialPromise,\n  rejectedPromise: rejectedPromise,\n  isDisjunctiveOperator: isDisjunctiveOperator,\n  isConjunctiveOperator: isConjunctiveOperator,\n  processRequestResultLock: processRequestResultLock,\n  isUnaryOperation: isUnaryOperation,\n  isGroupCriterion: isGroupCriterion,\n  base64_encode: base64_encode\n};\nmodule.exports = utils;","map":null,"metadata":{},"sourceType":"script"}