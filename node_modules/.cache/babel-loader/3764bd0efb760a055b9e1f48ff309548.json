{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _uiGrid_core = require(\"./ui.grid_core.columns_view\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _type = require(\"../../core/utils/type\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _uiGrid_core3 = require(\"./ui.grid_core.accessibility\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar CELL_CONTENT_CLASS = \"text-content\",\n  HEADERS_CLASS = \"headers\",\n  NOWRAP_CLASS = \"nowrap\",\n  ROW_CLASS_SELECTOR = \".dx-row\",\n  HEADER_ROW_CLASS = \"dx-header-row\",\n  COLUMN_LINES_CLASS = \"dx-column-lines\",\n  CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\",\n  CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\",\n  CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\",\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\",\n  TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\",\n  SORT_INDICATOR_CLASS = \"dx-sort-indicator\",\n  SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\",\n  HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\",\n  HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\",\n  MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      showColumnHeaders: true,\n      cellHintEnabled: true\n    };\n  },\n  views: {\n    columnHeadersView: _uiGrid_core2.default.ColumnsView.inherit(function () {\n      var createCellContent = function createCellContent(that, $cell, options) {\n        var showColumnLines,\n          $cellContent = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        that.setAria(\"role\", \"presentation\", $cellContent);\n        addCssClassesToCellContent(that, $cell, options.column, $cellContent);\n        showColumnLines = that.option(\"showColumnLines\");\n        return $cellContent[showColumnLines || \"right\" === options.column.alignment ? \"appendTo\" : \"prependTo\"]($cell);\n      };\n      var addCssClassesToCellContent = function addCssClassesToCellContent(that, $cell, column, $cellContent) {\n        var $indicatorElements = that._getIndicatorElements($cell, true),\n          $visibleIndicatorElements = that._getIndicatorElements($cell),\n          indicatorCount = $indicatorElements && $indicatorElements.length,\n          columnAlignment = that._getColumnAlignment(column.alignment);\n        $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"sort\")).length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$visibleIndicatorElements.children().filter(\".\" + that._getIndicatorClassName(\"sortIndex\")).length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length);\n      };\n      return {\n        _createTable: function _createTable() {\n          var $table = this.callBase.apply(this, arguments);\n          _events_engine2.default.on($table, \"mousedown selectstart\", this.createAction(function (e) {\n            var event = e.event;\n            if (event.shiftKey) {\n              event.preventDefault();\n            }\n          }));\n          return $table;\n        },\n        _isLegacyKeyboardNavigation: function _isLegacyKeyboardNavigation() {\n          return this.option(\"useLegacyKeyboardNavigation\");\n        },\n        _getDefaultTemplate: function _getDefaultTemplate(column) {\n          var that = this;\n          return function ($container, options) {\n            var $content = column.command ? $container : createCellContent(that, $container, options),\n              caption = \"expand\" !== column.command && column.caption;\n            if (caption) {\n              $content.text(caption);\n            } else {\n              if (column.command) {\n                $container.html(\"&nbsp;\");\n              }\n            }\n          };\n        },\n        _getHeaderTemplate: function _getHeaderTemplate(column) {\n          return column.headerCellTemplate || {\n            allowRenderToDetachedContainer: true,\n            render: this._getDefaultTemplate(column)\n          };\n        },\n        _processTemplate: function _processTemplate(template, options) {\n          var resultTemplate,\n            that = this,\n            column = options.column,\n            renderingTemplate = that.callBase(template);\n          if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\n            resultTemplate = {\n              render: function render(options) {\n                var $content = createCellContent(that, options.container, options.model);\n                renderingTemplate.render((0, _extend.extend)({}, options, {\n                  container: $content\n                }));\n              }\n            };\n          } else {\n            resultTemplate = renderingTemplate;\n          }\n          return resultTemplate;\n        },\n        _handleDataChanged: function _handleDataChanged(e) {\n          if (\"refresh\" !== e.changeType) {\n            return;\n          }\n          if (this._isGroupingChanged || this._requireReady) {\n            this._isGroupingChanged = false;\n            this.render();\n          }\n        },\n        _renderCell: function _renderCell($row, options) {\n          var $cell = this.callBase($row, options);\n          if (\"header\" === options.row.rowType) {\n            $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n            if (!this._isLegacyKeyboardNavigation()) {\n              if (options.column && !options.column.type) {\n                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n              }\n            }\n          }\n          return $cell;\n        },\n        _setCellAriaAttributes: function _setCellAriaAttributes($cell, cellOptions) {\n          this.callBase($cell, cellOptions);\n          if (\"header\" === cellOptions.rowType) {\n            this.setAria(\"role\", \"columnheader\", $cell);\n            if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\n              $cell.attr(\"id\", cellOptions.column.headerId);\n              this.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell);\n            }\n          }\n        },\n        _createRow: function _createRow(row) {\n          var $row = this.callBase(row).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n          if (\"header\" === row.rowType) {\n            $row.addClass(HEADER_ROW_CLASS);\n            if (!this._isLegacyKeyboardNavigation()) {\n              (0, _uiGrid_core3.registerKeyboardAction)(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this));\n            }\n          }\n          return $row;\n        },\n        _handleActionKeyDown: function _handleActionKeyDown(args) {\n          var event = args.event,\n            $target = (0, _renderer2.default)(event.target);\n          this._lastActionElement = event.target;\n          if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n            var headerFilterController = this.getController(\"headerFilter\"),\n              $column = $target.closest(\"td\"),\n              columnIndex = this.getColumnIndexByElement($column);\n            if (columnIndex >= 0) {\n              headerFilterController.showHeaderFilterMenu(columnIndex, false);\n            }\n          } else {\n            var $row = $target.closest(ROW_CLASS_SELECTOR);\n            this._processHeaderAction(event, $row);\n          }\n          event.preventDefault();\n        },\n        _renderCore: function _renderCore() {\n          var that = this,\n            $container = that.element();\n          if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\n            return;\n          }\n          $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\n          that.setAria(\"role\", \"presentation\", $container);\n          that._updateContent(that._renderTable());\n          if (that.getRowCount() > 1) {\n            $container.addClass(MULTI_ROW_HEADER_CLASS);\n          }\n          that.callBase.apply(that, arguments);\n        },\n        _renderRows: function _renderRows() {\n          var that = this;\n          if (that._dataController.isLoaded() || that._hasRowElements) {\n            that.callBase.apply(that, arguments);\n            that._hasRowElements = true;\n          }\n        },\n        _getRowVisibleColumns: function _getRowVisibleColumns(rowIndex) {\n          return this._columnsController.getVisibleColumns(rowIndex);\n        },\n        _renderRow: function _renderRow($table, options) {\n          options.columns = this._getRowVisibleColumns(options.row.rowIndex);\n          this.callBase($table, options);\n        },\n        _createCell: function _createCell(options) {\n          var column = options.column,\n            $cellElement = this.callBase.apply(this, arguments);\n          column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\n          return $cellElement;\n        },\n        _getRows: function _getRows() {\n          var i,\n            result = [],\n            rowCount = this.getRowCount();\n          if (this.option(\"showColumnHeaders\")) {\n            for (i = 0; i < rowCount; i++) {\n              result.push({\n                rowType: \"header\",\n                rowIndex: i\n              });\n            }\n          }\n          return result;\n        },\n        _getCellTemplate: function _getCellTemplate(options) {\n          if (\"header\" === options.rowType) {\n            return this._getHeaderTemplate(options.column);\n          }\n        },\n        _columnOptionChanged: function _columnOptionChanged(e) {\n          var changeTypes = e.changeTypes,\n            optionNames = e.optionNames;\n          if (changeTypes.grouping) {\n            this._isGroupingChanged = true;\n            return;\n          }\n          this.callBase(e);\n          if (optionNames.width || optionNames.visible) {\n            this.resizeCompleted.fire();\n          }\n        },\n        _isElementVisible: function _isElementVisible(elementOptions) {\n          return elementOptions && elementOptions.visible;\n        },\n        _alignCaptionByCenter: function _alignCaptionByCenter($cell) {\n          var $indicatorsContainer = this._getIndicatorContainer($cell, true);\n          if ($indicatorsContainer && $indicatorsContainer.length) {\n            $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\n            $indicatorsContainer = this._getIndicatorContainer($cell);\n            $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)));\n          }\n        },\n        _updateCell: function _updateCell($cell, options) {\n          if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _updateIndicator: function _updateIndicator($cell, column, indicatorName) {\n          var $indicatorElement = this.callBase.apply(this, arguments);\n          if (\"center\" === column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n          addCssClassesToCellContent(this, $cell, column);\n          return $indicatorElement;\n        },\n        _getIndicatorContainer: function _getIndicatorContainer($cell, returnAll) {\n          var $indicatorsContainer = this.callBase($cell);\n          return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\");\n        },\n        _isSortableElement: function _isSortableElement() {\n          return true;\n        },\n        getHeadersRowHeight: function getHeadersRowHeight() {\n          var $tableElement = this._getTableElement(),\n            $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\n          return $headerRows && $headerRows.toArray().reduce(function (sum, headerRow) {\n            return sum + (0, _renderer2.default)(headerRow).height();\n          }, 0) || 0;\n        },\n        getHeaderElement: function getHeaderElement(index) {\n          var columnElements = this.getColumnElements();\n          return columnElements && columnElements.eq(index);\n        },\n        getColumnElements: function getColumnElements(index, bandColumnIndex) {\n          var rowIndex,\n            result,\n            $cellElement,\n            visibleColumns,\n            that = this,\n            columnsController = that._columnsController,\n            rowCount = that.getRowCount();\n          if (that.option(\"showColumnHeaders\")) {\n            if (rowCount > 1 && (!(0, _type.isDefined)(index) || (0, _type.isDefined)(bandColumnIndex))) {\n              result = [];\n              visibleColumns = (0, _type.isDefined)(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\n              (0, _iterator.each)(visibleColumns, function (_, column) {\n                rowIndex = (0, _type.isDefined)(index) ? index : columnsController.getRowIndex(column.index);\n                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\n                $cellElement && result.push($cellElement.get(0));\n              });\n              return (0, _renderer2.default)(result);\n            } else {\n              if (!index || index < rowCount) {\n                return that.getCellElements(index || 0);\n              }\n            }\n          }\n        },\n        getColumnIndexByElement: function getColumnIndexByElement($cell) {\n          var cellIndex = this.getCellIndex($cell),\n            $row = $cell.closest(\".dx-row\"),\n            rowIndex = $row[0].rowIndex,\n            column = this.getColumns(rowIndex)[cellIndex];\n          return column ? column.index : -1;\n        },\n        getVisibleColumnIndex: function getVisibleColumnIndex(columnIndex, rowIndex) {\n          var column = this.getColumns()[columnIndex];\n          return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1;\n        },\n        getColumnWidths: function getColumnWidths() {\n          var $columnElements = this.getColumnElements();\n          if ($columnElements && $columnElements.length) {\n            return this._getWidths($columnElements);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        allowDragging: function allowDragging(column, sourceLocation, draggingPanels) {\n          var i,\n            draggingPanel,\n            rowIndex = column && this._columnsController.getRowIndex(column.index),\n            columns = this.getColumns(0 === rowIndex ? 0 : null),\n            draggableColumnCount = 0,\n            allowDrag = function allowDrag(column) {\n              return column.allowReordering || column.allowGrouping || column.allowHiding;\n            };\n          for (i = 0; i < columns.length; i++) {\n            if (allowDrag(columns[i])) {\n              draggableColumnCount++;\n            }\n          }\n          if (draggableColumnCount <= 1) {\n            return false;\n          } else {\n            if (!draggingPanels) {\n              return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering;\n            }\n          }\n          for (i = 0; i < draggingPanels.length; i++) {\n            draggingPanel = draggingPanels[i];\n            if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\n              return true;\n            }\n          }\n          return false;\n        },\n        getBoundingRect: function getBoundingRect() {\n          var offset,\n            that = this,\n            $columnElements = that.getColumnElements();\n          if ($columnElements && $columnElements.length) {\n            offset = that._getTableElement().offset();\n            return {\n              top: offset.top\n            };\n          }\n          return null;\n        },\n        getName: function getName() {\n          return \"headers\";\n        },\n        getColumnCount: function getColumnCount() {\n          var $columnElements = this.getColumnElements();\n          return $columnElements ? $columnElements.length : 0;\n        },\n        isVisible: function isVisible() {\n          return this.option(\"showColumnHeaders\");\n        },\n        optionChanged: function optionChanged(args) {\n          var that = this;\n          switch (args.name) {\n            case \"showColumnHeaders\":\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n              that._invalidate(true, true);\n              args.handled = true;\n              break;\n            default:\n              that.callBase(args);\n          }\n        },\n        getHeight: function getHeight() {\n          return this.getElementHeight();\n        },\n        getContextMenuItems: function getContextMenuItems(options) {\n          var onItemClick,\n            sortingOptions,\n            that = this,\n            column = options.column;\n          if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n            sortingOptions = that.option(\"sorting\");\n            if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\n              onItemClick = function onItemClick(params) {\n                setTimeout(function () {\n                  that._columnsController.changeSortOrder(column.index, params.itemData.value);\n                });\n              };\n              return [{\n                text: sortingOptions.ascendingText,\n                value: \"asc\",\n                disabled: \"asc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_ASC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.descendingText,\n                value: \"desc\",\n                disabled: \"desc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_DESC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.clearText,\n                value: \"none\",\n                disabled: !column.sortOrder,\n                icon: CONTEXT_MENU_SORT_NONE_ICON,\n                onItemClick: onItemClick\n              }];\n            }\n          }\n        },\n        getRowCount: function getRowCount() {\n          return this._columnsController && this._columnsController.getRowCount();\n        },\n        setRowsOpacity: function setRowsOpacity(columnIndex, value, rowIndex) {\n          var i,\n            columnElements,\n            that = this,\n            rowCount = that.getRowCount(),\n            columns = that._columnsController.getColumns(),\n            column = columns && columns[columnIndex],\n            columnID = column && column.isBand && column.index,\n            setColumnOpacity = function setColumnOpacity(index, column) {\n              if (column.ownerBand === columnID) {\n                columnElements.eq(index).css({\n                  opacity: value\n                });\n                if (column.isBand) {\n                  that.setRowsOpacity(column.index, value, i + 1);\n                }\n              }\n            };\n          if ((0, _type.isDefined)(columnID)) {\n            rowIndex = rowIndex || 0;\n            for (i = rowIndex; i < rowCount; i++) {\n              columnElements = that.getCellElements(i);\n              (0, _iterator.each)(that.getColumns(i), setColumnOpacity);\n            }\n          }\n        }\n      };\n    }())\n  }\n};","map":null,"metadata":{},"sourceType":"script"}