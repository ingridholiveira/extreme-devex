{"ast":null,"code":"/**\r\n * DevExtreme (localization/intl/date.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _typeof = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _extend = require(\"../../core/utils/extend\");\nvar _core = require(\"../core\");\nvar SYMBOLS_TO_REMOVE_REGEX = /[\\u200E\\u200F]/g;\nvar getIntlFormatter = function getIntlFormatter(format) {\n  return function (date) {\n    if (!format.timeZoneName) {\n      var utcDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());\n      var utcFormat = (0, _extend.extend)({\n        timeZone: \"UTC\"\n      }, format);\n      return formatDateTime(utcDate, utcFormat);\n    }\n    return formatDateTime(date, format);\n  };\n};\nvar formattersCache = {};\nvar getFormatter = function getFormatter(format) {\n  var key = (0, _core.locale)() + \"/\" + JSON.stringify(format);\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.DateTimeFormat((0, _core.locale)(), format).format;\n  }\n  return formattersCache[key];\n};\nvar formatDateTime = function formatDateTime(date, format) {\n  return getFormatter(format)(date).replace(SYMBOLS_TO_REMOVE_REGEX, \"\");\n};\nvar formatNumber = function formatNumber(number) {\n  return new Intl.NumberFormat((0, _core.locale)()).format(number);\n};\nvar getAlternativeNumeralsMap = function () {\n  var numeralsMapCache = {};\n  return function (locale) {\n    if (!(locale in numeralsMapCache)) {\n      if (\"0\" === formatNumber(0)) {\n        numeralsMapCache[locale] = false;\n        return false;\n      }\n      numeralsMapCache[locale] = {};\n      for (var i = 0; i < 10; ++i) {\n        numeralsMapCache[locale][formatNumber(i)] = i;\n      }\n    }\n    return numeralsMapCache[locale];\n  };\n}();\nvar normalizeNumerals = function normalizeNumerals(dateString) {\n  var alternativeNumeralsMap = getAlternativeNumeralsMap((0, _core.locale)());\n  if (!alternativeNumeralsMap) {\n    return dateString;\n  }\n  return dateString.split(\"\").map(function (sign) {\n    return sign in alternativeNumeralsMap ? String(alternativeNumeralsMap[sign]) : sign;\n  }).join(\"\");\n};\nvar removeLeadingZeroes = function removeLeadingZeroes(str) {\n  return str.replace(/(\\D)0+(\\d)/g, \"$1$2\");\n};\nvar dateStringEquals = function dateStringEquals(actual, expected) {\n  return removeLeadingZeroes(actual) === removeLeadingZeroes(expected);\n};\nvar normalizeMonth = function normalizeMonth(text) {\n  return text.replace(\"d\\u2019\", \"de \");\n};\nvar intlFormats = {\n  day: {\n    day: \"numeric\"\n  },\n  dayofweek: {\n    weekday: \"long\"\n  },\n  longdate: {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  },\n  longdatelongtime: {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\"\n  },\n  longtime: {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\"\n  },\n  month: {\n    month: \"long\"\n  },\n  monthandday: {\n    month: \"long\",\n    day: \"numeric\"\n  },\n  monthandyear: {\n    year: \"numeric\",\n    month: \"long\"\n  },\n  shortdate: {},\n  shorttime: {\n    hour: \"numeric\",\n    minute: \"numeric\"\n  },\n  shortyear: {\n    year: \"2-digit\"\n  },\n  year: {\n    year: \"numeric\"\n  }\n};\nObject.defineProperty(intlFormats, \"shortdateshorttime\", {\n  get: function get() {\n    var defaultOptions = Intl.DateTimeFormat((0, _core.locale)()).resolvedOptions();\n    return {\n      year: defaultOptions.year,\n      month: defaultOptions.month,\n      day: defaultOptions.day,\n      hour: \"numeric\",\n      minute: \"numeric\"\n    };\n  }\n});\nvar getIntlFormat = function getIntlFormat(format) {\n  return \"string\" === typeof format && intlFormats[format.toLowerCase()];\n};\nvar monthNameStrategies = {\n  standalone: function standalone(monthIndex, monthFormat) {\n    var date = new Date(1999, monthIndex, 13, 1);\n    var dateString = getIntlFormatter({\n      month: monthFormat\n    })(date);\n    return dateString;\n  },\n  format: function format(monthIndex, monthFormat) {\n    var date = new Date(0, monthIndex, 13, 1);\n    var dateString = normalizeMonth(getIntlFormatter({\n      day: \"numeric\",\n      month: monthFormat\n    })(date));\n    var parts = dateString.split(\" \").filter(function (part) {\n      return part.indexOf(\"13\") < 0;\n    });\n    if (1 === parts.length) {\n      return parts[0];\n    } else {\n      if (2 === parts.length) {\n        return parts[0].length > parts[1].length ? parts[0] : parts[1];\n      }\n    }\n    return monthNameStrategies.standalone(monthIndex, monthFormat);\n  }\n};\nmodule.exports = {\n  engine: function engine() {\n    return \"intl\";\n  },\n  getMonthNames: function getMonthNames(format, type) {\n    var intlFormats = {\n      wide: \"long\",\n      abbreviated: \"short\",\n      narrow: \"narrow\"\n    };\n    var monthFormat = intlFormats[format || \"wide\"];\n    type = type || \"standalone\";\n    return Array.apply(null, new Array(12)).map(function (_, monthIndex) {\n      return monthNameStrategies[type](monthIndex, monthFormat);\n    });\n  },\n  getDayNames: function getDayNames(format) {\n    var intlFormats = {\n      wide: \"long\",\n      abbreviated: \"short\",\n      \"short\": \"narrow\",\n      narrow: \"narrow\"\n    };\n    var getIntlDayNames = function getIntlDayNames(format) {\n      return Array.apply(null, new Array(7)).map(function (_, dayIndex) {\n        return getIntlFormatter({\n          weekday: format\n        })(new Date(0, 0, dayIndex));\n      });\n    };\n    var result = getIntlDayNames(intlFormats[format || \"wide\"]);\n    return result;\n  },\n  getPeriodNames: function getPeriodNames() {\n    var hour12Formatter = getIntlFormatter({\n      hour: \"numeric\",\n      hour12: true\n    });\n    return [1, 13].map(function (hours) {\n      var hourNumberText = formatNumber(1);\n      var timeParts = hour12Formatter(new Date(0, 0, 1, hours)).split(hourNumberText);\n      if (2 !== timeParts.length) {\n        return \"\";\n      }\n      var biggerPart = timeParts[0].length > timeParts[1].length ? timeParts[0] : timeParts[1];\n      return biggerPart.trim();\n    });\n  },\n  format: function format(date, _format) {\n    if (!date) {\n      return;\n    }\n    if (!_format) {\n      return date;\n    }\n    if (\"function\" !== typeof _format && !_format.formatter) {\n      _format = _format.type || _format;\n    }\n    var intlFormat = getIntlFormat(_format);\n    if (intlFormat) {\n      return getIntlFormatter(intlFormat)(date);\n    }\n    var formatType = \"undefined\" === typeof _format ? \"undefined\" : _typeof(_format);\n    if (_format.formatter || \"function\" === formatType || \"string\" === formatType) {\n      return this.callBase.apply(this, arguments);\n    }\n    return getIntlFormatter(_format)(date);\n  },\n  parse: function parse(dateString, format) {\n    var _this = this;\n    var formatter = void 0;\n    if (format && !format.parser && \"string\" === typeof dateString) {\n      dateString = normalizeMonth(dateString);\n      formatter = function formatter(date) {\n        return normalizeMonth(_this.format(date, format));\n      };\n    }\n    return this.callBase(dateString, formatter || format);\n  },\n  _parseDateBySimpleFormat: function _parseDateBySimpleFormat(dateString, format) {\n    var _this2 = this;\n    dateString = normalizeNumerals(dateString);\n    var formatParts = this.getFormatParts(format);\n    var dateParts = dateString.split(/\\D+/).filter(function (part) {\n      return part.length > 0;\n    });\n    if (formatParts.length !== dateParts.length) {\n      return;\n    }\n    var dateArgs = this._generateDateArgs(formatParts, dateParts);\n    var constructDate = function constructDate(dateArgs, ampmShift) {\n      var hoursShift = ampmShift ? 12 : 0;\n      return new Date(dateArgs.year, dateArgs.month, dateArgs.day, (dateArgs.hours + hoursShift) % 24, dateArgs.minutes, dateArgs.seconds);\n    };\n    var constructValidDate = function constructValidDate(ampmShift) {\n      var parsedDate = constructDate(dateArgs, ampmShift);\n      if (dateStringEquals(normalizeNumerals(_this2.format(parsedDate, format)), dateString)) {\n        return parsedDate;\n      }\n    };\n    return constructValidDate(false) || constructValidDate(true);\n  },\n  _generateDateArgs: function _generateDateArgs(formatParts, dateParts) {\n    var currentDate = new Date();\n    var dateArgs = {\n      year: currentDate.getFullYear(),\n      month: currentDate.getMonth(),\n      day: currentDate.getDate(),\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n    formatParts.forEach(function (formatPart, index) {\n      var datePart = dateParts[index];\n      var parsed = parseInt(datePart, 10);\n      if (\"month\" === formatPart) {\n        parsed -= 1;\n      }\n      dateArgs[formatPart] = parsed;\n    });\n    return dateArgs;\n  },\n  formatUsesMonthName: function formatUsesMonthName(format) {\n    if (\"object\" === (\"undefined\" === typeof format ? \"undefined\" : _typeof(format)) && !(format.type || format.format)) {\n      return \"long\" === format.month;\n    }\n    return this.callBase.apply(this, arguments);\n  },\n  formatUsesDayName: function formatUsesDayName(format) {\n    if (\"object\" === (\"undefined\" === typeof format ? \"undefined\" : _typeof(format)) && !(format.type || format.format)) {\n      return \"long\" === format.weekday;\n    }\n    return this.callBase.apply(this, arguments);\n  },\n  getFormatParts: function getFormatParts(format) {\n    if (\"string\" === typeof format) {\n      return this.callBase(format);\n    }\n    var intlFormat = (0, _extend.extend)({}, intlFormats[format.toLowerCase()]);\n    var date = new Date(2001, 2, 4, 5, 6, 7);\n    var formattedDate = getIntlFormatter(intlFormat)(date);\n    formattedDate = normalizeNumerals(formattedDate);\n    var formatParts = [{\n      name: \"year\",\n      value: 1\n    }, {\n      name: \"month\",\n      value: 3\n    }, {\n      name: \"day\",\n      value: 4\n    }, {\n      name: \"hours\",\n      value: 5\n    }, {\n      name: \"minutes\",\n      value: 6\n    }, {\n      name: \"seconds\",\n      value: 7\n    }];\n    return formatParts.map(function (part) {\n      return {\n        name: part.name,\n        index: formattedDate.indexOf(part.value)\n      };\n    }).filter(function (part) {\n      return part.index > -1;\n    }).sort(function (a, b) {\n      return a.index - b.index;\n    }).map(function (part) {\n      return part.name;\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}