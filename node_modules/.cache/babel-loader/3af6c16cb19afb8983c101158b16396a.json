{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.grouping.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _uiData_grid = require(\"./ui.data_grid.core\");\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\nvar _uiData_gridGrouping = require(\"./ui.data_grid.grouping.expanded\");\nvar _uiData_gridGrouping2 = require(\"./ui.data_grid.grouping.collapsed\");\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _uiData_grid3 = require(\"./ui.data_grid.data_source_adapter\");\nvar _uiData_grid4 = _interopRequireDefault(_uiData_grid3);\nvar _type = require(\"../../core/utils/type\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _devices = require(\"../../core/devices\");\nvar _devices2 = _interopRequireDefault(_devices);\nvar _deferred = require(\"../../core/utils/deferred\");\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.accessibility\");\nvar _accessibility = require(\"../shared/accessibility\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\",\n  DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\",\n  DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\",\n  DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\",\n  DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\",\n  DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\",\n  HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nvar GroupingDataSourceAdapterExtender = function () {\n  return {\n    init: function init() {\n      this.callBase.apply(this, arguments);\n      this._initGroupingHelper();\n    },\n    _initGroupingHelper: function _initGroupingHelper(options) {\n      var grouping = this._grouping,\n        isAutoExpandAll = this.option(\"grouping.autoExpandAll\"),\n        isFocusedRowEnabled = this.option(\"focusedRowEnabled\"),\n        remoteOperations = options ? options.remoteOperations : this.remoteOperations(),\n        isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\n      if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\n        if (!grouping || grouping instanceof _uiData_gridGrouping2.GroupingHelper) {\n          this._grouping = new _uiData_gridGrouping.GroupingHelper(this);\n        }\n      } else {\n        if (!grouping || grouping instanceof _uiData_gridGrouping.GroupingHelper) {\n          this._grouping = new _uiData_gridGrouping2.GroupingHelper(this);\n        }\n      }\n    },\n    totalItemsCount: function totalItemsCount() {\n      var that = this,\n        totalCount = that.callBase();\n      return totalCount > 0 && that._dataSource.group() && that._dataSource.requireTotalCount() ? totalCount + that._grouping.totalCountCorrection() : totalCount;\n    },\n    itemsCount: function itemsCount() {\n      return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments);\n    },\n    allowCollapseAll: function allowCollapseAll() {\n      return this._grouping.allowCollapseAll();\n    },\n    isGroupItemCountable: function isGroupItemCountable(item) {\n      return this._grouping.isGroupItemCountable(item);\n    },\n    isRowExpanded: function isRowExpanded(key) {\n      var groupInfo = this._grouping.findGroupInfo(key);\n      return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();\n    },\n    collapseAll: function collapseAll(groupIndex) {\n      return this._collapseExpandAll(groupIndex, false);\n    },\n    expandAll: function expandAll(groupIndex) {\n      return this._collapseExpandAll(groupIndex, true);\n    },\n    _collapseExpandAll: function _collapseExpandAll(groupIndex, isExpand) {\n      var i,\n        that = this,\n        dataSource = that._dataSource,\n        group = dataSource.group(),\n        groups = _uiData_grid2.default.normalizeSortingInfo(group || []);\n      if (groups.length) {\n        for (i = 0; i < groups.length; i++) {\n          if (void 0 === groupIndex || groupIndex === i) {\n            groups[i].isExpanded = isExpand;\n          } else {\n            if (group && group[i]) {\n              groups[i].isExpanded = group[i].isExpanded;\n            }\n          }\n        }\n        dataSource.group(groups);\n        that._grouping.foreachGroups(function (groupInfo, parents) {\n          if (void 0 === groupIndex || groupIndex === parents.length - 1) {\n            groupInfo.isExpanded = isExpand;\n          }\n        }, false, true);\n        that.resetPagesCache();\n      }\n      return true;\n    },\n    refresh: function refresh() {\n      this.callBase.apply(this, arguments);\n      return this._grouping.refresh.apply(this._grouping, arguments);\n    },\n    changeRowExpand: function changeRowExpand(path) {\n      var that = this,\n        dataSource = that._dataSource;\n      if (dataSource.group()) {\n        dataSource.beginLoading();\n        if (that._lastLoadOptions) {\n          that._lastLoadOptions.groupExpand = true;\n        }\n        return that._changeRowExpandCore(path).always(function () {\n          dataSource.endLoading();\n        });\n      }\n    },\n    _changeRowExpandCore: function _changeRowExpandCore(path) {\n      return this._grouping.changeRowExpand(path);\n    },\n    _hasGroupLevelsExpandState: function _hasGroupLevelsExpandState(group, isExpanded) {\n      if (group && Array.isArray(group)) {\n        for (var i = 0; i < group.length; i++) {\n          if (group[i].isExpanded === isExpanded) {\n            return true;\n          }\n        }\n      }\n    },\n    _customizeRemoteOperations: function _customizeRemoteOperations(options, isReload, operationTypes) {\n      var remoteOperations = options.remoteOperations;\n      if (options.storeLoadOptions.group) {\n        if (remoteOperations.grouping && !options.isCustomLoading) {\n          if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\n            remoteOperations.paging = false;\n          }\n        }\n        if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\n          remoteOperations.paging = false;\n        }\n      } else {\n        if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\n          this.resetCache();\n        }\n      }\n      this.callBase.apply(this, arguments);\n    },\n    _handleDataLoading: function _handleDataLoading(options) {\n      this.callBase(options);\n      this._initGroupingHelper(options);\n      return this._grouping.handleDataLoading(options);\n    },\n    _handleDataLoaded: function _handleDataLoaded(options) {\n      return this._grouping.handleDataLoaded(options, this.callBase.bind(this));\n    },\n    _handleDataLoadedCore: function _handleDataLoadedCore(options) {\n      return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this));\n    }\n  };\n}();\n_uiData_grid4.default.extend(GroupingDataSourceAdapterExtender);\nvar GroupingDataControllerExtender = function () {\n  return {\n    init: function init() {\n      var that = this;\n      that.callBase();\n      that.createAction(\"onRowExpanding\");\n      that.createAction(\"onRowExpanded\");\n      that.createAction(\"onRowCollapsing\");\n      that.createAction(\"onRowCollapsed\");\n    },\n    _beforeProcessItems: function _beforeProcessItems(items) {\n      var groupColumns = this._columnsController.getGroupColumns();\n      items = this.callBase(items);\n      if (items.length && groupColumns.length) {\n        items = this._processGroupItems(items, groupColumns.length);\n      }\n      return items;\n    },\n    _processItem: function _processItem(item, options) {\n      if ((0, _type.isDefined)(item.groupIndex) && (0, _type.isString)(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\n        item = this._processGroupItem(item, options);\n        options.dataIndex = 0;\n      } else {\n        item = this.callBase.apply(this, arguments);\n      }\n      return item;\n    },\n    _processGroupItem: function _processGroupItem(item) {\n      return item;\n    },\n    _processGroupItems: function _processGroupItems(items, groupsCount, options) {\n      var scrollingMode,\n        i,\n        item,\n        resultItems,\n        that = this,\n        groupedColumns = that._columnsController.getGroupColumns(),\n        column = groupedColumns[groupedColumns.length - groupsCount];\n      if (!options) {\n        scrollingMode = that.option(\"scrolling.mode\");\n        options = {\n          collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\n          resultItems: [],\n          path: [],\n          values: []\n        };\n      }\n      resultItems = options.resultItems;\n      if (options.data) {\n        if (options.collectContinuationItems || !options.data.isContinuation) {\n          resultItems.push({\n            rowType: \"group\",\n            data: options.data,\n            groupIndex: options.path.length - 1,\n            isExpanded: !!options.data.items,\n            key: options.path.slice(0),\n            values: options.values.slice(0)\n          });\n        }\n      }\n      if (items) {\n        if (0 === groupsCount) {\n          resultItems.push.apply(resultItems, items);\n        } else {\n          for (i = 0; i < items.length; i++) {\n            item = items[i];\n            if (item && \"items\" in item) {\n              options.data = item;\n              options.path.push(item.key);\n              options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\n              that._processGroupItems(item.items, groupsCount - 1, options);\n              options.data = void 0;\n              options.path.pop();\n              options.values.pop();\n            } else {\n              resultItems.push(item);\n            }\n          }\n        }\n      }\n      return resultItems;\n    },\n    publicMethods: function publicMethods() {\n      return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"]);\n    },\n    collapseAll: function collapseAll(groupIndex) {\n      var dataSource = this._dataSource;\n      if (dataSource && dataSource.collapseAll(groupIndex)) {\n        dataSource.pageIndex(0);\n        dataSource.reload();\n      }\n    },\n    expandAll: function expandAll(groupIndex) {\n      var dataSource = this._dataSource;\n      if (dataSource && dataSource.expandAll(groupIndex)) {\n        dataSource.pageIndex(0);\n        dataSource.reload();\n      }\n    },\n    changeRowExpand: function changeRowExpand(key) {\n      var that = this,\n        expanded = that.isRowExpanded(key),\n        args = {\n          key: key,\n          expanded: expanded\n        };\n      that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\n      if (!args.cancel) {\n        return (0, _deferred.when)(that._changeRowExpandCore(key)).done(function () {\n          args.expanded = !expanded;\n          that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args);\n        });\n      }\n      return new _deferred.Deferred().resolve();\n    },\n    _changeRowExpandCore: function _changeRowExpandCore(key) {\n      var d,\n        that = this,\n        dataSource = this._dataSource;\n      if (!dataSource) {\n        return;\n      }\n      d = new _deferred.Deferred();\n      (0, _deferred.when)(dataSource.changeRowExpand(key)).done(function () {\n        that.load().done(d.resolve).fail(d.reject);\n      }).fail(d.reject);\n      return d;\n    },\n    isRowExpanded: function isRowExpanded(key) {\n      var dataSource = this._dataSource;\n      return dataSource && dataSource.isRowExpanded(key);\n    },\n    expandRow: function expandRow(key) {\n      if (!this.isRowExpanded(key)) {\n        return this.changeRowExpand(key);\n      }\n      return new _deferred.Deferred().resolve();\n    },\n    collapseRow: function collapseRow(key) {\n      if (this.isRowExpanded(key)) {\n        return this.changeRowExpand(key);\n      }\n      return new _deferred.Deferred().resolve();\n    },\n    optionChanged: function optionChanged(args) {\n      if (\"grouping\" === args.name) {\n        args.name = \"dataSource\";\n      }\n      this.callBase(args);\n    }\n  };\n}();\nvar onGroupingMenuItemClick = function onGroupingMenuItemClick(column, params) {\n  var columnsController = this._columnsController;\n  switch (params.itemData.value) {\n    case \"group\":\n      var groups = columnsController._dataSource.group() || [];\n      columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\n      break;\n    case \"ungroup\":\n      columnsController.columnOption(column.dataField, \"groupIndex\", -1);\n      break;\n    case \"ungroupAll\":\n      this.component.clearGrouping();\n  }\n};\nvar GroupingHeaderPanelExtender = function () {\n  return {\n    _getToolbarItems: function _getToolbarItems() {\n      var items = this.callBase();\n      return this._appendGroupingItem(items);\n    },\n    _appendGroupingItem: function _appendGroupingItem(items) {\n      var that = this,\n        isRendered = false,\n        groupPanelRenderedCallback = function groupPanelRenderedCallback(e) {\n          var $groupPanel = (0, _renderer2.default)(e.itemElement).find(\".\" + DATAGRID_GROUP_PANEL_CLASS);\n          that._updateGroupPanelContent($groupPanel);\n          (0, _uiGrid_core.registerKeyboardAction)(\"groupPanel\", that, $groupPanel, void 0, that._handleActionKeyDown.bind(that));\n          isRendered && that.renderCompleted.fire();\n          isRendered = true;\n        };\n      if (that._isGroupPanelVisible()) {\n        var toolbarItem = {\n          html: \"<div class='\" + DATAGRID_GROUP_PANEL_CLASS + \"'></div>\",\n          name: \"groupPanel\",\n          onItemRendered: groupPanelRenderedCallback,\n          location: \"before\",\n          locateInMenu: \"never\",\n          sortIndex: 1\n        };\n        items.push(toolbarItem);\n      }\n      return items;\n    },\n    _handleActionKeyDown: function _handleActionKeyDown(args) {\n      var event = args.event,\n        $target = (0, _renderer2.default)(event.target),\n        groupColumnIndex = $target.closest(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS).index(),\n        column = this._columnsController.getGroupColumns()[groupColumnIndex],\n        columnIndex = column && column.index;\n      if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n        this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true);\n      } else {\n        this._processGroupItemAction(columnIndex);\n      }\n      event.preventDefault();\n    },\n    _isGroupPanelVisible: function _isGroupPanelVisible() {\n      var isVisible,\n        groupPanelOptions = this.option(\"groupPanel\");\n      if (groupPanelOptions) {\n        isVisible = groupPanelOptions.visible;\n        if (\"auto\" === isVisible) {\n          isVisible = \"desktop\" === _devices2.default.current().deviceType ? true : false;\n        }\n      }\n      return isVisible;\n    },\n    _renderGroupPanelItems: function _renderGroupPanelItems($groupPanel, groupColumns) {\n      var that = this;\n      $groupPanel.empty();\n      (0, _iterator.each)(groupColumns, function (index, groupColumn) {\n        that._createGroupPanelItem($groupPanel, groupColumn);\n      });\n      (0, _accessibility.restoreFocus)(this);\n    },\n    _createGroupPanelItem: function _createGroupPanelItem($rootElement, groupColumn) {\n      var $groupPanelItem = (0, _renderer2.default)(\"<div>\").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\n      (0, _accessibility.setTabIndex)(this, $groupPanelItem);\n      return $groupPanelItem;\n    },\n    _columnOptionChanged: function _columnOptionChanged(e) {\n      if (!this._requireReady && !_uiData_grid2.default.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\n        var $toolbarElement = this.element(),\n          $groupPanel = $toolbarElement && $toolbarElement.find(\".\" + DATAGRID_GROUP_PANEL_CLASS);\n        if ($groupPanel && $groupPanel.length) {\n          this._updateGroupPanelContent($groupPanel);\n          this.renderCompleted.fire();\n        }\n      }\n      this.callBase();\n    },\n    _updateGroupPanelContent: function _updateGroupPanelContent($groupPanel) {\n      var that = this,\n        groupColumns = that.getController(\"columns\").getGroupColumns(),\n        groupPanelOptions = that.option(\"groupPanel\");\n      that._renderGroupPanelItems($groupPanel, groupColumns);\n      if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\n        (0, _renderer2.default)(\"<div>\").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\n        $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_LABEL_CLASS).css(\"maxWidth\", \"none\");\n        that.updateToolbarDimensions();\n      }\n    },\n    allowDragging: function allowDragging(column) {\n      var groupPanelOptions = this.option(\"groupPanel\");\n      return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping;\n    },\n    getColumnElements: function getColumnElements() {\n      var $element = this.element();\n      return $element && $element.find(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n    },\n    getColumns: function getColumns() {\n      return this.getController(\"columns\").getGroupColumns();\n    },\n    getBoundingRect: function getBoundingRect() {\n      var offset,\n        that = this,\n        $element = that.element();\n      if ($element && $element.find(\".\" + DATAGRID_GROUP_PANEL_CLASS).length) {\n        offset = $element.offset();\n        return {\n          top: offset.top,\n          bottom: offset.top + $element.height()\n        };\n      }\n      return null;\n    },\n    getName: function getName() {\n      return \"group\";\n    },\n    getContextMenuItems: function getContextMenuItems(options) {\n      var items,\n        that = this,\n        contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\"),\n        $groupedColumnElement = (0, _renderer2.default)(options.targetElement).closest(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n      if ($groupedColumnElement.length) {\n        options.column = $groupedColumnElement.data(\"columnData\");\n      }\n      if (contextMenuEnabled && options.column) {\n        var column = options.column,\n          isGroupingAllowed = (0, _type.isDefined)(column.allowGrouping) ? column.allowGrouping : true;\n        if (isGroupingAllowed) {\n          var isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1,\n            groupingTexts = that.option(\"grouping.texts\"),\n            onItemClick = onGroupingMenuItemClick.bind(that, column);\n          items = [{\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            disabled: !isColumnGrouped,\n            onItemClick: onItemClick\n          }, {\n            text: groupingTexts.ungroupAll,\n            value: \"ungroupAll\",\n            onItemClick: onItemClick\n          }];\n        }\n      }\n      return items;\n    },\n    isVisible: function isVisible() {\n      return this.callBase() || this._isGroupPanelVisible();\n    },\n    optionChanged: function optionChanged(args) {\n      if (\"groupPanel\" === args.name) {\n        this._invalidate();\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    }\n  };\n}();\nexports.GroupingHeaderPanelExtender = GroupingHeaderPanelExtender;\nvar GroupingRowsViewExtender = function () {\n  return {\n    getContextMenuItems: function getContextMenuItems(options) {\n      var items,\n        that = this,\n        contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n      if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\n        var columnsController = that._columnsController,\n          column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\n        if (column && column.allowGrouping) {\n          var groupingTexts = that.option(\"grouping.texts\"),\n            onItemClick = onGroupingMenuItemClick.bind(that, column);\n          items = [];\n          items.push({\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            onItemClick: onItemClick\n          }, {\n            text: groupingTexts.ungroupAll,\n            value: \"ungroupAll\",\n            onItemClick: onItemClick\n          });\n        }\n      }\n      return items;\n    },\n    _rowClick: function _rowClick(e) {\n      var that = this,\n        expandMode = that.option(\"grouping.expandMode\"),\n        scrollingMode = that.option(\"scrolling.mode\"),\n        isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && (0, _renderer2.default)(e.event.target).closest(\".\" + DATAGRID_GROUP_ROW_CLASS).length,\n        isExpandButtonClicked = (0, _renderer2.default)(e.event.target).closest(\".\" + DATAGRID_EXPAND_CLASS).length;\n      if (isGroupRowStateChanged || isExpandButtonClicked) {\n        that._changeGroupRowState(e);\n      }\n      that.callBase(e);\n    },\n    _changeGroupRowState: function _changeGroupRowState(e) {\n      var dataController = this.getController(\"data\"),\n        row = dataController.items()[e.rowIndex],\n        allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\n      if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\n        dataController.changeRowExpand(row.key);\n        e.event.preventDefault();\n        e.handled = true;\n      }\n    }\n  };\n}();\nvar columnHeadersViewExtender = function () {\n  return {\n    getContextMenuItems: function getContextMenuItems(options) {\n      var that = this,\n        contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\"),\n        items = that.callBase(options);\n      if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n        var column = options.column;\n        if (!column.command && (!(0, _type.isDefined)(column.allowGrouping) || column.allowGrouping)) {\n          var groupingTexts = that.option(\"grouping.texts\"),\n            isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1,\n            onItemClick = onGroupingMenuItemClick.bind(that, column);\n          items = items || [];\n          items.push({\n            text: groupingTexts.groupByThisColumn,\n            value: \"group\",\n            beginGroup: true,\n            disabled: isColumnGrouped,\n            onItemClick: onItemClick\n          });\n          if (column.showWhenGrouped) {\n            items.push({\n              text: groupingTexts.ungroup,\n              value: \"ungroup\",\n              disabled: !isColumnGrouped,\n              onItemClick: onItemClick\n            });\n          }\n          items.push({\n            text: groupingTexts.ungroupAll,\n            value: \"ungroupAll\",\n            onItemClick: onItemClick\n          });\n        }\n      }\n      return items;\n    }\n  };\n}();\n_uiData_grid2.default.registerModule(\"grouping\", {\n  defaultOptions: function defaultOptions() {\n    return {\n      grouping: {\n        autoExpandAll: true,\n        allowCollapsing: true,\n        contextMenuEnabled: false,\n        expandMode: \"buttonClick\",\n        texts: {\n          groupContinuesMessage: _message2.default.format(\"dxDataGrid-groupContinuesMessage\"),\n          groupContinuedMessage: _message2.default.format(\"dxDataGrid-groupContinuedMessage\"),\n          groupByThisColumn: _message2.default.format(\"dxDataGrid-groupHeaderText\"),\n          ungroup: _message2.default.format(\"dxDataGrid-ungroupHeaderText\"),\n          ungroupAll: _message2.default.format(\"dxDataGrid-ungroupAllText\")\n        }\n      },\n      groupPanel: {\n        visible: false,\n        emptyPanelText: _message2.default.format(\"dxDataGrid-groupPanelEmptyText\"),\n        allowColumnDragging: true\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      data: GroupingDataControllerExtender,\n      columns: {\n        _getExpandColumnOptions: function _getExpandColumnOptions() {\n          var options = this.callBase.apply(this, arguments);\n          options.cellTemplate = _uiData_grid2.default.getExpandCellTemplate();\n          return options;\n        }\n      }\n    },\n    views: {\n      headerPanel: GroupingHeaderPanelExtender,\n      rowsView: GroupingRowsViewExtender,\n      columnHeadersView: columnHeadersViewExtender\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}