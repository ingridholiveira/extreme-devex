{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _common = require(\"../../core/utils/common\");\nvar _type = require(\"../../core/utils/type\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _data = require(\"../../core/utils/data\");\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _uiData_grid = require(\"./ui.data_grid.core\");\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _uiData_grid3 = require(\"./ui.data_grid.data_source_adapter\");\nvar _uiData_grid4 = _interopRequireDefault(_uiData_grid3);\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.columns_view\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _aggregate_calculator = require(\"./aggregate_calculator\");\nvar _aggregate_calculator2 = _interopRequireDefault(_aggregate_calculator);\nvar _query = require(\"../../data/query\");\nvar _query2 = _interopRequireDefault(_query);\nvar _store_helper = require(\"../../data/store_helper\");\nvar _utils = require(\"../../data/utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\",\n  DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\",\n  DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\",\n  DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\",\n  DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\",\n  DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\",\n  DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\nvar renderSummaryCell = function renderSummaryCell(cell, options) {\n    var i,\n      summaryItem,\n      $cell = (0, _renderer2.default)(cell),\n      column = options.column,\n      summaryItems = options.summaryItems,\n      $summaryItems = [];\n    if (!column.command && summaryItems) {\n      for (i = 0; i < summaryItems.length; i++) {\n        summaryItem = summaryItems[i];\n        $summaryItems.push((0, _renderer2.default)(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(_uiData_grid2.default.getSummaryText(summaryItem, options.summaryTexts)));\n      }\n      $cell.append($summaryItems);\n    }\n  },\n  getSummaryCellOptions = function getSummaryCellOptions(that, options) {\n    var summaryTexts = that.option(\"summary.texts\") || {};\n    return {\n      totalItem: options.row,\n      summaryItems: options.row.summaryCells[options.columnIndex],\n      summaryTexts: summaryTexts\n    };\n  };\nvar getGroupAggregates = function getGroupAggregates(data) {\n  return data.summary || data.aggregates || [];\n};\nvar recalculateWhileEditing = function recalculateWhileEditing(that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\nexports.FooterView = _uiGrid_core2.default.ColumnsView.inherit(function () {\n  return {\n    _getRows: function _getRows() {\n      return this._dataController.footerItems();\n    },\n    _getCellOptions: function _getCellOptions(options) {\n      return (0, _extend.extend)(this.callBase(options), getSummaryCellOptions(this, options));\n    },\n    _renderCellContent: function _renderCellContent($cell, options) {\n      renderSummaryCell($cell, options);\n      this.callBase($cell, options);\n    },\n    _renderCore: function _renderCore(change) {\n      var totalItem = this._dataController.footerItems()[0];\n      if (!change || !change.columnIndices) {\n        this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\n      }\n      if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n        this._updateContent(this._renderTable({\n          change: change\n        }), change);\n      }\n    },\n    _updateContent: function _updateContent($newTable, change) {\n      if (change && \"update\" === change.changeType && change.columnIndices) {\n        var $row = this._getTableElement().find(\".dx-row\"),\n          $newRow = $newTable.find(\".dx-row\");\n        this._updateCells($row, $newRow, change.columnIndices[0]);\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    _rowClick: function _rowClick(e) {\n      var item = this._dataController.footerItems()[e.rowIndex] || {};\n      this.executeAction(\"onRowClick\", (0, _extend.extend)({}, e, item));\n    },\n    _columnOptionChanged: function _columnOptionChanged(e) {\n      var optionNames = e.optionNames;\n      if (e.changeTypes.grouping) {\n        return;\n      }\n      if (optionNames.width || optionNames.visibleWidth) {\n        this.callBase(e);\n      }\n    },\n    _handleDataChanged: function _handleDataChanged(e) {\n      var changeType = e.changeType;\n      if (\"update\" === e.changeType && e.repaintChangesOnly) {\n        if (!e.totalColumnIndices) {\n          this.render();\n        } else {\n          if (e.totalColumnIndices.length) {\n            this.render(null, {\n              changeType: \"update\",\n              columnIndices: [e.totalColumnIndices]\n            });\n          }\n        }\n      } else {\n        if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n          this.render();\n        }\n      }\n    },\n    getHeight: function getHeight() {\n      return this.getElementHeight();\n    },\n    isVisible: function isVisible() {\n      return !!this._dataController.footerItems().length;\n    }\n  };\n}());\nvar SummaryDataSourceAdapterExtender = function () {\n  function forEachGroup(groups, groupCount, callback, path) {\n    path = path || [];\n    for (var i = 0; i < groups.length; i++) {\n      path.push(groups[i].key);\n      if (1 === groupCount) {\n        callback(path, groups[i].items);\n      } else {\n        forEachGroup(groups[i].items, groupCount - 1, callback, path);\n      }\n      path.pop();\n    }\n  }\n  return {\n    init: function init() {\n      this.callBase.apply(this, arguments);\n      this._totalAggregates = [];\n      this._summaryGetter = _common.noop;\n    },\n    summaryGetter: function summaryGetter(_summaryGetter) {\n      if (!arguments.length) {\n        return this._summaryGetter;\n      }\n      if ((0, _type.isFunction)(_summaryGetter)) {\n        this._summaryGetter = _summaryGetter;\n      }\n    },\n    summary: function summary(_summary) {\n      if (!arguments.length) {\n        return this._summaryGetter();\n      }\n      this._summaryGetter = function () {\n        return _summary;\n      };\n    },\n    totalAggregates: function totalAggregates() {\n      return this._totalAggregates;\n    },\n    isLastLevelGroupItemsPagingLocal: function isLastLevelGroupItemsPagingLocal() {\n      var summary = this.summary(),\n        sortByGroupsInfo = summary && summary.sortByGroups();\n      return sortByGroupsInfo && sortByGroupsInfo.length;\n    },\n    sortLastLevelGroupItems: function sortLastLevelGroupItems(items, groups, paths) {\n      var groupedItems = (0, _store_helper.multiLevelGroup)((0, _query2.default)(items), groups).toArray(),\n        result = [];\n      paths.forEach(function (path) {\n        forEachGroup(groupedItems, groups.length, function (itemsPath, items) {\n          if (path.toString() === itemsPath.toString()) {\n            result = result.concat(items);\n          }\n        });\n      });\n      return result;\n    }\n  };\n}();\nvar SummaryDataSourceAdapterClientExtender = function () {\n  var applyAddedData = function applyAddedData(data, insertedData, groupLevel) {\n    if (groupLevel) {\n      return applyAddedData(data, insertedData.map(function (item) {\n        return {\n          items: [item]\n        };\n      }, groupLevel - 1));\n    }\n    return data.concat(insertedData);\n  };\n  var applyRemovedData = function applyRemovedData(data, removedData, groupLevel) {\n    if (groupLevel) {\n      return data.map(function (data) {\n        var updatedData = {},\n          updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n        Object.defineProperty(updatedData, \"aggregates\", {\n          get: function get() {\n            return data.aggregates;\n          },\n          set: function set(value) {\n            data.aggregates = value;\n          }\n        });\n        return (0, _extend.extend)(updatedData, data, {\n          items: updatedItems\n        });\n      });\n    }\n    return data.filter(function (data) {\n      return removedData.indexOf(data) < 0;\n    });\n  };\n  var calculateAggregates = function calculateAggregates(that, summary, data, groupLevel) {\n    var calculator;\n    if (recalculateWhileEditing(that)) {\n      var editingController = that.getController(\"editing\");\n      if (editingController) {\n        var insertedData = editingController.getInsertedData();\n        if (insertedData.length) {\n          data = applyAddedData(data, insertedData, groupLevel);\n        }\n        var removedData = editingController.getRemovedData();\n        if (removedData.length) {\n          data = applyRemovedData(data, removedData, groupLevel);\n        }\n      }\n    }\n    if (summary) {\n      calculator = new _aggregate_calculator2.default({\n        totalAggregates: summary.totalAggregates,\n        groupAggregates: summary.groupAggregates,\n        data: data,\n        groupLevel: groupLevel\n      });\n      calculator.calculate();\n    }\n    return calculator ? calculator.totalAggregates() : [];\n  };\n  var sortGroupsBySummaryCore = function sortGroupsBySummaryCore(items, groups, sortByGroups) {\n    if (!items || !groups.length) {\n      return items;\n    }\n    var query,\n      group = groups[0],\n      sorts = sortByGroups[0];\n    if (group && sorts && sorts.length) {\n      query = (0, _query2.default)(items);\n      (0, _iterator.each)(sorts, function (index) {\n        if (0 === index) {\n          query = query.sortBy(this.selector, this.desc);\n        } else {\n          query = query.thenBy(this.selector, this.desc);\n        }\n      });\n      query.enumerate().done(function (sortedItems) {\n        items = sortedItems;\n      });\n    }\n    groups = groups.slice(1);\n    sortByGroups = sortByGroups.slice(1);\n    if (groups.length && sortByGroups.length) {\n      (0, _iterator.each)(items, function () {\n        this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n      });\n    }\n    return items;\n  };\n  var sortGroupsBySummary = function sortGroupsBySummary(data, group, summary) {\n    var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n    if (sortByGroups && sortByGroups.length) {\n      return sortGroupsBySummaryCore(data, group, sortByGroups);\n    }\n    return data;\n  };\n  return {\n    _customizeRemoteOperations: function _customizeRemoteOperations(options) {\n      var summary = this.summary();\n      if (summary) {\n        if (options.remoteOperations.summary) {\n          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n            if (options.storeLoadOptions.group) {\n              if (options.remoteOperations.grouping) {\n                options.storeLoadOptions.groupSummary = summary.groupAggregates;\n              } else {\n                if (summary.groupAggregates.length) {\n                  options.remoteOperations.paging = false;\n                }\n              }\n            }\n            options.storeLoadOptions.totalSummary = summary.totalAggregates;\n          }\n        } else {\n          if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n            options.remoteOperations.paging = false;\n          }\n        }\n      }\n      this.callBase.apply(this, arguments);\n      var cachedExtra = options.cachedPagesData.extra;\n      if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n        options.storeLoadOptions.totalSummary = void 0;\n      }\n    },\n    _handleDataLoadedCore: function _handleDataLoadedCore(options) {\n      var totalAggregates,\n        that = this,\n        groups = (0, _utils.normalizeSortingInfo)(options.storeLoadOptions.group || options.loadOptions.group || []),\n        remoteOperations = options.remoteOperations || {},\n        summary = that.summaryGetter()(remoteOperations);\n      if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n        if (remoteOperations.summary) {\n          if (!remoteOperations.paging && groups.length && summary) {\n            if (!remoteOperations.grouping) {\n              calculateAggregates(that, {\n                groupAggregates: summary.groupAggregates\n              }, options.data, groups.length);\n            }\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n          }\n        } else {\n          if (!remoteOperations.paging) {\n            totalAggregates = calculateAggregates(that, summary, options.data, groups.length);\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n            options.extra = (0, _type.isPlainObject)(options.extra) ? options.extra : {};\n            options.extra.summary = totalAggregates;\n          }\n        }\n      }\n      if (!options.isCustomLoading) {\n        that._totalAggregates = options.extra && options.extra.summary || that._totalAggregates;\n      }\n      that.callBase(options);\n    }\n  };\n}();\n_uiData_grid4.default.extend(SummaryDataSourceAdapterExtender);\n_uiData_grid4.default.extend(SummaryDataSourceAdapterClientExtender);\nexports.renderSummaryCell = renderSummaryCell;\n_uiData_grid2.default.registerModule(\"summary\", {\n  defaultOptions: function defaultOptions() {\n    return {\n      summary: {\n        groupItems: void 0,\n        totalItems: void 0,\n        calculateCustomSummary: void 0,\n        skipEmptyValues: true,\n        recalculateWhileEditing: false,\n        texts: {\n          sum: _message2.default.getFormatter(\"dxDataGrid-summarySum\"),\n          sumOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summarySumOtherColumn\"),\n          min: _message2.default.getFormatter(\"dxDataGrid-summaryMin\"),\n          minOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summaryMinOtherColumn\"),\n          max: _message2.default.getFormatter(\"dxDataGrid-summaryMax\"),\n          maxOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summaryMaxOtherColumn\"),\n          avg: _message2.default.getFormatter(\"dxDataGrid-summaryAvg\"),\n          avgOtherColumn: _message2.default.getFormatter(\"dxDataGrid-summaryAvgOtherColumn\"),\n          count: _message2.default.getFormatter(\"dxDataGrid-summaryCount\")\n        }\n      },\n      sortByGroupSummaryInfo: void 0\n    };\n  },\n  views: {\n    footerView: exports.FooterView\n  },\n  extenders: {\n    controllers: {\n      data: function () {\n        return {\n          _isDataColumn: function _isDataColumn(column) {\n            return column && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped);\n          },\n          _isGroupFooterVisible: function _isGroupFooterVisible() {\n            var groupItem,\n              column,\n              i,\n              groupItems = this.option(\"summary.groupItems\") || [];\n            for (i = 0; i < groupItems.length; i++) {\n              groupItem = groupItems[i];\n              column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n              if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n                return true;\n              }\n            }\n            return false;\n          },\n          _processGroupItems: function _processGroupItems(items, groupCount, options) {\n            var data = options && options.data,\n              result = this.callBase.apply(this, arguments);\n            if (options) {\n              if (void 0 === options.isGroupFooterVisible) {\n                options.isGroupFooterVisible = this._isGroupFooterVisible();\n              }\n              if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n                result.push({\n                  rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\n                  key: options.path.slice(),\n                  data: data,\n                  groupIndex: options.path.length - 1,\n                  values: []\n                });\n              }\n            }\n            return result;\n          },\n          _processGroupItem: function _processGroupItem(groupItem, options) {\n            var that = this;\n            if (!options.summaryGroupItems) {\n              options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n            }\n            if (\"group\" === groupItem.rowType) {\n              var groupColumnIndex = -1,\n                afterGroupColumnIndex = -1;\n              (0, _iterator.each)(options.visibleColumns, function (visibleIndex) {\n                var prevColumn = options.visibleColumns[visibleIndex - 1];\n                if (groupItem.groupIndex === this.groupIndex) {\n                  groupColumnIndex = this.index;\n                }\n                if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n                  afterGroupColumnIndex = this.index;\n                }\n              });\n              groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n                if (summaryItem.showInGroupFooter) {\n                  return -1;\n                }\n                if (summaryItem.alignByColumn && column && !(0, _type.isDefined)(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n                  return column.index;\n                } else {\n                  return groupColumnIndex;\n                }\n              });\n            }\n            if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\n              groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n                return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1;\n              });\n            }\n            return groupItem;\n          },\n          _calculateSummaryCells: function _calculateSummaryCells(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex) {\n            var that = this,\n              summaryCells = [],\n              summaryCellsByColumns = {};\n            (0, _iterator.each)(summaryItems, function (summaryIndex, summaryItem) {\n              var aggregate,\n                column = that._columnsController.columnOption(summaryItem.column),\n                showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column,\n                columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n              if (columnIndex >= 0) {\n                if (!summaryCellsByColumns[columnIndex]) {\n                  summaryCellsByColumns[columnIndex] = [];\n                }\n                aggregate = aggregates[summaryIndex];\n                if (aggregate === aggregate) {\n                  var valueFormat;\n                  if ((0, _type.isDefined)(summaryItem.valueFormat)) {\n                    valueFormat = summaryItem.valueFormat;\n                  } else {\n                    if (\"count\" !== summaryItem.summaryType) {\n                      valueFormat = _uiData_grid2.default.getFormatByDataType(column && column.dataType);\n                    }\n                  }\n                  summaryCellsByColumns[columnIndex].push((0, _extend.extend)({}, summaryItem, {\n                    value: (0, _type.isString)(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n                    valueFormat: valueFormat,\n                    columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n                  }));\n                }\n              }\n            });\n            if (!(0, _type.isEmptyObject)(summaryCellsByColumns)) {\n              (0, _iterator.each)(visibleColumns, function () {\n                summaryCells.push(summaryCellsByColumns[this.index] || []);\n              });\n            }\n            return summaryCells;\n          },\n          _getSummaryCells: function _getSummaryCells(summaryTotalItems, totalAggregates) {\n            var that = this,\n              columnsController = that._columnsController;\n            return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function (summaryItem, column) {\n              return that._isDataColumn(column) ? column.index : -1;\n            });\n          },\n          _updateItemsCore: function _updateItemsCore(change) {\n            var summaryCells,\n              totalAggregates,\n              that = this,\n              dataSource = that._dataSource,\n              footerItems = that._footerItems,\n              oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells,\n              summaryTotalItems = that.option(\"summary.totalItems\");\n            that._footerItems = [];\n            if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n              totalAggregates = dataSource.totalAggregates();\n              summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n              if (change && change.repaintChangesOnly && oldSummaryCells) {\n                change.totalColumnIndices = summaryCells.map(function (summaryCell, index) {\n                  if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n                    return index;\n                  }\n                  return -1;\n                }).filter(function (index) {\n                  return index >= 0;\n                });\n              }\n              if (summaryCells.length) {\n                that._footerItems.push({\n                  rowType: \"totalFooter\",\n                  summaryCells: summaryCells\n                });\n              }\n            }\n            that.callBase(change);\n          },\n          _prepareUnsavedDataSelector: function _prepareUnsavedDataSelector(selector) {\n            var that = this;\n            if (recalculateWhileEditing(that)) {\n              var editingController = that.getController(\"editing\");\n              if (editingController) {\n                return function (data) {\n                  data = editingController.getUpdatedData(data);\n                  return selector(data);\n                };\n              }\n            }\n            return selector;\n          },\n          _prepareAggregateSelector: function _prepareAggregateSelector(selector, aggregator) {\n            selector = this._prepareUnsavedDataSelector(selector);\n            if (\"avg\" === aggregator || \"sum\" === aggregator) {\n              return function (data) {\n                var value = selector(data);\n                return (0, _type.isDefined)(value) ? Number(value) : value;\n              };\n            }\n            return selector;\n          },\n          _getAggregates: function _getAggregates(summaryItems, remoteOperations) {\n            var that = this,\n              columnsController = that.getController(\"columns\"),\n              calculateCustomSummary = that.option(\"summary.calculateCustomSummary\"),\n              commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n            return (0, _iterator.map)(summaryItems || [], function (summaryItem) {\n              var options,\n                column = columnsController.columnOption(summaryItem.column),\n                calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : (0, _data.compileGetter)(column ? column.dataField : summaryItem.column),\n                aggregator = summaryItem.summaryType || \"count\",\n                selector = summaryItem.column,\n                skipEmptyValues = (0, _type.isDefined)(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n              if (remoteOperations) {\n                return {\n                  selector: summaryItem.column,\n                  summaryType: aggregator\n                };\n              } else {\n                selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n                if (\"custom\" === aggregator) {\n                  if (!calculateCustomSummary) {\n                    _ui2.default.log(\"E1026\");\n                    calculateCustomSummary = function calculateCustomSummary() {};\n                  }\n                  options = {\n                    component: that.component,\n                    name: summaryItem.name\n                  };\n                  calculateCustomSummary(options);\n                  options.summaryProcess = \"calculate\";\n                  aggregator = {\n                    seed: function seed(groupIndex) {\n                      options.summaryProcess = \"start\";\n                      options.totalValue = void 0;\n                      options.groupIndex = groupIndex;\n                      delete options.value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    },\n                    step: function step(totalValue, value) {\n                      options.summaryProcess = \"calculate\";\n                      options.totalValue = totalValue;\n                      options.value = value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    },\n                    finalize: function finalize(totalValue) {\n                      options.summaryProcess = \"finalize\";\n                      options.totalValue = totalValue;\n                      delete options.value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    }\n                  };\n                }\n                return {\n                  selector: selector,\n                  aggregator: aggregator,\n                  skipEmptyValues: skipEmptyValues\n                };\n              }\n            });\n          },\n          _addSortInfo: function _addSortInfo(sortByGroups, groupColumn, selector, sortOrder) {\n            var groupIndex;\n            if (groupColumn) {\n              groupIndex = groupColumn.groupIndex;\n              sortOrder = sortOrder || groupColumn.sortOrder;\n              if ((0, _type.isDefined)(groupIndex)) {\n                sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n                sortByGroups[groupIndex].push({\n                  selector: selector,\n                  desc: \"desc\" === sortOrder\n                });\n              }\n            }\n          },\n          _findSummaryItem: function _findSummaryItem(summaryItems, name) {\n            var summaryItemIndex = -1;\n            var getFullName = function getFullName(summaryItem) {\n              var summaryType = summaryItem.summaryType,\n                column = summaryItem.column;\n              return summaryType && column && summaryType + \"_\" + column;\n            };\n            if ((0, _type.isDefined)(name)) {\n              (0, _iterator.each)(summaryItems || [], function (index) {\n                if (this.name === name || index === name || this.summaryType === name || this.column === name || getFullName(this) === name) {\n                  summaryItemIndex = index;\n                  return false;\n                }\n              });\n            }\n            return summaryItemIndex;\n          },\n          _getSummarySortByGroups: function _getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems) {\n            var that = this,\n              columnsController = that._columnsController,\n              groupColumns = columnsController.getGroupColumns(),\n              sortByGroups = [];\n            if (!groupSummaryItems || !groupSummaryItems.length) {\n              return;\n            }\n            (0, _iterator.each)(sortByGroupSummaryInfo || [], function () {\n              var sortOrder = this.sortOrder,\n                groupColumn = this.groupColumn,\n                summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n              if (summaryItemIndex < 0) {\n                return;\n              }\n              var selector = function selector(data) {\n                return getGroupAggregates(data)[summaryItemIndex];\n              };\n              if ((0, _type.isDefined)(groupColumn)) {\n                groupColumn = columnsController.columnOption(groupColumn);\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n              } else {\n                (0, _iterator.each)(groupColumns, function (groupIndex, groupColumn) {\n                  that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n                });\n              }\n            });\n            return sortByGroups;\n          },\n          _createDataSourceAdapterCore: function _createDataSourceAdapterCore(dataSource, remoteOperations) {\n            var that = this,\n              dataSourceAdapter = this.callBase(dataSource, remoteOperations);\n            dataSourceAdapter.summaryGetter(function (currentRemoteOperations) {\n              return that._getSummaryOptions(currentRemoteOperations || remoteOperations);\n            });\n            return dataSourceAdapter;\n          },\n          _getSummaryOptions: function _getSummaryOptions(remoteOperations) {\n            var that = this,\n              groupSummaryItems = that.option(\"summary.groupItems\"),\n              totalSummaryItems = that.option(\"summary.totalItems\"),\n              sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\"),\n              groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary),\n              totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary),\n              sortByGroups = function sortByGroups() {\n                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n              };\n            if (groupAggregates.length || totalAggregates.length) {\n              return {\n                groupAggregates: groupAggregates,\n                totalAggregates: totalAggregates,\n                sortByGroups: sortByGroups\n              };\n            }\n          },\n          publicMethods: function publicMethods() {\n            var methods = this.callBase();\n            methods.push(\"getTotalSummaryValue\");\n            return methods;\n          },\n          getTotalSummaryValue: function getTotalSummaryValue(summaryItemName) {\n            var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName),\n              aggregates = this._dataSource.totalAggregates();\n            if (aggregates.length && summaryItemIndex > -1) {\n              return aggregates[summaryItemIndex];\n            }\n          },\n          optionChanged: function optionChanged(args) {\n            if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n              args.name = \"dataSource\";\n            }\n            this.callBase(args);\n          },\n          init: function init() {\n            this._footerItems = [];\n            this.callBase();\n          },\n          footerItems: function footerItems() {\n            return this._footerItems;\n          }\n        };\n      }(),\n      editing: function () {\n        return {\n          _refreshSummary: function _refreshSummary() {\n            if (recalculateWhileEditing(this)) {\n              this._dataController.refresh({\n                load: true,\n                changesOnly: true\n              });\n            }\n          },\n          _addEditData: function _addEditData(params) {\n            var result = this.callBase.apply(this, arguments);\n            if (params.type) {\n              this._refreshSummary();\n            }\n            return result;\n          },\n          _removeEditDataItem: function _removeEditDataItem() {\n            var result = this.callBase.apply(this, arguments);\n            this._refreshSummary();\n            return result;\n          },\n          cancelEditData: function cancelEditData() {\n            var result = this.callBase.apply(this, arguments);\n            this._refreshSummary();\n            return result;\n          }\n        };\n      }()\n    },\n    views: {\n      rowsView: function () {\n        return {\n          _createRow: function _createRow(row) {\n            var $row = this.callBase(row);\n            row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\n            return $row;\n          },\n          _renderCells: function _renderCells($row, options) {\n            this.callBase.apply(this, arguments);\n            if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n              this._renderGroupSummaryCells($row, options);\n            }\n          },\n          _hasAlignByColumnSummaryItems: function _hasAlignByColumnSummaryItems(columnIndex, options) {\n            return !(0, _type.isDefined)(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;\n          },\n          _getAlignByColumnCellCount: function _getAlignByColumnCellCount(groupCellColSpan, options) {\n            var columnIndex,\n              alignByColumnCellCount = 0;\n            for (var i = 1; i < groupCellColSpan; i++) {\n              columnIndex = options.row.summaryCells.length - i;\n              alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n            }\n            return alignByColumnCellCount;\n          },\n          _renderGroupSummaryCells: function _renderGroupSummaryCells($row, options) {\n            var $groupCell = $row.children().last(),\n              groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1,\n              alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n            this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n          },\n          _renderGroupSummaryCellsCore: function _renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n            if (alignByColumnCellCount > 0) {\n              $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n              for (var i = 0; i < alignByColumnCellCount; i++) {\n                var columnIndex = options.columns.length - alignByColumnCellCount + i;\n                this._renderCell($groupCell.parent(), (0, _extend.extend)({\n                  column: options.columns[columnIndex],\n                  columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n                }, options));\n              }\n            }\n          },\n          _getSummaryCellIndex: function _getSummaryCellIndex(columnIndex) {\n            return columnIndex;\n          },\n          _getCellTemplate: function _getCellTemplate(options) {\n            if (!options.column.command && !(0, _type.isDefined)(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n              return renderSummaryCell;\n            } else {\n              return this.callBase(options);\n            }\n          },\n          _getCellOptions: function _getCellOptions(options) {\n            var that = this,\n              parameters = that.callBase(options);\n            if (options.row.summaryCells) {\n              return (0, _extend.extend)(parameters, getSummaryCellOptions(that, options));\n            } else {\n              return parameters;\n            }\n          }\n        };\n      }()\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}