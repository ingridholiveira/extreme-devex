{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.spins.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (void 0 === getter) {\n        return;\n      }\n      return getter.call(receiver);\n    }\n  }\n};\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _button = require(\"../text_box/texteditor_button_collection/button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _number_box = require(\"./number_box.spin\");\nvar _number_box2 = _interopRequireDefault(_number_box);\nvar _utils = require(\"../../events/utils\");\nvar _pointer = require(\"../../events/pointer\");\nvar _extend = require(\"../../core/utils/extend\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar SPIN_CLASS = \"dx-numberbox-spin\";\nvar SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\";\nvar SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\nvar SpinButtons = function (_TextEditorButton) {\n  _inherits(SpinButtons, _TextEditorButton);\n  function SpinButtons() {\n    _classCallCheck(this, SpinButtons);\n    return _possibleConstructorReturn(this, (SpinButtons.__proto__ || Object.getPrototypeOf(SpinButtons)).apply(this, arguments));\n  }\n  _createClass(SpinButtons, [{\n    key: \"_attachEvents\",\n    value: function value(instance, $spinContainer) {\n      var editor = this.editor;\n      var eventName = (0, _utils.addNamespace)(_pointer.down, editor.NAME);\n      var $spinContainerChildren = $spinContainer.children();\n      var pointerDownAction = editor._createAction(function (e) {\n        return editor._spinButtonsPointerDownHandler(e);\n      });\n      _events_engine2.default.off($spinContainer, eventName);\n      _events_engine2.default.on($spinContainer, eventName, function (e) {\n        return pointerDownAction({\n          event: e\n        });\n      });\n      _number_box2.default.getInstance($spinContainerChildren.eq(0)).option(\"onChange\", function (e) {\n        return editor._spinUpChangeHandler(e);\n      });\n      _number_box2.default.getInstance($spinContainerChildren.eq(1)).option(\"onChange\", function (e) {\n        return editor._spinDownChangeHandler(e);\n      });\n    }\n  }, {\n    key: \"_create\",\n    value: function value() {\n      var editor = this.editor;\n      var $spinContainer = (0, _renderer2.default)(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\n      var $spinUp = (0, _renderer2.default)(\"<div>\").appendTo($spinContainer);\n      var $spinDown = (0, _renderer2.default)(\"<div>\").appendTo($spinContainer);\n      var options = this._getOptions();\n      this._addToContainer($spinContainer);\n      editor._createComponent($spinUp, _number_box2.default, (0, _extend.extend)({\n        direction: \"up\"\n      }, options));\n      editor._createComponent($spinDown, _number_box2.default, (0, _extend.extend)({\n        direction: \"down\"\n      }, options));\n      this._legacyRender(editor.$element(), this._isTouchFriendly(), options.visible);\n      return {\n        instance: $spinContainer,\n        $element: $spinContainer\n      };\n    }\n  }, {\n    key: \"_getOptions\",\n    value: function value() {\n      var editor = this.editor;\n      var visible = this._isVisible();\n      var disabled = editor.option(\"disabled\");\n      return {\n        visible: visible,\n        disabled: disabled\n      };\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function value() {\n      var editor = this.editor;\n      return _get(SpinButtons.prototype.__proto__ || Object.getPrototypeOf(SpinButtons.prototype), \"_isVisible\", this).call(this) && editor.option(\"showSpinButtons\");\n    }\n  }, {\n    key: \"_isTouchFriendly\",\n    value: function value() {\n      var editor = this.editor;\n      return editor.option(\"showSpinButtons\") && editor.option(\"useLargeSpinButtons\");\n    }\n  }, {\n    key: \"_legacyRender\",\n    value: function value($editor, isTouchFriendly, isVisible) {\n      $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);\n      $editor.toggleClass(SPIN_CLASS, isVisible);\n    }\n  }, {\n    key: \"update\",\n    value: function value() {\n      var shouldUpdate = _get(SpinButtons.prototype.__proto__ || Object.getPrototypeOf(SpinButtons.prototype), \"update\", this).call(this);\n      if (shouldUpdate) {\n        var editor = this.editor,\n          instance = this.instance;\n        var $editor = editor.$element();\n        var isVisible = this._isVisible();\n        var isTouchFriendly = this._isTouchFriendly();\n        var $spinButtons = instance.children();\n        var spinUp = _number_box2.default.getInstance($spinButtons.eq(0));\n        var spinDown = _number_box2.default.getInstance($spinButtons.eq(1));\n        var options = this._getOptions();\n        spinUp.option(options);\n        spinDown.option(options);\n        this._legacyRender($editor, isTouchFriendly, isVisible);\n      }\n    }\n  }]);\n  return SpinButtons;\n}(_button2.default);\nexports.default = SpinButtons;","map":null,"metadata":{},"sourceType":"script"}