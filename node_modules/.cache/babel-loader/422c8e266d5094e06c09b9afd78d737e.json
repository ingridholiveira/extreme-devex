{"ast":null,"code":"/**\r\n * DevExtreme (events/contextmenu.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  eventsEngine = require(\"../events/core/events_engine\"),\n  support = require(\"../core/utils/support\"),\n  devices = require(\"../core/devices\"),\n  Class = require(\"../core/class\"),\n  registerEvent = require(\"./core/event_registrator\"),\n  eventUtils = require(\"./utils\"),\n  holdEvent = require(\"./hold\");\nvar CONTEXTMENU_NAMESPACE = \"dxContexMenu\",\n  CONTEXTMENU_NAMESPACED_EVENT_NAME = eventUtils.addNamespace(\"contextmenu\", CONTEXTMENU_NAMESPACE),\n  HOLD_NAMESPACED_EVENT_NAME = eventUtils.addNamespace(holdEvent.name, CONTEXTMENU_NAMESPACE),\n  CONTEXTMENU_EVENT_NAME = \"dxcontextmenu\";\nvar ContextMenu = Class.inherit({\n  setup: function setup(element) {\n    var $element = $(element);\n    eventsEngine.on($element, CONTEXTMENU_NAMESPACED_EVENT_NAME, this._contextMenuHandler.bind(this));\n    if (support.touch || devices.isSimulator()) {\n      eventsEngine.on($element, HOLD_NAMESPACED_EVENT_NAME, this._holdHandler.bind(this));\n    }\n  },\n  _holdHandler: function _holdHandler(e) {\n    if (eventUtils.isMouseEvent(e) && !devices.isSimulator()) {\n      return;\n    }\n    this._fireContextMenu(e);\n  },\n  _contextMenuHandler: function _contextMenuHandler(e) {\n    this._fireContextMenu(e);\n  },\n  _fireContextMenu: function _fireContextMenu(e) {\n    return eventUtils.fireEvent({\n      type: CONTEXTMENU_EVENT_NAME,\n      originalEvent: e\n    });\n  },\n  teardown: function teardown(element) {\n    eventsEngine.off(element, \".\" + CONTEXTMENU_NAMESPACE);\n  }\n});\nregisterEvent(CONTEXTMENU_EVENT_NAME, new ContextMenu());\nexports.name = CONTEXTMENU_EVENT_NAME;","map":null,"metadata":{},"sourceType":"script"}