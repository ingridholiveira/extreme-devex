{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.mask.parts.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderDateParts = exports.getDatePartIndexByPosition = void 0;\nvar _date = require(\"../../localization/ldml/date.parser\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _math = require(\"../../core/utils/math\");\nvar _common = require(\"../../core/utils/common\");\nvar monthGetter = function monthGetter(date) {\n  return date.getMonth() + 1;\n};\nvar monthSetter = function monthSetter(date, value) {\n  var day = date.getDate(),\n    monthLimits = getLimits(\"M\", date),\n    newValue = (0, _math.fitIntoRange)(parseInt(value), monthLimits.min, monthLimits.max);\n  date.setMonth(newValue - 1, 1);\n  var _getLimits = getLimits(\"dM\", date),\n    min = _getLimits.min,\n    max = _getLimits.max;\n  var newDay = (0, _math.fitIntoRange)(day, min, max);\n  date.setDate(newDay);\n};\nvar PATTERN_GETTERS = {\n  a: function a(date) {\n    return date.getHours() < 12 ? 0 : 1;\n  },\n  E: \"getDay\",\n  y: \"getFullYear\",\n  M: monthGetter,\n  L: monthGetter,\n  d: \"getDate\",\n  H: \"getHours\",\n  h: \"getHours\",\n  m: \"getMinutes\",\n  s: \"getSeconds\",\n  S: \"getMilliseconds\"\n};\nvar PATTERN_SETTERS = (0, _extend.extend)({}, (0, _date.getPatternSetters)(), {\n  a: function a(date, value) {\n    var hours = date.getHours(),\n      current = hours >= 12;\n    if (current === !!parseInt(value)) {\n      return;\n    }\n    date.setHours((hours + 12) % 24);\n  },\n  d: function d(date, value) {\n    var lastDayInMonth = getLimits(\"dM\", date).max;\n    if (value > lastDayInMonth) {\n      date.setMonth(date.getMonth() + 1);\n    }\n    date.setDate(value);\n  },\n  h: function h(date, value) {\n    var isPM = date.getHours() >= 12;\n    date.setHours(+value % 12 + (isPM ? 12 : 0));\n  },\n  M: monthSetter,\n  L: monthSetter,\n  E: function E(date, value) {\n    if (value < 0) {\n      return;\n    }\n    date.setDate(date.getDate() - date.getDay() + parseInt(value));\n  },\n  y: function y(date, value) {\n    var currentYear = date.getFullYear(),\n      valueLength = String(value).length,\n      maxLimitLength = String(getLimits(\"y\", date).max).length,\n      newValue = parseInt(String(currentYear).substr(0, maxLimitLength - valueLength) + value);\n    date.setFullYear(newValue);\n  }\n});\nvar getPatternGetter = function getPatternGetter(patternChar) {\n  var unsupportedCharGetter = function unsupportedCharGetter() {\n    return patternChar;\n  };\n  return PATTERN_GETTERS[patternChar] || unsupportedCharGetter;\n};\nvar renderDateParts = function renderDateParts(text, regExpInfo) {\n  var result = regExpInfo.regexp.exec(text);\n  var start = 0,\n    end = 0,\n    sections = [];\n  for (var i = 1; i < result.length; i++) {\n    start = end;\n    end = start + result[i].length;\n    var pattern = regExpInfo.patterns[i - 1].replace(/^'|'$/g, \"\"),\n      getter = getPatternGetter(pattern[0]);\n    sections.push({\n      index: i - 1,\n      isStub: pattern === result[i],\n      caret: {\n        start: start,\n        end: end\n      },\n      pattern: pattern,\n      text: result[i],\n      limits: getLimits.bind(void 0, pattern[0]),\n      setter: PATTERN_SETTERS[pattern[0]] || _common.noop,\n      getter: getter\n    });\n  }\n  return sections;\n};\nvar getLimits = function getLimits(pattern, date, forcedPattern) {\n  var limits = {\n    y: {\n      min: 0,\n      max: 9999\n    },\n    M: {\n      min: 1,\n      max: 12\n    },\n    L: {\n      min: 1,\n      max: 12\n    },\n    d: {\n      min: 1,\n      max: 31\n    },\n    dM: {\n      min: 1,\n      max: new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()\n    },\n    E: {\n      min: 0,\n      max: 6\n    },\n    H: {\n      min: 0,\n      max: 23\n    },\n    h: {\n      min: 0,\n      max: 23\n    },\n    m: {\n      min: 0,\n      max: 59\n    },\n    s: {\n      min: 0,\n      max: 59\n    },\n    S: {\n      min: 0,\n      max: 999\n    },\n    a: {\n      min: 0,\n      max: 1\n    }\n  };\n  return limits[forcedPattern || pattern] || limits.getAmPm;\n};\nvar getDatePartIndexByPosition = function getDatePartIndexByPosition(dateParts, position) {\n  for (var i = 0; i < dateParts.length; i++) {\n    var caretInGroup = dateParts[i].caret.end >= position;\n    if (!dateParts[i].isStub && caretInGroup) {\n      return i;\n    }\n  }\n  return null;\n};\nexports.getDatePartIndexByPosition = getDatePartIndexByPosition;\nexports.renderDateParts = renderDateParts;","map":null,"metadata":{},"sourceType":"script"}