{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.header_filter_core.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\nvar _type = require(\"../../core/utils/type\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _popup = require(\"../popup\");\nvar _popup2 = _interopRequireDefault(_popup);\nvar _tree_view = require(\"../tree_view\");\nvar _tree_view2 = _interopRequireDefault(_tree_view);\nvar _list = require(\"../list\");\nvar _list2 = _interopRequireDefault(_list);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar HEADER_FILTER_CLASS = \"dx-header-filter\",\n  HEADER_FILTER_MENU_CLASS = \"dx-header-filter-menu\";\nvar DEFAULT_SEARCH_EXPRESSION = \"text\";\nfunction resetChildrenItemSelection(items) {\n  items = items || [];\n  for (var i = 0; i < items.length; i++) {\n    items[i].selected = false;\n    resetChildrenItemSelection(items[i].items);\n  }\n}\nfunction updateSelectAllState(e, filterValues) {\n  if (e.component.option(\"searchValue\")) {\n    return;\n  }\n  var selectAllCheckBox = (0, _renderer2.default)(e.element).find(\".dx-list-select-all-checkbox\").data(\"dxCheckBox\");\n  if (selectAllCheckBox && filterValues && filterValues.length) {\n    selectAllCheckBox.option(\"value\", void 0);\n  }\n}\nfunction isSearchEnabled(that, options) {\n  var headerFilter = options.headerFilter;\n  if (headerFilter && (0, _type.isDefined)(headerFilter.allowSearch)) {\n    return headerFilter.allowSearch;\n  }\n  return that.option(\"headerFilter.allowSearch\");\n}\nexports.updateHeaderFilterItemSelectionState = function (item, filterValuesMatch, isExcludeFilter) {\n  if (filterValuesMatch ^ isExcludeFilter) {\n    item.selected = true;\n    if (isExcludeFilter && item.items) {\n      for (var j = 0; j < item.items.length; j++) {\n        if (!item.items[j].selected) {\n          item.selected = void 0;\n          break;\n        }\n      }\n    }\n  } else {\n    if (isExcludeFilter || item.selected) {\n      item.selected = false;\n      resetChildrenItemSelection(item.items);\n    }\n  }\n};\nexports.HeaderFilterView = _uiGrid_core2.default.View.inherit({\n  getPopupContainer: function getPopupContainer() {\n    return this._popupContainer;\n  },\n  getListContainer: function getListContainer() {\n    return this._listContainer;\n  },\n  applyHeaderFilter: function applyHeaderFilter(options) {\n    var that = this,\n      list = that.getListContainer(),\n      isSelectAll = !list.option(\"searchValue\") && !options.isFilterBuilder && list.$element().find(\".dx-checkbox\").eq(0).hasClass(\"dx-checkbox-checked\"),\n      filterValues = [];\n    var fillSelectedItemKeys = function fillSelectedItemKeys(filterValues, items, isExclude) {\n      (0, _iterator.each)(items, function (_, item) {\n        if (void 0 !== item.selected && !!item.selected ^ isExclude) {\n          var hasChildrenWithSelection = item.items && item.items.some(function (item) {\n            return void 0 !== item.selected;\n          });\n          if (!list.option(\"searchValue\") || !hasChildrenWithSelection) {\n            filterValues.push(item.value);\n            return;\n          }\n        }\n        if (item.items && item.items.length) {\n          fillSelectedItemKeys(filterValues, item.items, isExclude);\n        }\n      });\n    };\n    if (!isSelectAll) {\n      if (\"tree\" === options.type) {\n        fillSelectedItemKeys(filterValues, list.option(\"items\"), \"exclude\" === options.filterType);\n        options.filterValues = filterValues;\n      }\n    } else {\n      if (Array.isArray(options.filterValues)) {\n        options.filterValues = [];\n      }\n    }\n    if (options.filterValues && !options.filterValues.length) {\n      options.filterValues = null;\n    }\n    options.apply();\n    that.hideHeaderFilterMenu();\n  },\n  showHeaderFilterMenu: function showHeaderFilterMenu($columnElement, options) {\n    var popupContainer,\n      that = this;\n    if (options) {\n      that._initializePopupContainer(options);\n      popupContainer = that.getPopupContainer();\n      that.hideHeaderFilterMenu();\n      that.updatePopup($columnElement, options);\n      popupContainer.show();\n    }\n  },\n  hideHeaderFilterMenu: function hideHeaderFilterMenu() {\n    var headerFilterMenu = this.getPopupContainer();\n    headerFilterMenu && headerFilterMenu.hide();\n  },\n  updatePopup: function updatePopup($element, options) {\n    var that = this,\n      alignment = \"right\" === options.alignment ? \"left\" : \"right\";\n    if (that._popupContainer) {\n      that._cleanPopupContent();\n      that._popupContainer.option(\"position\", {\n        my: alignment + \" top\",\n        at: alignment + \" bottom\",\n        of: $element,\n        collision: \"flip fit\"\n      });\n    }\n  },\n  _getSearchExpr: function _getSearchExpr(options) {\n    var lookup = options.lookup,\n      useDefaultSearchExpr = options.useDefaultSearchExpr,\n      headerFilterDataSource = options.headerFilter && options.headerFilter.dataSource;\n    if (useDefaultSearchExpr || (0, _type.isDefined)(headerFilterDataSource) && !(0, _type.isFunction)(headerFilterDataSource)) {\n      return DEFAULT_SEARCH_EXPRESSION;\n    }\n    if (lookup) {\n      return lookup.displayExpr || \"this\";\n    }\n    if (options.dataSource) {\n      var group = options.dataSource.group;\n      if (Array.isArray(group) && group.length > 0) {\n        return group[0].selector;\n      } else {\n        if ((0, _type.isFunction)(group) && !options.remoteFiltering) {\n          return group;\n        }\n      }\n    }\n    return options.dataField || options.selector;\n  },\n  _cleanPopupContent: function _cleanPopupContent() {\n    this._popupContainer && this._popupContainer.$content().empty();\n  },\n  _initializePopupContainer: function _initializePopupContainer(options) {\n    var that = this,\n      $element = that.element(),\n      headerFilterOptions = that.option(\"headerFilter\"),\n      width = options.headerFilter && options.headerFilter.width || headerFilterOptions && headerFilterOptions.width,\n      height = options.headerFilter && options.headerFilter.height || headerFilterOptions && headerFilterOptions.height,\n      dxPopupOptions = {\n        width: width,\n        height: height,\n        visible: false,\n        shading: false,\n        showTitle: false,\n        showCloseButton: false,\n        closeOnTargetScroll: false,\n        dragEnabled: false,\n        closeOnOutsideClick: true,\n        focusStateEnabled: false,\n        toolbarItems: [{\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: {\n            text: headerFilterOptions.texts.ok,\n            onClick: function onClick() {\n              that.applyHeaderFilter(options);\n            }\n          }\n        }, {\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: {\n            text: headerFilterOptions.texts.cancel,\n            onClick: function onClick() {\n              that.hideHeaderFilterMenu();\n            }\n          }\n        }],\n        resizeEnabled: true,\n        onShowing: function onShowing(e) {\n          e.component.$content().parent().addClass(\"dx-dropdowneditor-overlay\");\n          that._initializeListContainer(options);\n          options.onShowing && options.onShowing(e);\n        },\n        onShown: function onShown() {\n          that.getListContainer().focus();\n        },\n        onHidden: options.onHidden,\n        onInitialized: function onInitialized(e) {\n          var component = e.component;\n          component.option(\"animation\", component._getDefaultOptions().animation);\n        }\n      };\n    if (!(0, _type.isDefined)(that._popupContainer)) {\n      that._popupContainer = that._createComponent($element, _popup2.default, dxPopupOptions);\n    } else {\n      that._popupContainer.option(dxPopupOptions);\n    }\n  },\n  _initializeListContainer: function _initializeListContainer(options) {\n    var that = this,\n      $content = that._popupContainer.$content(),\n      widgetOptions = {\n        searchEnabled: isSearchEnabled(that, options),\n        searchTimeout: that.option(\"headerFilter.searchTimeout\"),\n        searchMode: options.headerFilter && options.headerFilter.searchMode || \"\",\n        dataSource: options.dataSource,\n        onContentReady: function onContentReady() {\n          that.renderCompleted.fire();\n        },\n        itemTemplate: function itemTemplate(data, _, element) {\n          var $element = (0, _renderer2.default)(element);\n          if (options.encodeHtml) {\n            return $element.text(data.text);\n          }\n          return $element.html(data.text);\n        }\n      };\n    if (\"tree\" === options.type) {\n      that._listContainer = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($content), _tree_view2.default, (0, _extend.extend)(widgetOptions, {\n        showCheckBoxesMode: options.isFilterBuilder ? \"normal\" : \"selectAll\",\n        keyExpr: \"id\"\n      }));\n    } else {\n      that._listContainer = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($content), _list2.default, (0, _extend.extend)(widgetOptions, {\n        searchExpr: that._getSearchExpr(options),\n        pageLoadMode: \"scrollBottom\",\n        showSelectionControls: true,\n        selectionMode: options.isFilterBuilder ? \"multiple\" : \"all\",\n        onSelectionChanged: function onSelectionChanged(e) {\n          var items = e.component.option(\"items\"),\n            selectedItems = e.component.option(\"selectedItems\");\n          if (!e.component._selectedItemsUpdating && !e.component.option(\"searchValue\") && !options.isFilterBuilder) {\n            if (0 === selectedItems.length && items.length && (!options.filterValues || options.filterValues.length <= 1)) {\n              options.filterType = \"include\";\n              options.filterValues = [];\n            } else {\n              if (selectedItems.length === items.length) {\n                options.filterType = \"exclude\";\n                options.filterValues = [];\n              }\n            }\n          }\n          (0, _iterator.each)(items, function (index, item) {\n            var filterValueIndex,\n              selected = _uiGrid_core4.default.getIndexByKey(item, selectedItems, null) >= 0,\n              oldSelected = !!item.selected;\n            if (oldSelected !== selected) {\n              item.selected = selected;\n              options.filterValues = options.filterValues || [];\n              filterValueIndex = _uiGrid_core4.default.getIndexByKey(item.value, options.filterValues, null);\n              if (filterValueIndex >= 0) {\n                options.filterValues.splice(filterValueIndex, 1);\n              }\n              if (selected ^ \"exclude\" === options.filterType) {\n                options.filterValues.push(item.value);\n              }\n            }\n          });\n          updateSelectAllState(e, options.filterValues);\n        },\n        onContentReady: function onContentReady(e) {\n          var component = e.component,\n            items = component.option(\"items\"),\n            selectedItems = [];\n          (0, _iterator.each)(items, function () {\n            if (this.selected) {\n              selectedItems.push(this);\n            }\n          });\n          component._selectedItemsUpdating = true;\n          component.option(\"selectedItems\", selectedItems);\n          component._selectedItemsUpdating = false;\n          updateSelectAllState(e, options.filterValues);\n        }\n      }));\n    }\n  },\n  _renderCore: function _renderCore() {\n    this.element().addClass(HEADER_FILTER_MENU_CLASS);\n  }\n});\nvar allowHeaderFiltering = exports.allowHeaderFiltering = function (column) {\n  return (0, _type.isDefined)(column.allowHeaderFiltering) ? column.allowHeaderFiltering : column.allowFiltering;\n};\nexports.headerFilterMixin = {\n  _applyColumnState: function _applyColumnState(options) {\n    var $headerFilterIndicator,\n      rootElement = options.rootElement,\n      column = options.column;\n    if (\"headerFilter\" === options.name) {\n      rootElement.find(\".\" + HEADER_FILTER_CLASS).remove();\n      if (allowHeaderFiltering(column)) {\n        $headerFilterIndicator = this.callBase(options).toggleClass(\"dx-header-filter-empty\", this._isHeaderFilterEmpty(column));\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\n          $headerFilterIndicator.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n        }\n      }\n      return $headerFilterIndicator;\n    }\n    return this.callBase(options);\n  },\n  _isHeaderFilterEmpty: function _isHeaderFilterEmpty(column) {\n    return !column.filterValues || !column.filterValues.length;\n  },\n  _getIndicatorClassName: function _getIndicatorClassName(name) {\n    if (\"headerFilter\" === name) {\n      return HEADER_FILTER_CLASS;\n    }\n    return this.callBase(name);\n  },\n  _renderIndicator: function _renderIndicator(options) {\n    var rtlEnabled,\n      $container = options.container,\n      $indicator = options.indicator;\n    if (\"headerFilter\" === options.name) {\n      rtlEnabled = this.option(\"rtlEnabled\");\n      if ($container.children().length && (!rtlEnabled && \"right\" === options.columnAlignment || rtlEnabled && \"left\" === options.columnAlignment)) {\n        $container.prepend($indicator);\n        return;\n      }\n    }\n    this.callBase(options);\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"headerFilter\" === args.name) {\n      var requireReady = \"columnHeadersView\" === this.name;\n      this._invalidate(requireReady, requireReady);\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}