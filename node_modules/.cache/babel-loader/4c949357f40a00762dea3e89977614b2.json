{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.pager.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _pager = require(\"../pager\");\nvar _pager2 = _interopRequireDefault(_pager);\nvar _array = require(\"../../core/utils/array\");\nvar _type = require(\"../../core/utils/type\");\nvar _window = require(\"../../core/utils/window\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar PAGER_CLASS = \"pager\",\n  MAX_PAGES_COUNT = 10;\nvar PagerView = _uiGrid_core2.default.View.inherit({\n  init: function init() {\n    var that = this,\n      dataController = that.getController(\"data\");\n    that._isVisible = false;\n    dataController.changed.add(function (e) {\n      if (e && e.repaintChangesOnly) {\n        var pager = that._getPager();\n        if (pager) {\n          pager.option({\n            pageCount: dataController.pageCount(),\n            totalCount: dataController.totalCount(),\n            hasKnownLastPage: dataController.hasKnownLastPage()\n          });\n        } else {\n          that.render();\n        }\n      } else {\n        if (!e || \"update\" !== e.changeType && \"updateSelection\" !== e.changeType) {\n          that.render();\n        }\n      }\n    });\n  },\n  _getPager: function _getPager() {\n    var $element = this.element();\n    return $element && $element.data(\"dxPager\");\n  },\n  _renderCore: function _renderCore() {\n    var that = this,\n      $element = that.element().addClass(that.addWidgetPrefix(PAGER_CLASS)),\n      pagerOptions = that.option(\"pager\") || {},\n      dataController = that.getController(\"data\"),\n      keyboardController = that.getController(\"keyboardNavigation\"),\n      options = {\n        maxPagesCount: MAX_PAGES_COUNT,\n        pageIndex: 1 + (parseInt(dataController.pageIndex()) || 0),\n        pageCount: dataController.pageCount(),\n        pageSize: dataController.pageSize(),\n        showPageSizes: pagerOptions.showPageSizeSelector,\n        showInfo: pagerOptions.showInfo,\n        pagesNavigatorVisible: pagerOptions.visible,\n        showNavigationButtons: pagerOptions.showNavigationButtons,\n        pageSizes: that.getPageSizes(),\n        totalCount: dataController.totalCount(),\n        hasKnownLastPage: dataController.hasKnownLastPage(),\n        pageIndexChanged: function pageIndexChanged(pageIndex) {\n          if (dataController.pageIndex() !== pageIndex - 1) {\n            setTimeout(function () {\n              dataController.pageIndex(pageIndex - 1);\n            });\n          }\n        },\n        pageSizeChanged: function pageSizeChanged(pageSize) {\n          setTimeout(function () {\n            dataController.pageSize(pageSize);\n          });\n        },\n        onKeyDown: function onKeyDown(e) {\n          return keyboardController && keyboardController.executeAction(\"onKeyDown\", e);\n        },\n        useLegacyKeyboardNavigation: this.option(\"useLegacyKeyboardNavigation\"),\n        useKeyboard: this.option(\"keyboardNavigation.enabled\")\n      };\n    if ((0, _type.isDefined)(pagerOptions.infoText)) {\n      options.infoText = pagerOptions.infoText;\n    }\n    that._createComponent($element, _pager2.default, options);\n  },\n  getPageSizes: function getPageSizes() {\n    var that = this,\n      dataController = that.getController(\"data\"),\n      pagerOptions = that.option(\"pager\"),\n      allowedPageSizes = pagerOptions && pagerOptions.allowedPageSizes,\n      pageSize = dataController.pageSize();\n    if (!(0, _type.isDefined)(that._pageSizes) || (0, _array.inArray)(pageSize, that._pageSizes) === -1) {\n      that._pageSizes = [];\n      if (pagerOptions) {\n        if (Array.isArray(allowedPageSizes)) {\n          that._pageSizes = allowedPageSizes;\n        } else {\n          if (allowedPageSizes && pageSize > 1) {\n            that._pageSizes = [Math.floor(pageSize / 2), pageSize, 2 * pageSize];\n          }\n        }\n      }\n    }\n    return that._pageSizes;\n  },\n  isVisible: function isVisible() {\n    var that = this,\n      dataController = that.getController(\"data\"),\n      pagerOptions = that.option(\"pager\"),\n      pagerVisible = pagerOptions && pagerOptions.visible,\n      scrolling = that.option(\"scrolling\");\n    if (that._isVisible) {\n      return true;\n    }\n    if (\"auto\" === pagerVisible) {\n      if (scrolling && (\"virtual\" === scrolling.mode || \"infinite\" === scrolling.mode)) {\n        pagerVisible = false;\n      } else {\n        pagerVisible = dataController.pageCount() > 1 || dataController.isLoaded() && !dataController.hasKnownLastPage();\n      }\n    }\n    that._isVisible = pagerVisible;\n    return pagerVisible;\n  },\n  getHeight: function getHeight() {\n    return this.getElementHeight();\n  },\n  optionChanged: function optionChanged(args) {\n    var that = this,\n      name = args.name,\n      isPager = \"pager\" === name,\n      isPaging = \"paging\" === name,\n      isDataSource = \"dataSource\" === name,\n      isScrolling = \"scrolling\" === name,\n      dataController = that.getController(\"data\");\n    if (isPager || isPaging || isScrolling || isDataSource) {\n      args.handled = true;\n      if (dataController.skipProcessingPagingChange(args.fullName)) {\n        return;\n      }\n      if (isPager || isPaging) {\n        that._pageSizes = null;\n      }\n      if (isPager || isPaging || isScrolling) {\n        that._isVisible = false;\n      }\n      if (!isDataSource) {\n        that._invalidate();\n        if ((0, _window.hasWindow)() && isPager && that.component) {\n          that.component.resize();\n        }\n      }\n    }\n  }\n});\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      pager: {\n        visible: \"auto\",\n        showPageSizeSelector: false,\n        allowedPageSizes: \"auto\"\n      }\n    };\n  },\n  views: {\n    pagerView: PagerView\n  }\n};","map":null,"metadata":{},"sourceType":"script"}