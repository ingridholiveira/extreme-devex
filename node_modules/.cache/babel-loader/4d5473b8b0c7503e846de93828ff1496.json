{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.state_storing_core.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _window = require(\"../../core/utils/window\");\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _browser = require(\"../../core/utils/browser\");\nvar _browser2 = _interopRequireDefault(_browser);\nvar _storage = require(\"../../core/utils/storage\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _type = require(\"../../core/utils/type\");\nvar _deferred = require(\"../../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/;\nvar parseDates = function parseDates(state) {\n  if (!state) {\n    return;\n  }\n  (0, _iterator.each)(state, function (key, value) {\n    var date;\n    if ((0, _type.isPlainObject)(value) || Array.isArray(value)) {\n      parseDates(value);\n    } else {\n      if (\"string\" === typeof value) {\n        date = DATE_REGEX.exec(value);\n        if (date) {\n          state[key] = new Date(Date.UTC(+date[1], +date[2] - 1, +date[3], +date[4], +date[5], +date[6]));\n        }\n      }\n    }\n  });\n};\nexports.StateStoringController = _uiGrid_core2.default.ViewController.inherit(function () {\n  var getStorage = function getStorage(options) {\n    var storage = \"sessionStorage\" === options.type ? (0, _storage.sessionStorage)() : (0, _window.getWindow)().localStorage;\n    if (!storage) {\n      if (\"file:\" === (0, _window.getWindow)().location.protocol && _browser2.default.msie) {\n        throw new Error(\"E1038\");\n      } else {\n        throw new Error(\"E1007\");\n      }\n    }\n    return storage;\n  };\n  var getUniqueStorageKey = function getUniqueStorageKey(options) {\n    return (0, _type.isDefined)(options.storageKey) ? options.storageKey : \"storage\";\n  };\n  return {\n    _loadState: function _loadState() {\n      var options = this.option(\"stateStoring\");\n      if (\"custom\" === options.type) {\n        return options.customLoad && options.customLoad();\n      }\n      try {\n        return JSON.parse(getStorage(options).getItem(getUniqueStorageKey(options)));\n      } catch (e) {\n        _ui2.default.log(e.message);\n      }\n    },\n    _saveState: function _saveState(state) {\n      var options = this.option(\"stateStoring\");\n      if (\"custom\" === options.type) {\n        options.customSave && options.customSave(state);\n        return;\n      }\n      try {\n        getStorage(options).setItem(getUniqueStorageKey(options), JSON.stringify(state));\n      } catch (e) {}\n    },\n    publicMethods: function publicMethods() {\n      return [\"state\"];\n    },\n    isEnabled: function isEnabled() {\n      return this.option(\"stateStoring.enabled\");\n    },\n    init: function init() {\n      var that = this;\n      that._state = {};\n      that._isLoaded = false;\n      that._isLoading = false;\n      that._windowUnloadHandler = function () {\n        if (void 0 !== that._savingTimeoutID) {\n          that._saveState(that.state());\n        }\n      };\n      _events_engine2.default.on((0, _window.getWindow)(), \"unload\", that._windowUnloadHandler);\n      return that;\n    },\n    isLoaded: function isLoaded() {\n      return this._isLoaded;\n    },\n    isLoading: function isLoading() {\n      return this._isLoading;\n    },\n    load: function load() {\n      var loadResult,\n        that = this;\n      that._isLoading = true;\n      loadResult = (0, _deferred.fromPromise)(that._loadState());\n      loadResult.done(function (state) {\n        that._isLoaded = true;\n        that._isLoading = false;\n        that.state(state);\n      });\n      return loadResult;\n    },\n    state: function state(_state) {\n      var that = this;\n      if (!arguments.length) {\n        return (0, _extend.extend)(true, {}, that._state);\n      } else {\n        that._state = (0, _extend.extend)({}, _state);\n        parseDates(that._state);\n      }\n    },\n    save: function save() {\n      var that = this;\n      clearTimeout(that._savingTimeoutID);\n      that._savingTimeoutID = setTimeout(function () {\n        that._saveState(that.state());\n        that._savingTimeoutID = void 0;\n      }, that.option(\"stateStoring.savingTimeout\"));\n    },\n    optionChanged: function optionChanged(args) {\n      var that = this;\n      switch (args.name) {\n        case \"stateStoring\":\n          if (that.isEnabled() && !that.isLoading()) {\n            that.load();\n          }\n          args.handled = true;\n          break;\n        default:\n          that.callBase(args);\n      }\n    },\n    dispose: function dispose() {\n      clearTimeout(this._savingTimeoutID);\n      _events_engine2.default.off((0, _window.getWindow)(), \"unload\", this._windowUnloadHandler);\n    }\n  };\n}());","map":null,"metadata":{},"sourceType":"script"}