{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.focus.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _uiData_grid = require(\"./ui.data_grid.core\");\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.focus\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _deferred = require(\"../../core/utils/deferred\");\nvar _type = require(\"../../core/utils/type\");\nvar _common = require(\"../../core/utils/common\");\nvar _uiData_grid3 = require(\"./ui.data_grid.utils\");\nvar _data = require(\"../../core/utils/data\");\nvar _extend = require(\"../../core/utils/extend\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n_uiData_grid2.default.registerModule(\"focus\", (0, _extend.extend)(true, {}, _uiGrid_core2.default, {\n  extenders: {\n    controllers: {\n      data: {\n        changeRowExpand: function changeRowExpand(path) {\n          if (this.option(\"focusedRowEnabled\") && Array.isArray(path) && this.isRowExpanded(path)) {\n            if (this._isFocusedRowInsideGroup(path)) {\n              this.option(\"focusedRowKey\", path);\n            }\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _isFocusedRowInsideGroup: function _isFocusedRowInsideGroup(path) {\n          var getter,\n            columnsController = this.getController(\"columns\"),\n            focusedRowKey = this.option(\"focusedRowKey\"),\n            rowIndex = this.getRowIndexByKey(focusedRowKey),\n            focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex],\n            groups = columnsController.getGroupDataSourceParameters(true);\n          if (focusedRow) {\n            for (var i = 0; i < path.length; ++i) {\n              getter = (0, _data.compileGetter)(groups[i] && groups[i].selector);\n              if (getter(focusedRow.data) !== path[i]) {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n        _getGroupPath: function _getGroupPath(group) {\n          var groupPath = [group.key],\n            items = group.items;\n          while (items && items[0]) {\n            var item = items[0];\n            if (void 0 !== item.key) {\n              groupPath.push(item.key);\n            }\n            items = item.items;\n          }\n          return groupPath;\n        },\n        _expandGroupByPath: function _expandGroupByPath(that, groupPath, level) {\n          var d = new _deferred.Deferred();\n          level++;\n          that.expandRow(groupPath.slice(0, level)).done(function () {\n            if (level === groupPath.length) {\n              d.resolve();\n            } else {\n              that._expandGroupByPath(that, groupPath, level).done(d.resolve).fail(d.reject);\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _calculateGlobalRowIndexByGroupedData: function _calculateGlobalRowIndexByGroupedData(key) {\n          var groupPath,\n            that = this,\n            dataSource = that._dataSource,\n            filter = that._generateFilterByKey(key),\n            deferred = new _deferred.Deferred(),\n            isGroupKey = Array.isArray(key),\n            group = dataSource.group();\n          if (isGroupKey) {\n            return deferred.resolve(-1).promise();\n          }\n          if (!dataSource._grouping._updatePagingOptions) {\n            that._calculateGlobalRowIndexByFlatData(key, null, true).done(deferred.resolve).fail(deferred.reject);\n            return deferred;\n          }\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            group: group\n          }).done(function (data) {\n            if (!data || 0 === data.length || !(0, _type.isDefined)(data[0].key) || data[0].key === -1) {\n              return deferred.resolve(-1).promise();\n            }\n            groupPath = that._getGroupPath(data[0]);\n            that._expandGroupByPath(that, groupPath, 0).done(function () {\n              that._calculateExpandedRowGlobalIndex(deferred, key, groupPath, group);\n            }).fail(deferred.reject);\n          }).fail(deferred.reject);\n          return deferred.promise();\n        },\n        _calculateExpandedRowGlobalIndex: function _calculateExpandedRowGlobalIndex(deferred, key, groupPath, group) {\n          var groupOffset,\n            groupFilter = (0, _uiData_grid3.createGroupFilter)(groupPath, {\n              group: group\n            }),\n            dataSource = this._dataSource,\n            scrollingMode = this.option(\"scrolling.mode\"),\n            isVirtualScrolling = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode,\n            pageSize = dataSource.pageSize();\n          dataSource._grouping._updatePagingOptions({\n            skip: 0,\n            take: MAX_SAFE_INTEGER\n          }, function (groupInfo, totalOffset) {\n            if ((0, _common.equalByValue)(groupInfo.path, groupPath)) {\n              groupOffset = totalOffset;\n            }\n          });\n          this._calculateGlobalRowIndexByFlatData(key, groupFilter).done(function (dataOffset) {\n            var count, currentPageOffset, groupContinuationCount;\n            if (dataOffset < 0) {\n              deferred.resolve(-1);\n              return;\n            }\n            currentPageOffset = groupOffset % pageSize || pageSize;\n            count = currentPageOffset + dataOffset - groupPath.length;\n            if (isVirtualScrolling) {\n              groupContinuationCount = 0;\n            } else {\n              groupContinuationCount = Math.floor(count / (pageSize - groupPath.length)) * groupPath.length;\n            }\n            count = groupOffset + dataOffset + groupContinuationCount;\n            deferred.resolve(count);\n          }).fail(deferred.reject);\n        }\n      }\n    }\n  }\n}));","map":null,"metadata":{},"sourceType":"script"}