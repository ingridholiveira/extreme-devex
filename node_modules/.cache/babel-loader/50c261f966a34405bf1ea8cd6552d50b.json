{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.grid_view.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _common = require(\"../../core/utils/common\");\nvar _common2 = _interopRequireDefault(_common);\nvar _window = require(\"../../core/utils/window\");\nvar _window2 = _interopRequireDefault(_window);\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _type = require(\"../../core/utils/type\");\nvar _type2 = _interopRequireDefault(_type);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _deferred = require(\"../../core/utils/deferred\");\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _browser = require(\"../../core/utils/browser\");\nvar _browser2 = _interopRequireDefault(_browser);\nvar _accessibility = require(\"../shared/accessibility\");\nvar _accessibility2 = _interopRequireDefault(_accessibility);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar TABLE_CLASS = \"table\",\n  BORDERS_CLASS = \"borders\",\n  TABLE_FIXED_CLASS = \"table-fixed\",\n  IMPORTANT_MARGIN_CLASS = \"important-margin\",\n  TEXT_CONTENT_CLASS = \"text-content\",\n  HIDDEN_CLASS = \"dx-hidden\",\n  GRIDBASE_CONTAINER_CLASS = \"dx-gridbase-container\",\n  HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\",\n  EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\",\n  VIEW_NAMES = [\"columnsSeparatorView\", \"blockSeparatorView\", \"trackerView\", \"headerPanel\", \"columnHeadersView\", \"rowsView\", \"footerView\", \"columnChooserView\", \"filterPanelView\", \"pagerView\", \"draggingHeaderView\", \"contextMenuView\", \"errorView\", \"headerFilterView\", \"filterBuilderView\"];\nvar isPercentWidth = function isPercentWidth(width) {\n  return _type2.default.isString(width) && \"%\" === width.slice(-1);\n};\nvar mergeArraysByMaxValue = function mergeArraysByMaxValue(values1, values2) {\n  var i,\n    result = [];\n  if (values1 && values2 && values1.length && values1.length === values2.length) {\n    for (i = 0; i < values1.length; i++) {\n      result.push(values1[i] > values2[i] ? values1[i] : values2[i]);\n    }\n  } else {\n    if (values1 && values1.length) {\n      result = values1;\n    } else {\n      if (values2) {\n        result = values2;\n      }\n    }\n  }\n  return result;\n};\nvar getContainerHeight = function getContainerHeight($container) {\n  var clientHeight = $container.get(0).clientHeight,\n    paddingTop = parseFloat($container.css(\"paddingTop\")),\n    paddingBottom = parseFloat($container.css(\"paddingBottom\"));\n  return clientHeight - paddingTop - paddingBottom;\n};\nvar calculateFreeWidth = function calculateFreeWidth(that, widths) {\n  var contentWidth = that._rowsView.contentWidth(),\n    totalWidth = that._getTotalWidth(widths, contentWidth);\n  return contentWidth - totalWidth;\n};\nvar calculateFreeWidthWithCurrentMinWidth = function calculateFreeWidthWithCurrentMinWidth(that, columnIndex, currentMinWidth, widths) {\n  return calculateFreeWidth(that, widths.map(function (width, index) {\n    return index === columnIndex ? currentMinWidth : width;\n  }));\n};\nvar restoreFocus = function restoreFocus(focusedElement, selectionRange) {\n  _accessibility2.default.hiddenFocus(focusedElement);\n  _uiGrid_core4.default.setSelectionRange(focusedElement, selectionRange);\n};\nvar ResizingController = _uiGrid_core2.default.ViewController.inherit({\n  _initPostRenderHandlers: function _initPostRenderHandlers() {\n    var that = this,\n      dataController = that._dataController;\n    if (!that._refreshSizesHandler) {\n      that._refreshSizesHandler = function (e) {\n        dataController.changed.remove(that._refreshSizesHandler);\n        var resizeDeferred,\n          changeType = e && e.changeType,\n          isDelayed = e && e.isDelayed,\n          items = dataController.items();\n        if (!e || \"refresh\" === changeType || \"prepend\" === changeType || \"append\" === changeType) {\n          if (!isDelayed) {\n            resizeDeferred = that.resize();\n          }\n        } else {\n          if (\"update\" === changeType && e.changeTypes) {\n            if ((items.length > 1 || \"insert\" !== e.changeTypes[0]) && !(0 === items.length && \"remove\" === e.changeTypes[0]) && !e.needUpdateDimensions) {\n              _common2.default.deferUpdate(function () {\n                that._rowsView.resize();\n              });\n            } else {\n              resizeDeferred = that.resize();\n            }\n          }\n        }\n        if (changeType && \"updateSelection\" !== changeType && \"updateFocusedRow\" !== changeType && !isDelayed) {\n          (0, _deferred.when)(resizeDeferred).done(function () {\n            that._setAriaRowColCount();\n            that.fireContentReadyAction();\n          });\n        }\n      };\n      that._dataController.changed.add(function () {\n        that._dataController.changed.add(that._refreshSizesHandler);\n      });\n    }\n  },\n  fireContentReadyAction: function fireContentReadyAction() {\n    this.component._fireContentReadyAction();\n  },\n  _setAriaRowColCount: function _setAriaRowColCount() {\n    var component = this.component;\n    component.setAria({\n      rowCount: this._dataController.totalItemsCount(),\n      colCount: component.columnCount()\n    }, component.$element().children(\".\" + GRIDBASE_CONTAINER_CLASS));\n  },\n  _getBestFitWidths: function _getBestFitWidths() {\n    if (!this.option(\"legacyRendering\")) {\n      return this._rowsView.getColumnWidths();\n    }\n    var rowsColumnWidths,\n      headerColumnWidths,\n      footerColumnWidths,\n      resultWidths,\n      that = this;\n    rowsColumnWidths = that._rowsView.getColumnWidths();\n    headerColumnWidths = that._columnHeadersView && that._columnHeadersView.getColumnWidths();\n    footerColumnWidths = that._footerView && that._footerView.getColumnWidths();\n    resultWidths = mergeArraysByMaxValue(rowsColumnWidths, headerColumnWidths);\n    resultWidths = mergeArraysByMaxValue(resultWidths, footerColumnWidths);\n    return resultWidths;\n  },\n  _setVisibleWidths: function _setVisibleWidths(visibleColumns, widths) {\n    var columnsController = this._columnsController;\n    columnsController.beginUpdate();\n    (0, _iterator.each)(visibleColumns, function (index, column) {\n      var columnId = columnsController.getColumnId(column);\n      columnsController.columnOption(columnId, \"visibleWidth\", widths[index]);\n    });\n    columnsController.endUpdate();\n  },\n  _toggleBestFitModeForView: function _toggleBestFitModeForView(view, className, isBestFit) {\n    var _this = this;\n    if (!view || !view.isVisible()) {\n      return;\n    }\n    var $rowsTables = this._rowsView.getTableElements(),\n      $viewTables = view.getTableElements();\n    (0, _iterator.each)($rowsTables, function (index, tableElement) {\n      var $tableBody,\n        $rowsTable = (0, _renderer2.default)(tableElement),\n        $viewTable = $viewTables.eq(index);\n      if ($viewTable && $viewTable.length) {\n        if (isBestFit) {\n          $tableBody = $viewTable.children(\"tbody\").appendTo($rowsTable);\n        } else {\n          $tableBody = $rowsTable.children(\".\" + className).appendTo($viewTable);\n        }\n        $tableBody.toggleClass(className, isBestFit);\n        $tableBody.toggleClass(_this.addWidgetPrefix(\"best-fit\"), isBestFit);\n      }\n    });\n  },\n  _toggleBestFitMode: function _toggleBestFitMode(isBestFit) {\n    var $element = this.component.$element(),\n      that = this;\n    if (!that.option(\"legacyRendering\")) {\n      var $rowsTable = that._rowsView._getTableElement(),\n        $rowsFixedTable = that._rowsView.getTableElements().eq(1);\n      $rowsTable.css(\"tableLayout\", isBestFit ? \"auto\" : \"fixed\");\n      $rowsTable.children(\"colgroup\").css(\"display\", isBestFit ? \"none\" : \"\");\n      $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\n      that._toggleBestFitModeForView(that._columnHeadersView, \"dx-header\", isBestFit);\n      that._toggleBestFitModeForView(that._footerView, \"dx-footer\", isBestFit);\n      if (that._needStretch()) {\n        $rowsTable.get(0).style.width = isBestFit ? \"auto\" : \"\";\n      }\n      if (_browser2.default.msie && 11 === parseInt(_browser2.default.version)) {\n        $rowsTable.find(\".\" + this.addWidgetPrefix(TABLE_FIXED_CLASS)).each(function () {\n          this.style.width = isBestFit ? \"10px\" : \"\";\n        });\n      }\n    } else {\n      $element.find(\".\" + this.addWidgetPrefix(TABLE_CLASS)).toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);\n      $element.find(EDITORS_INPUT_SELECTOR).toggleClass(HIDDEN_CLASS, isBestFit);\n      $element.find(\".dx-group-cell\").toggleClass(HIDDEN_CLASS, isBestFit);\n      $element.find(\".dx-header-row .\" + this.addWidgetPrefix(TEXT_CONTENT_CLASS)).css(\"maxWidth\", \"\");\n    }\n  },\n  _synchronizeColumns: function _synchronizeColumns() {\n    var resetBestFitMode,\n      focusedElement,\n      isFocusOutsideWindow,\n      selectionRange,\n      that = this,\n      columnsController = that._columnsController,\n      visibleColumns = columnsController.getVisibleColumns(),\n      columnAutoWidth = that.option(\"columnAutoWidth\"),\n      legacyRendering = that.option(\"legacyRendering\"),\n      needBestFit = that._needBestFit(),\n      hasMinWidth = false,\n      isColumnWidthsCorrected = false,\n      resultWidths = [],\n      normalizeWidthsByExpandColumns = function normalizeWidthsByExpandColumns() {\n        var expandColumnWidth;\n        (0, _iterator.each)(visibleColumns, function (index, column) {\n          if (\"groupExpand\" === column.type) {\n            expandColumnWidth = resultWidths[index];\n          }\n        });\n        (0, _iterator.each)(visibleColumns, function (index, column) {\n          if (\"groupExpand\" === column.type && expandColumnWidth) {\n            resultWidths[index] = expandColumnWidth;\n          }\n        });\n      };\n    !needBestFit && (0, _iterator.each)(visibleColumns, function (index, column) {\n      if (\"auto\" === column.width || legacyRendering && column.fixed) {\n        needBestFit = true;\n        return false;\n      }\n    });\n    (0, _iterator.each)(visibleColumns, function (index, column) {\n      if (column.minWidth) {\n        hasMinWidth = true;\n        return false;\n      }\n    });\n    that._setVisibleWidths(visibleColumns, []);\n    if (needBestFit) {\n      focusedElement = _dom_adapter2.default.getActiveElement();\n      selectionRange = _uiGrid_core4.default.getSelectionRange(focusedElement);\n      that._toggleBestFitMode(true);\n      resetBestFitMode = true;\n    }\n    _common2.default.deferUpdate(function () {\n      if (needBestFit) {\n        resultWidths = that._getBestFitWidths();\n        (0, _iterator.each)(visibleColumns, function (index, column) {\n          var columnId = columnsController.getColumnId(column);\n          columnsController.columnOption(columnId, \"bestFitWidth\", resultWidths[index], true);\n        });\n      } else {\n        if (hasMinWidth) {\n          resultWidths = that._getBestFitWidths();\n        }\n      }\n      (0, _iterator.each)(visibleColumns, function (index) {\n        var width = this.width;\n        if (\"auto\" !== width) {\n          if (_type2.default.isDefined(width)) {\n            resultWidths[index] = _type2.default.isNumeric(width) ? parseFloat(width) : width;\n          } else {\n            if (!columnAutoWidth) {\n              resultWidths[index] = void 0;\n            }\n          }\n        }\n      });\n      if (resetBestFitMode) {\n        that._toggleBestFitMode(false);\n        resetBestFitMode = false;\n        if (focusedElement && focusedElement !== _dom_adapter2.default.getActiveElement()) {\n          isFocusOutsideWindow = focusedElement.getBoundingClientRect().bottom < 0;\n          if (!isFocusOutsideWindow) {\n            if (_browser2.default.msie) {\n              setTimeout(function () {\n                restoreFocus(focusedElement, selectionRange);\n              });\n            } else {\n              restoreFocus(focusedElement, selectionRange);\n            }\n          }\n        }\n      }\n      isColumnWidthsCorrected = that._correctColumnWidths(resultWidths, visibleColumns);\n      if (columnAutoWidth) {\n        normalizeWidthsByExpandColumns();\n        if (that._needStretch()) {\n          that._processStretch(resultWidths, visibleColumns);\n        }\n      }\n      _common2.default.deferRender(function () {\n        if (needBestFit || isColumnWidthsCorrected) {\n          that._setVisibleWidths(visibleColumns, resultWidths);\n        }\n      });\n    });\n  },\n  _needBestFit: function _needBestFit() {\n    return this.option(\"columnAutoWidth\");\n  },\n  _needStretch: function _needStretch() {\n    return this.option(\"legacyRendering\") || this._columnsController.getVisibleColumns().some(function (c) {\n      return \"auto\" === c.width && !c.command;\n    });\n  },\n  _getAverageColumnsWidth: function _getAverageColumnsWidth(resultWidths) {\n    var freeWidth = calculateFreeWidth(this, resultWidths),\n      columnCountWithoutWidth = resultWidths.filter(function (width) {\n        return void 0 === width;\n      }).length;\n    return freeWidth / columnCountWithoutWidth;\n  },\n  _correctColumnWidths: function _correctColumnWidths(resultWidths, visibleColumns) {\n    var i,\n      averageColumnsWidth,\n      lastColumnIndex,\n      that = this,\n      hasPercentWidth = false,\n      hasAutoWidth = false,\n      isColumnWidthsCorrected = false,\n      $element = that.component.$element(),\n      hasWidth = that._hasWidth;\n    for (i = 0; i < visibleColumns.length; i++) {\n      var index = i,\n        column = visibleColumns[index],\n        isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH,\n        width = resultWidths[index],\n        minWidth = column.minWidth;\n      if (minWidth) {\n        if (void 0 === width) {\n          averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);\n          width = averageColumnsWidth;\n        } else {\n          if (isPercentWidth(width)) {\n            var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);\n            if (freeWidth < 0) {\n              width = -1;\n            }\n          }\n        }\n      }\n      if (minWidth && that._getRealColumnWidth(width) < minWidth && !isHiddenColumn) {\n        resultWidths[index] = minWidth;\n        isColumnWidthsCorrected = true;\n        i = -1;\n      }\n      if (!_type2.default.isDefined(column.width)) {\n        hasAutoWidth = true;\n      }\n      if (isPercentWidth(column.width)) {\n        hasPercentWidth = true;\n      }\n    }\n    if ($element && that._maxWidth) {\n      delete that._maxWidth;\n      $element.css(\"maxWidth\", \"\");\n    }\n    if (!hasAutoWidth && resultWidths.length) {\n      var contentWidth = that._rowsView.contentWidth(),\n        scrollbarWidth = that._rowsView.getScrollbarWidth(),\n        totalWidth = that._getTotalWidth(resultWidths, contentWidth);\n      if (totalWidth < contentWidth) {\n        lastColumnIndex = _uiGrid_core4.default.getLastResizableColumnIndex(visibleColumns, resultWidths);\n        if (lastColumnIndex >= 0) {\n          resultWidths[lastColumnIndex] = \"auto\";\n          isColumnWidthsCorrected = true;\n          if (!hasWidth && !hasPercentWidth) {\n            that._maxWidth = totalWidth + scrollbarWidth + (that.option(\"showBorders\") ? 2 : 0);\n            $element.css(\"maxWidth\", that._maxWidth);\n          }\n        }\n      }\n    }\n    return isColumnWidthsCorrected;\n  },\n  _processStretch: function _processStretch(resultSizes, visibleColumns) {\n    var diff,\n      diffElement,\n      onePixelElementsCount,\n      i,\n      groupSize = this._rowsView.contentWidth(),\n      tableSize = this._getTotalWidth(resultSizes, groupSize),\n      unusedIndexes = {\n        length: 0\n      };\n    if (!resultSizes.length) {\n      return;\n    }\n    (0, _iterator.each)(visibleColumns, function (index) {\n      if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {\n        unusedIndexes[index] = true;\n        unusedIndexes.length++;\n      }\n    });\n    diff = groupSize - tableSize;\n    diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));\n    onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);\n    if (diff >= 0) {\n      for (i = 0; i < resultSizes.length; i++) {\n        if (unusedIndexes[i]) {\n          continue;\n        }\n        resultSizes[i] += diffElement;\n        if (onePixelElementsCount > 0) {\n          if (onePixelElementsCount < 1) {\n            resultSizes[i] += onePixelElementsCount;\n            onePixelElementsCount = 0;\n          } else {\n            resultSizes[i]++;\n            onePixelElementsCount--;\n          }\n        }\n      }\n    }\n  },\n  _getRealColumnWidth: function _getRealColumnWidth(width, groupWidth) {\n    if (!isPercentWidth(width)) {\n      return parseFloat(width);\n    }\n    groupWidth = groupWidth || this._rowsView.contentWidth();\n    return parseFloat(width) * groupWidth / 100;\n  },\n  _getTotalWidth: function _getTotalWidth(widths, groupWidth) {\n    var width,\n      i,\n      result = 0;\n    for (i = 0; i < widths.length; i++) {\n      width = widths[i];\n      if (width && width !== HIDDEN_COLUMNS_WIDTH) {\n        result += this._getRealColumnWidth(width, groupWidth);\n      }\n    }\n    return result;\n  },\n  updateSize: function updateSize($rootElement) {\n    var $groupElement,\n      width,\n      that = this,\n      importantMarginClass = that.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);\n    if (void 0 === that._hasHeight && $rootElement && $rootElement.is(\":visible\")) {\n      $groupElement = $rootElement.children(\".\" + that.getWidgetContainerClass());\n      if ($groupElement.length) {\n        $groupElement.detach();\n      }\n      that._hasHeight = !!getContainerHeight($rootElement);\n      width = $rootElement.width();\n      $rootElement.addClass(importantMarginClass);\n      that._hasWidth = $rootElement.width() === width;\n      $rootElement.removeClass(importantMarginClass);\n      if ($groupElement.length) {\n        $groupElement.appendTo($rootElement);\n      }\n    }\n  },\n  publicMethods: function publicMethods() {\n    return [\"resize\", \"updateDimensions\"];\n  },\n  resize: function resize() {\n    return !this.component._requireResize && this.updateDimensions();\n  },\n  updateDimensions: function updateDimensions(checkSize) {\n    var that = this;\n    that._initPostRenderHandlers();\n    if (!that._checkSize(checkSize)) {\n      return;\n    }\n    var prevResult = that._resizeDeferred,\n      result = that._resizeDeferred = new _deferred.Deferred();\n    (0, _deferred.when)(prevResult).always(function () {\n      _common2.default.deferRender(function () {\n        if (that._dataController.isLoaded()) {\n          that._synchronizeColumns();\n        }\n        that._resetGroupElementHeight();\n        _common2.default.deferUpdate(function () {\n          _common2.default.deferRender(function () {\n            _common2.default.deferUpdate(function () {\n              that._updateDimensionsCore();\n            });\n          });\n        });\n      }).done(result.resolve).fail(result.reject);\n    });\n    return result.promise();\n  },\n  _resetGroupElementHeight: function _resetGroupElementHeight() {\n    var groupElement = this.component.$element().children().get(0),\n      scrollable = this._rowsView.getScrollable();\n    if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {\n      groupElement.style.height = \"\";\n    }\n  },\n  _checkSize: function _checkSize(checkSize) {\n    var $rootElement = this.component.$element();\n    if (checkSize && (this._lastWidth === $rootElement.width() && this._lastHeight === $rootElement.height() || !$rootElement.is(\":visible\"))) {\n      return false;\n    }\n    return true;\n  },\n  _setScrollerSpacingCore: function _setScrollerSpacingCore(hasHeight) {\n    var that = this,\n      vScrollbarWidth = hasHeight ? that._rowsView.getScrollbarWidth() : 0,\n      hScrollbarWidth = that._rowsView.getScrollbarWidth(true);\n    _common2.default.deferRender(function () {\n      that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);\n      that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);\n      that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth);\n    });\n  },\n  _setScrollerSpacing: function _setScrollerSpacing(hasHeight) {\n    var _this2 = this;\n    if (true === this.option(\"scrolling.useNative\")) {\n      _common2.default.deferRender(function () {\n        _common2.default.deferUpdate(function () {\n          _this2._setScrollerSpacingCore(hasHeight);\n        });\n      });\n    } else {\n      this._setScrollerSpacingCore(hasHeight);\n    }\n  },\n  _updateDimensionsCore: function _updateDimensionsCore() {\n    var hasHeight,\n      $testDiv,\n      that = this,\n      dataController = that._dataController,\n      rowsView = that._rowsView,\n      $rootElement = that.component.$element(),\n      groupElement = $rootElement.children().get(0),\n      rootElementHeight = $rootElement && ($rootElement.get(0).clientHeight || $rootElement.height()),\n      maxHeight = parseFloat($rootElement.css(\"maxHeight\")),\n      maxHeightHappened = maxHeight && rootElementHeight >= maxHeight,\n      height = that.option(\"height\") || $rootElement.get(0).style.height,\n      editorFactory = that.getController(\"editorFactory\"),\n      isMaxHeightApplied = maxHeightHappened && groupElement.scrollHeight === groupElement.offsetHeight;\n    that.updateSize($rootElement);\n    hasHeight = that._hasHeight || maxHeightHappened;\n    if (height && that._hasHeight ^ \"auto\" !== height) {\n      $testDiv = (0, _renderer2.default)(\"<div>\").height(height).appendTo($rootElement);\n      that._hasHeight = !!$testDiv.height();\n      $testDiv.remove();\n    }\n    _common2.default.deferRender(function () {\n      rowsView.height(null, hasHeight);\n      if (maxHeightHappened && !isMaxHeightApplied) {\n        (0, _renderer2.default)(groupElement).css(\"height\", maxHeight);\n      }\n      if (!dataController.isLoaded()) {\n        rowsView.setLoading(dataController.isLoading());\n        return;\n      }\n      _common2.default.deferUpdate(function () {\n        that._updateLastSizes($rootElement);\n        that._setScrollerSpacing(hasHeight);\n        (0, _iterator.each)(VIEW_NAMES, function (index, viewName) {\n          var view = that.getView(viewName);\n          if (view) {\n            view.resize();\n          }\n        });\n        editorFactory && editorFactory.resize();\n      });\n    });\n  },\n  _updateLastSizes: function _updateLastSizes($rootElement) {\n    this._lastWidth = $rootElement.width();\n    this._lastHeight = $rootElement.height();\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"width\":\n      case \"height\":\n        this.component._renderDimensions();\n        this.resize();\n      case \"legacyRendering\":\n      case \"renderAsync\":\n        args.handled = true;\n        return;\n      default:\n        this.callBase(args);\n    }\n  },\n  init: function init() {\n    var that = this;\n    that._dataController = that.getController(\"data\");\n    that._columnsController = that.getController(\"columns\");\n    that._columnHeadersView = that.getView(\"columnHeadersView\");\n    that._footerView = that.getView(\"footerView\");\n    that._rowsView = that.getView(\"rowsView\");\n  }\n});\nvar SynchronizeScrollingController = _uiGrid_core2.default.ViewController.inherit({\n  _scrollChangedHandler: function _scrollChangedHandler(views, pos, viewName) {\n    for (var j = 0; j < views.length; j++) {\n      if (views[j] && views[j].name !== viewName) {\n        views[j].scrollTo({\n          left: pos.left,\n          top: pos.top\n        });\n      }\n    }\n  },\n  init: function init() {\n    var view,\n      i,\n      views = [this.getView(\"columnHeadersView\"), this.getView(\"footerView\"), this.getView(\"rowsView\")];\n    for (i = 0; i < views.length; i++) {\n      view = views[i];\n      if (view) {\n        view.scrollChanged.add(this._scrollChangedHandler.bind(this, views));\n      }\n    }\n  }\n});\nvar GridView = _uiGrid_core2.default.View.inherit({\n  _endUpdateCore: function _endUpdateCore() {\n    if (this.component._requireResize) {\n      this.component._requireResize = false;\n      this._resizingController.resize();\n    }\n  },\n  _getWidgetAriaLabel: function _getWidgetAriaLabel() {\n    return \"dxDataGrid-ariaDataGrid\";\n  },\n  init: function init() {\n    var that = this;\n    that._resizingController = that.getController(\"resizing\");\n    that._dataController = that.getController(\"data\");\n  },\n  getView: function getView(name) {\n    return this.component._views[name];\n  },\n  element: function element() {\n    return this._groupElement;\n  },\n  optionChanged: function optionChanged(args) {\n    var that = this;\n    if (_type2.default.isDefined(that._groupElement) && \"showBorders\" === args.name) {\n      that._groupElement.toggleClass(that.addWidgetPrefix(BORDERS_CLASS), !!args.value);\n      args.handled = true;\n    } else {\n      that.callBase(args);\n    }\n  },\n  _renderViews: function _renderViews($groupElement) {\n    var that = this;\n    (0, _iterator.each)(VIEW_NAMES, function (index, viewName) {\n      var view = that.getView(viewName);\n      if (view) {\n        view.render($groupElement);\n      }\n    });\n  },\n  _getTableRoleName: function _getTableRoleName() {\n    return \"grid\";\n  },\n  render: function render($rootElement) {\n    var that = this,\n      isFirstRender = !that._groupElement,\n      $groupElement = that._groupElement || (0, _renderer2.default)(\"<div>\").addClass(that.getWidgetContainerClass());\n    $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);\n    $groupElement.toggleClass(that.addWidgetPrefix(BORDERS_CLASS), !!that.option(\"showBorders\"));\n    that.setAria(\"role\", \"presentation\", $rootElement);\n    that.component.setAria({\n      role: this._getTableRoleName(),\n      label: _message2.default.format(that._getWidgetAriaLabel())\n    }, $groupElement);\n    that._rootElement = $rootElement || that._rootElement;\n    if (isFirstRender) {\n      that._groupElement = $groupElement;\n      _window2.default.hasWindow() && that.getController(\"resizing\").updateSize($rootElement);\n      $groupElement.appendTo($rootElement);\n    }\n    that._renderViews($groupElement);\n  },\n  update: function update() {\n    var that = this,\n      $rootElement = that._rootElement,\n      $groupElement = that._groupElement,\n      resizingController = that.getController(\"resizing\");\n    if ($rootElement && $groupElement) {\n      resizingController.resize();\n      if (that._dataController.isLoaded()) {\n        that._resizingController.fireContentReadyAction();\n      }\n    }\n  }\n});\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      showBorders: false,\n      renderAsync: false,\n      legacyRendering: false\n    };\n  },\n  controllers: {\n    resizing: ResizingController,\n    synchronizeScrolling: SynchronizeScrollingController\n  },\n  views: {\n    gridView: GridView\n  }\n};","map":null,"metadata":{},"sourceType":"script"}