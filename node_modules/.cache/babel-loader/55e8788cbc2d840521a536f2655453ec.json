{"ast":null,"code":"/**\r\n * DevExtreme (ui/list/ui.list.edit.decorator.reorder.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  eventUtils = require(\"../../events/utils\"),\n  registerDecorator = require(\"./ui.list.edit.decorator_registry\").register,\n  EditDecorator = require(\"./ui.list.edit.decorator\"),\n  Sortable = require(\"../sortable\");\nvar REORDER_HANDLE_CONTAINER_CLASS = \"dx-list-reorder-handle-container\",\n  REORDER_HANDLE_CLASS = \"dx-list-reorder-handle\",\n  REOREDERING_ITEM_GHOST_CLASS = \"dx-list-item-ghost-reordering\",\n  STATE_HOVER_CLASS = \"dx-state-hover\";\nregisterDecorator(\"reorder\", \"default\", EditDecorator.inherit({\n  _init: function _init() {\n    var list = this._list;\n    this._groupedEnabled = this._list.option(\"grouped\");\n    this._lockedDrag = false;\n    this._sortable = list._createComponent(list._scrollView.$content(), Sortable, extend({\n      filter: \".dx-list-item\",\n      container: list.$element(),\n      dragDirection: list.option(\"itemDragging.group\") ? \"both\" : \"vertical\",\n      handle: \".\" + REORDER_HANDLE_CLASS,\n      template: this._dragTemplate,\n      onDragStart: this._dragStartHandler.bind(this),\n      onDragChange: this._dragChangeHandler.bind(this),\n      onDragEnd: this._dragEndHandler.bind(this)\n    }, list.option(\"itemDragging\")));\n  },\n  _dragTemplate: function _dragTemplate(e) {\n    return $(e.itemElement).clone().width($(e.itemElement).width()).addClass(REOREDERING_ITEM_GHOST_CLASS).addClass(STATE_HOVER_CLASS);\n  },\n  _dragStartHandler: function _dragStartHandler(e) {\n    if (this._lockedDrag) {\n      e.cancel = true;\n      return;\n    }\n  },\n  _dragChangeHandler: function _dragChangeHandler(e) {\n    if (this._groupedEnabled && !this._sameParent(e.fromIndex, e.toIndex)) {\n      e.cancel = true;\n      return;\n    }\n  },\n  _sameParent: function _sameParent(fromIndex, toIndex) {\n    var $dragging = this._list.getItemElementByFlatIndex(fromIndex),\n      $over = this._list.getItemElementByFlatIndex(toIndex);\n    return $over.parent().get(0) === $dragging.parent().get(0);\n  },\n  _dragEndHandler: function _dragEndHandler(e) {\n    var $targetElement = this._list.getItemElementByFlatIndex(e.toIndex);\n    this._list.reorderItem($(e.itemElement), $targetElement);\n  },\n  afterBag: function afterBag(config) {\n    var _this = this;\n    var $container = config.$container;\n    var $handle = $(\"<div>\").addClass(REORDER_HANDLE_CLASS);\n    eventsEngine.on($handle, \"dxpointerdown\", function (e) {\n      _this._lockedDrag = !eventUtils.isMouseEvent(e);\n    });\n    eventsEngine.on($handle, \"dxhold\", {\n      timeout: 30\n    }, function (e) {\n      e.cancel = true;\n      _this._lockedDrag = false;\n    });\n    $container.addClass(REORDER_HANDLE_CONTAINER_CLASS);\n    $container.append($handle);\n  }\n}));","map":null,"metadata":{},"sourceType":"script"}