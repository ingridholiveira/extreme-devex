{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.filter_row.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _type = require(\"../../core/utils/type\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _utils = require(\"../../events/utils\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _iterator2 = _interopRequireDefault(_iterator);\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _editor = require(\"../editor/editor\");\nvar _editor2 = _interopRequireDefault(_editor);\nvar _overlay = require(\"../overlay\");\nvar _overlay2 = _interopRequireDefault(_overlay);\nvar _menu = require(\"../menu\");\nvar _menu2 = _interopRequireDefault(_menu);\nvar _accessibility = require(\"../shared/accessibility\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar OPERATION_ICONS = {\n  \"=\": \"filter-operation-equals\",\n  \"<>\": \"filter-operation-not-equals\",\n  \"<\": \"filter-operation-less\",\n  \"<=\": \"filter-operation-less-equal\",\n  \">\": \"filter-operation-greater\",\n  \">=\": \"filter-operation-greater-equal\",\n  \"default\": \"filter-operation-default\",\n  notcontains: \"filter-operation-not-contains\",\n  contains: \"filter-operation-contains\",\n  startswith: \"filter-operation-starts-with\",\n  endswith: \"filter-operation-ends-with\",\n  between: \"filter-operation-between\"\n};\nvar OPERATION_DESCRIPTORS = {\n  \"=\": \"equal\",\n  \"<>\": \"notEqual\",\n  \"<\": \"lessThan\",\n  \"<=\": \"lessThanOrEqual\",\n  \">\": \"greaterThan\",\n  \">=\": \"greaterThanOrEqual\",\n  startswith: \"startsWith\",\n  contains: \"contains\",\n  notcontains: \"notContains\",\n  endswith: \"endsWith\",\n  between: \"between\"\n};\nvar FILTERING_TIMEOUT = 700,\n  CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1,\n  FILTER_ROW_CLASS = \"filter-row\",\n  FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\",\n  FILTER_RANGE_START_CLASS = \"filter-range-start\",\n  FILTER_RANGE_END_CLASS = \"filter-range-end\",\n  MENU_CLASS = \"dx-menu\",\n  EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\",\n  EDITOR_CONTAINER_CLASS = \"dx-editor-container\",\n  EDITOR_CELL_CLASS = \"dx-editor-cell\",\n  FILTER_MENU = \"dx-filter-menu\",\n  APPLY_BUTTON_CLASS = \"dx-apply-button\",\n  HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\",\n  FOCUSED_CLASS = \"dx-focused\",\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\",\n  FILTER_MODIFIED_CLASS = \"dx-filter-modified\",\n  EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nfunction isOnClickApplyFilterMode(that) {\n  return \"onClick\" === that.option(\"filterRow.applyFilter\");\n}\nvar ColumnHeadersViewFilterRowExtender = function () {\n  var getEditorInstance = function getEditorInstance($editorContainer) {\n    var $editor = $editorContainer && $editorContainer.children(),\n      componentNames = $editor && $editor.data(\"dxComponents\"),\n      editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\n    if (editor instanceof _editor2.default) {\n      return editor;\n    }\n  };\n  var getRangeTextByFilterValue = function getRangeTextByFilterValue(that, column) {\n    var result = \"\",\n      rangeEnd = \"\",\n      filterValue = getColumnFilterValue(that, column),\n      formatOptions = _uiGrid_core4.default.getFormatOptionsByColumn(column, \"filterRow\");\n    if (Array.isArray(filterValue)) {\n      result = _uiGrid_core4.default.formatValue(filterValue[0], formatOptions);\n      rangeEnd = _uiGrid_core4.default.formatValue(filterValue[1], formatOptions);\n      if (\"\" !== rangeEnd) {\n        result += \" - \" + rangeEnd;\n      }\n    } else {\n      if ((0, _type.isDefined)(filterValue)) {\n        result = _uiGrid_core4.default.formatValue(filterValue, formatOptions);\n      }\n    }\n    return result;\n  };\n  var getColumnFilterValue = function getColumnFilterValue(that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue;\n    }\n  };\n  var getColumnSelectedFilterOperation = function getColumnSelectedFilterOperation(that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation;\n    }\n  };\n  var getFilterValue = function getFilterValue(that, columnIndex, $editorContainer) {\n    var column = that._columnsController.columnOption(columnIndex),\n      filterValue = getColumnFilterValue(that, column),\n      isFilterRange = $editorContainer.closest(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).length,\n      isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));\n    if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\n      if (isRangeStart) {\n        return filterValue[0];\n      } else {\n        return filterValue[1];\n      }\n    }\n    return !isFilterRange && void 0 !== filterValue ? filterValue : null;\n  };\n  var normalizeFilterValue = function normalizeFilterValue(that, filterValue, column, $editorContainer) {\n    if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n      var columnFilterValue = getColumnFilterValue(that, column);\n      if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n        return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0];\n      } else {\n        return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue];\n      }\n    }\n    return filterValue;\n  };\n  var updateFilterValue = function updateFilterValue(that, options) {\n    var value = \"\" === options.value ? null : options.value,\n      $editorContainer = options.container,\n      column = that._columnsController.columnOption(options.column.index),\n      filterValue = getFilterValue(that, column.index, $editorContainer);\n    if (!(0, _type.isDefined)(filterValue) && !(0, _type.isDefined)(value)) {\n      return;\n    }\n    that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\n    that._columnsController.columnOption(column.index, isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\", normalizeFilterValue(that, value, column, $editorContainer), options.notFireEvent);\n  };\n  return {\n    _updateEditorValue: function _updateEditorValue(column, $editorContainer) {\n      var that = this,\n        editor = getEditorInstance($editorContainer);\n      editor && editor.option(\"value\", getFilterValue(that, column.index, $editorContainer));\n    },\n    _columnOptionChanged: function _columnOptionChanged(e) {\n      var overlayInstance,\n        visibleIndex,\n        column,\n        $cell,\n        $editorContainer,\n        $editorRangeElements,\n        $menu,\n        that = this,\n        optionNames = e.optionNames;\n      if (_uiGrid_core4.default.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\"]) && void 0 !== e.columnIndex) {\n        visibleIndex = that._columnsController.getVisibleIndex(e.columnIndex);\n        column = that._columnsController.columnOption(e.columnIndex);\n        $cell = that._getCellElement(that.element().find(\".\" + that.addWidgetPrefix(FILTER_ROW_CLASS)).index(), visibleIndex) || (0, _renderer2.default)();\n        $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n        if (optionNames.filterValue || optionNames.bufferedFilterValue) {\n          that._updateEditorValue(column, $editorContainer);\n          overlayInstance = $cell.find(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).data(\"dxOverlay\");\n          if (overlayInstance) {\n            $editorRangeElements = overlayInstance.$content().find(\".\" + EDITOR_CONTAINER_CLASS);\n            that._updateEditorValue(column, $editorRangeElements.first());\n            that._updateEditorValue(column, $editorRangeElements.last());\n          }\n          if (!overlayInstance || !overlayInstance.option(\"visible\")) {\n            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n          }\n        }\n        if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\n          if (visibleIndex >= 0 && column) {\n            $menu = $cell.find(\".\" + MENU_CLASS);\n            if ($menu.length) {\n              that._updateFilterOperationChooser($menu, column, $editorContainer);\n              if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n                that._renderFilterRangeContent($cell, column);\n              } else {\n                if ($editorContainer.find(\".\" + FILTER_RANGE_CONTENT_CLASS).length) {\n                  that._renderEditor($editorContainer, that._getEditorOptions($editorContainer, column));\n                  that._hideFilterRange();\n                }\n              }\n            }\n          }\n        }\n        return;\n      }\n      that.callBase(e);\n    },\n    _renderCore: function _renderCore() {\n      this._filterRangeOverlayInstance = null;\n      this.callBase.apply(this, arguments);\n    },\n    _resizeCore: function _resizeCore() {\n      this.callBase.apply(this, arguments);\n      this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint();\n    },\n    isFilterRowVisible: function isFilterRowVisible() {\n      return this._isElementVisible(this.option(\"filterRow\"));\n    },\n    isVisible: function isVisible() {\n      return this.callBase() || this.isFilterRowVisible();\n    },\n    init: function init() {\n      this.callBase();\n      this._applyFilterViewController = this.getController(\"applyFilter\");\n    },\n    _initFilterRangeOverlay: function _initFilterRangeOverlay($cell, column) {\n      var that = this,\n        sharedData = {},\n        $editorContainer = $cell.find(\".dx-editor-container\"),\n        $overlay = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).appendTo($cell);\n      return that._createComponent($overlay, _overlay2.default, {\n        height: \"auto\",\n        shading: false,\n        showTitle: false,\n        focusStateEnabled: false,\n        closeOnTargetScroll: false,\n        closeOnOutsideClick: true,\n        animation: false,\n        position: {\n          my: \"top\",\n          at: \"top\",\n          of: $editorContainer.length && $editorContainer || $cell,\n          offset: \"0 -1\"\n        },\n        contentTemplate: function contentTemplate(contentElement) {\n          var editorOptions,\n            $editor = (0, _renderer2.default)(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_START_CLASS)).appendTo(contentElement);\n          column = that._columnsController.columnOption(column.index);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n          that._renderEditor($editor, editorOptions);\n          _events_engine2.default.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            var $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\n            if (\"tab\" === (0, _utils.normalizeKeyName)(e) && e.shiftKey) {\n              e.preventDefault();\n              that._hideFilterRange();\n              if (!$prevElement.length) {\n                $prevElement = $cell.prev().find(\"[tabindex]\").last();\n              }\n              _events_engine2.default.trigger($prevElement, \"focus\");\n            }\n          });\n          $editor = (0, _renderer2.default)(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_END_CLASS)).appendTo(contentElement);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n          that._renderEditor($editor, editorOptions);\n          _events_engine2.default.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            if (\"tab\" === (0, _utils.normalizeKeyName)(e) && !e.shiftKey) {\n              e.preventDefault();\n              that._hideFilterRange();\n              _events_engine2.default.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\");\n            }\n          });\n          return (0, _renderer2.default)(contentElement).addClass(that.getWidgetContainerClass());\n        },\n        onShown: function onShown(e) {\n          var $editor = e.component.$content().find(\".\" + EDITOR_CONTAINER_CLASS).first();\n          _events_engine2.default.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\");\n        },\n        onHidden: function onHidden() {\n          column = that._columnsController.columnOption(column.index);\n          $cell.find(\".\" + MENU_CLASS).parent().addClass(EDITOR_WITH_MENU_CLASS);\n          if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n            that.component.updateDimensions();\n          }\n        }\n      });\n    },\n    _updateFilterRangeOverlay: function _updateFilterRangeOverlay(options) {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.option(options);\n    },\n    _showFilterRange: function _showFilterRange($cell, column) {\n      var that = this,\n        $overlay = $cell.children(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)),\n        overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\n      if (!overlayInstance && column) {\n        overlayInstance = that._initFilterRangeOverlay($cell, column);\n      }\n      if (!overlayInstance.option(\"visible\")) {\n        that._filterRangeOverlayInstance && that._filterRangeOverlayInstance.hide();\n        that._filterRangeOverlayInstance = overlayInstance;\n        that._updateFilterRangeOverlay({\n          width: $cell.outerWidth(true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n        });\n        that._filterRangeOverlayInstance && that._filterRangeOverlayInstance.show();\n      }\n    },\n    _hideFilterRange: function _hideFilterRange() {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.hide();\n    },\n    getFilterRangeOverlayInstance: function getFilterRangeOverlayInstance() {\n      return this._filterRangeOverlayInstance;\n    },\n    _createRow: function _createRow(row) {\n      var _this = this;\n      var $row = this.callBase(row);\n      if (\"filter\" === row.rowType) {\n        $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS));\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\n          _events_engine2.default.on($row, \"keydown\", function (event) {\n            return (0, _accessibility.selectView)(\"filterRow\", _this, event);\n          });\n        }\n      }\n      return $row;\n    },\n    _getRows: function _getRows() {\n      var result = this.callBase();\n      if (this.isFilterRowVisible()) {\n        result.push({\n          rowType: \"filter\"\n        });\n      }\n      return result;\n    },\n    _renderFilterCell: function _renderFilterCell(cell, options) {\n      var $container,\n        $editorContainer,\n        that = this,\n        column = options.column,\n        $cell = (0, _renderer2.default)(cell);\n      that.setAria(\"label\", _message2.default.format(\"dxDataGrid-ariaColumn\") + \" \" + column.caption + \", \" + _message2.default.format(\"dxDataGrid-ariaFilterCell\"), $cell);\n      $cell.addClass(EDITOR_CELL_CLASS);\n      $container = (0, _renderer2.default)(\"<div>\").appendTo($cell);\n      $editorContainer = (0, _renderer2.default)(\"<div>\").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        that._renderFilterRangeContent($cell, column);\n      } else {\n        that._renderEditor($editorContainer, that._getEditorOptions($editorContainer, column));\n      }\n      if (column.alignment) {\n        $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment);\n      }\n      if (column.filterOperations && column.filterOperations.length) {\n        that._renderFilterOperationChooser($container, column, $editorContainer);\n      }\n    },\n    _renderCellContent: function _renderCellContent($cell, options) {\n      var that = this,\n        column = options.column;\n      if (\"filter\" === options.rowType) {\n        if (column.command) {\n          $cell.html(\"&nbsp;\");\n        } else {\n          if (column.allowFiltering) {\n            that.renderTemplate($cell, that._renderFilterCell.bind(that), options);\n            return;\n          }\n        }\n      }\n      that.callBase($cell, options);\n    },\n    _getEditorOptions: function _getEditorOptions($editorContainer, column) {\n      var that = this,\n        result = (0, _extend.extend)({}, column, {\n          value: getFilterValue(that, column.index, $editorContainer),\n          parentType: \"filterRow\",\n          showAllText: that.option(\"filterRow.showAllText\"),\n          updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : FILTERING_TIMEOUT,\n          width: null,\n          setValue: function setValue(value, notFireEvent) {\n            updateFilterValue(that, {\n              column: column,\n              value: value,\n              container: $editorContainer,\n              notFireEvent: notFireEvent\n            });\n          }\n        });\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n          result.placeholder = that.option(\"filterRow.betweenStartText\");\n        } else {\n          result.placeholder = that.option(\"filterRow.betweenEndText\");\n        }\n      }\n      return result;\n    },\n    _renderEditor: function _renderEditor($editorContainer, options) {\n      $editorContainer.empty();\n      return this.getController(\"editorFactory\").createEditor((0, _renderer2.default)(\"<div>\").appendTo($editorContainer), options);\n    },\n    _renderFilterRangeContent: function _renderFilterRangeContent($cell, column) {\n      var that = this,\n        $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n      $editorContainer.empty();\n      var $filterRangeContent = (0, _renderer2.default)(\"<div>\").addClass(FILTER_RANGE_CONTENT_CLASS).attr(\"tabindex\", this.option(\"tabIndex\"));\n      _events_engine2.default.on($filterRangeContent, \"focusin\", function () {\n        that._showFilterRange($cell, column);\n      });\n      $filterRangeContent.appendTo($editorContainer);\n      that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n    },\n    _updateFilterRangeContent: function _updateFilterRangeContent($cell, value) {\n      var $filterRangeContent = $cell.find(\".\" + FILTER_RANGE_CONTENT_CLASS);\n      if ($filterRangeContent.length) {\n        if (\"\" === value) {\n          $filterRangeContent.html(\"&nbsp;\");\n        } else {\n          $filterRangeContent.text(value);\n        }\n      }\n    },\n    _updateFilterOperationChooser: function _updateFilterOperationChooser($menu, column, $editorContainer) {\n      var isCellWasFocused,\n        that = this,\n        restoreFocus = function restoreFocus() {\n          var menu = _menu2.default.getInstance($menu);\n          menu && menu.option(\"focusedElement\", null);\n          isCellWasFocused && that._focusEditor($editorContainer);\n        };\n      that._createComponent($menu, _menu2.default, {\n        integrationOptions: {},\n        activeStateEnabled: false,\n        selectionMode: \"single\",\n        cssClass: that.getWidgetContainerClass() + \" \" + CELL_FOCUS_DISABLED_CLASS + \" \" + FILTER_MENU,\n        showFirstSubmenuMode: \"onHover\",\n        hideSubmenuOnMouseLeave: true,\n        items: [{\n          disabled: column.filterOperations && column.filterOperations.length ? false : true,\n          icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\n          selectable: false,\n          items: that._getFilterOperationMenuItems(column)\n        }],\n        onItemClick: function onItemClick(properties) {\n          var selectedFilterOperation = properties.itemData.name,\n            columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column),\n            notFocusEditor = false,\n            isOnClickMode = isOnClickApplyFilterMode(that),\n            options = {};\n          if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\n            return;\n          }\n          if (selectedFilterOperation) {\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\n            if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\n              notFocusEditor = \"between\" === selectedFilterOperation;\n              options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            }\n          } else {\n            options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null;\n          }\n          that._columnsController.columnOption(column.index, options);\n          that._applyFilterViewController.setHighLight($editorContainer, true);\n          if (!selectedFilterOperation) {\n            var editor = getEditorInstance($editorContainer);\n            if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\n              editor.reset();\n              editor.option(\"isValid\", true);\n            }\n          }\n          if (!notFocusEditor) {\n            that._focusEditor($editorContainer);\n          } else {\n            that._showFilterRange($editorContainer.closest(\".\" + EDITOR_CELL_CLASS), column);\n          }\n        },\n        onSubmenuShown: function onSubmenuShown() {\n          isCellWasFocused = that._isEditorFocused($editorContainer);\n          that.getController(\"editorFactory\").loseFocus();\n        },\n        onSubmenuHiding: function onSubmenuHiding() {\n          _events_engine2.default.trigger($menu, \"blur\");\n          restoreFocus();\n        },\n        onContentReady: function onContentReady(e) {\n          _events_engine2.default.on($menu, \"blur\", function () {\n            var menu = e.component;\n            menu._hideSubmenu(menu._visibleSubmenu);\n            restoreFocus();\n          });\n        },\n        rtlEnabled: that.option(\"rtlEnabled\")\n      });\n    },\n    _isEditorFocused: function _isEditorFocused($container) {\n      return $container.hasClass(FOCUSED_CLASS) || $container.parents(\".\" + FOCUSED_CLASS).length;\n    },\n    _focusEditor: function _focusEditor($container) {\n      this.getController(\"editorFactory\").focus($container);\n      _events_engine2.default.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\");\n    },\n    _renderFilterOperationChooser: function _renderFilterOperationChooser($container, column, $editorContainer) {\n      var $menu,\n        that = this;\n      if (that.option(\"filterRow.showOperationChooser\")) {\n        $container.addClass(EDITOR_WITH_MENU_CLASS);\n        $menu = (0, _renderer2.default)(\"<div>\").prependTo($container);\n        that._updateFilterOperationChooser($menu, column, $editorContainer);\n      }\n    },\n    _getFilterOperationMenuItems: function _getFilterOperationMenuItems(column) {\n      var that = this,\n        result = [{}],\n        filterRowOptions = that.option(\"filterRow\"),\n        operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\n      if (column.filterOperations && column.filterOperations.length) {\n        var availableFilterOperations = column.filterOperations.filter(function (value) {\n          return (0, _type.isDefined)(OPERATION_DESCRIPTORS[value]);\n        });\n        result = _iterator2.default.map(availableFilterOperations, function (value) {\n          var descriptionName = OPERATION_DESCRIPTORS[value];\n          return {\n            name: value,\n            selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\n            text: operationDescriptions[descriptionName],\n            icon: OPERATION_ICONS[value]\n          };\n        });\n        result.push({\n          name: null,\n          text: filterRowOptions && filterRowOptions.resetOperationText,\n          icon: OPERATION_ICONS.default\n        });\n      }\n      return result;\n    },\n    optionChanged: function optionChanged(args) {\n      var that = this;\n      switch (args.name) {\n        case \"filterRow\":\n        case \"showColumnLines\":\n          this._invalidate(true, true);\n          args.handled = true;\n          break;\n        default:\n          that.callBase(args);\n      }\n    }\n  };\n}();\nvar DataControllerFilterRowExtender = {\n  skipCalculateColumnFilters: function skipCalculateColumnFilters() {\n    return false;\n  },\n  _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n    if (this.skipCalculateColumnFilters()) {\n      return this.callBase();\n    }\n    var filters = [this.callBase()],\n      columns = this._columnsController.getVisibleColumns();\n    _iterator2.default.each(columns, function () {\n      var filter;\n      if (this.allowFiltering && this.calculateFilterExpression && (0, _type.isDefined)(this.filterValue)) {\n        filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\n        filters.push(filter);\n      }\n    });\n    return _uiGrid_core4.default.combineFilters(filters);\n  }\n};\nexports.ApplyFilterViewController = _uiGrid_core2.default.ViewController.inherit({\n  _getHeaderPanel: function _getHeaderPanel() {\n    if (!this._headerPanel) {\n      this._headerPanel = this.getView(\"headerPanel\");\n    }\n    return this._headerPanel;\n  },\n  setHighLight: function setHighLight($element, value) {\n    if (isOnClickApplyFilterMode(this)) {\n      $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value) && $element.closest(\".\" + EDITOR_CELL_CLASS).toggleClass(FILTER_MODIFIED_CLASS, value);\n      this._getHeaderPanel().enableApplyButton(value);\n    }\n  },\n  applyFilter: function applyFilter() {\n    var columnsController = this.getController(\"columns\"),\n      columns = columnsController.getColumns();\n    columnsController.beginUpdate();\n    for (var i = 0; i < columns.length; i++) {\n      var column = columns[i];\n      if (void 0 !== column.bufferedFilterValue) {\n        columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\n        column.bufferedFilterValue = void 0;\n      }\n      if (void 0 !== column.bufferedSelectedFilterOperation) {\n        columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\n        column.bufferedSelectedFilterOperation = void 0;\n      }\n    }\n    columnsController.endUpdate();\n    this.removeHighLights();\n  },\n  removeHighLights: function removeHighLights() {\n    if (isOnClickApplyFilterMode(this)) {\n      var columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + HIGHLIGHT_OUTLINE_CLASS).removeClass(HIGHLIGHT_OUTLINE_CLASS);\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + FILTER_MODIFIED_CLASS).removeClass(FILTER_MODIFIED_CLASS);\n      this._getHeaderPanel().enableApplyButton(false);\n    }\n  }\n});\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      filterRow: {\n        visible: false,\n        showOperationChooser: true,\n        showAllText: _message2.default.format(\"dxDataGrid-filterRowShowAllText\"),\n        resetOperationText: _message2.default.format(\"dxDataGrid-filterRowResetOperationText\"),\n        applyFilter: \"auto\",\n        applyFilterText: _message2.default.format(\"dxDataGrid-applyFilterText\"),\n        operationDescriptions: {\n          equal: _message2.default.format(\"dxDataGrid-filterRowOperationEquals\"),\n          notEqual: _message2.default.format(\"dxDataGrid-filterRowOperationNotEquals\"),\n          lessThan: _message2.default.format(\"dxDataGrid-filterRowOperationLess\"),\n          lessThanOrEqual: _message2.default.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\n          greaterThan: _message2.default.format(\"dxDataGrid-filterRowOperationGreater\"),\n          greaterThanOrEqual: _message2.default.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\n          startsWith: _message2.default.format(\"dxDataGrid-filterRowOperationStartsWith\"),\n          contains: _message2.default.format(\"dxDataGrid-filterRowOperationContains\"),\n          notContains: _message2.default.format(\"dxDataGrid-filterRowOperationNotContains\"),\n          endsWith: _message2.default.format(\"dxDataGrid-filterRowOperationEndsWith\"),\n          between: _message2.default.format(\"dxDataGrid-filterRowOperationBetween\"),\n          isBlank: _message2.default.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n          isNotBlank: _message2.default.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n        },\n        betweenStartText: _message2.default.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\n        betweenEndText: _message2.default.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\n      }\n    };\n  },\n  controllers: {\n    applyFilter: exports.ApplyFilterViewController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterRowExtender,\n      columnsResizer: {\n        _startResizing: function _startResizing() {\n          var cellIndex,\n            overlayInstance,\n            that = this;\n          that.callBase.apply(that, arguments);\n          if (that.isResizing()) {\n            overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n            if (overlayInstance) {\n              cellIndex = overlayInstance.$element().closest(\"td\").index();\n              if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\n                overlayInstance.$content().hide();\n              }\n            }\n          }\n        },\n        _endResizing: function _endResizing() {\n          var $cell,\n            overlayInstance,\n            that = this;\n          if (that.isResizing()) {\n            overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n            if (overlayInstance) {\n              $cell = overlayInstance.$element().closest(\"td\");\n              that._columnHeadersView._updateFilterRangeOverlay({\n                width: $cell.outerWidth(true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n              });\n              overlayInstance.$content().show();\n            }\n          }\n          that.callBase.apply(that, arguments);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterRowExtender,\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase(),\n            filterItem = this._prepareFilterItem(items);\n          return filterItem.concat(items);\n        },\n        _prepareFilterItem: function _prepareFilterItem() {\n          var that = this,\n            filterItem = [];\n          if (that._isShowApplyFilterButton()) {\n            var hintText = that.option(\"filterRow.applyFilterText\"),\n              columns = that._columnsController.getColumns(),\n              disabled = !columns.filter(function (column) {\n                return void 0 !== column.bufferedFilterValue;\n              }).length,\n              onInitialized = function onInitialized(e) {\n                (0, _renderer2.default)(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS));\n              },\n              onClickHandler = function onClickHandler() {\n                that._applyFilterViewController.applyFilter();\n              },\n              toolbarItem = {\n                widget: \"dxButton\",\n                options: {\n                  icon: \"apply-filter\",\n                  disabled: disabled,\n                  onClick: onClickHandler,\n                  hint: hintText,\n                  text: hintText,\n                  onInitialized: onInitialized\n                },\n                showText: \"inMenu\",\n                name: \"applyFilterButton\",\n                location: \"after\",\n                locateInMenu: \"auto\",\n                sortIndex: 10\n              };\n            filterItem.push(toolbarItem);\n          }\n          return filterItem;\n        },\n        _isShowApplyFilterButton: function _isShowApplyFilterButton() {\n          var filterRowOptions = this.option(\"filterRow\");\n          return filterRowOptions && filterRowOptions.visible && \"onClick\" === filterRowOptions.applyFilter;\n        },\n        init: function init() {\n          this.callBase();\n          this._dataController = this.getController(\"data\");\n          this._applyFilterViewController = this.getController(\"applyFilter\");\n        },\n        enableApplyButton: function enableApplyButton(value) {\n          this.setToolbarItemDisabled(\"applyFilterButton\", !value);\n        },\n        isVisible: function isVisible() {\n          return this.callBase() || this._isShowApplyFilterButton();\n        },\n        optionChanged: function optionChanged(args) {\n          if (\"filterRow\" === args.name) {\n            this._invalidate();\n            args.handled = true;\n          } else {\n            this.callBase(args);\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}