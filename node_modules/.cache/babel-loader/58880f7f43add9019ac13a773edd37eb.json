{"ast":null,"code":"/**\r\n * DevExtreme (ui/widget/utils.ink_ripple.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\nvar INKRIPPLE_CLASS = \"dx-inkripple\",\n  INKRIPPLE_WAVE_CLASS = \"dx-inkripple-wave\",\n  INKRIPPLE_SHOWING_CLASS = \"dx-inkripple-showing\",\n  INKRIPPLE_HIDING_CLASS = \"dx-inkripple-hiding\";\nvar DEFAULT_WAVE_SIZE_COEFFICIENT = 2,\n  MAX_WAVE_SIZE = 4e3,\n  ANIMATION_DURATION = 300,\n  HOLD_ANIMATION_DURATION = 1e3,\n  DEFAULT_WAVE_INDEX = 0;\nvar render = function render(args) {\n  args = args || {};\n  if (void 0 === args.useHoldAnimation) {\n    args.useHoldAnimation = true;\n  }\n  var config = {\n    waveSizeCoefficient: args.waveSizeCoefficient || DEFAULT_WAVE_SIZE_COEFFICIENT,\n    isCentered: args.isCentered || false,\n    wavesNumber: args.wavesNumber || 1,\n    durations: getDurations(args.useHoldAnimation)\n  };\n  return {\n    showWave: showWave.bind(this, config),\n    hideWave: hideWave.bind(this, config)\n  };\n};\nvar getInkRipple = function getInkRipple(element) {\n  var result = element.children(\".\" + INKRIPPLE_CLASS);\n  if (0 === result.length) {\n    result = $(\"<div>\").addClass(INKRIPPLE_CLASS).appendTo(element);\n  }\n  return result;\n};\nvar getWaves = function getWaves(element, wavesNumber) {\n  var inkRipple = getInkRipple(element),\n    result = inkRipple.children(\".\" + INKRIPPLE_WAVE_CLASS).toArray();\n  for (var i = result.length; i < wavesNumber; i++) {\n    var $currentWave = $(\"<div>\").appendTo(inkRipple).addClass(INKRIPPLE_WAVE_CLASS);\n    result.push($currentWave[0]);\n  }\n  return $(result);\n};\nvar getWaveStyleConfig = function getWaveStyleConfig(args, config) {\n  var left,\n    top,\n    element = config.element,\n    elementWidth = element.outerWidth(),\n    elementHeight = element.outerHeight(),\n    elementDiagonal = parseInt(Math.sqrt(elementWidth * elementWidth + elementHeight * elementHeight)),\n    waveSize = Math.min(MAX_WAVE_SIZE, parseInt(elementDiagonal * args.waveSizeCoefficient));\n  if (args.isCentered) {\n    left = (elementWidth - waveSize) / 2;\n    top = (elementHeight - waveSize) / 2;\n  } else {\n    var event = config.event,\n      position = config.element.offset(),\n      x = event.pageX - position.left,\n      y = event.pageY - position.top;\n    left = x - waveSize / 2;\n    top = y - waveSize / 2;\n  }\n  return {\n    left: left,\n    top: top,\n    height: waveSize,\n    width: waveSize\n  };\n};\nvar showWave = function showWave(args, config) {\n  var $wave = getWaves(config.element, args.wavesNumber).eq(config.wave || DEFAULT_WAVE_INDEX);\n  args.hidingTimeout && clearTimeout(args.hidingTimeout);\n  hideSelectedWave($wave);\n  $wave.css(getWaveStyleConfig(args, config));\n  args.showingTimeout = setTimeout(showingWaveHandler.bind(this, args, $wave), 0);\n};\nvar showingWaveHandler = function showingWaveHandler(args, $wave) {\n  var durationCss = args.durations.showingScale + \"ms\";\n  $wave.addClass(INKRIPPLE_SHOWING_CLASS).css(\"transitionDuration\", durationCss);\n};\nvar getDurations = function getDurations(useHoldAnimation) {\n  return {\n    showingScale: useHoldAnimation ? HOLD_ANIMATION_DURATION : ANIMATION_DURATION,\n    hidingScale: ANIMATION_DURATION,\n    hidingOpacity: ANIMATION_DURATION\n  };\n};\nvar hideSelectedWave = function hideSelectedWave($wave) {\n  $wave.removeClass(INKRIPPLE_HIDING_CLASS).css(\"transitionDuration\", \"\");\n};\nvar hideWave = function hideWave(args, config) {\n  args.showingTimeout && clearTimeout(args.showingTimeout);\n  var $wave = getWaves(config.element, config.wavesNumber).eq(config.wave || DEFAULT_WAVE_INDEX),\n    durations = args.durations,\n    durationCss = durations.hidingScale + \"ms, \" + durations.hidingOpacity + \"ms\";\n  $wave.addClass(INKRIPPLE_HIDING_CLASS).removeClass(INKRIPPLE_SHOWING_CLASS).css(\"transitionDuration\", durationCss);\n  var animationDuration = Math.max(durations.hidingScale, durations.hidingOpacity);\n  args.hidingTimeout = setTimeout(hideSelectedWave.bind(this, $wave), animationDuration);\n};\nmodule.exports = {\n  render: render\n};","map":null,"metadata":{},"sourceType":"script"}