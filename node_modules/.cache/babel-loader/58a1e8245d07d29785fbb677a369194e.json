{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.mask.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _utils = require(\"../../events/utils\");\nvar _type = require(\"../../core/utils/type\");\nvar _dom = require(\"../../core/utils/dom\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _math = require(\"../../core/utils/math\");\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _uiDate_boxMask = require(\"./ui.date_box.mask.parts\");\nvar _date = require(\"../../localization/date\");\nvar _date2 = _interopRequireDefault(_date);\nvar _date3 = require(\"../../localization/ldml/date.parser\");\nvar _date4 = require(\"../../localization/ldml/date.format\");\nvar _uiDate_box = require(\"./ui.date_box.base\");\nvar _uiDate_box2 = _interopRequireDefault(_uiDate_box);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar MASK_EVENT_NAMESPACE = \"dateBoxMask\";\nvar FORWARD = 1;\nvar BACKWARD = -1;\nvar DateBoxMask = _uiDate_box2.default.inherit({\n  _supportedKeys: function _supportedKeys(e) {\n    var _this = this;\n    var originalHandlers = this.callBase(e);\n    var callOriginalHandler = function callOriginalHandler(e) {\n      var originalHandler = originalHandlers[(0, _utils.normalizeKeyName)(e)];\n      return originalHandler && originalHandler.apply(_this, [e]);\n    };\n    var applyHandler = function applyHandler(e, maskHandler) {\n      if (_this._shouldUseOriginalHandler(e)) {\n        return callOriginalHandler.apply(_this, [e]);\n      } else {\n        return maskHandler.apply(_this, [e]);\n      }\n    };\n    return (0, _extend.extend)({}, originalHandlers, {\n      del: function del(e) {\n        return applyHandler(e, function (event) {\n          _this._revertPart(FORWARD);\n          _this._isAllSelected() || event.preventDefault();\n        });\n      },\n      backspace: function backspace(e) {\n        return applyHandler(e, function (event) {\n          _this._revertPart(BACKWARD);\n          _this._isAllSelected() || event.preventDefault();\n        });\n      },\n      home: function home(e) {\n        return applyHandler(e, function (event) {\n          _this._selectFirstPart();\n          event.preventDefault();\n        });\n      },\n      end: function end(e) {\n        return applyHandler(e, function (event) {\n          _this._selectLastPart();\n          event.preventDefault();\n        });\n      },\n      escape: function escape(e) {\n        return applyHandler(e, function (event) {\n          _this._revertChanges(event);\n        });\n      },\n      enter: function enter(e) {\n        return applyHandler(e, function (event) {\n          _this._enterHandler(event);\n        });\n      },\n      leftArrow: function leftArrow(e) {\n        return applyHandler(e, function (event) {\n          _this._selectNextPart(BACKWARD);\n          event.preventDefault();\n        });\n      },\n      rightArrow: function rightArrow(e) {\n        return applyHandler(e, function (event) {\n          _this._selectNextPart(FORWARD);\n          event.preventDefault();\n        });\n      },\n      upArrow: function upArrow(e) {\n        return applyHandler(e, function (event) {\n          _this._upDownArrowHandler(FORWARD);\n          event.preventDefault();\n        });\n      },\n      downArrow: function downArrow(e) {\n        return applyHandler(e, function (event) {\n          _this._upDownArrowHandler(BACKWARD);\n          event.preventDefault();\n        });\n      }\n    });\n  },\n  _shouldUseOriginalHandler: function _shouldUseOriginalHandler(e) {\n    return !this._useMaskBehavior() || this.option(\"opened\") || e && e.altKey;\n  },\n  _upDownArrowHandler: function _upDownArrowHandler(step) {\n    this._setNewDateIfEmpty();\n    var originalValue = this._getActivePartValue(this._initialMaskValue);\n    var currentValue = this._getActivePartValue();\n    var delta = currentValue - originalValue;\n    this._loadMaskValue(this._initialMaskValue);\n    this._partIncrease(delta + step, true);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      useMaskBehavior: false,\n      emptyDateValue: new Date(2e3, 0, 1, 0, 0, 0),\n      advanceCaret: true\n    });\n  },\n  _isSingleCharKey: function _isSingleCharKey(e) {\n    var key = e.originalEvent.key;\n    return \"string\" === typeof key && 1 === key.length && !e.ctrl && !e.alt;\n  },\n  _keyboardHandler: function _keyboardHandler(e) {\n    var key = e.originalEvent.key;\n    var result = this.callBase(e);\n    if (!this._useMaskBehavior() || !this._isSingleCharKey(e)) {\n      return result;\n    }\n    if (this._isAllSelected()) {\n      this._activePartIndex = 0;\n    }\n    this._setNewDateIfEmpty();\n    isNaN(parseInt(key)) ? this._searchString(key) : this._searchNumber(key);\n    e.originalEvent.preventDefault();\n    return result;\n  },\n  _isAllSelected: function _isAllSelected() {\n    var caret = this._caret();\n    return caret.end - caret.start === this.option(\"text\").length;\n  },\n  _getFormatPattern: function _getFormatPattern() {\n    if (this._formatPattern) {\n      return this._formatPattern;\n    }\n    var format = this._strategy.getDisplayFormat(this.option(\"displayFormat\"));\n    var isLDMLPattern = (0, _type.isString)(format) && !_date2.default._getPatternByFormat(format);\n    if (isLDMLPattern) {\n      this._formatPattern = format;\n    } else {\n      this._formatPattern = (0, _date4.getFormat)(function (value) {\n        return _date2.default.format(value, format);\n      });\n    }\n    return this._formatPattern;\n  },\n  _setNewDateIfEmpty: function _setNewDateIfEmpty() {\n    if (!this._maskValue) {\n      this._maskValue = new Date();\n      this._initialMaskValue = new Date();\n      this._renderDateParts();\n    }\n  },\n  _searchNumber: function _searchNumber(char) {\n    var _getActivePartLimits = this._getActivePartLimits(),\n      max = _getActivePartLimits.max;\n    var maxLimitLength = String(max).length;\n    var formatLength = this._getActivePartProp(\"pattern\").length;\n    this._searchValue = (this._searchValue + char).substr(-maxLimitLength);\n    if (isNaN(this._searchValue)) {\n      this._searchValue = char;\n    }\n    this._setActivePartValue(this._searchValue);\n    if (this.option(\"advanceCaret\")) {\n      var isShortFormat = 1 === formatLength;\n      var maxSearchLength = isShortFormat ? maxLimitLength : Math.min(formatLength, maxLimitLength);\n      var isLengthExceeded = this._searchValue.length === maxSearchLength;\n      var isValueOverflowed = parseInt(this._searchValue + \"0\") > max;\n      if (isLengthExceeded || isValueOverflowed) {\n        this._selectNextPart(FORWARD);\n      }\n    }\n  },\n  _searchString: function _searchString(char) {\n    if (!isNaN(parseInt(this._getActivePartProp(\"text\")))) {\n      return;\n    }\n    var limits = this._getActivePartProp(\"limits\")(this._maskValue),\n      startString = this._searchValue + char.toLowerCase(),\n      endLimit = limits.max - limits.min;\n    for (var i = 0; i <= endLimit; i++) {\n      this._loadMaskValue(this._initialMaskValue);\n      this._partIncrease(i + 1);\n      if (0 === this._getActivePartProp(\"text\").toLowerCase().indexOf(startString)) {\n        this._searchValue = startString;\n        return;\n      }\n    }\n    this._setNewDateIfEmpty();\n    if (this._searchValue) {\n      this._clearSearchValue();\n      this._searchString(char);\n    }\n  },\n  _clearSearchValue: function _clearSearchValue() {\n    this._searchValue = \"\";\n  },\n  _revertPart: function _revertPart(direction) {\n    if (!this._isAllSelected()) {\n      var actual = this._getActivePartValue(this.option(\"emptyDateValue\"));\n      this._setActivePartValue(actual);\n      this._selectNextPart(direction);\n    }\n    this._clearSearchValue();\n  },\n  _useMaskBehavior: function _useMaskBehavior() {\n    return this.option(\"useMaskBehavior\") && \"text\" === this.option(\"mode\");\n  },\n  _initMaskState: function _initMaskState() {\n    this._activePartIndex = 0;\n    this._formatPattern = null;\n    this._regExpInfo = (0, _date3.getRegExpInfo)(this._getFormatPattern(), _date2.default);\n    this._loadMaskValue();\n  },\n  _renderMask: function _renderMask() {\n    this.callBase();\n    this._detachMaskEvents();\n    this._clearMaskState();\n    if (this._useMaskBehavior()) {\n      this._attachMaskEvents();\n      this._initMaskState();\n      this._renderDateParts();\n    }\n  },\n  _renderDateParts: function _renderDateParts() {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    var text = this.option(\"text\") || this._getDisplayedText(this._maskValue);\n    if (text) {\n      this._dateParts = (0, _uiDate_boxMask.renderDateParts)(text, this._regExpInfo);\n      this._selectNextPart();\n    }\n  },\n  _detachMaskEvents: function _detachMaskEvents() {\n    _events_engine2.default.off(this._input(), \".\" + MASK_EVENT_NAMESPACE);\n  },\n  _attachMaskEvents: function _attachMaskEvents() {\n    var _this2 = this;\n    _events_engine2.default.on(this._input(), (0, _utils.addNamespace)(\"dxclick\", MASK_EVENT_NAMESPACE), this._maskClickHandler.bind(this));\n    _events_engine2.default.on(this._input(), (0, _utils.addNamespace)(\"paste\", MASK_EVENT_NAMESPACE), this._maskPasteHandler.bind(this));\n    _events_engine2.default.on(this._input(), (0, _utils.addNamespace)(\"drop\", MASK_EVENT_NAMESPACE), function () {\n      _this2._renderDisplayText(_this2._getDisplayedText(_this2._maskValue));\n      _this2._selectNextPart();\n    });\n  },\n  _selectLastPart: function _selectLastPart() {\n    if (this.option(\"text\")) {\n      this._activePartIndex = this._dateParts.length;\n      this._selectNextPart(BACKWARD);\n    }\n  },\n  _selectFirstPart: function _selectFirstPart() {\n    if (this.option(\"text\")) {\n      this._activePartIndex = -1;\n      this._selectNextPart(FORWARD);\n    }\n  },\n  _onMouseWheel: function _onMouseWheel(e) {\n    if (this._useMaskBehavior()) {\n      this._partIncrease(e.delta > 0 ? FORWARD : BACKWARD, e);\n    }\n  },\n  _selectNextPart: function _selectNextPart() {\n    var step = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n    if (!this.option(\"text\") || this._disposed) {\n      return;\n    }\n    if (step) {\n      this._initialMaskValue = new Date(this._maskValue);\n    }\n    var index = (0, _math.fitIntoRange)(this._activePartIndex + step, 0, this._dateParts.length - 1);\n    if (this._dateParts[index].isStub) {\n      var isBoundaryIndex = 0 === index && step < 0 || index === this._dateParts.length - 1 && step > 0;\n      if (!isBoundaryIndex) {\n        this._selectNextPart(step >= 0 ? step + 1 : step - 1);\n        return;\n      } else {\n        index = this._activePartIndex;\n      }\n    }\n    if (this._activePartIndex !== index) {\n      this._clearSearchValue();\n    }\n    this._activePartIndex = index;\n    this._caret(this._getActivePartProp(\"caret\"));\n  },\n  _getRealLimitsPattern: function _getRealLimitsPattern() {\n    if (\"d\" === this._getActivePartProp(\"pattern\")[0]) {\n      return \"dM\";\n    }\n  },\n  _getActivePartLimits: function _getActivePartLimits(lockOtherParts) {\n    var limitFunction = this._getActivePartProp(\"limits\");\n    return limitFunction(this._maskValue, lockOtherParts && this._getRealLimitsPattern());\n  },\n  _getActivePartValue: function _getActivePartValue(dateValue) {\n    dateValue = dateValue || this._maskValue;\n    var getter = this._getActivePartProp(\"getter\");\n    return (0, _type.isFunction)(getter) ? getter(dateValue) : dateValue[getter]();\n  },\n  _addLeadingZeroes: function _addLeadingZeroes(value) {\n    var zeroes = this._searchValue.match(/^0+/),\n      limits = this._getActivePartLimits(),\n      maxLimitLength = String(limits.max).length;\n    return ((zeroes && zeroes[0] || \"\") + String(value)).substr(-maxLimitLength);\n  },\n  _setActivePartValue: function _setActivePartValue(value, dateValue) {\n    dateValue = dateValue || this._maskValue;\n    var setter = this._getActivePartProp(\"setter\"),\n      limits = this._getActivePartLimits();\n    value = (0, _math.inRange)(value, limits.min, limits.max) ? value : value % 10;\n    value = this._addLeadingZeroes((0, _math.fitIntoRange)(value, limits.min, limits.max));\n    (0, _type.isFunction)(setter) ? setter(dateValue, value) : dateValue[setter](value);\n    this._renderDisplayText(this._getDisplayedText(dateValue));\n    this._renderDateParts();\n  },\n  _getActivePartProp: function _getActivePartProp(property) {\n    if (!this._dateParts || !this._dateParts[this._activePartIndex]) {\n      return;\n    }\n    return this._dateParts[this._activePartIndex][property];\n  },\n  _loadMaskValue: function _loadMaskValue() {\n    var value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dateOption(\"value\");\n    this._maskValue = value && new Date(value);\n    this._initialMaskValue = value && new Date(value);\n  },\n  _saveMaskValue: function _saveMaskValue() {\n    var value = this._maskValue && new Date(this._maskValue);\n    this._initialMaskValue = new Date(value);\n    this.dateOption(\"value\", value);\n  },\n  _revertChanges: function _revertChanges() {\n    this._loadMaskValue();\n    this._renderDisplayText(this._getDisplayedText(this._maskValue));\n    this._renderDateParts();\n  },\n  _renderDisplayText: function _renderDisplayText(text) {\n    this.callBase(text);\n    if (this._useMaskBehavior()) {\n      this.option(\"text\", text);\n    }\n  },\n  _partIncrease: function _partIncrease(step, lockOtherParts) {\n    this._setNewDateIfEmpty();\n    var _getActivePartLimits2 = this._getActivePartLimits(lockOtherParts),\n      max = _getActivePartLimits2.max,\n      min = _getActivePartLimits2.min;\n    var limitDelta = max - min;\n    if (1 === limitDelta) {\n      limitDelta++;\n    }\n    var newValue = step + this._getActivePartValue();\n    if (newValue > max) {\n      newValue = this._applyLimits(newValue, {\n        limitBase: min,\n        limitClosest: max,\n        limitDelta: limitDelta\n      });\n    } else {\n      if (newValue < min) {\n        newValue = this._applyLimits(newValue, {\n          limitBase: max,\n          limitClosest: min,\n          limitDelta: limitDelta\n        });\n      }\n    }\n    this._setActivePartValue(newValue);\n  },\n  _applyLimits: function _applyLimits(newValue, _ref) {\n    var limitBase = _ref.limitBase,\n      limitClosest = _ref.limitClosest,\n      limitDelta = _ref.limitDelta;\n    var delta = (newValue - limitClosest) % limitDelta;\n    return delta ? limitBase + delta - 1 * (0, _math.sign)(delta) : limitClosest;\n  },\n  _maskClickHandler: function _maskClickHandler() {\n    if (this.option(\"text\")) {\n      this._activePartIndex = (0, _uiDate_boxMask.getDatePartIndexByPosition)(this._dateParts, this._caret().start);\n      this._caret(this._getActivePartProp(\"caret\"));\n    }\n  },\n  _maskPasteHandler: function _maskPasteHandler(e) {\n    var newText = this._replaceSelectedText(this.option(\"text\"), this._caret(), (0, _dom.clipboardText)(e));\n    var date = _date2.default.parse(newText, this._getFormatPattern());\n    if (date) {\n      this._maskValue = date;\n      this._renderDisplayText(this._getDisplayedText(this._maskValue));\n      this._renderDateParts();\n      this._selectNextPart();\n    }\n    e.preventDefault();\n  },\n  _isValueDirty: function _isValueDirty() {\n    var value = this.dateOption(\"value\");\n    return (this._maskValue && this._maskValue.getTime()) !== (value && value.getTime());\n  },\n  _fireChangeEvent: function _fireChangeEvent() {\n    this._clearSearchValue();\n    if (this._isValueDirty()) {\n      _events_engine2.default.trigger(this._input(), \"change\");\n    }\n  },\n  _enterHandler: function _enterHandler(e) {\n    this._fireChangeEvent();\n    this._selectNextPart(FORWARD);\n    e.preventDefault();\n  },\n  _focusOutHandler: function _focusOutHandler(e) {\n    this.callBase(e);\n    if (this._useMaskBehavior() && !e.isDefaultPrevented()) {\n      this._fireChangeEvent();\n      this._selectFirstPart(e);\n    }\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    if (this._useMaskBehavior()) {\n      this._saveValueChangeEvent(e);\n      if (!this.option(\"text\")) {\n        this._maskValue = null;\n      }\n      this._saveMaskValue();\n    } else {\n      this.callBase(e);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"useMaskBehavior\":\n        this._renderMask();\n        break;\n      case \"displayFormat\":\n      case \"mode\":\n        this.callBase(args);\n        this._renderMask();\n        break;\n      case \"value\":\n        this._loadMaskValue();\n        this.callBase(args);\n        this._renderDateParts();\n        break;\n      case \"advanceCaret\":\n      case \"emptyDateValue\":\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _clearMaskState: function _clearMaskState() {\n    this._clearSearchValue();\n    delete this._dateParts;\n    delete this._activePartIndex;\n    delete this._maskValue;\n  },\n  reset: function reset() {\n    this.callBase();\n    this._clearMaskState();\n    this._activePartIndex = 0;\n  },\n  _clean: function _clean() {\n    this.callBase();\n    this._detachMaskEvents();\n    this._clearMaskState();\n  }\n});\nmodule.exports = DateBoxMask;","map":null,"metadata":{},"sourceType":"script"}