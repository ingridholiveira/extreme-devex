{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _common = require(\"../../core/utils/common\");\nvar _type = require(\"../../core/utils/type\");\nvar _deferred = require(\"../../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\",\n  FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS,\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nexports.FocusController = _uiGrid_core2.default.ViewController.inherit(function () {\n  return {\n    init: function init() {\n      this._dataController = this.getController(\"data\");\n      this._keyboardController = this.getController(\"keyboardNavigation\");\n      this.component._optionsByReference.focusedRowKey = true;\n    },\n    optionChanged: function optionChanged(args) {\n      if (\"focusedRowIndex\" === args.name) {\n        this._focusRowByIndex(args.value);\n        args.handled = true;\n      } else {\n        if (\"focusedRowKey\" === args.name) {\n          this._focusRowByKey(args.value);\n          args.handled = true;\n        } else {\n          if (\"focusedColumnIndex\" === args.name) {\n            args.handled = true;\n          } else {\n            if (\"focusedRowEnabled\" === args.name) {\n              args.handled = true;\n            } else {\n              if (\"skipFocusedRowNavigation\" === args.name) {\n                args.handled = true;\n              } else {\n                this.callBase(args);\n              }\n            }\n          }\n        }\n      }\n    },\n    _focusRowByIndex: function _focusRowByIndex(index) {\n      if (!this.option(\"focusedRowEnabled\")) {\n        return;\n      }\n      index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\n      if (index < 0) {\n        this._resetFocusedRow();\n      } else {\n        this._focusRowByIndexCore(index);\n      }\n    },\n    _focusRowByIndexCore: function _focusRowByIndexCore(index) {\n      var _this = this;\n      var dataController = this.getController(\"data\"),\n        pageSize = dataController.pageSize(),\n        setKeyByIndex = function setKeyByIndex() {\n          if (_this._isValidFocusedRowIndex(index)) {\n            var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1),\n              focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n            if (void 0 !== focusedRowKey && !_this.isRowFocused(focusedRowKey)) {\n              _this.option(\"focusedRowKey\", focusedRowKey);\n            }\n          }\n        };\n      if (pageSize >= 0) {\n        if (!this._isLocalRowIndex(index)) {\n          var pageIndex = Math.floor(index / dataController.pageSize());\n          (0, _deferred.when)(dataController.pageIndex(pageIndex), dataController.waitReady()).done(function () {\n            setKeyByIndex();\n          });\n        } else {\n          setKeyByIndex();\n        }\n      }\n    },\n    _isLocalRowIndex: function _isLocalRowIndex(index) {\n      var dataController = this.getController(\"data\"),\n        isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\n      if (isVirtualScrolling) {\n        var pageIndex = Math.floor(index / dataController.pageSize()),\n          virtualItems = dataController.virtualItemsCount(),\n          virtualItemsBegin = virtualItems ? virtualItems.begin : -1,\n          visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset(),\n          visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\n        return virtualItemsBegin <= index && visiblePagesCount > pageIndex;\n      }\n      return true;\n    },\n    _setFocusedRowKeyByIndex: function _setFocusedRowKeyByIndex(index) {\n      var dataController = this.getController(\"data\");\n      if (this._isValidFocusedRowIndex(index)) {\n        var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1),\n          focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n        if (void 0 !== focusedRowKey && !this.isRowFocused(focusedRowKey)) {\n          this.option(\"focusedRowKey\", focusedRowKey);\n        }\n      }\n    },\n    _focusRowByKey: function _focusRowByKey(key) {\n      if (void 0 === key) {\n        this._resetFocusedRow();\n      } else {\n        this._navigateToRow(key, true);\n      }\n    },\n    _resetFocusedRow: function _resetFocusedRow() {\n      if (void 0 === this.option(\"focusedRowKey\") && this.option(\"focusedRowIndex\") < 0) {\n        return;\n      }\n      this.option(\"focusedRowKey\", void 0);\n      this.getController(\"keyboardNavigation\").setFocusedRowIndex(-1);\n      this.option(\"focusedRowIndex\", -1);\n      this.getController(\"data\").updateItems({\n        changeType: \"updateFocusedRow\",\n        focusedRowKey: void 0\n      });\n    },\n    _isValidFocusedRowIndex: function _isValidFocusedRowIndex(rowIndex) {\n      var dataController = this.getController(\"data\"),\n        row = dataController.getVisibleRows()[rowIndex];\n      return !row || \"data\" === row.rowType || \"group\" === row.rowType;\n    },\n    publicMethods: function publicMethods() {\n      return [\"navigateToRow\", \"isRowFocused\"];\n    },\n    navigateToRow: function navigateToRow(key) {\n      this._navigateToRow(key);\n    },\n    _navigateToRow: function _navigateToRow(key, needFocusRow) {\n      var that = this,\n        dataController = this.getController(\"data\"),\n        rowIndex = this.option(\"focusedRowIndex\"),\n        result = new _deferred.Deferred(),\n        navigateTo = function navigateTo(key, result) {\n          if (needFocusRow) {\n            that._triggerUpdateFocusedRow(key, result);\n          } else {\n            var rowsView = that.getView(\"rowsView\"),\n              _rowIndex = that.getController(\"data\").getRowIndexByKey(key),\n              rowElement = rowsView.getRow(_rowIndex);\n            rowsView._scrollToElement(rowElement);\n          }\n        };\n      that.option(\"skipFocusedRowNavigation\", !needFocusRow);\n      if (void 0 === key || !dataController.dataSource()) {\n        return result.reject().promise();\n      }\n      var rowIndexByKey = that._getFocusedRowIndexByKey(key),\n        isPaginate = dataController.getDataSource().paginate();\n      if (!isPaginate || rowIndex >= 0 && rowIndex === rowIndexByKey) {\n        navigateTo(key, result);\n      } else {\n        dataController.getPageIndexByKey(key).done(function (pageIndex) {\n          if (pageIndex < 0) {\n            result.resolve(-1);\n            return;\n          }\n          if (pageIndex === dataController.pageIndex()) {\n            dataController.reload().done(function () {\n              if (that.isRowFocused(key)) {\n                result.resolve(that._getFocusedRowIndexByKey(key));\n              } else {\n                navigateTo(key, result);\n              }\n            }).fail(result.reject);\n          } else {\n            dataController.pageIndex(pageIndex).done(function () {\n              if (\"virtual\" === that.option(\"scrolling.rowRenderingMode\")) {\n                setTimeout(function () {\n                  that._navigateToVirtualRow(key, result, needFocusRow);\n                });\n              } else {\n                navigateTo(key, result);\n              }\n            }).fail(result.reject);\n          }\n        }).always(function () {\n          return that.option(\"skipFocusedRowNavigation\", false);\n        }).fail(result.reject);\n      }\n      return result.promise();\n    },\n    _navigateToVirtualRow: function _navigateToVirtualRow(key, result, needFocusRow) {\n      var that = this,\n        dataController = this.getController(\"data\"),\n        rowsScrollController = dataController._rowsScrollController,\n        rowIndex = (0, _uiGrid_core3.getIndexByKey)(key, dataController.items(true)),\n        scrollable = that.getView(\"rowsView\").getScrollable();\n      if (rowsScrollController && scrollable && rowIndex >= 0) {\n        var focusedRowIndex = rowIndex + dataController.getRowIndexOffset() - dataController.getRowIndexDelta(),\n          offset = rowsScrollController.getItemOffset(focusedRowIndex);\n        if (needFocusRow) {\n          var triggerUpdateFocusedRow = function triggerUpdateFocusedRow() {\n            that.component.off(\"contentReady\", triggerUpdateFocusedRow);\n            that._triggerUpdateFocusedRow(key, result);\n          };\n          that.component.on(\"contentReady\", triggerUpdateFocusedRow);\n        }\n        scrollable.scrollTo({\n          y: offset\n        });\n      }\n    },\n    _triggerUpdateFocusedRow: function _triggerUpdateFocusedRow(key, result) {\n      var dataController = this.getController(\"data\"),\n        focusedRowIndex = this._getFocusedRowIndexByKey(key);\n      if (this._isValidFocusedRowIndex(focusedRowIndex)) {\n        this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\n        if (this.option(\"focusedRowEnabled\")) {\n          dataController.updateItems({\n            changeType: \"updateFocusedRow\",\n            focusedRowKey: key\n          });\n        } else {\n          var rowIndex = dataController.getRowIndexByKey(key),\n            rowsView = this.getView(\"rowsView\");\n          rowsView._scrollToElement(rowsView.getRow(rowIndex));\n        }\n        result && result.resolve(focusedRowIndex);\n      } else {\n        result && result.resolve(-1);\n      }\n    },\n    _getFocusedRowIndexByKey: function _getFocusedRowIndexByKey(key) {\n      var dataController = this.getController(\"data\"),\n        rowIndex = dataController.getRowIndexByKey(key);\n      return rowIndex >= 0 ? rowIndex + dataController.getRowIndexOffset() : -1;\n    },\n    _focusRowByKeyOrIndex: function _focusRowByKeyOrIndex() {\n      var _this2 = this;\n      var focusedRowKey = this.option(\"focusedRowKey\"),\n        currentFocusedRowIndex = this.option(\"focusedRowIndex\"),\n        keyboardController = this.getController(\"keyboardNavigation\"),\n        dataController = this.getController(\"data\");\n      if (void 0 !== focusedRowKey) {\n        var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\n        if (visibleRowIndex >= 0) {\n          if (keyboardController._isVirtualScrolling()) {\n            currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset();\n          }\n          keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\n          this._triggerUpdateFocusedRow(focusedRowKey);\n        } else {\n          this._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n            if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\n              _this2._focusRowByIndex();\n            }\n          });\n        }\n      } else {\n        if (currentFocusedRowIndex >= 0) {\n          this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex);\n        }\n      }\n    },\n    isRowFocused: function isRowFocused(key) {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      if (void 0 !== focusedRowKey) {\n        return (0, _common.equalByValue)(key, this.option(\"focusedRowKey\"));\n      }\n    },\n    updateFocusedRow: function updateFocusedRow(change) {\n      var $focusedRow,\n        $tableElement,\n        that = this,\n        focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey),\n        rowsView = that.getView(\"rowsView\");\n      (0, _iterator.each)(rowsView.getTableElements(), function (index, element) {\n        $tableElement = (0, _renderer2.default)(element);\n        that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\n        var isMainTable = 0 === index;\n        $focusedRow = that._prepareFocusedRow(change.items[focusedRowIndex], $tableElement, focusedRowIndex);\n        if (isMainTable) {\n          that.getController(\"keyboardNavigation\")._fireFocusedRowChanged($focusedRow);\n        }\n      });\n    },\n    _clearPreviousFocusedRow: function _clearPreviousFocusedRow($tableElement, focusedRowIndex) {\n      var $firstRow,\n        $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR);\n      $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\n      if (0 !== focusedRowIndex) {\n        $firstRow = (0, _renderer2.default)(this.getView(\"rowsView\").getRowElement(0));\n        $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\");\n      }\n    },\n    _prepareFocusedRow: function _prepareFocusedRow(changedItem, $tableElement, focusedRowIndex) {\n      var $row,\n        tabIndex = this.option(\"tabindex\") || 0,\n        rowsView = this.getView(\"rowsView\");\n      if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\n        $row = (0, _renderer2.default)(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\n        $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex);\n        rowsView._scrollToElement($row);\n      }\n      return $row;\n    },\n    _scrollToFocusedRow: function _scrollToFocusedRow($row) {\n      var $focusedRow,\n        that = this,\n        rowsView = that.getView(\"rowsView\"),\n        $rowsViewElement = rowsView.element();\n      if (!$rowsViewElement) {\n        return;\n      }\n      $focusedRow = $row && $row.length ? $row : $rowsViewElement.find(FOCUSED_ROW_SELECTOR);\n      if ($focusedRow.length > 0) {\n        var diff,\n          focusedRowRect = $focusedRow[0].getBoundingClientRect(),\n          rowsViewRect = rowsView.element()[0].getBoundingClientRect();\n        if (focusedRowRect.bottom > rowsViewRect.bottom) {\n          diff = focusedRowRect.bottom - rowsViewRect.bottom;\n        } else {\n          if (focusedRowRect.top < rowsViewRect.top) {\n            diff = focusedRowRect.top - rowsViewRect.top;\n          }\n        }\n        if (diff) {\n          rowsView.scrollTo({\n            y: rowsView._scrollTop + diff\n          });\n        }\n      }\n    }\n  };\n}());\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      focusedRowEnabled: false,\n      focusedRowKey: void 0,\n      focusedRowIndex: -1,\n      focusedColumnIndex: -1\n    };\n  },\n  controllers: {\n    focus: exports.FocusController\n  },\n  extenders: {\n    controllers: {\n      keyboardNavigation: {\n        init: function init() {\n          var rowIndex = this.option(\"focusedRowIndex\"),\n            columnIndex = this.option(\"focusedColumnIndex\");\n          if (this.option(\"focusedRowEnabled\")) {\n            this.createAction(\"onFocusedRowChanging\", {\n              excludeValidators: [\"disabled\", \"readOnly\"]\n            });\n            this.createAction(\"onFocusedRowChanged\", {\n              excludeValidators: [\"disabled\", \"readOnly\"]\n            });\n          }\n          this.createAction(\"onFocusedCellChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.callBase();\n          this.setRowFocusType();\n          this._focusedCellPosition = {};\n          if ((0, _type.isDefined)(rowIndex)) {\n            this._focusedCellPosition.rowIndex = this.option(\"focusedRowIndex\");\n          }\n          if ((0, _type.isDefined)(columnIndex)) {\n            this._focusedCellPosition.columnIndex = this.option(\"focusedColumnIndex\");\n          }\n        },\n        setFocusedRowIndex: function setFocusedRowIndex(rowIndex) {\n          this.callBase(rowIndex);\n          var visibleRow = this.getController(\"data\").getVisibleRows()[rowIndex];\n          if (!visibleRow || !visibleRow.isNewRow) {\n            this.option(\"focusedRowIndex\", rowIndex);\n          }\n        },\n        setFocusedColumnIndex: function setFocusedColumnIndex(columnIndex) {\n          this.callBase(columnIndex);\n          this.option(\"focusedColumnIndex\", columnIndex);\n        },\n        _escapeKeyHandler: function _escapeKeyHandler(eventArgs, isEditing) {\n          if (isEditing || !this.option(\"focusedRowEnabled\")) {\n            this.callBase(eventArgs, isEditing);\n            return;\n          }\n          if (this.isCellFocusType()) {\n            this.setRowFocusType();\n            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\n          }\n        },\n        _updateFocusedCellPosition: function _updateFocusedCellPosition($cell, direction) {\n          var prevRowIndex = this.option(\"focusedRowIndex\"),\n            prevColumnIndex = this.option(\"focusedColumnIndex\");\n          if (this.callBase($cell, direction)) {\n            this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex);\n          }\n        }\n      },\n      editorFactory: {\n        renderFocusOverlay: function renderFocusOverlay($element, hideBorder) {\n          var $cell,\n            keyboardController = this.getController(\"keyboardNavigation\"),\n            focusedRowEnabled = this.option(\"focusedRowEnabled\"),\n            editingController = this.getController(\"editing\"),\n            isRowElement = \"row\" === keyboardController._getElementType($element);\n          if (!focusedRowEnabled || !keyboardController.isRowFocusType() || editingController.isEditing()) {\n            this.callBase($element, hideBorder);\n          } else {\n            if (focusedRowEnabled) {\n              if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\n                $cell = keyboardController.getFirstValidCellInRow($element);\n                keyboardController.focus($cell);\n              }\n            }\n          }\n        }\n      },\n      columns: {\n        getSortDataSourceParameters: function getSortDataSourceParameters() {\n          var _this3 = this;\n          var result = this.callBase.apply(this, arguments),\n            dataController = this.getController(\"data\"),\n            dataSource = dataController._dataSource,\n            store = dataController.store(),\n            key = store && store.key(),\n            remoteOperations = dataSource && dataSource.remoteOperations() || {},\n            isLocalOperations = Object.keys(remoteOperations).every(function (operationName) {\n              return !remoteOperations[operationName];\n            });\n          if (this.option(\"focusedRowEnabled\") && key) {\n            key = Array.isArray(key) ? key : [key];\n            var notSortedKeys = key.filter(function (key) {\n              return !_this3.columnOption(key, \"sortOrder\");\n            });\n            if (notSortedKeys.length) {\n              result = result || [];\n              if (isLocalOperations) {\n                result.push({\n                  selector: dataSource.getDataIndexGetter(),\n                  desc: false\n                });\n              } else {\n                notSortedKeys.forEach(function (notSortedKey) {\n                  return result.push({\n                    selector: notSortedKey,\n                    desc: false\n                  });\n                });\n              }\n            }\n          }\n          return result;\n        }\n      },\n      data: {\n        _applyChange: function _applyChange(change) {\n          if (change && \"updateFocusedRow\" === change.changeType) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _fireChanged: function _fireChanged(e) {\n          var isPartialUpdateWithDeleting,\n            skipFocusedRowNavigation = this.option(\"skipFocusedRowNavigation\");\n          if (this.option(\"focusedRowEnabled\") && !skipFocusedRowNavigation && this._dataSource) {\n            var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\n            isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\n            if (isPartialUpdateWithDeleting) {\n              this.callBase(e);\n            }\n            if (\"refresh\" === e.changeType || isPartialUpdateWithDeleting) {\n              this.processUpdateFocusedRow();\n            }\n          }\n          if (!isPartialUpdateWithDeleting) {\n            this.callBase(e);\n          }\n        },\n        processUpdateFocusedRow: function processUpdateFocusedRow() {\n          var prevPageIndex = this._prevPageIndex,\n            pageIndex = this.pageIndex(),\n            prevRenderingPageIndex = this._prevRenderingPageIndex || 0,\n            renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0,\n            operationTypes = this._dataSource.operationTypes() || {},\n            focusController = this.getController(\"focus\"),\n            reload = operationTypes.reload,\n            isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling(),\n            focusedRowKey = this.option(\"focusedRowKey\"),\n            paging = void 0 !== prevPageIndex && prevPageIndex !== pageIndex,\n            pagingByRendering = renderingPageIndex !== prevRenderingPageIndex;\n          this._prevPageIndex = pageIndex;\n          this._prevRenderingPageIndex = renderingPageIndex;\n          if (reload && void 0 !== focusedRowKey) {\n            focusController._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n              if (focusedRowIndex < 0) {\n                focusController._focusRowByIndex();\n              }\n            });\n          } else {\n            if (paging) {\n              if (!isVirtualScrolling && this.option(\"focusedRowIndex\") >= 0) {\n                focusController._focusRowByIndex();\n              }\n            } else {\n              if (!pagingByRendering) {\n                focusController._focusRowByKeyOrIndex();\n              }\n            }\n          }\n        },\n        getPageIndexByKey: function getPageIndexByKey(key) {\n          var that = this,\n            d = new _deferred.Deferred();\n          that.getGlobalRowIndexByKey(key).done(function (globalIndex) {\n            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);\n          }).fail(d.reject);\n          return d.promise();\n        },\n        getGlobalRowIndexByKey: function getGlobalRowIndexByKey(key) {\n          if (this._dataSource.group()) {\n            return this._calculateGlobalRowIndexByGroupedData(key);\n          }\n          return this._calculateGlobalRowIndexByFlatData(key);\n        },\n        _calculateGlobalRowIndexByFlatData: function _calculateGlobalRowIndexByFlatData(key, groupFilter, useGroup) {\n          var that = this,\n            deferred = new _deferred.Deferred(),\n            dataSource = that._dataSource,\n            filter = that._generateFilterByKey(key);\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            skip: 0,\n            take: 1\n          }).done(function (data) {\n            if (data.length > 0) {\n              filter = that._generateOperationFilterByKey(key, data[0], useGroup);\n              dataSource.load({\n                filter: that._concatWithCombinedFilter(filter, groupFilter),\n                skip: 0,\n                take: 1,\n                requireTotalCount: true\n              }).done(function (_, extra) {\n                deferred.resolve(extra.totalCount);\n              });\n            } else {\n              deferred.resolve(-1);\n            }\n          });\n          return deferred.promise();\n        },\n        _concatWithCombinedFilter: function _concatWithCombinedFilter(filter, groupFilter) {\n          var combinedFilter = this.getCombinedFilter();\n          return (0, _uiGrid_core3.combineFilters)([filter, combinedFilter, groupFilter]);\n        },\n        _generateBooleanFilter: function _generateBooleanFilter(selector, value, sortInfo) {\n          var result = void 0;\n          if (false === value) {\n            result = [selector, \"=\", sortInfo.desc ? true : null];\n          } else {\n            if (true === value ? !sortInfo.desc : sortInfo.desc) {\n              result = [selector, \"<>\", value];\n            }\n          }\n          return result;\n        },\n        _generateOperationFilterByKey: function _generateOperationFilterByKey(key, rowData, useGroup) {\n          var booleanFilter,\n            that = this,\n            dataSource = that._dataSource,\n            filter = that._generateFilterByKey(key, \"<\"),\n            sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering);\n          if (useGroup) {\n            var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);\n            if (group) {\n              sort = sort ? group.concat(sort) : group;\n            }\n          }\n          if (sort) {\n            sort.slice().reverse().forEach(function (sortInfo) {\n              var getter,\n                value,\n                selector = sortInfo.selector;\n              if (\"function\" === typeof selector) {\n                getter = selector;\n              } else {\n                getter = that._columnsController.columnOption(selector, \"selector\");\n              }\n              value = getter ? getter(rowData) : rowData[selector];\n              filter = [[selector, \"=\", value], \"and\", filter];\n              if (null === value || (0, _type.isBoolean)(value)) {\n                booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);\n                if (booleanFilter) {\n                  filter = [booleanFilter, \"or\", filter];\n                }\n              } else {\n                filter = [[selector, sortInfo.desc ? \">\" : \"<\", value], \"or\", filter];\n              }\n            });\n          }\n          return filter;\n        },\n        _generateFilterByKey: function _generateFilterByKey(key, operation) {\n          var keyPart,\n            dataSourceKey = this._dataSource.key(),\n            filter = [];\n          if (!operation) {\n            operation = \"=\";\n          }\n          if (Array.isArray(dataSourceKey)) {\n            for (var i = 0; i < dataSourceKey.length; ++i) {\n              keyPart = key[dataSourceKey[i]];\n              if (keyPart) {\n                if (filter.length > 0) {\n                  filter.push(\"and\");\n                }\n                filter.push([dataSourceKey[i], operation, keyPart]);\n              }\n            }\n          } else {\n            filter = [dataSourceKey, operation, key];\n          }\n          return filter;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function _createRow(row) {\n          var $row = this.callBase(row);\n          if (this.option(\"focusedRowEnabled\") && row) {\n            if (this.getController(\"focus\").isRowFocused(row.key)) {\n              $row.addClass(ROW_FOCUSED_CLASS);\n            }\n          }\n          return $row;\n        },\n        _checkRowKeys: function _checkRowKeys(options) {\n          this.callBase.apply(this, arguments);\n          if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\n            var store = this._dataController.store();\n            if (store && !store.key()) {\n              this._dataController.fireError(\"E1042\", \"Row focusing\");\n            }\n          }\n        },\n        _update: function _update(change) {\n          if (\"updateFocusedRow\" === change.changeType) {\n            if (this.option(\"focusedRowEnabled\")) {\n              this.getController(\"focus\").updateFocusedRow(change);\n            }\n          } else {\n            this.callBase(change);\n          }\n        },\n        updateFocusElementTabIndex: function updateFocusElementTabIndex($cellElements) {\n          if (this.option(\"focusedRowEnabled\")) {\n            this._setFocusedRowElementTabIndex();\n          } else {\n            this.callBase($cellElements);\n          }\n        },\n        _setFocusedRowElementTabIndex: function _setFocusedRowElementTabIndex() {\n          var that = this,\n            focusedRowKey = that.option(\"focusedRowKey\"),\n            tabIndex = that.option(\"tabIndex\"),\n            rowIndex = that._dataController.getRowIndexByKey(focusedRowKey),\n            columnIndex = that.option(\"focusedColumnIndex\"),\n            $cellElements = that.getCellElements(rowIndex >= 0 ? rowIndex : 0),\n            $row = $cellElements.eq(0).parent(),\n            dataSource = that.component.getController(\"data\")._dataSource,\n            operationTypes = dataSource && dataSource.operationTypes();\n          if ($row.length) {\n            that._scrollToFocusOnResize = that._scrollToFocusOnResize || function () {\n              that._scrollToElement($row);\n              that.resizeCompleted.remove(that._scrollToFocusOnResize);\n            };\n            $row.attr(\"tabIndex\", tabIndex);\n            if (rowIndex >= 0) {\n              if (columnIndex < 0) {\n                columnIndex = 0;\n              }\n              rowIndex += that.getController(\"data\").getRowIndexOffset();\n              that.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\n              if (operationTypes && !operationTypes.paging) {\n                that.resizeCompleted.remove(that._scrollToFocusOnResize);\n                that.resizeCompleted.add(that._scrollToFocusOnResize);\n              }\n            }\n          }\n        },\n        _scrollToElement: function _scrollToElement(element) {\n          var scrollable = this.getScrollable();\n          scrollable && scrollable.scrollToElement(element);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}