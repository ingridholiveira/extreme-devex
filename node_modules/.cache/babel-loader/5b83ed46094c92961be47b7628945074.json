{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/dependency_injector.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nmodule.exports = function (object) {\n  var extend = require(\"./extend\").extend,\n    isFunction = require(\"./type\").isFunction,\n    each = require(\"./iterator\").each,\n    Class = require(\"../class\");\n  var BaseClass = Class.inherit(object),\n    InjectedClass = BaseClass,\n    instance = new InjectedClass(object),\n    initialFields = {};\n  var injectFields = function injectFields(injectionObject, initial) {\n    each(injectionObject, function (key) {\n      if (isFunction(instance[key])) {\n        if (initial || !object[key]) {\n          object[key] = function () {\n            return instance[key].apply(object, arguments);\n          };\n        }\n      } else {\n        if (initial) {\n          initialFields[key] = object[key];\n        }\n        object[key] = instance[key];\n      }\n    });\n  };\n  injectFields(object, true);\n  object.inject = function (injectionObject) {\n    InjectedClass = InjectedClass.inherit(injectionObject);\n    instance = new InjectedClass();\n    injectFields(injectionObject);\n  };\n  object.resetInjection = function () {\n    extend(object, initialFields);\n    InjectedClass = BaseClass;\n    instance = new BaseClass();\n  };\n  return object;\n};","map":null,"metadata":{},"sourceType":"script"}