{"ast":null,"code":"/**\r\n * DevExtreme (ui/sortable.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _component_registrator = require(\"../core/component_registrator\");\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\nvar _extend = require(\"../core/utils/extend\");\nvar _draggable = require(\"./draggable\");\nvar _draggable2 = _interopRequireDefault(_draggable);\nvar _dom = require(\"../core/utils/dom\");\nvar _translator = require(\"../animation/translator\");\nvar _translator2 = _interopRequireDefault(_translator);\nvar _fx = require(\"../animation/fx\");\nvar _fx2 = _interopRequireDefault(_fx);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar SORTABLE = \"dxSortable\",\n  PLACEHOLDER_CLASS = \"placeholder\",\n  CLONE_CLASS = \"clone\";\nvar Sortable = _draggable2.default.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      clone: true,\n      filter: \"> *\",\n      itemOrientation: \"vertical\",\n      dropFeedbackMode: \"push\",\n      allowDropInsideItem: false,\n      allowReordering: true,\n      moveItemOnDrop: false,\n      onDragChange: null,\n      onAdd: null,\n      onRemove: null,\n      onReorder: null,\n      onPlaceholderPrepared: null,\n      animation: {\n        type: \"slide\",\n        duration: 300\n      },\n      fromIndex: null,\n      toIndex: null,\n      dropInsideItem: false,\n      itemPoints: null\n    });\n  },\n  reset: function reset() {\n    this.option({\n      dropInsideItem: false,\n      toIndex: null,\n      fromIndex: null\n    });\n    if (this._$placeholderElement) {\n      this._$placeholderElement.remove();\n    }\n    this._$placeholderElement = null;\n    if (!this._isIndicateMode() && this._$modifiedItem) {\n      this._$modifiedItem.css(\"marginBottom\", this._modifiedItemMargin);\n      this._$modifiedItem = null;\n    }\n  },\n  _dragStartHandler: function _dragStartHandler(e) {\n    this.callBase.apply(this, arguments);\n    if (true === e.cancel) {\n      return;\n    }\n    var $sourceElement = this._getSourceElement();\n    this._updateItemPoints();\n    this.option(\"fromIndex\", this._getElementIndex($sourceElement));\n  },\n  _dragEnterHandler: function _dragEnterHandler() {\n    this.callBase.apply(this, arguments);\n    this._updateItemPoints();\n    this.option(\"fromIndex\", -1);\n    if (!this._isIndicateMode()) {\n      var itemPoints = this.option(\"itemPoints\"),\n        lastItemPoint = itemPoints[itemPoints.length - 1];\n      if (lastItemPoint) {\n        var $element = this.$element(),\n          $sourceElement = this._getSourceElement(),\n          isVertical = this._isVerticalOrientation(),\n          sourceElementSize = isVertical ? $sourceElement.outerHeight(true) : $sourceElement.outerWidth(true),\n          scrollSize = $element.get(0)[isVertical ? \"scrollHeight\" : \"scrollWidth\"],\n          scrollPosition = $element.get(0)[isVertical ? \"scrollTop\" : \"scrollLeft\"],\n          positionProp = isVertical ? \"top\" : \"left\",\n          lastPointPosition = lastItemPoint[positionProp],\n          elementPosition = $element.offset()[positionProp],\n          freeSize = elementPosition + scrollSize - scrollPosition - lastPointPosition;\n        if (freeSize < sourceElementSize) {\n          if (isVertical) {\n            var $lastItem = (0, _renderer2.default)(this._getItems()).last();\n            this._$modifiedItem = $lastItem;\n            this._modifiedItemMargin = $lastItem.get(0).style.marginBottom;\n            $lastItem.css(\"marginBottom\", sourceElementSize - freeSize);\n            var $sortable = $lastItem.closest(\".dx-sortable\"),\n              sortable = $sortable.data(\"dxScrollable\") || $sortable.data(\"dxScrollView\");\n            sortable && sortable.update();\n          }\n        }\n      }\n    }\n  },\n  dragEnter: function dragEnter() {\n    this.option(\"toIndex\", -1);\n  },\n  dragLeave: function dragLeave() {\n    this.option(\"toIndex\", null);\n  },\n  dragEnd: function dragEnd(sourceEvent) {\n    var $sourceElement = this._getSourceElement(),\n      sourceDraggable = this._getSourceDraggable(),\n      isSourceDraggable = sourceDraggable.NAME !== this.NAME,\n      toIndex = this.option(\"toIndex\");\n    if (null !== toIndex && toIndex >= 0) {\n      var cancelAdd = void 0,\n        cancelRemove = void 0;\n      if (sourceDraggable !== this) {\n        cancelAdd = this._fireAddEvent(sourceEvent);\n        if (!cancelAdd) {\n          cancelRemove = this._fireRemoveEvent(sourceEvent);\n        }\n      }\n      if (isSourceDraggable) {\n        _translator2.default.resetPosition($sourceElement);\n      }\n      if (this.option(\"moveItemOnDrop\")) {\n        !cancelAdd && this._moveItem($sourceElement, toIndex, cancelRemove);\n      }\n      if (sourceDraggable === this) {\n        this._fireReorderEvent(sourceEvent);\n      }\n    }\n  },\n  dragMove: function dragMove(e) {\n    var itemPoints = this.option(\"itemPoints\");\n    if (!itemPoints) {\n      return;\n    }\n    var isVertical = this._isVerticalOrientation(),\n      axisName = isVertical ? \"top\" : \"left\",\n      cursorPosition = isVertical ? e.pageY : e.pageX,\n      itemPoint = void 0;\n    for (var i = itemPoints.length - 1; i >= 0; i--) {\n      var centerPosition = itemPoints[i + 1] && (itemPoints[i][axisName] + itemPoints[i + 1][axisName]) / 2;\n      if (centerPosition > cursorPosition || void 0 === centerPosition) {\n        itemPoint = itemPoints[i];\n      } else {\n        break;\n      }\n    }\n    if (itemPoint) {\n      this._updatePlaceholderPosition(e, itemPoint);\n    }\n  },\n  _isIndicateMode: function _isIndicateMode() {\n    return \"indicate\" === this.option(\"dropFeedbackMode\") || this.option(\"allowDropInsideItem\");\n  },\n  _createPlaceholder: function _createPlaceholder() {\n    var $placeholderContainer = void 0;\n    if (this._isIndicateMode()) {\n      $placeholderContainer = (0, _renderer2.default)(\"<div>\").addClass(this._addWidgetPrefix(PLACEHOLDER_CLASS)).insertBefore(this._getSourceDraggable()._$dragElement);\n    }\n    this._$placeholderElement = $placeholderContainer;\n    return $placeholderContainer;\n  },\n  _getItems: function _getItems() {\n    var itemsSelector = this._getItemsSelector();\n    return this.$element().find(itemsSelector).not(\".\" + this._addWidgetPrefix(PLACEHOLDER_CLASS)).not(\".\" + this._addWidgetPrefix(CLONE_CLASS)).toArray();\n  },\n  _allowReordering: function _allowReordering() {\n    var sourceDraggable = this._getSourceDraggable(),\n      targetDraggable = this._getTargetDraggable();\n    return sourceDraggable !== targetDraggable || this.option(\"allowReordering\");\n  },\n  _isValidPoint: function _isValidPoint($items, itemPointIndex, dropInsideItem) {\n    var allowReordering = dropInsideItem || this._allowReordering();\n    if (!allowReordering) {\n      return false;\n    }\n    if (!this._isIndicateMode()) {\n      return true;\n    }\n    var $draggableItem = this._getDraggableElement(),\n      draggableItemIndex = $items.indexOf($draggableItem.get(0));\n    return draggableItemIndex === -1 || itemPointIndex !== draggableItemIndex && (dropInsideItem || itemPointIndex !== draggableItemIndex + 1);\n  },\n  _getItemPoints: function _getItemPoints() {\n    var _this = this;\n    var result = void 0,\n      isVertical = this._isVerticalOrientation(),\n      $items = this._getItems();\n    result = $items.map(function (item, index) {\n      var offset = (0, _renderer2.default)(item).offset();\n      return {\n        dropInsideItem: false,\n        left: offset.left,\n        top: offset.top,\n        index: index,\n        $item: (0, _renderer2.default)(item),\n        width: (0, _renderer2.default)(item).outerWidth(),\n        height: (0, _renderer2.default)(item).outerHeight(),\n        isValid: _this._isValidPoint($items, index)\n      };\n    });\n    if (result.length) {\n      var lastItem = result[result.length - 1];\n      result.push({\n        dropInsideItem: false,\n        index: result.length,\n        top: isVertical ? lastItem.top + lastItem.height : lastItem.top,\n        left: !isVertical ? lastItem.left + lastItem.width : lastItem.left,\n        isValid: this._isValidPoint($items, result.length)\n      });\n      if (this.option(\"allowDropInsideItem\")) {\n        var points = result;\n        result = [];\n        for (var i = 0; i < points.length; i++) {\n          result.push(points[i]);\n          if (points[i + 1]) {\n            result.push((0, _extend.extend)({}, points[i], {\n              dropInsideItem: true,\n              top: Math.floor((points[i].top + points[i + 1].top) / 2),\n              left: Math.floor((points[i].left + points[i + 1].left) / 2),\n              isValid: this._isValidPoint($items, i, true)\n            }));\n          }\n        }\n      }\n    } else {\n      result.push({\n        dropInsideItem: false,\n        index: 0,\n        isValid: true\n      });\n    }\n    return result;\n  },\n  _updateItemPoints: function _updateItemPoints() {\n    this.option(\"itemPoints\", this._getItemPoints());\n  },\n  _getElementIndex: function _getElementIndex($itemElement) {\n    return this._getItems().indexOf($itemElement.get(0));\n  },\n  _getDragTemplateArgs: function _getDragTemplateArgs($element) {\n    return (0, _extend.extend)(this.callBase.apply(this, arguments), {\n      index: this._getElementIndex($element)\n    });\n  },\n  _togglePlaceholder: function _togglePlaceholder(value) {\n    this._$placeholderElement && this._$placeholderElement.toggle(value);\n  },\n  _isVerticalOrientation: function _isVerticalOrientation() {\n    return \"vertical\" === this.option(\"itemOrientation\");\n  },\n  _normalizeToIndex: function _normalizeToIndex(toIndex, dropInsideItem) {\n    var isAnotherDraggable = this._getSourceDraggable() !== this._getTargetDraggable(),\n      fromIndex = this.option(\"fromIndex\");\n    if (null === toIndex) {\n      return fromIndex;\n    }\n    return Math.max(isAnotherDraggable || fromIndex >= toIndex || dropInsideItem ? toIndex : toIndex - 1, 0);\n  },\n  _updatePlaceholderPosition: function _updatePlaceholderPosition(e, itemPoint) {\n    var sourceDraggable = this._getSourceDraggable(),\n      toIndex = this._normalizeToIndex(itemPoint.index, itemPoint.dropInsideItem);\n    var eventArgs = (0, _extend.extend)(this._getEventArgs(e), {\n      toIndex: toIndex,\n      dropInsideItem: itemPoint.dropInsideItem\n    });\n    itemPoint.isValid && this._getAction(\"onDragChange\")(eventArgs);\n    if (eventArgs.cancel || !itemPoint.isValid) {\n      if (!itemPoint.isValid) {\n        this.option({\n          dropInsideItem: false,\n          toIndex: null\n        });\n      }\n      return;\n    }\n    this.option({\n      dropInsideItem: itemPoint.dropInsideItem,\n      toIndex: itemPoint.index\n    });\n    this._getAction(\"onPlaceholderPrepared\")((0, _extend.extend)(this._getEventArgs(e), {\n      placeholderElement: (0, _dom.getPublicElement)(this._$placeholderElement),\n      dragElement: (0, _dom.getPublicElement)(sourceDraggable._$dragElement)\n    }));\n    this._updateItemPoints();\n  },\n  _updatePlaceholderSizes: function _updatePlaceholderSizes($placeholderElement, itemElement) {\n    var dropInsideItem = this.option(\"dropInsideItem\"),\n      $item = itemElement ? (0, _renderer2.default)(itemElement) : this._getSourceElement(),\n      isVertical = this._isVerticalOrientation(),\n      width = \"\",\n      height = \"\";\n    $placeholderElement.toggleClass(this._addWidgetPrefix(\"placeholder-inside\"), dropInsideItem);\n    if (isVertical || dropInsideItem) {\n      width = $item.outerWidth();\n    }\n    if (!isVertical || dropInsideItem) {\n      height = $item.outerHeight();\n    }\n    $placeholderElement.css({\n      width: width,\n      height: height\n    });\n  },\n  _moveItem: function _moveItem($itemElement, index, cancelRemove) {\n    var $prevTargetItemElement = void 0,\n      $itemElements = this._getItems(),\n      $targetItemElement = $itemElements[index],\n      sourceDraggable = this._getSourceDraggable();\n    if (cancelRemove) {\n      $itemElement = $itemElement.clone();\n      sourceDraggable._toggleDragSourceClass(false, $itemElement);\n    }\n    if (!$targetItemElement) {\n      $prevTargetItemElement = $itemElements[index - 1];\n    }\n    this._moveItemCore($itemElement, $targetItemElement, $prevTargetItemElement);\n  },\n  _moveItemCore: function _moveItemCore($targetItem, item, prevItem) {\n    if (!item && !prevItem) {\n      $targetItem.appendTo(this.$element());\n    } else {\n      if (prevItem) {\n        $targetItem.insertAfter((0, _renderer2.default)(prevItem));\n      } else {\n        $targetItem.insertBefore((0, _renderer2.default)(item));\n      }\n    }\n  },\n  _getDragStartArgs: function _getDragStartArgs(e, $itemElement) {\n    return (0, _extend.extend)(this.callBase.apply(this, arguments), {\n      fromIndex: this._getElementIndex($itemElement)\n    });\n  },\n  _getEventArgs: function _getEventArgs(e) {\n    var sourceDraggable = this._getSourceDraggable(),\n      targetDraggable = this._getTargetDraggable(),\n      dropInsideItem = targetDraggable.option(\"dropInsideItem\");\n    return (0, _extend.extend)(this.callBase.apply(this, arguments), {\n      fromIndex: sourceDraggable.option(\"fromIndex\"),\n      toIndex: this._normalizeToIndex(targetDraggable.option(\"toIndex\"), dropInsideItem),\n      dropInsideItem: dropInsideItem\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n    switch (name) {\n      case \"onDragChange\":\n      case \"onPlaceholderPrepared\":\n      case \"onAdd\":\n      case \"onRemove\":\n      case \"onReorder\":\n        this[\"_\" + name + \"Action\"] = this._createActionByOption(name);\n        break;\n      case \"itemOrientation\":\n      case \"allowDropInsideItem\":\n      case \"moveItemOnDrop\":\n      case \"dropFeedbackMode\":\n      case \"itemPoints\":\n      case \"fromIndex\":\n      case \"animation\":\n      case \"allowReordering\":\n        break;\n      case \"dropInsideItem\":\n        this._optionChangedDropInsideItem(args);\n        break;\n      case \"toIndex\":\n        this._optionChangedToIndex(args);\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _optionChangedDropInsideItem: function _optionChangedDropInsideItem(args) {\n    if (this._isIndicateMode() && this._$placeholderElement) {\n      var toIndex = this.option(\"toIndex\"),\n        itemElement = this._getItems()[toIndex];\n      this._updatePlaceholderSizes(this._$placeholderElement, itemElement);\n    }\n  },\n  _optionChangedToIndex: function _optionChangedToIndex(args) {\n    var toIndex = args.value;\n    if (this._isIndicateMode()) {\n      var showPlaceholder = null !== toIndex && toIndex >= 0;\n      this._togglePlaceholder(showPlaceholder);\n      if (showPlaceholder) {\n        var $placeholderElement = this._$placeholderElement || this._createPlaceholder(),\n          items = this._getItems(),\n          itemElement = items[toIndex],\n          prevItemElement = items[toIndex - 1],\n          isVerticalOrientation = this._isVerticalOrientation(),\n          position = void 0;\n        this._updatePlaceholderSizes($placeholderElement, itemElement);\n        if (itemElement) {\n          position = (0, _renderer2.default)(itemElement).offset();\n        } else {\n          if (prevItemElement) {\n            position = (0, _renderer2.default)(prevItemElement).offset();\n            position.top += isVerticalOrientation ? (0, _renderer2.default)(prevItemElement).outerHeight(true) : (0, _renderer2.default)(prevItemElement).outerWidth(true);\n          }\n        }\n        if (position) {\n          this._move(position, $placeholderElement);\n        }\n        $placeholderElement.toggle(!!position);\n      }\n    } else {\n      this._moveItems(args.previousValue, args.value);\n    }\n  },\n  _getPositions: function _getPositions(items, elementSize, fromIndex, toIndex) {\n    var positions = [];\n    for (var i = 0; i < items.length; i++) {\n      var position = 0;\n      if (null === toIndex || null === fromIndex) {\n        positions.push(position);\n        continue;\n      }\n      if (fromIndex === -1) {\n        if (i >= toIndex) {\n          position = elementSize;\n        }\n      } else {\n        if (toIndex === -1) {\n          if (i > fromIndex) {\n            position = -elementSize;\n          }\n        } else {\n          if (fromIndex < toIndex) {\n            if (i > fromIndex && i < toIndex) {\n              position = -elementSize;\n            }\n          } else {\n            if (fromIndex > toIndex) {\n              if (i >= toIndex && i < fromIndex) {\n                position = elementSize;\n              }\n            }\n          }\n        }\n      }\n      positions.push(position);\n    }\n    return positions;\n  },\n  _moveItems: function _moveItems(prevToIndex, toIndex) {\n    var fromIndex = this.option(\"fromIndex\"),\n      isVerticalOrientation = this._isVerticalOrientation(),\n      positionPropName = isVerticalOrientation ? \"top\" : \"left\",\n      $draggableItem = this._getDraggableElement(),\n      elementSize = isVerticalOrientation ? ($draggableItem.outerHeight() + $draggableItem.outerHeight(true)) / 2 : ($draggableItem.outerWidth() + $draggableItem.outerWidth(true)) / 2,\n      items = this._getItems(),\n      prevPositions = this._getPositions(items, elementSize, fromIndex, prevToIndex),\n      positions = this._getPositions(items, elementSize, fromIndex, toIndex),\n      animationConfig = this.option(\"animation\");\n    for (var i = 0; i < items.length; i++) {\n      var $item = (0, _renderer2.default)(items[i]),\n        prevPosition = prevPositions[i],\n        position = positions[i];\n      if (null === toIndex || null === fromIndex) {\n        _translator2.default.resetPosition($item);\n      } else {\n        if (prevPosition !== position) {\n          _fx2.default.stop($item);\n          _fx2.default.animate($item, (0, _extend.extend)({}, animationConfig, {\n            to: _defineProperty({}, positionPropName, position)\n          }));\n        }\n      }\n    }\n  },\n  _toggleDragSourceClass: function _toggleDragSourceClass(value, $element) {\n    var $sourceElement = $element || this._$sourceElement;\n    this.callBase.apply(this, arguments);\n    if (!this._isIndicateMode()) {\n      $sourceElement && $sourceElement.toggleClass(this._addWidgetPrefix(\"source-hidden\"), value);\n    }\n  },\n  _dispose: function _dispose() {\n    this.reset();\n    this.callBase();\n  },\n  _fireAddEvent: function _fireAddEvent(sourceEvent) {\n    var args = this._getEventArgs(sourceEvent);\n    this._getAction(\"onAdd\")(args);\n    return args.cancel;\n  },\n  _fireRemoveEvent: function _fireRemoveEvent(sourceEvent) {\n    var sourceDraggable = this._getSourceDraggable(),\n      args = this._getEventArgs(sourceEvent);\n    sourceDraggable._getAction(\"onRemove\")(args);\n    return args.cancel;\n  },\n  _fireReorderEvent: function _fireReorderEvent(sourceEvent) {\n    var args = this._getEventArgs(sourceEvent);\n    this._getAction(\"onReorder\")(args);\n  }\n});\n(0, _component_registrator2.default)(SORTABLE, Sortable);\nmodule.exports = Sortable;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}