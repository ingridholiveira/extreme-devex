{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.filter_sync.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../../core/utils/type\");\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _utils = require(\"../filter_builder/utils\");\nvar _utils2 = _interopRequireDefault(_utils);\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\nvar _filtering = require(\"../shared/filtering\");\nvar _filtering2 = _interopRequireDefault(_filtering);\nvar _uiGrid_core5 = require(\"./ui.grid_core.filter_custom_operations\");\nvar _uiGrid_core6 = _interopRequireDefault(_uiGrid_core5);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar FILTER_ROW_OPERATIONS = [\"=\", \"<>\", \"<\", \"<=\", \">\", \">=\", \"notcontains\", \"contains\", \"startswith\", \"endswith\", \"between\"],\n  FILTER_TYPES_INCLUDE = \"include\",\n  FILTER_TYPES_EXCLUDE = \"exclude\";\nfunction getColumnIdentifier(column) {\n  return column.dataField || column.name;\n}\nfunction checkForErrors(columns) {\n  columns.forEach(function (column) {\n    var identifier = getColumnIdentifier(column);\n    if (!(0, _type.isDefined)(identifier) && column.allowFiltering) {\n      throw new _ui2.default.Error(\"E1049\", column.caption);\n    }\n  });\n}\nvar FilterSyncController = _uiGrid_core2.default.Controller.inherit(function () {\n  var getEmptyFilterValues = function getEmptyFilterValues() {\n    return {\n      filterType: FILTER_TYPES_INCLUDE,\n      filterValues: void 0\n    };\n  };\n  var canSyncHeaderFilterWithFilterRow = function canSyncHeaderFilterWithFilterRow(column) {\n    return !_filtering2.default.getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource);\n  };\n  var getHeaderFilterFromCondition = function getHeaderFilterFromCondition(headerFilterCondition, column) {\n    if (!headerFilterCondition) {\n      return getEmptyFilterValues();\n    }\n    var filterType,\n      selectedFilterOperation = headerFilterCondition[1],\n      value = headerFilterCondition[2],\n      hasArrayValue = Array.isArray(value);\n    if (!hasArrayValue) {\n      if (!canSyncHeaderFilterWithFilterRow(column)) {\n        return getEmptyFilterValues();\n      }\n    }\n    switch (selectedFilterOperation) {\n      case \"anyof\":\n      case \"=\":\n        filterType = FILTER_TYPES_INCLUDE;\n        break;\n      case \"noneof\":\n      case \"<>\":\n        filterType = FILTER_TYPES_EXCLUDE;\n        break;\n      default:\n        return getEmptyFilterValues();\n    }\n    return {\n      filterType: filterType,\n      filterValues: hasArrayValue ? value : [value]\n    };\n  };\n  var getConditionFromFilterRow = function getConditionFromFilterRow(column) {\n    var value = column.filterValue;\n    if ((0, _type.isDefined)(value)) {\n      var operation = column.selectedFilterOperation || column.defaultFilterOperation || _utils2.default.getDefaultOperation(column),\n        filter = [getColumnIdentifier(column), operation, column.filterValue];\n      return filter;\n    } else {\n      return null;\n    }\n  };\n  var getConditionFromHeaderFilter = function getConditionFromHeaderFilter(column) {\n    var selectedOperation,\n      value,\n      filterValues = column.filterValues;\n    if (!filterValues) {\n      return null;\n    }\n    if (canSyncHeaderFilterWithFilterRow(column) && 1 === column.filterValues.length && !Array.isArray(filterValues[0])) {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"<>\" : selectedOperation = \"=\";\n      value = filterValues[0];\n    } else {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"noneof\" : selectedOperation = \"anyof\";\n      value = filterValues;\n    }\n    return [getColumnIdentifier(column), selectedOperation, value];\n  };\n  var updateHeaderFilterCondition = function updateHeaderFilterCondition(columnsController, column, headerFilterCondition) {\n    var headerFilter = getHeaderFilterFromCondition(headerFilterCondition, column);\n    columnsController.columnOption(getColumnIdentifier(column), headerFilter);\n  };\n  var updateFilterRowCondition = function updateFilterRowCondition(columnsController, column, condition) {\n    var filterRowOptions,\n      selectedFilterOperation = condition && condition[1],\n      filterOperations = column.filterOperations || column.defaultFilterOperations;\n    if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.indexOf(selectedFilterOperation) >= 0) {\n      if (selectedFilterOperation === column.defaultFilterOperation && !(0, _type.isDefined)(column.selectedFilterOperation)) {\n        selectedFilterOperation = column.selectedFilterOperation;\n      }\n      filterRowOptions = {\n        filterValue: condition[2],\n        selectedFilterOperation: selectedFilterOperation\n      };\n    } else {\n      filterRowOptions = {\n        filterValue: void 0,\n        selectedFilterOperation: void 0\n      };\n    }\n    columnsController.columnOption(getColumnIdentifier(column), filterRowOptions);\n  };\n  return {\n    syncFilterValue: function syncFilterValue() {\n      var that = this,\n        columnsController = that.getController(\"columns\"),\n        columns = columnsController.getFilteringColumns();\n      this._skipSyncColumnOptions = true;\n      columns.forEach(function (column) {\n        var filterConditions = _utils2.default.getMatchedConditions(that.option(\"filterValue\"), getColumnIdentifier(column));\n        if (1 === filterConditions.length) {\n          var filterCondition = filterConditions[0];\n          updateHeaderFilterCondition(columnsController, column, filterCondition);\n          updateFilterRowCondition(columnsController, column, filterCondition);\n        } else {\n          (0, _type.isDefined)(column.filterValues) && updateHeaderFilterCondition(columnsController, column);\n          (0, _type.isDefined)(column.filterValue) && updateFilterRowCondition(columnsController, column);\n        }\n      });\n      this._skipSyncColumnOptions = false;\n    },\n    _initSync: function _initSync() {\n      var columns = this.getController(\"columns\").getColumns(),\n        dataController = this.getController(\"data\"),\n        pageIndex = dataController.pageIndex();\n      checkForErrors(columns);\n      if (!this.option(\"filterValue\")) {\n        var filteringColumns = this.getController(\"columns\").getFilteringColumns(),\n          filterValue = this.getFilterValueFromColumns(filteringColumns);\n        this.option(\"filterValue\", filterValue);\n      }\n      this.syncFilterValue();\n      dataController.pageIndex(pageIndex);\n    },\n    init: function init() {\n      var _this = this;\n      var dataController = this.getController(\"data\");\n      if (dataController.isFilterSyncActive()) {\n        if (this.getController(\"columns\").isAllDataTypesDefined()) {\n          this._initSync();\n        } else {\n          dataController.dataSourceChanged.add(function () {\n            return _this._initSync();\n          });\n        }\n      }\n    },\n    _getSyncFilterRow: function _getSyncFilterRow(filterValue, column) {\n      var filter = getConditionFromFilterRow(column);\n      if ((0, _type.isDefined)(filter)) {\n        return _utils2.default.syncFilters(filterValue, filter);\n      } else {\n        return _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    _getSyncHeaderFilter: function _getSyncHeaderFilter(filterValue, column) {\n      var filter = getConditionFromHeaderFilter(column);\n      if (filter) {\n        return _utils2.default.syncFilters(filterValue, filter);\n      } else {\n        return _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    getFilterValueFromColumns: function getFilterValueFromColumns(columns) {\n      if (!this.getController(\"data\").isFilterSyncActive()) {\n        return null;\n      }\n      var filterValue = [\"and\"];\n      columns && columns.forEach(function (column) {\n        var headerFilter = getConditionFromHeaderFilter(column),\n          filterRow = getConditionFromFilterRow(column);\n        headerFilter && _utils2.default.addItem(headerFilter, filterValue);\n        filterRow && _utils2.default.addItem(filterRow, filterValue);\n      });\n      return _utils2.default.getNormalizedFilter(filterValue);\n    },\n    syncFilterRow: function syncFilterRow(column, value) {\n      this.option(\"filterValue\", this._getSyncFilterRow(this.option(\"filterValue\"), column));\n    },\n    syncHeaderFilter: function syncHeaderFilter(column) {\n      this.option(\"filterValue\", this._getSyncHeaderFilter(this.option(\"filterValue\"), column));\n    },\n    getCustomFilterOperations: function getCustomFilterOperations() {\n      var filterBuilderCustomOperations = this.option(\"filterBuilder.customOperations\") || [];\n      return [_uiGrid_core6.default.anyOf(this.component), _uiGrid_core6.default.noneOf(this.component)].concat(filterBuilderCustomOperations);\n    },\n    publicMethods: function publicMethods() {\n      return [\"getCustomFilterOperations\"];\n    }\n  };\n}());\nvar DataControllerFilterSyncExtender = {\n  isFilterSyncActive: function isFilterSyncActive() {\n    var filterSyncEnabledValue = this.option(\"filterSyncEnabled\");\n    return \"auto\" === filterSyncEnabledValue ? this.option(\"filterPanel.visible\") : filterSyncEnabledValue;\n  },\n  skipCalculateColumnFilters: function skipCalculateColumnFilters() {\n    return (0, _type.isDefined)(this.option(\"filterValue\")) && this.isFilterSyncActive();\n  },\n  _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n    var that = this;\n    if (false === that.option(\"filterPanel.filterEnabled\")) {\n      return that.callBase();\n    }\n    var filters = [that.callBase()],\n      columns = that.getController(\"columns\").getFilteringColumns(),\n      filterValue = that.option(\"filterValue\");\n    if (that.isFilterSyncActive()) {\n      var currentColumn = that.getController(\"headerFilter\").getCurrentColumn();\n      if (currentColumn && filterValue) {\n        filterValue = _utils2.default.removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(currentColumn));\n      }\n    }\n    var customOperations = that.getController(\"filterSync\").getCustomFilterOperations(),\n      calculatedFilterValue = _utils2.default.getFilterExpression(filterValue, columns, customOperations, \"filterBuilder\");\n    if (calculatedFilterValue) {\n      filters.push(calculatedFilterValue);\n    }\n    return _uiGrid_core4.default.combineFilters(filters);\n  },\n  _parseColumnPropertyName: function _parseColumnPropertyName(fullName) {\n    var matched = fullName.match(/.*\\.(.*)/);\n    return matched[1];\n  },\n  clearFilter: function clearFilter(filterName) {\n    this.component.beginUpdate();\n    if (arguments.length > 0) {\n      if (\"filterValue\" === filterName) {\n        this.option(\"filterValue\", null);\n      }\n      this.callBase(filterName);\n    } else {\n      this.option(\"filterValue\", null);\n      this.callBase();\n    }\n    this.component.endUpdate();\n  },\n  optionChanged: function optionChanged(args) {\n    switch (args.name) {\n      case \"filterValue\":\n        this._applyFilter();\n        this.isFilterSyncActive() && this.getController(\"filterSync\").syncFilterValue();\n        args.handled = true;\n        break;\n      case \"filterSyncEnabled\":\n        args.handled = true;\n        break;\n      case \"columns\":\n        if (this.isFilterSyncActive()) {\n          var column = this.getController(\"columns\").getColumnByPath(args.fullName),\n            filterSyncController = this.getController(\"filterSync\");\n          if (column && !filterSyncController._skipSyncColumnOptions) {\n            var propertyName = this._parseColumnPropertyName(args.fullName);\n            filterSyncController._skipSyncColumnOptions = true;\n            if (\"filterType\" === propertyName) {\n              if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {\n                filterSyncController.syncHeaderFilter(column);\n              }\n            } else {\n              if (\"filterValues\" === propertyName) {\n                filterSyncController.syncHeaderFilter(column);\n              } else {\n                if ([\"filterValue\", \"selectedFilterOperation\"].indexOf(propertyName) > -1) {\n                  filterSyncController.syncFilterRow(column, column.filterValue);\n                }\n              }\n            }\n            filterSyncController._skipSyncColumnOptions = false;\n          }\n        }\n        this.callBase(args);\n        break;\n      default:\n        this.callBase(args);\n    }\n  }\n};\nvar ColumnHeadersViewFilterSyncExtender = {\n  _isHeaderFilterEmpty: function _isHeaderFilterEmpty(column) {\n    if (this.getController(\"data\").isFilterSyncActive()) {\n      return !_utils2.default.filterHasField(this.option(\"filterValue\"), getColumnIdentifier(column));\n    }\n    return this.callBase(column);\n  },\n  _needUpdateFilterIndicators: function _needUpdateFilterIndicators() {\n    return !this.getController(\"data\").isFilterSyncActive();\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"filterValue\" === args.name) {\n      this._updateHeaderFilterIndicators();\n    } else {\n      this.callBase(args);\n    }\n  }\n};\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      filterValue: null,\n      filterSyncEnabled: \"auto\"\n    };\n  },\n  controllers: {\n    filterSync: FilterSyncController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterSyncExtender\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterSyncExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}