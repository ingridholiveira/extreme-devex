{"ast":null,"code":"/**\r\n * DevExtreme (ui/load_panel.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  noop = require(\"../core/utils/common\").noop,\n  messageLocalization = require(\"../localization/message\"),\n  registerComponent = require(\"../core/component_registrator\"),\n  extend = require(\"../core/utils/extend\").extend,\n  LoadIndicator = require(\"./load_indicator\"),\n  Overlay = require(\"./overlay\"),\n  Deferred = require(\"../core/utils/deferred\").Deferred,\n  themes = require(\"./themes\");\nvar LOADPANEL_CLASS = \"dx-loadpanel\",\n  LOADPANEL_WRAPPER_CLASS = \"dx-loadpanel-wrapper\",\n  LOADPANEL_INDICATOR_CLASS = \"dx-loadpanel-indicator\",\n  LOADPANEL_MESSAGE_CLASS = \"dx-loadpanel-message\",\n  LOADPANEL_CONTENT_CLASS = \"dx-loadpanel-content\",\n  LOADPANEL_CONTENT_WRAPPER_CLASS = \"dx-loadpanel-content-wrapper\",\n  LOADPANEL_PANE_HIDDEN_CLASS = \"dx-loadpanel-pane-hidden\";\nvar LoadPanel = Overlay.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend(this.callBase(), {\n      escape: noop\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      message: messageLocalization.format(\"Loading\"),\n      width: 222,\n      height: 90,\n      animation: null,\n      showIndicator: true,\n      indicatorSrc: \"\",\n      showPane: true,\n      delay: 0,\n      closeOnBackButton: false,\n      resizeEnabled: false,\n      focusStateEnabled: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        shadingColor: \"transparent\"\n      }\n    }, {\n      device: function device() {\n        return themes.isMaterial();\n      },\n      options: {\n        message: \"\",\n        width: 60,\n        height: 60,\n        maxHeight: 60,\n        maxWidth: 60\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase.apply(this, arguments);\n  },\n  _initOptions: function _initOptions() {\n    this.callBase.apply(this, arguments);\n    this.option(\"templatesRenderAsynchronously\", false);\n  },\n  _render: function _render() {\n    this.callBase();\n    this.$element().addClass(LOADPANEL_CLASS);\n    this._wrapper().addClass(LOADPANEL_WRAPPER_CLASS);\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this.callBase();\n    this.$content().addClass(LOADPANEL_CONTENT_CLASS);\n    this._$contentWrapper = $(\"<div>\").addClass(LOADPANEL_CONTENT_WRAPPER_CLASS);\n    this._$contentWrapper.appendTo(this._$content);\n    this._togglePaneVisible();\n    this._cleanPreviousContent();\n    this._renderLoadIndicator();\n    this._renderMessage();\n  },\n  _show: function _show() {\n    var delay = this.option(\"delay\");\n    if (!delay) {\n      return this.callBase();\n    }\n    var deferred = new Deferred();\n    var callBase = this.callBase.bind(this);\n    this._clearShowTimeout();\n    this._showTimeout = setTimeout(function () {\n      callBase().done(function () {\n        deferred.resolve();\n      });\n    }, delay);\n    return deferred.promise();\n  },\n  _hide: function _hide() {\n    this._clearShowTimeout();\n    return this.callBase();\n  },\n  _clearShowTimeout: function _clearShowTimeout() {\n    clearTimeout(this._showTimeout);\n  },\n  _renderMessage: function _renderMessage() {\n    if (!this._$contentWrapper) {\n      return;\n    }\n    var message = this.option(\"message\");\n    if (!message) {\n      return;\n    }\n    var $message = $(\"<div>\").addClass(LOADPANEL_MESSAGE_CLASS).text(message);\n    this._$contentWrapper.append($message);\n  },\n  _renderLoadIndicator: function _renderLoadIndicator() {\n    if (!this._$contentWrapper || !this.option(\"showIndicator\")) {\n      return;\n    }\n    this._$indicator = $(\"<div>\").addClass(LOADPANEL_INDICATOR_CLASS).appendTo(this._$contentWrapper);\n    this._createComponent(this._$indicator, LoadIndicator, {\n      indicatorSrc: this.option(\"indicatorSrc\")\n    });\n  },\n  _cleanPreviousContent: function _cleanPreviousContent() {\n    this.$content().find(\".\" + LOADPANEL_MESSAGE_CLASS).remove();\n    this.$content().find(\".\" + LOADPANEL_INDICATOR_CLASS).remove();\n  },\n  _togglePaneVisible: function _togglePaneVisible() {\n    this.$content().toggleClass(LOADPANEL_PANE_HIDDEN_CLASS, !this.option(\"showPane\"));\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"delay\":\n        break;\n      case \"message\":\n      case \"showIndicator\":\n        this._cleanPreviousContent();\n        this._renderLoadIndicator();\n        this._renderMessage();\n        break;\n      case \"showPane\":\n        this._togglePaneVisible();\n        break;\n      case \"indicatorSrc\":\n        if (this._$indicator) {\n          this._createComponent(this._$indicator, LoadIndicator, {\n            indicatorSrc: this.option(\"indicatorSrc\")\n          });\n        }\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _dispose: function _dispose() {\n    this._clearShowTimeout();\n    this.callBase();\n  }\n});\nregisterComponent(\"dxLoadPanel\", LoadPanel);\nmodule.exports = LoadPanel;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}