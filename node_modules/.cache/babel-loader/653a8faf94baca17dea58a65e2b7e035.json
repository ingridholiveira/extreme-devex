{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.export.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _class = require(\"../../core/class\");\nvar _class2 = _interopRequireDefault(_class);\nvar _type = require(\"../../core/utils/type\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _position = require(\"../../core/utils/position\");\nvar _array = require(\"../../core/utils/array\");\nvar _array2 = _interopRequireDefault(_array);\nvar _uiData_grid = require(\"./ui.data_grid.core\");\nvar _uiData_grid2 = _interopRequireDefault(_uiData_grid);\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.export_mixin\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _exporter = require(\"../../exporter\");\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _button = require(\"../button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _list = require(\"../list\");\nvar _list2 = _interopRequireDefault(_list);\nvar _context_menu = require(\"../context_menu\");\nvar _context_menu2 = _interopRequireDefault(_context_menu);\nvar _deferred = require(\"../../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\",\n  DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\",\n  DATAGRID_EXPORT_ICON = \"export-to\",\n  DATAGRID_EXPORT_EXCEL_ICON = \"exportxlsx\",\n  DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\",\n  DATAGRID_EXPORT_EXCEL_BUTTON_ICON = \"export-excel-button\",\n  TOOLBAR_ITEM_AUTO_HIDE_CLASS = \"dx-toolbar-item-auto-hide\",\n  TOOLBAR_HIDDEN_BUTTON_CLASS = \"dx-toolbar-hidden-button\",\n  BUTTON_CLASS = \"dx-button\",\n  DATA_STYLE_OFFSET = 3;\nexports.DataProvider = _class2.default.inherit({\n  _getGroupValue: function _getGroupValue(item) {\n    var groupColumn = this._options.groupColumns[item.groupIndex],\n      value = _uiData_grid2.default.getDisplayValue(groupColumn, item.key[item.groupIndex], item.data, item.rowType),\n      result = groupColumn.caption + \": \" + _uiData_grid2.default.formatValue(value, groupColumn);\n    var summaryCells = item.summaryCells;\n    if (summaryCells && summaryCells[0] && summaryCells[0].length) {\n      result += \" \" + _uiData_grid2.default.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts);\n    }\n    return result;\n  },\n  _correctCellIndex: function _correctCellIndex(cellIndex) {\n    return cellIndex;\n  },\n  _initOptions: function _initOptions() {\n    var exportController = this._exportController,\n      groupColumns = exportController._columnsController.getGroupColumns(),\n      excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\n    this._options = {\n      columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\n      groupColumns: groupColumns,\n      items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\n      getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\n      isHeadersVisible: exportController.option(\"showColumnHeaders\"),\n      summaryTexts: exportController.option(\"summary.texts\"),\n      customizeExportData: exportController.option(\"customizeExportData\"),\n      rtlEnabled: exportController.option(\"rtlEnabled\"),\n      wrapTextEnabled: (0, _type.isDefined)(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\n      customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\n    };\n  },\n  hasCustomizeExcelCell: function hasCustomizeExcelCell() {\n    return (0, _type.isDefined)(this._options.customizeExcelCell);\n  },\n  customizeExcelCell: function customizeExcelCell(e, cellSourceData) {\n    if (this._options.customizeExcelCell) {\n      e.gridCell = cellSourceData;\n      if ((0, _type.isDefined)(this._exportController) && (0, _type.isDefined)(this._exportController.component)) {\n        e.component = this._exportController.component;\n      }\n      this._options.customizeExcelCell(e);\n    }\n  },\n  ctor: function ctor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\n    this._exportController = exportController;\n    this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n    this._selectedRowsOnly = selectedRowsOnly;\n  },\n  getStyles: function getStyles() {\n    var wrapTextEnabled = this._options.wrapTextEnabled,\n      styles = [\"center\", \"left\", \"right\"].map(function (alignment) {\n        return {\n          bold: true,\n          alignment: alignment,\n          wrapText: true\n        };\n      });\n    this.getColumns().forEach(function (column) {\n      styles.push({\n        alignment: column.alignment || \"left\",\n        format: column.format,\n        wrapText: wrapTextEnabled,\n        dataType: column.dataType\n      });\n    });\n    styles.push({\n      bold: true,\n      wrapText: false,\n      alignment: (0, _position.getDefaultAlignment)(this._options.rtlEnabled)\n    });\n    return styles;\n  },\n  _getTotalCellStyleId: function _getTotalCellStyleId(cellIndex) {\n    var alignment = this.getColumns()[cellIndex] && this.getColumns()[cellIndex].alignment || \"right\";\n    return [\"center\", \"left\", \"right\"].indexOf(alignment);\n  },\n  getStyleId: function getStyleId(rowIndex, cellIndex) {\n    if (rowIndex < this.getHeaderRowCount()) {\n      return 0;\n    } else {\n      if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\n        return this._getTotalCellStyleId(cellIndex);\n      } else {\n        if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\n          return DATA_STYLE_OFFSET + this.getColumns().length;\n        } else {\n          return cellIndex + DATA_STYLE_OFFSET;\n        }\n      }\n    }\n  },\n  getColumns: function getColumns(getColumnsByAllRows) {\n    var columns = this._options.columns;\n    return getColumnsByAllRows ? columns : columns[columns.length - 1];\n  },\n  getRowsCount: function getRowsCount() {\n    return this._options.items.length + this.getHeaderRowCount();\n  },\n  getHeaderRowCount: function getHeaderRowCount() {\n    if (this.isHeadersVisible()) {\n      return this._options.columns.length - 1;\n    }\n    return 0;\n  },\n  isGroupRow: function isGroupRow(rowIndex) {\n    return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType;\n  },\n  getGroupLevel: function getGroupLevel(rowIndex) {\n    var item = this._options.items[rowIndex - this.getHeaderRowCount()],\n      groupIndex = item && item.groupIndex;\n    if (item && \"totalFooter\" === item.rowType) {\n      return 0;\n    }\n    return (0, _type.isDefined)(groupIndex) ? groupIndex : this._options.groupColumns.length;\n  },\n  getCellType: function getCellType(rowIndex, cellIndex) {\n    var columns = this.getColumns();\n    if (rowIndex < this.getHeaderRowCount()) {\n      return \"string\";\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n    }\n    if (cellIndex < columns.length) {\n      var item = this._options.items.length && this._options.items[rowIndex],\n        column = columns[cellIndex];\n      if (item && \"data\" === item.rowType) {\n        if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !(0, _type.isDefined)(column.customizeText)) {\n          return (0, _type.isDefined)(column.lookup) ? column.lookup.dataType : column.dataType;\n        }\n      }\n      return \"string\";\n    }\n  },\n  ready: function ready() {\n    var options,\n      that = this;\n    that._initOptions();\n    options = this._options;\n    return (0, _deferred.when)(options.items).done(function (items) {\n      options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\n      options.items = items;\n    }).fail(function () {\n      options.items = [];\n    });\n  },\n  _convertFromGridGroupSummaryItems: function _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {\n    var result = void 0;\n    if ((0, _type.isDefined)(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\n      result = gridGroupSummaryItems.map(function (item) {\n        return {\n          value: item.value,\n          name: item.name\n        };\n      });\n    }\n    return result;\n  },\n  getCellData: function getCellData(rowIndex, cellIndex, isExcelJS) {\n    var result = {\n      cellSourceData: {},\n      value: value\n    };\n    var column,\n      value,\n      i,\n      summaryItems,\n      itemValues,\n      item,\n      columns = this.getColumns(),\n      correctedCellIndex = this._correctCellIndex(cellIndex);\n    if (rowIndex < this.getHeaderRowCount()) {\n      var columnsRow = this.getColumns(true)[rowIndex];\n      column = columnsRow[cellIndex];\n      result.cellSourceData.rowType = \"header\";\n      result.cellSourceData.column = column && column.gridColumn;\n      result.value = column && column.caption;\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n      item = this._options.items.length && this._options.items[rowIndex];\n      if (item) {\n        itemValues = item.values;\n        result.cellSourceData.rowType = item.rowType;\n        result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\n        switch (item.rowType) {\n          case \"groupFooter\":\n          case \"totalFooter\":\n            if (correctedCellIndex < itemValues.length) {\n              value = itemValues[correctedCellIndex];\n              if ((0, _type.isDefined)(value)) {\n                result.cellSourceData.value = value.value;\n                result.cellSourceData.totalSummaryItemName = value.name;\n                result.value = _uiData_grid2.default.getSummaryText(value, this._options.summaryTexts);\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n            break;\n          case \"group\":\n            result.cellSourceData.groupIndex = item.groupIndex;\n            if (cellIndex < 1) {\n              result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\n              result.cellSourceData.value = item.key[item.groupIndex];\n              result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\n              result.value = this._getGroupValue(item);\n            } else {\n              summaryItems = item.values[correctedCellIndex];\n              if (Array.isArray(summaryItems)) {\n                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\n                value = \"\";\n                for (i = 0; i < summaryItems.length; i++) {\n                  value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + _uiData_grid2.default.getSummaryText(summaryItems[i], this._options.summaryTexts);\n                }\n                result.value = value;\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n            break;\n          default:\n            column = columns[cellIndex];\n            if (column) {\n              var _value = itemValues[correctedCellIndex];\n              var displayValue = _uiData_grid2.default.getDisplayValue(column, _value, item.data, item.rowType);\n              result.value = !isFinite(displayValue) || column.customizeText ? _uiData_grid2.default.formatValue(displayValue, column) : displayValue;\n              result.cellSourceData.value = _value;\n            }\n            result.cellSourceData.data = item.data;\n        }\n      }\n    }\n    return result;\n  },\n  isHeadersVisible: function isHeadersVisible() {\n    return this._options.isHeadersVisible;\n  },\n  isTotalCell: function isTotalCell(rowIndex, cellIndex) {\n    var items = this._options.items,\n      item = items[rowIndex],\n      correctCellIndex = this._correctCellIndex(cellIndex),\n      isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\n    return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn;\n  },\n  getCellMerging: function getCellMerging(rowIndex, cellIndex) {\n    var columns = this._options.columns,\n      column = columns[rowIndex] && columns[rowIndex][cellIndex];\n    return column ? {\n      colspan: (column.exportColspan || 1) - 1,\n      rowspan: (column.rowspan || 1) - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  },\n  getFrozenArea: function getFrozenArea() {\n    var that = this;\n    return {\n      x: 0,\n      y: that.getHeaderRowCount()\n    };\n  }\n});\nexports.ExportController = _uiData_grid2.default.ViewController.inherit({}).include(_uiGrid_core2.default).inherit({\n  _getEmptyCell: function _getEmptyCell() {\n    return {\n      caption: \"\",\n      colspan: 1,\n      rowspan: 1\n    };\n  },\n  _updateColumnWidth: function _updateColumnWidth(column, width) {\n    column.width = width;\n  },\n  _getColumns: function _getColumns(initialColumnWidthsByColumnIndex) {\n    var i,\n      j,\n      column,\n      columns,\n      currentHeaderRow,\n      currentColspan,\n      result = [],\n      columnsController = this._columnsController,\n      rowCount = columnsController.getRowCount();\n    for (i = 0; i <= rowCount; i++) {\n      currentHeaderRow = [];\n      columns = columnsController.getVisibleColumns(i, true);\n      var columnWidthsByColumnIndex = void 0;\n      if (i === rowCount) {\n        if (this._updateLockCount) {\n          columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n        } else {\n          var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n          if (columnWidths && columnWidths.length) {\n            columnWidthsByColumnIndex = {};\n            for (var _i = 0; _i < columns.length; _i++) {\n              columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i];\n            }\n          }\n        }\n      }\n      for (j = 0; j < columns.length; j++) {\n        column = (0, _extend.extend)({}, columns[j], {\n          dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\n          gridColumn: columns[j]\n        });\n        if (this._needColumnExporting(column)) {\n          currentColspan = this._calculateExportColspan(column);\n          if ((0, _type.isDefined)(currentColspan)) {\n            column.exportColspan = currentColspan;\n          }\n          if (columnWidthsByColumnIndex) {\n            this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);\n          }\n          currentHeaderRow.push(column);\n        }\n      }\n      result.push(currentHeaderRow);\n    }\n    columns = result[rowCount];\n    result = this._prepareItems(result.slice(0, -1));\n    result.push(columns);\n    return result;\n  },\n  _calculateExportColspan: function _calculateExportColspan(column) {\n    var _this = this;\n    if (!column.isBand) {\n      return;\n    }\n    var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\n    if (!(0, _type.isDefined)(childColumns)) {\n      return;\n    }\n    return childColumns.reduce(function (result, childColumn) {\n      if (_this._needColumnExporting(childColumn)) {\n        return result + (_this._calculateExportColspan(childColumn) || 1);\n      } else {\n        return result;\n      }\n    }, 0);\n  },\n  _needColumnExporting: function _needColumnExporting(column) {\n    return !column.command && (column.allowExporting || void 0 === column.allowExporting);\n  },\n  _getFooterSummaryItems: function _getFooterSummaryItems(summaryCells, isTotal) {\n    var values,\n      itemsLength,\n      summaryCell,\n      j,\n      result = [],\n      estimatedItemsCount = 1,\n      i = 0;\n    do {\n      values = [];\n      for (j = 0; j < summaryCells.length; j++) {\n        summaryCell = summaryCells[j];\n        itemsLength = summaryCell.length;\n        if (estimatedItemsCount < itemsLength) {\n          estimatedItemsCount = itemsLength;\n        }\n        values.push(summaryCell[i]);\n      }\n      result.push({\n        values: values,\n        rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\n      });\n    } while (i++ < estimatedItemsCount - 1);\n    return result;\n  },\n  _hasSummaryGroupFooters: function _hasSummaryGroupFooters() {\n    var i,\n      groupItems = this.option(\"summary.groupItems\");\n    if ((0, _type.isDefined)(groupItems)) {\n      for (i = 0; i < groupItems.length; i++) {\n        if (groupItems[i].showInGroupFooter) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  _getItemsWithSummaryGroupFooters: function _getItemsWithSummaryGroupFooters(sourceItems) {\n    var item,\n      i,\n      result = [],\n      beforeGroupFooterItems = [],\n      groupFooterItems = [];\n    for (i = 0; i < sourceItems.length; i++) {\n      item = sourceItems[i];\n      if (\"groupFooter\" === item.rowType) {\n        groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\n        result = result.concat(beforeGroupFooterItems, groupFooterItems);\n        beforeGroupFooterItems = [];\n      } else {\n        beforeGroupFooterItems.push(item);\n      }\n    }\n    return result.length ? result : beforeGroupFooterItems;\n  },\n  _updateGroupValuesWithSummaryByColumn: function _updateGroupValuesWithSummaryByColumn(sourceItems) {\n    var item,\n      summaryCells,\n      summaryItem,\n      groupColumnCount,\n      k,\n      j,\n      i,\n      summaryValues = [];\n    for (i = 0; i < sourceItems.length; i++) {\n      item = sourceItems[i];\n      summaryCells = item.summaryCells;\n      if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\n        groupColumnCount = item.values.length;\n        for (j = 1; j < summaryCells.length; j++) {\n          for (k = 0; k < summaryCells[j].length; k++) {\n            summaryItem = summaryCells[j][k];\n            if (summaryItem && summaryItem.alignByColumn) {\n              if (!Array.isArray(summaryValues[j - groupColumnCount])) {\n                summaryValues[j - groupColumnCount] = [];\n              }\n              summaryValues[j - groupColumnCount].push(summaryItem);\n            }\n          }\n        }\n        if (summaryValues.length > 0) {\n          _array2.default.merge(item.values, summaryValues);\n          summaryValues = [];\n        }\n      }\n    }\n  },\n  _processUnExportedItems: function _processUnExportedItems(items) {\n    var item,\n      column,\n      values,\n      summaryCells,\n      i,\n      j,\n      columns = this._columnsController.getVisibleColumns(null, true),\n      groupColumns = this._columnsController.getGroupColumns();\n    for (i = 0; i < items.length; i++) {\n      item = items[i];\n      values = [];\n      summaryCells = [];\n      for (j = 0; j < columns.length; j++) {\n        column = columns[j];\n        if (this._needColumnExporting(column)) {\n          if (item.values) {\n            if (\"group\" === item.rowType && !values.length) {\n              values.push(item.key[item.groupIndex]);\n            } else {\n              values.push(item.values[j]);\n            }\n          }\n          if (item.summaryCells) {\n            if (\"group\" === item.rowType && !summaryCells.length) {\n              summaryCells.push(item.summaryCells[j - groupColumns.length + item.groupIndex]);\n            } else {\n              summaryCells.push(item.summaryCells[j]);\n            }\n          }\n        }\n      }\n      if (values.length) {\n        item.values = values;\n      }\n      if (summaryCells.length) {\n        item.summaryCells = summaryCells;\n      }\n    }\n  },\n  _getAllItems: function _getAllItems(data) {\n    var summaryCells,\n      summaryItems,\n      that = this,\n      d = new _deferred.Deferred(),\n      dataController = this.getController(\"data\"),\n      footerItems = dataController.footerItems(),\n      totalItem = footerItems.length && footerItems[0],\n      summaryTotalItems = that.option(\"summary.totalItems\");\n    (0, _deferred.when)(data).done(function (data) {\n      dataController.loadAll(data).done(function (sourceItems, totalAggregates) {\n        that._updateGroupValuesWithSummaryByColumn(sourceItems);\n        if (that._hasSummaryGroupFooters()) {\n          sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);\n        }\n        summaryCells = totalItem && totalItem.summaryCells;\n        if ((0, _type.isDefined)(totalAggregates) && summaryTotalItems) {\n          summaryCells = dataController._getSummaryCells(summaryTotalItems, totalAggregates);\n        }\n        summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\n        if (summaryItems) {\n          sourceItems = sourceItems.concat(summaryItems);\n        }\n        that._processUnExportedItems(sourceItems);\n        d.resolve(sourceItems);\n      }).fail(d.reject);\n    }).fail(d.reject);\n    return d;\n  },\n  _getSelectedItems: function _getSelectedItems() {\n    var selectionController = this.getController(\"selection\"),\n      selectedRowData = selectionController.getSelectedRowsData();\n    return this._getAllItems(selectedRowData);\n  },\n  _getColumnWidths: function _getColumnWidths(headersView, rowsView) {\n    return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths();\n  },\n  init: function init() {\n    this._columnsController = this.getController(\"columns\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._headersView = this.getView(\"columnHeadersView\");\n    this.createAction(\"onExporting\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onExported\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFileSaving\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  callbackNames: function callbackNames() {\n    return [\"selectionOnlyChanged\"];\n  },\n  getExportFormat: function getExportFormat() {\n    return [\"EXCEL\"];\n  },\n  getDataProvider: function getDataProvider(selectedRowsOnly) {\n    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n    var initialColumnWidthsByColumnIndex = void 0;\n    if (columnWidths && columnWidths.length) {\n      initialColumnWidthsByColumnIndex = {};\n      var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\n      for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {\n        initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];\n      }\n    }\n    return new exports.DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);\n  },\n  exportToExcel: function exportToExcel(selectionOnly) {\n    var that = this;\n    that._selectionOnly = selectionOnly;\n    (0, _exporter.export)(that.component.getDataProvider(), {\n      fileName: that.option(\"export.fileName\"),\n      proxyUrl: that.option(\"export.proxyUrl\"),\n      format: \"EXCEL\",\n      autoFilterEnabled: !!that.option(\"export.excelFilterEnabled\"),\n      rtlEnabled: that.option(\"rtlEnabled\"),\n      ignoreErrors: that.option(\"export.ignoreExcelErrors\"),\n      exportingAction: that.getAction(\"onExporting\"),\n      exportedAction: that.getAction(\"onExported\"),\n      fileSavingAction: that.getAction(\"onFileSaving\")\n    }, _exporter.excel.getData);\n  },\n  publicMethods: function publicMethods() {\n    return [\"getDataProvider\", \"getExportFormat\", \"exportToExcel\"];\n  },\n  selectionOnly: function selectionOnly(value) {\n    if ((0, _type.isDefined)(value)) {\n      this._isSelectedRows = value;\n      this.selectionOnlyChanged.fire();\n    } else {\n      return this._isSelectedRows;\n    }\n  }\n});\n_uiData_grid2.default.registerModule(\"export\", {\n  defaultOptions: function defaultOptions() {\n    return {\n      \"export\": {\n        enabled: false,\n        fileName: \"DataGrid\",\n        excelFilterEnabled: false,\n        excelWrapTextEnabled: void 0,\n        proxyUrl: void 0,\n        allowExportSelectedData: false,\n        ignoreExcelErrors: true,\n        texts: {\n          exportTo: _message2.default.format(\"dxDataGrid-exportTo\"),\n          exportAll: _message2.default.format(\"dxDataGrid-exportAll\"),\n          exportSelectedRows: _message2.default.format(\"dxDataGrid-exportSelectedRows\")\n        }\n      }\n    };\n  },\n  controllers: {\n    \"export\": exports.ExportController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        callbackNames: function callbackNames() {\n          var callbackList = this.callBase();\n          return (0, _type.isDefined)(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"];\n        },\n        _updateEditButtons: function _updateEditButtons() {\n          this.callBase();\n          this.editingChanged.fire(this.hasChanges());\n        }\n      }\n    },\n    views: {\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase();\n          return this._appendExportItems(items);\n        },\n        _appendExportItems: function _appendExportItems(items) {\n          var that = this,\n            exportOptions = that.option(\"export\");\n          if (exportOptions.enabled) {\n            var exportItems = [];\n            if (exportOptions.allowExportSelectedData) {\n              exportItems.push({\n                template: function template(data, index, container) {\n                  var $container = (0, _renderer2.default)(container);\n                  that._renderButton(data, $container);\n                  that._renderExportMenu($container);\n                },\n                menuItemTemplate: function menuItemTemplate(data, index, container) {\n                  that._renderList(data, (0, _renderer2.default)(container));\n                },\n                name: \"exportButton\",\n                allowExportSelected: true,\n                location: \"after\",\n                locateInMenu: \"auto\",\n                sortIndex: 30\n              });\n            } else {\n              exportItems.push({\n                template: function template(data, index, container) {\n                  that._renderButton(data, (0, _renderer2.default)(container));\n                },\n                menuItemTemplate: function menuItemTemplate(data, index, container) {\n                  that._renderButton(data, (0, _renderer2.default)(container), true);\n                },\n                name: \"exportButton\",\n                location: \"after\",\n                locateInMenu: \"auto\",\n                sortIndex: 30\n              });\n            }\n            items = items.concat(exportItems);\n            that._correctItemsPosition(items);\n          }\n          return items;\n        },\n        _renderButton: function _renderButton(data, $container, withText) {\n          var that = this,\n            buttonOptions = that._getButtonOptions(data.allowExportSelected),\n            $buttonContainer = that._getButtonContainer().addClass(DATAGRID_EXPORT_BUTTON_CLASS).appendTo($container);\n          if (withText) {\n            var wrapperNode = (0, _renderer2.default)(\"<div>\").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS);\n            $container.wrapInner(wrapperNode).parent().addClass(\"dx-toolbar-menu-action dx-toolbar-menu-button \" + TOOLBAR_HIDDEN_BUTTON_CLASS);\n            buttonOptions.text = buttonOptions.hint;\n          }\n          that._createComponent($buttonContainer, _button2.default, buttonOptions);\n        },\n        _renderList: function _renderList(data, $container) {\n          var that = this,\n            texts = that.option(\"export.texts\"),\n            items = [{\n              template: function template(data, index, container) {\n                that._renderFakeButton(data, (0, _renderer2.default)(container), DATAGRID_EXPORT_EXCEL_ICON);\n              },\n              text: texts.exportAll\n            }, {\n              template: function template(data, index, container) {\n                that._renderFakeButton(data, (0, _renderer2.default)(container), DATAGRID_EXPORT_SELECTED_ICON);\n              },\n              text: texts.exportSelectedRows,\n              exportSelected: true\n            }];\n          that._createComponent($container, _list2.default, {\n            items: items,\n            onItemClick: function onItemClick(e) {\n              that._exportController.exportToExcel(e.itemData.exportSelected);\n            },\n            scrollingEnabled: false\n          });\n        },\n        _renderFakeButton: function _renderFakeButton(data, $container, iconName) {\n          var $icon = (0, _renderer2.default)(\"<div>\").addClass(\"dx-icon dx-icon-\" + iconName),\n            $text = (0, _renderer2.default)(\"<span>\").addClass(\"dx-button-text\").text(data.text),\n            $content = (0, _renderer2.default)(\"<div>\").addClass(\"dx-button-content\").append($icon).append($text),\n            $button = (0, _renderer2.default)(\"<div>\").addClass(BUTTON_CLASS + \" dx-button-has-text dx-button-has-icon dx-datagrid-toolbar-button\").append($content),\n            $toolbarItem = (0, _renderer2.default)(\"<div>\").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS).append($button);\n          $container.append($toolbarItem).parent().addClass(\"dx-toolbar-menu-custom \" + TOOLBAR_HIDDEN_BUTTON_CLASS);\n        },\n        _correctItemsPosition: function _correctItemsPosition(items) {\n          items.sort(function (itemA, itemB) {\n            return itemA.sortIndex - itemB.sortIndex;\n          });\n        },\n        _renderExportMenu: function _renderExportMenu($buttonContainer) {\n          var that = this,\n            $button = $buttonContainer.find(\".\" + BUTTON_CLASS),\n            texts = that.option(\"export.texts\"),\n            menuItems = [{\n              text: texts.exportAll,\n              icon: DATAGRID_EXPORT_EXCEL_ICON\n            }, {\n              text: texts.exportSelectedRows,\n              exportSelected: true,\n              icon: DATAGRID_EXPORT_SELECTED_ICON\n            }],\n            $menuContainer = (0, _renderer2.default)(\"<div>\").appendTo($buttonContainer);\n          that._contextMenu = that._createComponent($menuContainer, _context_menu2.default, {\n            showEvent: \"dxclick\",\n            items: menuItems,\n            cssClass: DATAGRID_EXPORT_MENU_CLASS,\n            onItemClick: function onItemClick(e) {\n              that._exportController.exportToExcel(e.itemData.exportSelected);\n            },\n            target: $button,\n            position: {\n              at: \"left bottom\",\n              my: \"left top\",\n              offset: \"0 3\",\n              collision: \"fit\",\n              boundary: that._$parent,\n              boundaryOffset: \"1 1\"\n            }\n          });\n        },\n        _isExportButtonVisible: function _isExportButtonVisible() {\n          return this.option(\"export.enabled\");\n        },\n        _getButtonOptions: function _getButtonOptions(allowExportSelected) {\n          var options,\n            that = this,\n            texts = that.option(\"export.texts\");\n          if (allowExportSelected) {\n            options = {\n              hint: texts.exportTo,\n              icon: DATAGRID_EXPORT_ICON\n            };\n          } else {\n            options = {\n              hint: texts.exportAll,\n              icon: DATAGRID_EXPORT_EXCEL_BUTTON_ICON,\n              onClick: function onClick() {\n                that._exportController.exportToExcel();\n              }\n            };\n          }\n          return options;\n        },\n        optionChanged: function optionChanged(args) {\n          this.callBase(args);\n          if (\"export\" === args.name) {\n            args.handled = true;\n            this._invalidate();\n          }\n        },\n        init: function init() {\n          var that = this;\n          this.callBase();\n          this._exportController = this.getController(\"export\");\n          this._editingController = this.getController(\"editing\");\n          this._editingController.editingChanged.add(function (hasChanges) {\n            that.setToolbarItemDisabled(\"exportButton\", hasChanges);\n          });\n        },\n        isVisible: function isVisible() {\n          return this.callBase() || this._isExportButtonVisible();\n        }\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}