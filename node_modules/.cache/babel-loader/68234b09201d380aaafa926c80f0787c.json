{"ast":null,"code":"/**\r\n * DevExtreme (ui/themes.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  domAdapter = require(\"../core/dom_adapter\"),\n  windowUtils = require(\"../core/utils/window\"),\n  window = windowUtils.getWindow(),\n  Deferred = require(\"../core/utils/deferred\").Deferred,\n  errors = require(\"./widget/ui.errors\"),\n  domUtils = require(\"../core/utils/dom\"),\n  readyCallbacks = require(\"../core/utils/ready_callbacks\"),\n  ready = readyCallbacks.add,\n  each = require(\"../core/utils/iterator\").each,\n  devices = require(\"../core/devices\"),\n  viewPortUtils = require(\"../core/utils/view_port\"),\n  themeReadyCallback = require(\"./themes_callback\"),\n  viewPort = viewPortUtils.value,\n  Promise = require(\"../core/polyfills/promise\"),\n  viewPortChanged = viewPortUtils.changeCallback;\nvar DX_LINK_SELECTOR = \"link[rel=dx-theme]\",\n  THEME_ATTR = \"data-theme\",\n  ACTIVE_ATTR = \"data-active\",\n  DX_HAIRLINES_CLASS = \"dx-hairlines\";\nvar context, $activeThemeLink, knownThemes, currentThemeName, pendingThemeName;\nvar timerId;\nvar THEME_MARKER_PREFIX = \"dx.\";\nfunction readThemeMarker() {\n  if (!windowUtils.hasWindow()) {\n    return null;\n  }\n  var result,\n    element = $(\"<div>\", context).addClass(\"dx-theme-marker\").appendTo(context.documentElement);\n  try {\n    result = element.css(\"fontFamily\");\n    if (!result) {\n      return null;\n    }\n    result = result.replace(/[\"']/g, \"\");\n    if (result.substr(0, THEME_MARKER_PREFIX.length) !== THEME_MARKER_PREFIX) {\n      return null;\n    }\n    return result.substr(THEME_MARKER_PREFIX.length);\n  } finally {\n    element.remove();\n  }\n}\nfunction waitForThemeLoad(themeName) {\n  var waitStartTime;\n  pendingThemeName = themeName;\n  function handleLoaded() {\n    pendingThemeName = null;\n    themeReadyCallback.fire();\n    themeReadyCallback.empty();\n  }\n  if (isPendingThemeLoaded()) {\n    handleLoaded();\n  } else {\n    waitStartTime = Date.now();\n    timerId = setInterval(function () {\n      var isLoaded = isPendingThemeLoaded(),\n        isTimeout = !isLoaded && Date.now() - waitStartTime > 15e3;\n      if (isTimeout) {\n        errors.log(\"W0004\", pendingThemeName);\n      }\n      if (isLoaded || isTimeout) {\n        clearInterval(timerId);\n        timerId = void 0;\n        handleLoaded();\n      }\n    }, 10);\n  }\n}\nfunction isPendingThemeLoaded() {\n  return !pendingThemeName || readThemeMarker() === pendingThemeName;\n}\nfunction processMarkup() {\n  var $allThemeLinks = $(DX_LINK_SELECTOR, context);\n  if (!$allThemeLinks.length) {\n    return;\n  }\n  knownThemes = {};\n  $activeThemeLink = $(domUtils.createMarkupFromString(\"<link rel=stylesheet>\"), context);\n  $allThemeLinks.each(function () {\n    var link = $(this, context),\n      fullThemeName = link.attr(THEME_ATTR),\n      url = link.attr(\"href\"),\n      isActive = \"true\" === link.attr(ACTIVE_ATTR);\n    knownThemes[fullThemeName] = {\n      url: url,\n      isActive: isActive\n    };\n  });\n  $allThemeLinks.last().after($activeThemeLink);\n  $allThemeLinks.remove();\n}\nfunction resolveFullThemeName(desiredThemeName) {\n  var desiredThemeParts = desiredThemeName ? desiredThemeName.split(\".\") : [],\n    result = null;\n  if (knownThemes) {\n    if (desiredThemeName in knownThemes) {\n      return desiredThemeName;\n    }\n    each(knownThemes, function (knownThemeName, themeData) {\n      var knownThemeParts = knownThemeName.split(\".\");\n      if (desiredThemeParts[0] && knownThemeParts[0] !== desiredThemeParts[0]) {\n        return;\n      }\n      if (desiredThemeParts[1] && desiredThemeParts[1] !== knownThemeParts[1]) {\n        return;\n      }\n      if (desiredThemeParts[2] && desiredThemeParts[2] !== knownThemeParts[2]) {\n        return;\n      }\n      if (!result || themeData.isActive) {\n        result = knownThemeName;\n      }\n      if (themeData.isActive) {\n        return false;\n      }\n    });\n  }\n  return result;\n}\nfunction initContext(newContext) {\n  try {\n    if (newContext !== context) {\n      knownThemes = null;\n    }\n  } catch (x) {\n    knownThemes = null;\n  }\n  context = newContext;\n}\nfunction init(options) {\n  options = options || {};\n  initContext(options.context || domAdapter.getDocument());\n  if (!context) {\n    return;\n  }\n  processMarkup();\n  currentThemeName = void 0;\n  current(options);\n}\nfunction current(options) {\n  if (!arguments.length) {\n    currentThemeName = currentThemeName || readThemeMarker();\n    return currentThemeName;\n  }\n  detachCssClasses(viewPort());\n  options = options || {};\n  if (\"string\" === typeof options) {\n    options = {\n      theme: options\n    };\n  }\n  var currentThemeData,\n    isAutoInit = options._autoInit,\n    loadCallback = options.loadCallback;\n  currentThemeName = resolveFullThemeName(options.theme || currentThemeName);\n  if (currentThemeName) {\n    currentThemeData = knownThemes[currentThemeName];\n  }\n  if (loadCallback) {\n    themeReadyCallback.add(loadCallback);\n  }\n  if (currentThemeData) {\n    $activeThemeLink.attr(\"href\", knownThemes[currentThemeName].url);\n    if ((themeReadyCallback.has() || options._forceTimeout) && !timerId) {\n      waitForThemeLoad(currentThemeName);\n    } else {\n      if (pendingThemeName) {\n        pendingThemeName = currentThemeName;\n      }\n    }\n  } else {\n    if (isAutoInit) {\n      themeReadyCallback.fire();\n      themeReadyCallback.empty();\n    } else {\n      throw errors.Error(\"E0021\", currentThemeName);\n    }\n  }\n  checkThemeDeprecation();\n  attachCssClasses(viewPortUtils.originalViewPort(), currentThemeName);\n}\nfunction getCssClasses(themeName) {\n  themeName = themeName || current();\n  var result = [],\n    themeNameParts = themeName && themeName.split(\".\");\n  if (themeNameParts) {\n    result.push(\"dx-theme-\" + themeNameParts[0], \"dx-theme-\" + themeNameParts[0] + \"-typography\");\n    if (themeNameParts.length > 1) {\n      result.push(\"dx-color-scheme-\" + themeNameParts[1] + (isMaterial(themeName) ? \"-\" + themeNameParts[2] : \"\"));\n    }\n  }\n  return result;\n}\nvar themeClasses;\nfunction attachCssClasses(element, themeName) {\n  themeClasses = getCssClasses(themeName).join(\" \");\n  $(element).addClass(themeClasses);\n  var activateHairlines = function activateHairlines() {\n    var pixelRatio = windowUtils.hasWindow() && window.devicePixelRatio;\n    if (!pixelRatio || pixelRatio < 2) {\n      return;\n    }\n    var $tester = $(\"<div>\");\n    $tester.css(\"border\", \".5px solid transparent\");\n    $(\"body\").append($tester);\n    if (1 === $tester.outerHeight()) {\n      $(element).addClass(DX_HAIRLINES_CLASS);\n      themeClasses += \" \" + DX_HAIRLINES_CLASS;\n    }\n    $tester.remove();\n  };\n  activateHairlines();\n}\nfunction detachCssClasses(element) {\n  $(element).removeClass(themeClasses);\n}\nfunction themeReady(callback) {\n  themeReadyCallback.add(callback);\n}\nfunction isTheme(themeRegExp, themeName) {\n  if (!themeName) {\n    themeName = currentThemeName || readThemeMarker();\n  }\n  return new RegExp(themeRegExp).test(themeName);\n}\nfunction isMaterial(themeName) {\n  return isTheme(\"material\", themeName);\n}\nfunction isIos7(themeName) {\n  return isTheme(\"ios7\", themeName);\n}\nfunction isGeneric(themeName) {\n  return isTheme(\"generic\", themeName);\n}\nfunction isDark(themeName) {\n  return isTheme(\"dark\", themeName);\n}\nfunction checkThemeDeprecation() {\n  if (isIos7()) {\n    errors.log(\"W0010\", \"The 'ios7' theme\", \"19.1\", \"Use the 'generic' theme instead.\");\n  }\n}\nfunction isWebFontLoaded(text, fontWeight) {\n  var testedFont = \"Roboto, RobotoFallback, Arial\";\n  var etalonFont = \"Arial\";\n  var document = domAdapter.getDocument();\n  var testElement = document.createElement(\"span\");\n  testElement.style.position = \"absolute\";\n  testElement.style.top = \"-9999px\";\n  testElement.style.left = \"-9999px\";\n  testElement.style.visibility = \"hidden\";\n  testElement.style.fontFamily = etalonFont;\n  testElement.style.fontSize = \"250px\";\n  testElement.style.fontWeight = fontWeight;\n  testElement.innerHTML = text;\n  document.body.appendChild(testElement);\n  var etalonFontWidth = testElement.offsetWidth;\n  testElement.style.fontFamily = testedFont;\n  var testedFontWidth = testElement.offsetWidth;\n  testElement.parentNode.removeChild(testElement);\n  return etalonFontWidth !== testedFontWidth;\n}\nfunction waitWebFont(text, fontWeight) {\n  var interval = 15;\n  var timeout = 2e3;\n  return new Promise(function (resolve) {\n    var check = function check() {\n      if (isWebFontLoaded(text, fontWeight)) {\n        clear();\n      }\n    };\n    var clear = function clear() {\n      clearInterval(intervalId);\n      clearTimeout(timeoutId);\n      resolve();\n    };\n    var intervalId = setInterval(check, interval);\n    var timeoutId = setTimeout(clear, timeout);\n  });\n}\nvar initDeferred = new Deferred();\nfunction autoInit() {\n  init({\n    _autoInit: true,\n    _forceTimeout: true\n  });\n  if ($(DX_LINK_SELECTOR, context).length) {\n    throw errors.Error(\"E0022\");\n  }\n  initDeferred.resolve();\n}\nif (windowUtils.hasWindow()) {\n  autoInit();\n} else {\n  ready(autoInit);\n}\nviewPortChanged.add(function (viewPort, prevViewPort) {\n  initDeferred.done(function () {\n    detachCssClasses(prevViewPort);\n    attachCssClasses(viewPort);\n  });\n});\ndevices.changed.add(function () {\n  init({\n    _autoInit: true\n  });\n});\nexports.current = current;\nexports.ready = themeReady;\nexports.init = init;\nexports.attachCssClasses = attachCssClasses;\nexports.detachCssClasses = detachCssClasses;\nexports.waitForThemeLoad = waitForThemeLoad;\nexports.isMaterial = isMaterial;\nexports.isIos7 = isIos7;\nexports.isGeneric = isGeneric;\nexports.isDark = isDark;\nexports.isWebFontLoaded = isWebFontLoaded;\nexports.waitWebFont = waitWebFont;\nexports.resetTheme = function () {\n  $activeThemeLink && $activeThemeLink.attr(\"href\", \"about:blank\");\n  currentThemeName = null;\n  pendingThemeName = null;\n};\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}