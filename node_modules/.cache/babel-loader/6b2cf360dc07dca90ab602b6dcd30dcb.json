{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/size.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar window = require(\"../../core/utils/window\").getWindow();\nvar typeUtils = require(\"../utils/type\");\nvar SPECIAL_HEIGHT_VALUES = [\"auto\", \"none\", \"inherit\", \"initial\"];\nvar getSizeByStyles = function getSizeByStyles(elementStyles, styles) {\n  var result = 0;\n  styles.forEach(function (style) {\n    result += parseFloat(elementStyles[style]) || 0;\n  });\n  return result;\n};\nvar getElementBoxParams = function getElementBoxParams(name, elementStyles) {\n  var beforeName = \"width\" === name ? \"Left\" : \"Top\";\n  var afterName = \"width\" === name ? \"Right\" : \"Bottom\";\n  return {\n    padding: getSizeByStyles(elementStyles, [\"padding\" + beforeName, \"padding\" + afterName]),\n    border: getSizeByStyles(elementStyles, [\"border\" + beforeName + \"Width\", \"border\" + afterName + \"Width\"]),\n    margin: getSizeByStyles(elementStyles, [\"margin\" + beforeName, \"margin\" + afterName])\n  };\n};\nvar getBoxSizingOffset = function getBoxSizingOffset(name, elementStyles, boxParams) {\n  var size = elementStyles[name];\n  if (\"border-box\" === elementStyles.boxSizing && size.length && \"%\" !== size[size.length - 1]) {\n    return boxParams.border + boxParams.padding;\n  }\n  return 0;\n};\nvar getSize = function getSize(element, name, include) {\n  var elementStyles = window.getComputedStyle(element);\n  var boxParams = getElementBoxParams(name, elementStyles);\n  var clientRect = element.getClientRects().length;\n  var boundingClientRect = element.getBoundingClientRect()[name];\n  var result = clientRect ? boundingClientRect : 0;\n  if (result <= 0) {\n    result = parseFloat(elementStyles[name] || element.style[name]) || 0;\n    result -= getBoxSizingOffset(name, elementStyles, boxParams);\n  } else {\n    result -= boxParams.padding + boxParams.border;\n  }\n  if (include.paddings) {\n    result += boxParams.padding;\n  }\n  if (include.borders) {\n    result += boxParams.border;\n  }\n  if (include.margins) {\n    result += boxParams.margin;\n  }\n  return result;\n};\nvar getContainerHeight = function getContainerHeight(container) {\n  return typeUtils.isWindow(container) ? container.innerHeight : container.offsetHeight;\n};\nvar parseHeight = function parseHeight(value, container) {\n  if (value.indexOf(\"px\") > 0) {\n    value = parseInt(value.replace(\"px\", \"\"));\n  } else {\n    if (value.indexOf(\"%\") > 0) {\n      value = parseInt(value.replace(\"%\", \"\")) * getContainerHeight(container) / 100;\n    } else {\n      if (!isNaN(value)) {\n        value = parseInt(value);\n      }\n    }\n  }\n  return value;\n};\nvar getHeightWithOffset = function getHeightWithOffset(value, offset, container) {\n  if (!value) {\n    return null;\n  }\n  if (SPECIAL_HEIGHT_VALUES.indexOf(value) > -1) {\n    return offset ? null : value;\n  }\n  if (typeUtils.isString(value)) {\n    value = parseHeight(value, container);\n  }\n  if (typeUtils.isNumeric(value)) {\n    return Math.max(0, value + offset);\n  }\n  var operationString = offset < 0 ? \" - \" : \" \";\n  return \"calc(\" + value + operationString + Math.abs(offset) + \"px)\";\n};\nvar addOffsetToMaxHeight = function addOffsetToMaxHeight(value, offset, container) {\n  var maxHeight = getHeightWithOffset(value, offset, container);\n  return null !== maxHeight ? maxHeight : \"none\";\n};\nvar addOffsetToMinHeight = function addOffsetToMinHeight(value, offset, container) {\n  var minHeight = getHeightWithOffset(value, offset, container);\n  return null !== minHeight ? minHeight : 0;\n};\nvar getVerticalOffsets = function getVerticalOffsets(element, withMargins) {\n  if (!element) {\n    return 0;\n  }\n  var boxParams = getElementBoxParams(\"height\", window.getComputedStyle(element));\n  return boxParams.padding + boxParams.border + (withMargins ? boxParams.margin : 0);\n};\nvar getVisibleHeight = function getVisibleHeight(element) {\n  if (element) {\n    var boundingClientRect = element.getBoundingClientRect();\n    if (boundingClientRect.height) {\n      return boundingClientRect.height;\n    }\n  }\n  return 0;\n};\nexports.getSize = getSize;\nexports.getElementBoxParams = getElementBoxParams;\nexports.addOffsetToMaxHeight = addOffsetToMaxHeight;\nexports.addOffsetToMinHeight = addOffsetToMinHeight;\nexports.getVerticalOffsets = getVerticalOffsets;\nexports.getVisibleHeight = getVisibleHeight;\nexports.parseHeight = parseHeight;","map":null,"metadata":{},"sourceType":"script"}