{"ast":null,"code":"/**\r\n * DevExtreme (events/core/emitter.feedback.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../../core/class\"),\n  commonUtils = require(\"../../core/utils/common\"),\n  contains = require(\"../../core/utils/dom\").contains,\n  devices = require(\"../../core/devices\"),\n  eventUtils = require(\"../utils\"),\n  pointerEvents = require(\"../pointer\"),\n  Emitter = require(\"./emitter\"),\n  registerEmitter = require(\"./emitter_registrator\");\nvar ACTIVE_EVENT_NAME = \"dxactive\",\n  INACTIVE_EVENT_NAME = \"dxinactive\",\n  ACTIVE_TIMEOUT = 30,\n  INACTIVE_TIMEOUT = 400;\nvar FeedbackEvent = Class.inherit({\n  ctor: function ctor(timeout, fire) {\n    this._timeout = timeout;\n    this._fire = fire;\n  },\n  start: function start() {\n    var that = this;\n    this._schedule(function () {\n      that.force();\n    });\n  },\n  _schedule: function _schedule(fn) {\n    this.stop();\n    this._timer = setTimeout(fn, this._timeout);\n  },\n  stop: function stop() {\n    clearTimeout(this._timer);\n  },\n  force: function force() {\n    if (this._fired) {\n      return;\n    }\n    this.stop();\n    this._fire();\n    this._fired = true;\n  },\n  fired: function fired() {\n    return this._fired;\n  }\n});\nvar activeFeedback;\nvar FeedbackEmitter = Emitter.inherit({\n  ctor: function ctor() {\n    this.callBase.apply(this, arguments);\n    this._active = new FeedbackEvent(0, commonUtils.noop);\n    this._inactive = new FeedbackEvent(0, commonUtils.noop);\n  },\n  configure: function configure(data, eventName) {\n    switch (eventName) {\n      case ACTIVE_EVENT_NAME:\n        data.activeTimeout = data.timeout;\n        break;\n      case INACTIVE_EVENT_NAME:\n        data.inactiveTimeout = data.timeout;\n    }\n    this.callBase(data);\n  },\n  start: function start(e) {\n    if (activeFeedback) {\n      var activeChildExists = contains(this.getElement().get(0), activeFeedback.getElement().get(0));\n      var childJustActivated = !activeFeedback._active.fired();\n      if (activeChildExists && childJustActivated) {\n        this._cancel();\n        return;\n      }\n      activeFeedback._inactive.force();\n    }\n    activeFeedback = this;\n    this._initEvents(e);\n    this._active.start();\n  },\n  _initEvents: function _initEvents(e) {\n    var that = this,\n      eventTarget = this._getEmitterTarget(e),\n      mouseEvent = eventUtils.isMouseEvent(e),\n      isSimulator = devices.isSimulator(),\n      deferFeedback = isSimulator || !mouseEvent,\n      activeTimeout = commonUtils.ensureDefined(this.activeTimeout, ACTIVE_TIMEOUT),\n      inactiveTimeout = commonUtils.ensureDefined(this.inactiveTimeout, INACTIVE_TIMEOUT);\n    this._active = new FeedbackEvent(deferFeedback ? activeTimeout : 0, function () {\n      that._fireEvent(ACTIVE_EVENT_NAME, e, {\n        target: eventTarget\n      });\n    });\n    this._inactive = new FeedbackEvent(deferFeedback ? inactiveTimeout : 0, function () {\n      that._fireEvent(INACTIVE_EVENT_NAME, e, {\n        target: eventTarget\n      });\n      activeFeedback = null;\n    });\n  },\n  cancel: function cancel(e) {\n    this.end(e);\n  },\n  end: function end(e) {\n    var skipTimers = e.type !== pointerEvents.up;\n    if (skipTimers) {\n      this._active.stop();\n    } else {\n      this._active.force();\n    }\n    this._inactive.start();\n    if (skipTimers) {\n      this._inactive.force();\n    }\n  },\n  dispose: function dispose() {\n    this._active.stop();\n    this._inactive.stop();\n    this.callBase();\n  },\n  lockInactive: function lockInactive() {\n    this._active.force();\n    this._inactive.stop();\n    activeFeedback = null;\n    this._cancel();\n    return this._inactive.force.bind(this._inactive);\n  }\n});\nFeedbackEmitter.lock = function (deferred) {\n  var lockInactive = activeFeedback ? activeFeedback.lockInactive() : commonUtils.noop;\n  deferred.done(lockInactive);\n};\nregisterEmitter({\n  emitter: FeedbackEmitter,\n  events: [ACTIVE_EVENT_NAME, INACTIVE_EVENT_NAME]\n});\nexports.lock = FeedbackEmitter.lock;\nexports.active = ACTIVE_EVENT_NAME;\nexports.inactive = INACTIVE_EVENT_NAME;","map":null,"metadata":{},"sourceType":"script"}