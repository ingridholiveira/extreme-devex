{"ast":null,"code":"/**\r\n * DevExtreme (data/abstract_store.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../core/class\"),\n  abstract = Class.abstract,\n  EventsMixin = require(\"../core/events_mixin\"),\n  each = require(\"../core/utils/iterator\").each,\n  errorsModule = require(\"./errors\"),\n  dataUtils = require(\"./utils\"),\n  compileGetter = require(\"../core/utils/data\").compileGetter,\n  storeHelper = require(\"./store_helper\"),\n  queryByOptions = storeHelper.queryByOptions,\n  Deferred = require(\"../core/utils/deferred\").Deferred,\n  noop = require(\"../core/utils/common\").noop,\n  storeImpl = {};\nvar Store = Class.inherit({\n  ctor: function ctor(options) {\n    var that = this;\n    options = options || {};\n    each([\"onLoaded\", \"onLoading\", \"onInserted\", \"onInserting\", \"onUpdated\", \"onUpdating\", \"onPush\", \"onRemoved\", \"onRemoving\", \"onModified\", \"onModifying\"], function (_, optionName) {\n      if (optionName in options) {\n        that.on(optionName.slice(2).toLowerCase(), options[optionName]);\n      }\n    });\n    this._key = options.key;\n    this._errorHandler = options.errorHandler;\n    this._useDefaultSearch = true;\n  },\n  _customLoadOptions: function _customLoadOptions() {\n    return null;\n  },\n  key: function key() {\n    return this._key;\n  },\n  keyOf: function keyOf(obj) {\n    if (!this._keyGetter) {\n      this._keyGetter = compileGetter(this.key());\n    }\n    return this._keyGetter(obj);\n  },\n  _requireKey: function _requireKey() {\n    if (!this.key()) {\n      throw errorsModule.errors.Error(\"E4005\");\n    }\n  },\n  load: function load(options) {\n    var that = this;\n    options = options || {};\n    this.fireEvent(\"loading\", [options]);\n    return this._withLock(this._loadImpl(options)).done(function (result) {\n      that.fireEvent(\"loaded\", [result, options]);\n    });\n  },\n  _loadImpl: function _loadImpl(options) {\n    return queryByOptions(this.createQuery(options), options).enumerate();\n  },\n  _withLock: function _withLock(task) {\n    var result = new Deferred();\n    task.done(function () {\n      var that = this,\n        args = arguments;\n      dataUtils.processRequestResultLock.promise().done(function () {\n        result.resolveWith(that, args);\n      });\n    }).fail(function () {\n      result.rejectWith(this, arguments);\n    });\n    return result;\n  },\n  createQuery: abstract,\n  totalCount: function totalCount(options) {\n    return this._totalCountImpl(options);\n  },\n  _totalCountImpl: function _totalCountImpl(options) {\n    return queryByOptions(this.createQuery(options), options, true).count();\n  },\n  byKey: function byKey(key, extraOptions) {\n    return this._addFailHandlers(this._withLock(this._byKeyImpl(key, extraOptions)));\n  },\n  _byKeyImpl: abstract,\n  insert: function insert(values) {\n    var that = this;\n    that.fireEvent(\"modifying\");\n    that.fireEvent(\"inserting\", [values]);\n    return that._addFailHandlers(that._insertImpl(values).done(function (callbackValues, callbackKey) {\n      that.fireEvent(\"inserted\", [callbackValues, callbackKey]);\n      that.fireEvent(\"modified\");\n    }));\n  },\n  _insertImpl: abstract,\n  update: function update(key, values) {\n    var that = this;\n    that.fireEvent(\"modifying\");\n    that.fireEvent(\"updating\", [key, values]);\n    return that._addFailHandlers(that._updateImpl(key, values).done(function () {\n      that.fireEvent(\"updated\", [key, values]);\n      that.fireEvent(\"modified\");\n    }));\n  },\n  _updateImpl: abstract,\n  push: function push(changes) {\n    this._pushImpl(changes);\n    this.fireEvent(\"push\", [changes]);\n  },\n  _pushImpl: noop,\n  remove: function remove(key) {\n    var that = this;\n    that.fireEvent(\"modifying\");\n    that.fireEvent(\"removing\", [key]);\n    return that._addFailHandlers(that._removeImpl(key).done(function (callbackKey) {\n      that.fireEvent(\"removed\", [callbackKey]);\n      that.fireEvent(\"modified\");\n    }));\n  },\n  _removeImpl: abstract,\n  _addFailHandlers: function _addFailHandlers(deferred) {\n    return deferred.fail(this._errorHandler).fail(errorsModule._errorHandler);\n  }\n}).include(EventsMixin);\nStore.create = function (alias, options) {\n  if (!(alias in storeImpl)) {\n    throw errorsModule.errors.Error(\"E4020\", alias);\n  }\n  return new storeImpl[alias](options);\n};\nStore.registerClass = function (type, alias) {\n  if (alias) {\n    storeImpl[alias] = type;\n  }\n  return type;\n};\nStore.inherit = function (inheritor) {\n  return function (members, alias) {\n    var type = inheritor.apply(this, [members]);\n    Store.registerClass(type, alias);\n    return type;\n  };\n}(Store.inherit);\nmodule.exports = Store;","map":null,"metadata":{},"sourceType":"script"}