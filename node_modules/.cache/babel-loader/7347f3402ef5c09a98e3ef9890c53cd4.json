{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.header_panel.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _toolbar = require(\"../toolbar\");\nvar _toolbar2 = _interopRequireDefault(_toolbar);\nvar _uiGrid_core = require(\"./ui.grid_core.columns_view\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _common = require(\"../../core/utils/common\");\nvar _type = require(\"../../core/utils/type\");\nvar _dom = require(\"../../core/utils/dom\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nrequire(\"../drop_down_menu\");\nvar HEADER_PANEL_CLASS = \"header-panel\",\n  TOOLBAR_BUTTON_CLASS = \"toolbar-button\";\nvar HeaderPanel = _uiGrid_core2.default.ColumnsView.inherit({\n  _getToolbarItems: function _getToolbarItems() {\n    return [];\n  },\n  _getButtonContainer: function _getButtonContainer() {\n    return (0, _renderer2.default)(\"<div>\").addClass(this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS));\n  },\n  _getToolbarButtonClass: function _getToolbarButtonClass(specificClass) {\n    var secondClass = specificClass ? \" \" + specificClass : \"\";\n    return this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS) + secondClass;\n  },\n  _getToolbarOptions: function _getToolbarOptions() {\n    var toolbarItems,\n      options = {\n        toolbarOptions: {\n          items: this._getToolbarItems(),\n          onItemRendered: function onItemRendered(e) {\n            var itemRenderedCallback = e.itemData.onItemRendered;\n            if (itemRenderedCallback) {\n              itemRenderedCallback(e);\n            }\n          }\n        }\n      };\n    this.executeAction(\"onToolbarPreparing\", options);\n    if (options.toolbarOptions && !(0, _type.isDefined)(options.toolbarOptions.visible)) {\n      toolbarItems = options.toolbarOptions.items;\n      options.toolbarOptions.visible = !!(toolbarItems && toolbarItems.length);\n    }\n    return options.toolbarOptions;\n  },\n  _renderCore: function _renderCore() {\n    if (!this._toolbar) {\n      this.element().addClass(this.addWidgetPrefix(HEADER_PANEL_CLASS));\n      this._toolbar = this._createComponent((0, _renderer2.default)(\"<div>\").appendTo(this.element()), _toolbar2.default, this._toolbarOptions);\n    } else {\n      this._toolbar.option(this._toolbarOptions);\n    }\n  },\n  _columnOptionChanged: _common.noop,\n  _handleDataChanged: function _handleDataChanged() {\n    if (this._requireReady) {\n      this.render();\n    }\n  },\n  init: function init() {\n    this.callBase();\n    this.createAction(\"onToolbarPreparing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  render: function render() {\n    this._toolbarOptions = this._getToolbarOptions();\n    this.callBase.apply(this, arguments);\n  },\n  setToolbarItemDisabled: function setToolbarItemDisabled(name, optionValue) {\n    var toolbarInstance = this._toolbar;\n    if (toolbarInstance) {\n      var items = toolbarInstance.option(\"items\") || [],\n        itemIndex = items.indexOf(items.filter(function (item) {\n          return item.name === name;\n        })[0]);\n      if (itemIndex >= 0) {\n        var itemOptionPrefix = \"items[\" + itemIndex + \"]\";\n        if (toolbarInstance.option(itemOptionPrefix + \".options\")) {\n          toolbarInstance.option(itemOptionPrefix + \".options.disabled\", optionValue);\n        } else {\n          toolbarInstance.option(itemOptionPrefix + \".disabled\", optionValue);\n        }\n      }\n    }\n  },\n  updateToolbarDimensions: function updateToolbarDimensions() {\n    if (this._toolbar) {\n      (0, _dom.triggerResizeEvent)(this.getHeaderPanel());\n    }\n  },\n  getHeaderPanel: function getHeaderPanel() {\n    return this.element();\n  },\n  getHeight: function getHeight() {\n    return this.getElementHeight();\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"onToolbarPreparing\" === args.name) {\n      this._invalidate();\n      args.handled = true;\n    }\n    this.callBase(args);\n  },\n  isVisible: function isVisible() {\n    return this._toolbarOptions && this._toolbarOptions.visible;\n  },\n  allowDragging: _common.noop\n});\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {};\n  },\n  views: {\n    headerPanel: HeaderPanel\n  },\n  extenders: {\n    controllers: {\n      resizing: {\n        _updateDimensionsCore: function _updateDimensionsCore() {\n          this.callBase.apply(this, arguments);\n          this.getView(\"headerPanel\").updateToolbarDimensions();\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}