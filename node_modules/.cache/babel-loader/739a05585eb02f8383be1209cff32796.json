{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.master_detail.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _common = require(\"../../core/utils/common\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _type = require(\"../../core/utils/type\");\nvar _deferred = require(\"../../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\",\n  MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\",\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  ROW_LINES_CLASS = \"dx-row-lines\";\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      masterDetail: {\n        enabled: false,\n        autoExpandAll: false,\n        template: null\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      columns: {\n        _getExpandColumnsCore: function _getExpandColumnsCore() {\n          var expandColumns = this.callBase();\n          if (this.option(\"masterDetail.enabled\")) {\n            expandColumns.push({\n              type: \"detailExpand\",\n              cellTemplate: _uiGrid_core2.default.getExpandCellTemplate()\n            });\n          }\n          return expandColumns;\n        }\n      },\n      data: function () {\n        var initMasterDetail = function initMasterDetail(that) {\n          that._expandedItems = [];\n          that._isExpandAll = that.option(\"masterDetail.autoExpandAll\");\n        };\n        return {\n          init: function init() {\n            var that = this;\n            initMasterDetail(that);\n            that.callBase();\n          },\n          expandAll: function expandAll(groupIndex) {\n            var that = this;\n            if (groupIndex < 0) {\n              that._isExpandAll = true;\n              that._expandedItems = [];\n              that.updateItems();\n            } else {\n              that.callBase.apply(that, arguments);\n            }\n          },\n          collapseAll: function collapseAll(groupIndex) {\n            var that = this;\n            if (groupIndex < 0) {\n              that._isExpandAll = false;\n              that._expandedItems = [];\n              that.updateItems();\n            } else {\n              that.callBase.apply(that, arguments);\n            }\n          },\n          isRowExpanded: function isRowExpanded(key) {\n            var that = this,\n              expandIndex = _uiGrid_core2.default.getIndexByKey(key, that._expandedItems);\n            if (Array.isArray(key)) {\n              return that.callBase.apply(that, arguments);\n            } else {\n              return !!(that._isExpandAll ^ (expandIndex >= 0 && that._expandedItems[expandIndex].visible));\n            }\n          },\n          _getRowIndicesForExpand: function _getRowIndicesForExpand(key) {\n            var rowIndex = this.getRowIndexByKey(key);\n            return [rowIndex, rowIndex + 1];\n          },\n          _changeRowExpandCore: function _changeRowExpandCore(key) {\n            var expandIndex,\n              editingController,\n              that = this;\n            if (Array.isArray(key)) {\n              return that.callBase.apply(that, arguments);\n            } else {\n              expandIndex = _uiGrid_core2.default.getIndexByKey(key, that._expandedItems);\n              if (expandIndex >= 0) {\n                var visible = that._expandedItems[expandIndex].visible;\n                that._expandedItems[expandIndex].visible = !visible;\n              } else {\n                that._expandedItems.push({\n                  key: key,\n                  visible: true\n                });\n                editingController = that.getController(\"editing\");\n                if (editingController) {\n                  editingController.correctEditRowIndexAfterExpand(key);\n                }\n              }\n              that.updateItems({\n                changeType: \"update\",\n                rowIndices: that._getRowIndicesForExpand(key)\n              });\n            }\n          },\n          _processDataItem: function _processDataItem(data, options) {\n            var that = this,\n              dataItem = that.callBase.apply(that, arguments);\n            dataItem.isExpanded = that.isRowExpanded(dataItem.key);\n            if (void 0 === options.detailColumnIndex) {\n              options.detailColumnIndex = -1;\n              (0, _iterator.each)(options.visibleColumns, function (index, column) {\n                if (\"expand\" === column.command && !(0, _type.isDefined)(column.groupIndex)) {\n                  options.detailColumnIndex = index;\n                  return false;\n                }\n              });\n            }\n            if (options.detailColumnIndex >= 0) {\n              dataItem.values[options.detailColumnIndex] = dataItem.isExpanded;\n            }\n            return dataItem;\n          },\n          _processItems: function _processItems(items, changeType) {\n            var expandIndex,\n              that = this,\n              result = [];\n            items = that.callBase.apply(that, arguments);\n            if (\"loadingAll\" === changeType) {\n              return items;\n            }\n            if (\"refresh\" === changeType) {\n              that._expandedItems = (0, _common.grep)(that._expandedItems, function (item) {\n                return item.visible;\n              });\n            }\n            (0, _iterator.each)(items, function (index, item) {\n              result.push(item);\n              expandIndex = _uiGrid_core2.default.getIndexByKey(item.key, that._expandedItems);\n              if (\"data\" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {\n                result.push({\n                  visible: item.isExpanded,\n                  rowType: \"detail\",\n                  key: item.key,\n                  data: item.data,\n                  values: []\n                });\n              }\n            });\n            return result;\n          },\n          optionChanged: function optionChanged(args) {\n            var value,\n              previousValue,\n              isEnabledChanged,\n              isAutoExpandAllChanged,\n              that = this;\n            if (\"masterDetail\" === args.name) {\n              args.name = \"dataSource\";\n              switch (args.fullName) {\n                case \"masterDetail\":\n                  value = args.value || {};\n                  previousValue = args.previousValue || {};\n                  isEnabledChanged = value.enabled !== previousValue.enabled;\n                  isAutoExpandAllChanged = value.autoExpandAll !== previousValue.autoExpandAll;\n                  break;\n                case \"masterDetail.enabled\":\n                  isEnabledChanged = true;\n                  break;\n                case \"masterDetail.autoExpandAll\":\n                  isAutoExpandAllChanged = true;\n              }\n              if (isEnabledChanged || isAutoExpandAllChanged) {\n                initMasterDetail(that);\n              }\n            }\n            that.callBase(args);\n          }\n        };\n      }(),\n      resizing: {\n        fireContentReadyAction: function fireContentReadyAction() {\n          this.callBase.apply(this, arguments);\n          this._updateParentDataGrids(this.component.$element());\n        },\n        _updateParentDataGrids: function _updateParentDataGrids($element) {\n          var _this = this;\n          var $masterDetailRow = $element.closest(\".\" + MASTER_DETAIL_ROW_CLASS);\n          if ($masterDetailRow.length) {\n            (0, _deferred.when)(this._updateMasterDataGrid($masterDetailRow, $element)).done(function () {\n              _this._updateParentDataGrids($masterDetailRow.parent());\n            });\n          }\n        },\n        _updateMasterDataGrid: function _updateMasterDataGrid($masterDetailRow, $detailElement) {\n          var masterRowOptions = (0, _renderer2.default)($masterDetailRow).data(\"options\"),\n            masterDataGrid = (0, _renderer2.default)($masterDetailRow).closest(\".\" + this.getWidgetContainerClass()).parent().data(\"dxDataGrid\");\n          if (masterRowOptions && masterDataGrid) {\n            if (masterDataGrid.getView(\"rowsView\").isFixedColumns()) {\n              this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, $detailElement);\n            } else {\n              var scrollable = masterDataGrid.getScrollable();\n              return scrollable && scrollable.update();\n            }\n          }\n        },\n        _updateFixedMasterDetailGrids: function _updateFixedMasterDetailGrids(masterDataGrid, masterRowIndex, $detailElement) {\n          var _this2 = this;\n          var $rows = (0, _renderer2.default)(masterDataGrid.getRowElement(masterRowIndex));\n          if ($rows && 2 === $rows.length && $rows.eq(0).height() !== $rows.eq(1).height()) {\n            var detailElementWidth = $detailElement.width();\n            return masterDataGrid.updateDimensions().done(function () {\n              var isDetailHorizontalScrollCanBeShown = _this2.option(\"columnAutoWidth\") && true === masterDataGrid.option(\"scrolling.useNative\"),\n                isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== $detailElement.width();\n              if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {\n                _this2.updateDimensions();\n              }\n            });\n          }\n        }\n      }\n    },\n    views: {\n      rowsView: function () {\n        return {\n          _getCellTemplate: function _getCellTemplate(options) {\n            var template,\n              that = this,\n              column = options.column,\n              editingController = that.getController(\"editing\"),\n              isEditRow = editingController && editingController.isEditRow(options.rowIndex);\n            if (\"detail\" === column.command && !isEditRow) {\n              template = that.option(\"masterDetail.template\") || {\n                allowRenderToDetachedContainer: false,\n                render: that._getDefaultTemplate(column)\n              };\n            } else {\n              template = that.callBase.apply(that, arguments);\n            }\n            return template;\n          },\n          _isDetailRow: function _isDetailRow(row) {\n            return row && row.rowType && 0 === row.rowType.indexOf(\"detail\");\n          },\n          _createRow: function _createRow(row) {\n            var $row = this.callBase(row);\n            if (row && this._isDetailRow(row)) {\n              this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n              $row.addClass(MASTER_DETAIL_ROW_CLASS);\n              if ((0, _type.isDefined)(row.visible)) {\n                $row.toggle(row.visible);\n              }\n            }\n            return $row;\n          },\n          _renderCells: function _renderCells($row, options) {\n            var $detailCell,\n              row = options.row,\n              visibleColumns = this._columnsController.getVisibleColumns();\n            if (row.rowType && this._isDetailRow(row)) {\n              $detailCell = this._renderCell($row, {\n                value: null,\n                row: row,\n                rowIndex: row.rowIndex,\n                column: {\n                  command: \"detail\"\n                },\n                columnIndex: 0\n              });\n              $detailCell.addClass(CELL_FOCUS_DISABLED_CLASS).addClass(MASTER_DETAIL_CELL_CLASS).attr(\"colSpan\", visibleColumns.length);\n            } else {\n              this.callBase.apply(this, arguments);\n            }\n          }\n        };\n      }()\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}