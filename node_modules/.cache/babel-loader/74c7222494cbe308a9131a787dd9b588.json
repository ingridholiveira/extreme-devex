{"ast":null,"code":"/**\r\n * DevExtreme (events/utils.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"./core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _errors = require(\"../core/errors\");\nvar _errors2 = _interopRequireDefault(_errors);\nvar _selectors = require(\"../ui/widget/selectors\");\nvar _extend = require(\"../core/utils/extend\");\nvar _iterator = require(\"../core/utils/iterator\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar KEY_MAP = {\n  backspace: \"backspace\",\n  tab: \"tab\",\n  enter: \"enter\",\n  escape: \"escape\",\n  pageup: \"pageUp\",\n  pagedown: \"pageDown\",\n  end: \"end\",\n  home: \"home\",\n  arrowleft: \"leftArrow\",\n  arrowup: \"upArrow\",\n  arrowright: \"rightArrow\",\n  arrowdown: \"downArrow\",\n  \"delete\": \"del\",\n  \" \": \"space\",\n  f: \"F\",\n  a: \"A\",\n  \"*\": \"asterisk\",\n  \"-\": \"minus\",\n  alt: \"alt\",\n  control: \"control\",\n  shift: \"shift\",\n  left: \"leftArrow\",\n  up: \"upArrow\",\n  right: \"rightArrow\",\n  down: \"downArrow\",\n  multiply: \"asterisk\",\n  spacebar: \"space\",\n  del: \"del\",\n  subtract: \"minus\"\n};\nvar LEGACY_KEY_CODES = {\n  8: \"backspace\",\n  9: \"tab\",\n  13: \"enter\",\n  27: \"escape\",\n  33: \"pageUp\",\n  34: \"pageDown\",\n  35: \"end\",\n  36: \"home\",\n  37: \"leftArrow\",\n  38: \"upArrow\",\n  39: \"rightArrow\",\n  40: \"downArrow\",\n  46: \"del\",\n  32: \"space\",\n  70: \"F\",\n  65: \"A\",\n  106: \"asterisk\",\n  109: \"minus\",\n  189: \"minus\",\n  173: \"minus\",\n  16: \"shift\",\n  17: \"control\",\n  18: \"alt\"\n};\nvar eventSource = function () {\n  var EVENT_SOURCES_REGEX = {\n    dx: /^dx/i,\n    mouse: /(mouse|wheel)/i,\n    touch: /^touch/i,\n    keyboard: /^key/i,\n    pointer: /^(ms)?pointer/i\n  };\n  return function (e) {\n    var result = \"other\";\n    (0, _iterator.each)(EVENT_SOURCES_REGEX, function (key) {\n      if (this.test(e.type)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  };\n}();\nvar isDxEvent = function isDxEvent(e) {\n  return \"dx\" === eventSource(e);\n};\nvar isNativeMouseEvent = function isNativeMouseEvent(e) {\n  return \"mouse\" === eventSource(e);\n};\nvar isNativeTouchEvent = function isNativeTouchEvent(e) {\n  return \"touch\" === eventSource(e);\n};\nvar isPointerEvent = function isPointerEvent(e) {\n  return \"pointer\" === eventSource(e);\n};\nvar isMouseEvent = function isMouseEvent(e) {\n  return isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"mouse\" === e.pointerType;\n};\nvar isDxMouseWheelEvent = function isDxMouseWheelEvent(e) {\n  return e && \"dxmousewheel\" === e.type;\n};\nvar isTouchEvent = function isTouchEvent(e) {\n  return isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && \"touch\" === e.pointerType;\n};\nvar isKeyboardEvent = function isKeyboardEvent(e) {\n  return \"keyboard\" === eventSource(e);\n};\nvar isFakeClickEvent = function isFakeClickEvent(e) {\n  return 0 === e.screenX && !e.offsetX && 0 === e.pageX;\n};\nvar eventData = function eventData(e) {\n  return {\n    x: e.pageX,\n    y: e.pageY,\n    time: e.timeStamp\n  };\n};\nvar eventDelta = function eventDelta(from, to) {\n  return {\n    x: to.x - from.x,\n    y: to.y - from.y,\n    time: to.time - from.time || 1\n  };\n};\nvar hasTouches = function hasTouches(e) {\n  if (isNativeTouchEvent(e)) {\n    return (e.originalEvent.touches || []).length;\n  }\n  if (isDxEvent(e)) {\n    return (e.pointers || []).length;\n  }\n  return 0;\n};\nvar needSkipEvent = function needSkipEvent(e) {\n  var target = e.target;\n  var $target = (0, _renderer2.default)(target);\n  var touchInInput = $target.is(\"input, textarea, select\");\n  if ($target.is(\".dx-skip-gesture-event *, .dx-skip-gesture-event\")) {\n    return true;\n  }\n  if (isDxMouseWheelEvent(e)) {\n    if ($target.is(\"textarea\") && $target.hasClass(\"dx-texteditor-input\")) {\n      return false;\n    }\n    var isContentEditable = target.isContentEditable || target.hasAttribute(\"contenteditable\");\n    var hasContentEditableParent = $target.closest(\"div[contenteditable='true']\").is(\":focus\");\n    var isInputFocused = $target.is(\"input[type='number'], textarea, select\") && $target.is(\":focus\");\n    return isInputFocused || isContentEditable && hasContentEditableParent;\n  }\n  if (isMouseEvent(e)) {\n    return touchInInput || e.which > 1;\n  }\n  if (isTouchEvent(e)) {\n    return touchInInput && (0, _selectors.focused)($target);\n  }\n};\nvar fixMethod = function fixMethod(e) {\n  return e;\n};\nvar setEventFixMethod = function setEventFixMethod(func) {\n  fixMethod = func;\n};\nvar copyEvent = function copyEvent(originalEvent) {\n  return fixMethod(_events_engine2.default.Event(originalEvent, originalEvent), originalEvent);\n};\nvar createEvent = function createEvent(originalEvent, args) {\n  var event = copyEvent(originalEvent);\n  if (args) {\n    (0, _extend.extend)(event, args);\n  }\n  return event;\n};\nvar fireEvent = function fireEvent(props) {\n  var event = createEvent(props.originalEvent, props);\n  _events_engine2.default.trigger(props.delegateTarget || event.target, event);\n  return event;\n};\nvar addNamespace = function addNamespace(eventNames, namespace) {\n  if (!namespace) {\n    throw _errors2.default.Error(\"E0017\");\n  }\n  if (\"string\" === typeof eventNames) {\n    if (eventNames.indexOf(\" \") === -1) {\n      return eventNames + \".\" + namespace;\n    }\n    return addNamespace(eventNames.split(/\\s+/g), namespace);\n  }\n  (0, _iterator.each)(eventNames, function (index, eventName) {\n    eventNames[index] = eventName + \".\" + namespace;\n  });\n  return eventNames.join(\" \");\n};\nvar normalizeKeyName = function normalizeKeyName(event) {\n  var isKeySupported = !!event.key;\n  var key = isKeySupported ? event.key : event.which;\n  if (!key) {\n    return;\n  }\n  if (isKeySupported) {\n    key = KEY_MAP[key.toLowerCase()] || key;\n  } else {\n    key = LEGACY_KEY_CODES[key] || String.fromCharCode(key);\n  }\n  return key;\n};\nvar getChar = function getChar(event) {\n  return event.key || String.fromCharCode(event.which);\n};\nmodule.exports = {\n  eventSource: eventSource,\n  isPointerEvent: isPointerEvent,\n  isMouseEvent: isMouseEvent,\n  isDxMouseWheelEvent: isDxMouseWheelEvent,\n  isTouchEvent: isTouchEvent,\n  isKeyboardEvent: isKeyboardEvent,\n  isFakeClickEvent: isFakeClickEvent,\n  hasTouches: hasTouches,\n  eventData: eventData,\n  eventDelta: eventDelta,\n  needSkipEvent: needSkipEvent,\n  createEvent: createEvent,\n  fireEvent: fireEvent,\n  addNamespace: addNamespace,\n  setEventFixMethod: setEventFixMethod,\n  normalizeKeyName: normalizeKeyName,\n  getChar: getChar\n};","map":null,"metadata":{},"sourceType":"script"}