{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.calendar.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Calendar = require(\"../calendar\"),\n  DateBoxStrategy = require(\"./ui.date_box.strategy\"),\n  dateUtils = require(\"../../core/utils/date\"),\n  commonUtils = require(\"../../core/utils/common\"),\n  isFunction = require(\"../../core/utils/type\").isFunction,\n  extend = require(\"../../core/utils/extend\").extend,\n  messageLocalization = require(\"../../localization/message\");\nvar CalendarStrategy = DateBoxStrategy.inherit({\n  NAME: \"Calendar\",\n  supportedKeys: function supportedKeys() {\n    return {\n      rightArrow: function rightArrow() {\n        if (this.option(\"opened\")) {\n          return true;\n        }\n      },\n      leftArrow: function leftArrow() {\n        if (this.option(\"opened\")) {\n          return true;\n        }\n      },\n      enter: function (e) {\n        if (this.dateBox.option(\"opened\")) {\n          e.preventDefault();\n          if (this._widget.option(\"zoomLevel\") === this._widget.option(\"maxZoomLevel\")) {\n            var contouredDate = this._widget._view.option(\"contouredDate\");\n            contouredDate && this.dateBoxValue(contouredDate, e);\n            this.dateBox.close();\n            this.dateBox._valueChangeEventHandler(e);\n          } else {\n            return true;\n          }\n        } else {\n          this.dateBox._valueChangeEventHandler(e);\n        }\n      }.bind(this)\n    };\n  },\n  getDisplayFormat: function getDisplayFormat(displayFormat) {\n    return displayFormat || \"shortdate\";\n  },\n  _getWidgetName: function _getWidgetName() {\n    return Calendar;\n  },\n  _getWidgetOptions: function _getWidgetOptions() {\n    var disabledDates = this.dateBox.option(\"disabledDates\");\n    return extend(this.dateBox.option(\"calendarOptions\"), {\n      value: this.dateBoxValue() || null,\n      dateSerializationFormat: null,\n      _keyboardProcessor: this._widgetKeyboardProcessor,\n      min: this.dateBox.dateOption(\"min\"),\n      max: this.dateBox.dateOption(\"max\"),\n      onValueChanged: this._valueChangedHandler.bind(this),\n      onCellClick: this._cellClickHandler.bind(this),\n      tabIndex: null,\n      disabledDates: isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this.dateBox)) : disabledDates,\n      onContouredChanged: this._refreshActiveDescendant.bind(this),\n      hasFocus: function hasFocus() {\n        return true;\n      }\n    });\n  },\n  _injectComponent: function _injectComponent(func) {\n    var that = this;\n    return function (params) {\n      extend(params, {\n        component: that.dateBox\n      });\n      return func(params);\n    };\n  },\n  _refreshActiveDescendant: function _refreshActiveDescendant(e) {\n    this.dateBox.setAria(\"activedescendant\", e.actionValue);\n  },\n  popupConfig: function popupConfig(_popupConfig) {\n    var toolbarItems = _popupConfig.toolbarItems,\n      buttonsLocation = this.dateBox.option(\"buttonsLocation\");\n    var position = [];\n    if (\"default\" !== buttonsLocation) {\n      position = commonUtils.splitPair(buttonsLocation);\n    } else {\n      position = [\"bottom\", \"center\"];\n    }\n    if (\"useButtons\" === this.dateBox.option(\"applyValueMode\")) {\n      toolbarItems.unshift({\n        widget: \"dxButton\",\n        toolbar: position[0],\n        location: \"after\" === position[1] ? \"before\" : position[1],\n        options: {\n          onClick: function () {\n            this._widget._toTodayView();\n          }.bind(this),\n          text: messageLocalization.format(\"dxCalendar-todayButtonText\"),\n          type: \"today\"\n        }\n      });\n    }\n    return extend(true, _popupConfig, {\n      toolbarItems: toolbarItems,\n      position: {\n        collision: \"flipfit flip\"\n      }\n    });\n  },\n  _valueChangedHandler: function _valueChangedHandler(e) {\n    var dateBox = this.dateBox,\n      value = e.value,\n      prevValue = e.previousValue;\n    if (dateUtils.sameDate(value, prevValue)) {\n      return;\n    }\n    if (\"instantly\" === dateBox.option(\"applyValueMode\")) {\n      this.dateBoxValue(this.getValue(), e.event);\n    }\n  },\n  _updateValue: function _updateValue() {\n    if (!this._widget) {\n      return;\n    }\n    this._widget.option(\"value\", this.dateBoxValue());\n  },\n  textChangedHandler: function textChangedHandler() {\n    if (this.dateBox.option(\"opened\") && this._widget) {\n      this._updateValue(true);\n    }\n  },\n  _cellClickHandler: function _cellClickHandler(e) {\n    var dateBox = this.dateBox;\n    if (\"instantly\" === dateBox.option(\"applyValueMode\")) {\n      dateBox.option(\"opened\", false);\n      this.dateBoxValue(this.getValue(), e.event);\n    }\n  }\n});\nmodule.exports = CalendarStrategy;","map":null,"metadata":{},"sourceType":"script"}