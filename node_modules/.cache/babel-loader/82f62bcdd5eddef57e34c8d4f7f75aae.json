{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.row_dragging.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _extend = require(\"../../core/utils/extend\");\nvar _sortable = require(\"../sortable\");\nvar _sortable2 = _interopRequireDefault(_sortable);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar COMMAND_HANDLE_CLASS = \"dx-command-drag\",\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  HANDLE_ICON_CLASS = \"drag-icon\";\nvar RowDraggingExtender = {\n  init: function init() {\n    this.callBase.apply(this, arguments);\n    this._updateHandleColumn();\n  },\n  _allowReordering: function _allowReordering() {\n    var rowDragging = this.option(\"rowDragging\");\n    return !!(rowDragging && (rowDragging.allowReordering || rowDragging.allowDropInsideItem || rowDragging.group));\n  },\n  _updateHandleColumn: function _updateHandleColumn() {\n    var rowDragging = this.option(\"rowDragging\"),\n      allowReordering = this._allowReordering(),\n      columnsController = this._columnsController,\n      isHandleColumnVisible = allowReordering && rowDragging.showDragIcons;\n    columnsController && columnsController.addCommandColumn({\n      type: \"drag\",\n      command: \"drag\",\n      visibleIndex: -2,\n      alignment: \"center\",\n      cssClass: COMMAND_HANDLE_CLASS,\n      width: \"auto\",\n      cellTemplate: this._getHandleTemplate(),\n      visible: isHandleColumnVisible\n    });\n    columnsController.columnOption(\"type:drag\", \"visible\", isHandleColumnVisible);\n  },\n  _renderContent: function _renderContent() {\n    var that = this,\n      rowDragging = this.option(\"rowDragging\"),\n      allowReordering = this._allowReordering(),\n      $content = that.callBase.apply(that, arguments);\n    if (allowReordering) {\n      that._sortable = that._createComponent($content, _sortable2.default, (0, _extend.extend)({\n        filter: \"> table > tbody > .dx-data-row\",\n        template: that._getDraggableRowTemplate(),\n        handle: rowDragging.showDragIcons && \".\" + COMMAND_HANDLE_CLASS,\n        dropFeedbackMode: \"indicate\"\n      }, rowDragging));\n    }\n    return $content;\n  },\n  _getDraggableGridOptions: function _getDraggableGridOptions(options) {\n    var gridOptions = this.option();\n    return {\n      dataSource: [options.data],\n      showBorders: true,\n      showColumnHeaders: false,\n      scrolling: {\n        useNative: false,\n        showScrollbar: false\n      },\n      pager: {\n        visible: false\n      },\n      rowDragging: {\n        allowReordering: true,\n        showDragIcons: gridOptions.rowDragging.showDragIcons\n      },\n      loadingTimeout: void 0,\n      columns: gridOptions.columns,\n      customizeColumns: function customizeColumns(columns) {\n        gridOptions.customizeColumns && gridOptions.customizeColumns.apply(this, arguments);\n        columns.forEach(function (column) {\n          column.groupIndex = void 0;\n        });\n      },\n      showColumnLines: gridOptions.showColumnLines,\n      rowTemplate: gridOptions.rowTemplate,\n      onCellPrepared: gridOptions.onCellPrepared,\n      onRowPrepared: gridOptions.onRowPrepared\n    };\n  },\n  _getDraggableRowTemplate: function _getDraggableRowTemplate() {\n    var _this = this;\n    return function (options, index) {\n      var $rootElement = _this.component.$element(),\n        $dataGridContainer = (0, _renderer2.default)(\"<div>\").width($rootElement.width()),\n        items = _this._dataController.items(),\n        row = items && items[index],\n        gridOptions = _this._getDraggableGridOptions(row);\n      _this._createComponent($dataGridContainer, \"dxDataGrid\", gridOptions);\n      return $dataGridContainer;\n    };\n  },\n  _getHandleTemplate: function _getHandleTemplate() {\n    var _this2 = this;\n    return function (container, options) {\n      (0, _renderer2.default)(container).addClass(CELL_FOCUS_DISABLED_CLASS);\n      return (0, _renderer2.default)(\"<span>\").addClass(_this2.addWidgetPrefix(HANDLE_ICON_CLASS));\n    };\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"rowDragging\" === args.name) {\n      this._updateHandleColumn();\n      this._invalidate(true, true);\n      args.handled = true;\n    }\n    this.callBase.apply(this, arguments);\n  }\n};\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      rowDragging: {\n        showDragIcons: true,\n        dropFeedbackMode: \"indicate\",\n        allowReordering: false,\n        allowDropInsideItem: false\n      }\n    };\n  },\n  extenders: {\n    views: {\n      rowsView: RowDraggingExtender\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}