{"ast":null,"code":"/**\r\n * DevExtreme (animation/easing.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar isFunction = require(\"../core/utils/type\").isFunction,\n  CSS_TRANSITION_EASING_REGEX = /cubic-bezier\\((\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\)/;\nvar TransitionTimingFuncMap = {\n  linear: \"cubic-bezier(0, 0, 1, 1)\",\n  swing: \"cubic-bezier(0.445, 0.05, 0.55, 0.95)\",\n  ease: \"cubic-bezier(0.25, 0.1, 0.25, 1)\",\n  \"ease-in\": \"cubic-bezier(0.42, 0, 1, 1)\",\n  \"ease-out\": \"cubic-bezier(0, 0, 0.58, 1)\",\n  \"ease-in-out\": \"cubic-bezier(0.42, 0, 0.58, 1)\"\n};\nvar polynomBezier = function polynomBezier(x1, y1, x2, y2) {\n  var Cx = 3 * x1,\n    Bx = 3 * (x2 - x1) - Cx,\n    Ax = 1 - Cx - Bx,\n    Cy = 3 * y1,\n    By = 3 * (y2 - y1) - Cy,\n    Ay = 1 - Cy - By;\n  var bezierX = function bezierX(t) {\n    return t * (Cx + t * (Bx + t * Ax));\n  };\n  var bezierY = function bezierY(t) {\n    return t * (Cy + t * (By + t * Ay));\n  };\n  var findXFor = function findXFor(t) {\n    var z,\n      x = t,\n      i = 0;\n    while (i < 14) {\n      z = bezierX(x) - t;\n      if (Math.abs(z) < .001) {\n        break;\n      }\n      x -= z / derivativeX(x);\n      i++;\n    }\n    return x;\n  };\n  var derivativeX = function derivativeX(t) {\n    return Cx + t * (2 * Bx + 3 * t * Ax);\n  };\n  return function (t) {\n    return bezierY(findXFor(t));\n  };\n};\nvar easing = {};\nvar convertTransitionTimingFuncToEasing = function convertTransitionTimingFuncToEasing(cssTransitionEasing) {\n  cssTransitionEasing = TransitionTimingFuncMap[cssTransitionEasing] || cssTransitionEasing;\n  var coeffs = cssTransitionEasing.match(CSS_TRANSITION_EASING_REGEX);\n  var forceName;\n  if (!coeffs) {\n    forceName = \"linear\";\n    coeffs = TransitionTimingFuncMap[forceName].match(CSS_TRANSITION_EASING_REGEX);\n  }\n  coeffs = coeffs.slice(1, 5);\n  for (var i = 0; i < coeffs.length; i++) {\n    coeffs[i] = parseFloat(coeffs[i]);\n  }\n  var easingName = forceName || \"cubicbezier_\" + coeffs.join(\"_\").replace(/\\./g, \"p\");\n  if (!isFunction(easing[easingName])) {\n    easing[easingName] = function (x, t, b, c, d) {\n      return c * polynomBezier(coeffs[0], coeffs[1], coeffs[2], coeffs[3])(t / d) + b;\n    };\n  }\n  return easingName;\n};\nexports.setEasing = function (value) {\n  easing = value;\n};\nexports.getEasing = function (name) {\n  return easing[name];\n};\nexports.convertTransitionTimingFuncToEasing = convertTransitionTimingFuncToEasing;","map":null,"metadata":{},"sourceType":"script"}