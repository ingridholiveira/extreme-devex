{"ast":null,"code":"/**\r\n * DevExtreme (localization/date.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _dependency_injector = require(\"../core/utils/dependency_injector\");\nvar _dependency_injector2 = _interopRequireDefault(_dependency_injector);\nvar _type = require(\"../core/utils/type\");\nvar _iterator = require(\"../core/utils/iterator\");\nvar _iterator2 = _interopRequireDefault(_iterator);\nvar _array = require(\"../core/utils/array\");\nvar _errors = require(\"../core/errors\");\nvar _errors2 = _interopRequireDefault(_errors);\nvar _date = require(\"./ldml/date.formatter\");\nvar _date2 = require(\"./ldml/date.format\");\nvar _date3 = require(\"./ldml/date.parser\");\nvar _default_date_names = require(\"./default_date_names\");\nvar _default_date_names2 = _interopRequireDefault(_default_date_names);\nvar _first_day_of_week_data = require(\"./cldr-data/first_day_of_week_data\");\nvar _first_day_of_week_data2 = _interopRequireDefault(_first_day_of_week_data);\nvar _core = require(\"./core\");\nvar _number = require(\"./number\");\nvar _number2 = _interopRequireDefault(_number);\nvar _date4 = require(\"./intl/date\");\nvar _date5 = _interopRequireDefault(_date4);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar DEFAULT_DAY_OF_WEEK_INDEX = 0;\nvar hasIntl = \"undefined\" !== typeof Intl;\nvar FORMATS_TO_PATTERN_MAP = {\n  shortdate: \"M/d/y\",\n  shorttime: \"h:mm a\",\n  longdate: \"EEEE, MMMM d, y\",\n  longtime: \"h:mm:ss a\",\n  monthandday: \"MMMM d\",\n  monthandyear: \"MMMM y\",\n  quarterandyear: \"QQQ y\",\n  day: \"d\",\n  year: \"y\",\n  shortdateshorttime: \"M/d/y, h:mm a\",\n  mediumdatemediumtime: \"MMMM d, h:mm a\",\n  longdatelongtime: \"EEEE, MMMM d, y, h:mm:ss a\",\n  month: \"LLLL\",\n  shortyear: \"yy\",\n  dayofweek: \"EEEE\",\n  quarter: \"QQQ\",\n  hour: \"HH\",\n  minute: \"mm\",\n  second: \"ss\",\n  millisecond: \"SSS\",\n  \"datetime-local\": \"yyyy-MM-ddTHH':'mm':'ss\"\n};\nvar possiblePartPatterns = {\n  year: [\"y\", \"yy\", \"yyyy\"],\n  day: [\"d\", \"dd\"],\n  month: [\"M\", \"MM\", \"MMM\", \"MMMM\"],\n  hours: [\"H\", \"HH\", \"h\", \"hh\", \"ah\"],\n  minutes: [\"m\", \"mm\"],\n  seconds: [\"s\", \"ss\"],\n  milliseconds: [\"S\", \"SS\", \"SSS\"]\n};\nvar dateLocalization = (0, _dependency_injector2.default)({\n  engine: function engine() {\n    return \"base\";\n  },\n  _getPatternByFormat: function _getPatternByFormat(format) {\n    return FORMATS_TO_PATTERN_MAP[format.toLowerCase()];\n  },\n  _expandPattern: function _expandPattern(pattern) {\n    return this._getPatternByFormat(pattern) || pattern;\n  },\n  formatUsesMonthName: function formatUsesMonthName(format) {\n    return this._expandPattern(format).indexOf(\"MMMM\") !== -1;\n  },\n  formatUsesDayName: function formatUsesDayName(format) {\n    return this._expandPattern(format).indexOf(\"EEEE\") !== -1;\n  },\n  getFormatParts: function getFormatParts(format) {\n    var pattern = this._getPatternByFormat(format) || format;\n    var result = [];\n    _iterator2.default.each(pattern.split(/\\W+/), function (_, formatPart) {\n      _iterator2.default.each(possiblePartPatterns, function (partName, possiblePatterns) {\n        if ((0, _array.inArray)(formatPart, possiblePatterns) > -1) {\n          result.push(partName);\n        }\n      });\n    });\n    return result;\n  },\n  getMonthNames: function getMonthNames(format) {\n    return _default_date_names2.default.getMonthNames(format);\n  },\n  getDayNames: function getDayNames(format) {\n    return _default_date_names2.default.getDayNames(format);\n  },\n  getQuarterNames: function getQuarterNames(format) {\n    return _default_date_names2.default.getQuarterNames(format);\n  },\n  getPeriodNames: function getPeriodNames(format) {\n    return _default_date_names2.default.getPeriodNames(format);\n  },\n  getTimeSeparator: function getTimeSeparator() {\n    return \":\";\n  },\n  is24HourFormat: function is24HourFormat(format) {\n    var amTime = new Date(2017, 0, 20, 11, 0, 0, 0);\n    var pmTime = new Date(2017, 0, 20, 23, 0, 0, 0);\n    var amTimeFormatted = this.format(amTime, format);\n    var pmTimeFormatted = this.format(pmTime, format);\n    for (var i = 0; i < amTimeFormatted.length; i++) {\n      if (amTimeFormatted[i] !== pmTimeFormatted[i]) {\n        return !isNaN(parseInt(amTimeFormatted[i]));\n      }\n    }\n  },\n  format: function format(date, _format) {\n    if (!date) {\n      return;\n    }\n    if (!_format) {\n      return date;\n    }\n    var formatter = void 0;\n    if (\"function\" === typeof _format) {\n      formatter = _format;\n    } else {\n      if (_format.formatter) {\n        formatter = _format.formatter;\n      } else {\n        _format = _format.type || _format;\n        if ((0, _type.isString)(_format)) {\n          _format = FORMATS_TO_PATTERN_MAP[_format.toLowerCase()] || _format;\n          return _number2.default.convertDigits((0, _date.getFormatter)(_format, this)(date));\n        }\n      }\n    }\n    if (!formatter) {\n      return;\n    }\n    return formatter(date);\n  },\n  parse: function parse(text, format) {\n    var that = this;\n    var result = void 0;\n    var ldmlFormat = void 0;\n    var formatter = void 0;\n    if (!text) {\n      return;\n    }\n    if (!format) {\n      return this.parse(text, \"shortdate\");\n    }\n    if (format.parser) {\n      return format.parser(text);\n    }\n    if (\"string\" === typeof format && !FORMATS_TO_PATTERN_MAP[format.toLowerCase()]) {\n      ldmlFormat = format;\n    } else {\n      formatter = function formatter(value) {\n        var text = that.format(value, format);\n        return _number2.default.convertDigits(text, true);\n      };\n      try {\n        ldmlFormat = (0, _date2.getFormat)(formatter);\n      } catch (e) {}\n    }\n    if (ldmlFormat) {\n      text = _number2.default.convertDigits(text, true);\n      return (0, _date3.getParser)(ldmlFormat, this)(text);\n    }\n    _errors2.default.log(\"W0012\");\n    result = new Date(text);\n    if (!result || isNaN(result.getTime())) {\n      return;\n    }\n    return result;\n  },\n  firstDayOfWeekIndex: function firstDayOfWeekIndex() {\n    var index = (0, _core.getValueByClosestLocale)(function (locale) {\n      return _first_day_of_week_data2.default[locale];\n    });\n    return void 0 === index ? DEFAULT_DAY_OF_WEEK_INDEX : index;\n  }\n});\nif (hasIntl) {\n  dateLocalization.inject(_date5.default);\n}\nmodule.exports = dateLocalization;","map":null,"metadata":{},"sourceType":"script"}