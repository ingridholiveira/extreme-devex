{"ast":null,"code":"/**\r\n * DevExtreme (ui/selection/selection.strategy.deferred.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar typeUtils = require(\"../../core/utils/type\"),\n  SelectionStrategy = require(\"./selection.strategy\"),\n  errors = require(\"../widget/ui.errors\"),\n  dataQuery = require(\"../../data/query\"),\n  Deferred = require(\"../../core/utils/deferred\").Deferred;\nmodule.exports = SelectionStrategy.inherit({\n  getSelectedItems: function getSelectedItems() {\n    return this._loadFilteredData(this.options.selectionFilter);\n  },\n  getSelectedItemKeys: function getSelectedItemKeys() {\n    var d = new Deferred(),\n      that = this,\n      key = this.options.key(),\n      select = typeUtils.isString(key) ? [key] : key;\n    this._loadFilteredData(this.options.selectionFilter, null, select).done(function (items) {\n      var keys = items.map(function (item) {\n        return that.options.keyOf(item);\n      });\n      d.resolve(keys);\n    }).fail(d.reject);\n    return d.promise();\n  },\n  selectedItemKeys: function selectedItemKeys(keys, preserve, isDeselect, isSelectAll) {\n    if (isSelectAll) {\n      var filter = this.options.filter();\n      if (!filter) {\n        this._setOption(\"selectionFilter\", isDeselect ? [] : null);\n      } else {\n        this._addSelectionFilter(isDeselect, filter, isSelectAll);\n      }\n    } else {\n      if (!preserve) {\n        this._setOption(\"selectionFilter\", []);\n      }\n      for (var i = 0; i < keys.length; i++) {\n        if (isDeselect) {\n          this.removeSelectedItem(keys[i]);\n        } else {\n          this.addSelectedItem(keys[i]);\n        }\n      }\n    }\n    this.onSelectionChanged();\n    return new Deferred().resolve();\n  },\n  setSelectedItems: function setSelectedItems(keys) {\n    this._setOption(\"selectionFilter\", null);\n    for (var i = 0; i < keys.length; i++) {\n      this.addSelectedItem(keys[i]);\n    }\n  },\n  isItemDataSelected: function isItemDataSelected(itemData) {\n    return this.isItemKeySelected(itemData);\n  },\n  isItemKeySelected: function isItemKeySelected(itemData) {\n    var selectionFilter = this.options.selectionFilter;\n    if (!selectionFilter) {\n      return true;\n    }\n    return !!dataQuery([itemData]).filter(selectionFilter).toArray().length;\n  },\n  _processSelectedItem: function _processSelectedItem(key) {\n    var keyField = this.options.key(),\n      filter = [keyField, \"=\", key];\n    if (Array.isArray(keyField)) {\n      filter = [];\n      for (var i = 0; i < keyField.length; i++) {\n        filter.push([keyField[i], \"=\", key[keyField[i]]]);\n        if (i !== keyField.length - 1) {\n          filter.push(\"and\");\n        }\n      }\n    }\n    return filter;\n  },\n  addSelectedItem: function addSelectedItem(key) {\n    var filter = this._processSelectedItem(key);\n    this._addSelectionFilter(false, filter);\n  },\n  removeSelectedItem: function removeSelectedItem(key) {\n    var filter = this._processSelectedItem(key);\n    this._addSelectionFilter(true, filter);\n  },\n  validate: function validate() {\n    var key = this.options.key;\n    if (key && void 0 === key()) {\n      throw errors.Error(\"E1042\", \"Deferred selection\");\n    }\n  },\n  _findSubFilter: function _findSubFilter(selectionFilter, filter) {\n    if (!selectionFilter) {\n      return -1;\n    }\n    var filterString = JSON.stringify(filter);\n    for (var index = 0; index < selectionFilter.length; index++) {\n      var subFilter = selectionFilter[index];\n      if (subFilter && JSON.stringify(subFilter) === filterString) {\n        return index;\n      }\n    }\n    return -1;\n  },\n  _isLastSubFilter: function _isLastSubFilter(selectionFilter, filter) {\n    if (selectionFilter && filter) {\n      return this._findSubFilter(selectionFilter, filter) === selectionFilter.length - 1 || 0 === this._findSubFilter([selectionFilter], filter);\n    }\n    return false;\n  },\n  _addFilterOperator: function _addFilterOperator(selectionFilter, filterOperator) {\n    if (selectionFilter.length > 1 && typeUtils.isString(selectionFilter[1]) && selectionFilter[1] !== filterOperator) {\n      selectionFilter = [selectionFilter];\n    }\n    if (selectionFilter.length) {\n      selectionFilter.push(filterOperator);\n    }\n    return selectionFilter;\n  },\n  _denormalizeFilter: function _denormalizeFilter(filter) {\n    if (filter && typeUtils.isString(filter[0])) {\n      filter = [filter];\n    }\n    return filter;\n  },\n  _addSelectionFilter: function _addSelectionFilter(isDeselect, filter, isSelectAll) {\n    var that = this,\n      needAddFilter = true,\n      currentFilter = isDeselect ? [\"!\", filter] : filter,\n      currentOperation = isDeselect ? \"and\" : \"or\",\n      selectionFilter = that.options.selectionFilter || [];\n    selectionFilter = that._denormalizeFilter(selectionFilter);\n    if (selectionFilter && selectionFilter.length) {\n      that._removeSameFilter(selectionFilter, filter, isDeselect, isSelectAll);\n      var lastOperation = that._removeSameFilter(selectionFilter, filter, !isDeselect);\n      if (lastOperation && (\"or\" !== lastOperation && isDeselect || \"and\" !== lastOperation && !isDeselect)) {\n        needAddFilter = false;\n        selectionFilter = [];\n      }\n      if (needAddFilter) {\n        selectionFilter = that._addFilterOperator(selectionFilter, currentOperation);\n      }\n    }\n    if (needAddFilter) {\n      selectionFilter.push(currentFilter);\n    }\n    selectionFilter = that._normalizeFilter(selectionFilter);\n    that._setOption(\"selectionFilter\", !isDeselect && !selectionFilter.length ? null : selectionFilter);\n  },\n  _normalizeFilter: function _normalizeFilter(filter) {\n    if (filter && 1 === filter.length) {\n      filter = filter[0];\n    }\n    return filter;\n  },\n  _removeFilterByIndex: function _removeFilterByIndex(filter, filterIndex, isSelectAll) {\n    var lastRemoveOperation;\n    if (filterIndex > 0) {\n      lastRemoveOperation = filter.splice(filterIndex - 1, 2)[0];\n    } else {\n      lastRemoveOperation = filter.splice(filterIndex, 2)[1] || \"undefined\";\n    }\n    if (isSelectAll && \"and\" === lastRemoveOperation) {\n      filter.splice(0, filter.length);\n    }\n    return lastRemoveOperation;\n  },\n  _removeSameFilter: function _removeSameFilter(selectionFilter, filter, inverted, isSelectAll) {\n    filter = inverted ? [\"!\", filter] : filter;\n    var filterIndex = this._findSubFilter(selectionFilter, filter);\n    if (JSON.stringify(filter) === JSON.stringify(selectionFilter)) {\n      selectionFilter.splice(0, selectionFilter.length);\n      return \"undefined\";\n    }\n    if (filterIndex >= 0) {\n      return this._removeFilterByIndex(selectionFilter, filterIndex, isSelectAll);\n    } else {\n      for (var i = 0; i < selectionFilter.length; i++) {\n        var lastRemoveOperation = Array.isArray(selectionFilter[i]) && selectionFilter[i].length > 2 && this._removeSameFilter(selectionFilter[i], filter, false, isSelectAll);\n        if (lastRemoveOperation) {\n          if (!selectionFilter[i].length) {\n            this._removeFilterByIndex(selectionFilter, i, isSelectAll);\n          } else {\n            if (1 === selectionFilter[i].length) {\n              selectionFilter[i] = selectionFilter[i][0];\n            }\n          }\n          return lastRemoveOperation;\n        }\n      }\n    }\n  },\n  getSelectAllState: function getSelectAllState() {\n    var filter = this.options.filter(),\n      selectionFilter = this.options.selectionFilter;\n    if (!selectionFilter) {\n      return true;\n    }\n    if (!selectionFilter.length) {\n      return false;\n    }\n    if (!filter || !filter.length) {\n      return;\n    }\n    selectionFilter = this._denormalizeFilter(selectionFilter);\n    if (this._isLastSubFilter(selectionFilter, filter)) {\n      return true;\n    }\n    if (this._isLastSubFilter(selectionFilter, [\"!\", filter])) {\n      return false;\n    }\n    return;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}