{"ast":null,"code":"/**\r\n * DevExtreme (ui/list/ui.list.edit.decorator.selection.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  clickEvent = require(\"../../events/click\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  errors = require(\"../widget/ui.errors\"),\n  CheckBox = require(\"../check_box\"),\n  RadioButton = require(\"../radio_group/radio_button\"),\n  eventUtils = require(\"../../events/utils\"),\n  registerDecorator = require(\"./ui.list.edit.decorator_registry\").register,\n  EditDecorator = require(\"./ui.list.edit.decorator\");\nvar SELECT_DECORATOR_ENABLED_CLASS = \"dx-list-select-decorator-enabled\",\n  SELECT_DECORATOR_SELECT_ALL_CLASS = \"dx-list-select-all\",\n  SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS = \"dx-list-select-all-checkbox\",\n  SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS = \"dx-list-select-all-label\",\n  SELECT_CHECKBOX_CONTAINER_CLASS = \"dx-list-select-checkbox-container\",\n  SELECT_CHECKBOX_CLASS = \"dx-list-select-checkbox\",\n  SELECT_RADIO_BUTTON_CONTAINER_CLASS = \"dx-list-select-radiobutton-container\",\n  SELECT_RADIO_BUTTON_CLASS = \"dx-list-select-radiobutton\",\n  FOCUSED_STATE_CLASS = \"dx-state-focused\";\nvar CLICK_EVENT_NAME = eventUtils.addNamespace(clickEvent.name, \"dxListEditDecorator\");\nregisterDecorator(\"selection\", \"default\", EditDecorator.inherit({\n  _init: function _init() {\n    this.callBase.apply(this, arguments);\n    var selectionMode = this._list.option(\"selectionMode\");\n    this._singleStrategy = \"single\" === selectionMode;\n    this._containerClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CONTAINER_CLASS : SELECT_CHECKBOX_CONTAINER_CLASS;\n    this._controlClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CLASS : SELECT_CHECKBOX_CLASS;\n    this._controlWidget = this._singleStrategy ? RadioButton : CheckBox;\n    this._list.$element().addClass(SELECT_DECORATOR_ENABLED_CLASS);\n  },\n  beforeBag: function beforeBag(config) {\n    var $itemElement = config.$itemElement,\n      $container = config.$container;\n    var $control = $(\"<div>\").addClass(this._controlClass);\n    new this._controlWidget($control, extend(this._commonOptions(), {\n      value: this._isSelected($itemElement),\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      onValueChanged: function (e) {\n        this._processCheckedState($itemElement, e.value);\n        e.event && e.event.stopPropagation();\n      }.bind(this)\n    }));\n    $container.addClass(this._containerClass);\n    $container.append($control);\n  },\n  modifyElement: function modifyElement(config) {\n    this.callBase.apply(this, arguments);\n    var $itemElement = config.$itemElement,\n      control = this._controlWidget.getInstance($itemElement.find(\".\" + this._controlClass));\n    eventsEngine.on($itemElement, \"stateChanged\", function (e, state) {\n      control.option(\"value\", state);\n    }.bind(this));\n  },\n  _updateSelectAllState: function _updateSelectAllState() {\n    if (!this._$selectAll) {\n      return;\n    }\n    this._selectAllCheckBox.option(\"value\", this._list.isSelectAll());\n  },\n  afterRender: function afterRender() {\n    if (\"all\" !== this._list.option(\"selectionMode\")) {\n      return;\n    }\n    if (!this._$selectAll) {\n      this._renderSelectAll();\n    } else {\n      this._updateSelectAllState();\n    }\n  },\n  handleKeyboardEvents: function handleKeyboardEvents(currentFocusedIndex, moveFocusUp) {\n    var moveFocusDown = !moveFocusUp;\n    var list = this._list;\n    var $selectAll = this._$selectAll;\n    var lastItemIndex = list._getLastItemIndex();\n    var isFocusOutOfList = moveFocusUp && 0 === currentFocusedIndex || moveFocusDown && currentFocusedIndex === lastItemIndex;\n    var hasSelectAllItem = !!$selectAll;\n    if (hasSelectAllItem && isFocusOutOfList) {\n      list.option(\"focusedElement\", $selectAll);\n      list.scrollToItem(list.option(\"focusedElement\"));\n      return true;\n    }\n    return false;\n  },\n  handleEnterPressing: function handleEnterPressing() {\n    if (this._$selectAll && this._$selectAll.hasClass(FOCUSED_STATE_CLASS)) {\n      this._selectAllCheckBox.option(\"value\", !this._selectAllCheckBox.option(\"value\"));\n      return true;\n    }\n  },\n  _renderSelectAll: function _renderSelectAll() {\n    var $selectAll = this._$selectAll = $(\"<div>\").addClass(SELECT_DECORATOR_SELECT_ALL_CLASS),\n      list = this._list,\n      downArrowHandler = list._supportedKeys().downArrow.bind(list);\n    this._selectAllCheckBox = list._createComponent($(\"<div>\").addClass(SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS).appendTo($selectAll), CheckBox, {\n      focusStateEnabled: false,\n      hoverStateEnabled: false\n    });\n    this._selectAllCheckBox.registerKeyHandler(\"downArrow\", downArrowHandler);\n    $(\"<div>\").addClass(SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS).text(this._list.option(\"selectAllText\")).appendTo($selectAll);\n    this._list.itemsContainer().prepend($selectAll);\n    this._updateSelectAllState();\n    this._attachSelectAllHandler();\n  },\n  _attachSelectAllHandler: function _attachSelectAllHandler() {\n    this._selectAllCheckBox.option(\"onValueChanged\", this._selectAllHandler.bind(this));\n    eventsEngine.off(this._$selectAll, CLICK_EVENT_NAME);\n    eventsEngine.on(this._$selectAll, CLICK_EVENT_NAME, this._selectAllClickHandler.bind(this));\n  },\n  _selectAllHandler: function _selectAllHandler(e) {\n    e.event && e.event.stopPropagation();\n    var isSelectedAll = this._selectAllCheckBox.option(\"value\");\n    var result = this._list._createActionByOption(\"onSelectAllValueChanged\")({\n      value: isSelectedAll\n    });\n    if (false === result) {\n      return;\n    }\n    if (true === isSelectedAll) {\n      this._selectAllItems();\n    } else {\n      if (false === isSelectedAll) {\n        this._unselectAllItems();\n      }\n    }\n  },\n  _checkSelectAllCapability: function _checkSelectAllCapability() {\n    var list = this._list,\n      dataSource = list.getDataSource();\n    if (\"allPages\" === list.option(\"selectAllMode\") && list.option(\"grouped\") && (!dataSource || !dataSource.group())) {\n      errors.log(\"W1010\");\n      return false;\n    }\n    return true;\n  },\n  _selectAllItems: function _selectAllItems() {\n    if (!this._checkSelectAllCapability()) {\n      return;\n    }\n    this._list._selection.selectAll(\"page\" === this._list.option(\"selectAllMode\"));\n  },\n  _unselectAllItems: function _unselectAllItems() {\n    if (!this._checkSelectAllCapability()) {\n      return;\n    }\n    this._list._selection.deselectAll(\"page\" === this._list.option(\"selectAllMode\"));\n  },\n  _selectAllClickHandler: function _selectAllClickHandler() {\n    this._selectAllCheckBox.option(\"value\", !this._selectAllCheckBox.option(\"value\"));\n  },\n  _isSelected: function _isSelected($itemElement) {\n    return this._list.isItemSelected($itemElement);\n  },\n  _processCheckedState: function _processCheckedState($itemElement, checked) {\n    if (checked) {\n      this._list.selectItem($itemElement);\n    } else {\n      this._list.unselectItem($itemElement);\n    }\n  },\n  dispose: function dispose() {\n    this._disposeSelectAll();\n    this._list.$element().removeClass(SELECT_DECORATOR_ENABLED_CLASS);\n    this.callBase.apply(this, arguments);\n  },\n  _disposeSelectAll: function _disposeSelectAll() {\n    if (this._$selectAll) {\n      this._$selectAll.remove();\n      this._$selectAll = null;\n    }\n  }\n}));","map":null,"metadata":{},"sourceType":"script"}