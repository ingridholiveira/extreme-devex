{"ast":null,"code":"/**\r\n * DevExtreme (ui/radio_group/radio_button.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  devices = require(\"../../core/devices\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  inkRipple = require(\"../widget/utils.ink_ripple\"),\n  registerComponent = require(\"../../core/component_registrator\"),\n  Editor = require(\"../editor/editor\"),\n  eventUtils = require(\"../../events/utils\"),\n  clickEvent = require(\"../../events/click\");\nvar RADIO_BUTTON_CLASS = \"dx-radiobutton\",\n  RADIO_BUTTON_ICON_CLASS = \"dx-radiobutton-icon\",\n  RADIO_BUTTON_ICON_DOT_CLASS = \"dx-radiobutton-icon-dot\",\n  RADIO_BUTTON_CHECKED_CLASS = \"dx-radiobutton-checked\",\n  RADIO_BUTTON_ICON_CHECKED_CLASS = \"dx-radiobutton-icon-checked\";\nvar RadioButton = Editor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var click = function click(e) {\n      e.preventDefault();\n      this._clickAction({\n        event: e\n      });\n    };\n    return extend(this.callBase(), {\n      space: click\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      value: false,\n      useInkRipple: false\n    });\n  },\n  _canValueBeChangedByClick: function _canValueBeChangedByClick() {\n    return true;\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(RADIO_BUTTON_CLASS);\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this._renderIcon();\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this._renderCheckedState(this.option(\"value\"));\n    this._renderClick();\n    this.setAria(\"role\", \"radio\");\n  },\n  _renderInkRipple: function _renderInkRipple() {\n    this._inkRipple = inkRipple.render({\n      waveSizeCoefficient: 3.3,\n      useHoldAnimation: false,\n      wavesNumber: 2,\n      isCentered: true\n    });\n  },\n  _renderInkWave: function _renderInkWave(element, dxEvent, doRender, waveIndex) {\n    if (!this._inkRipple) {\n      return;\n    }\n    var config = {\n      element: element,\n      event: dxEvent,\n      wave: waveIndex\n    };\n    if (doRender) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _updateFocusState: function _updateFocusState(e, value) {\n    this.callBase.apply(this, arguments);\n    this._renderInkWave(this._$icon, e, value, 0);\n  },\n  _toggleActiveState: function _toggleActiveState($element, value, e) {\n    this.callBase.apply(this, arguments);\n    this._renderInkWave(this._$icon, e, value, 1);\n  },\n  _renderIcon: function _renderIcon() {\n    this._$icon = $(\"<div>\").addClass(RADIO_BUTTON_ICON_CLASS);\n    $(\"<div>\").addClass(RADIO_BUTTON_ICON_DOT_CLASS).appendTo(this._$icon);\n    this.$element().append(this._$icon);\n  },\n  _renderCheckedState: function _renderCheckedState(checked) {\n    this.$element().toggleClass(RADIO_BUTTON_CHECKED_CLASS, checked).find(\".\" + RADIO_BUTTON_ICON_CLASS).toggleClass(RADIO_BUTTON_ICON_CHECKED_CLASS, checked);\n    this.setAria(\"checked\", checked);\n  },\n  _renderClick: function _renderClick() {\n    var eventName = eventUtils.addNamespace(clickEvent.name, this.NAME);\n    this._clickAction = this._createAction(function (args) {\n      this._clickHandler(args.event);\n    }.bind(this));\n    eventsEngine.off(this.$element(), eventName);\n    eventsEngine.on(this.$element(), eventName, function (e) {\n      this._clickAction({\n        event: e\n      });\n    }.bind(this));\n  },\n  _clickHandler: function _clickHandler(e) {\n    this._saveValueChangeEvent(e);\n    this.option(\"value\", true);\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"useInkRipple\":\n        this._invalidate();\n        break;\n      case \"value\":\n        this._renderCheckedState(args.value);\n        this.callBase(args);\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function _clean() {\n    delete this._inkRipple;\n    this.callBase();\n  }\n});\nregisterComponent(\"dxRadioButton\", RadioButton);\nmodule.exports = RadioButton;","map":null,"metadata":{},"sourceType":"script"}