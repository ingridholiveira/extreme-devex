{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_view.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  Editor = require(\"../editor/editor\"),\n  DateViewRoller = require(\"./ui.date_view_roller\"),\n  dateUtils = require(\"../../core/utils/date\"),\n  each = require(\"../../core/utils/iterator\").each,\n  extend = require(\"../../core/utils/extend\").extend,\n  uiDateUtils = require(\"./ui.date_utils\"),\n  registerComponent = require(\"../../core/component_registrator\"),\n  dateLocalization = require(\"../../localization/date\");\nvar DATEVIEW_CLASS = \"dx-dateview\",\n  DATEVIEW_COMPACT_CLASS = \"dx-dateview-compact\",\n  DATEVIEW_WRAPPER_CLASS = \"dx-dateview-wrapper\",\n  DATEVIEW_ROLLER_CONTAINER_CLASS = \"dx-dateview-rollers\",\n  DATEVIEW_ROLLER_CLASS = \"dx-dateviewroller\";\nvar TYPE = {\n  date: \"date\",\n  datetime: \"datetime\",\n  time: \"time\"\n};\nvar ROLLER_TYPE = {\n  year: \"year\",\n  month: \"month\",\n  day: \"day\",\n  hours: \"hours\"\n};\nvar DateView = Editor.inherit({\n  _valueOption: function _valueOption() {\n    var value = this.option(\"value\"),\n      date = new Date(value);\n    return !value || isNaN(date) ? this._getDefaultDate() : date;\n  },\n  _getDefaultDate: function _getDefaultDate() {\n    var date = new Date();\n    if (this.option(\"type\") === TYPE.date) {\n      return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n    return date;\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      minDate: uiDateUtils.MIN_DATEVIEW_DEFAULT_DATE,\n      maxDate: uiDateUtils.MAX_DATEVIEW_DEFAULT_DATE,\n      type: TYPE.date,\n      value: new Date(),\n      applyCompactClass: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device(_device) {\n        return \"desktop\" !== _device.deviceType;\n      },\n      options: {\n        applyCompactClass: true\n      }\n    }]);\n  },\n  _render: function _render() {\n    this.callBase();\n    this.$element().addClass(DATEVIEW_CLASS);\n    this._toggleFormatClasses(this.option(\"type\"));\n    this._toggleCompactClass();\n  },\n  _toggleFormatClasses: function _toggleFormatClasses(currentFormat, previousFormat) {\n    this.$element().addClass(DATEVIEW_CLASS + \"-\" + currentFormat);\n    previousFormat && this.$element().removeClass(DATEVIEW_CLASS + \"-\" + previousFormat);\n  },\n  _toggleCompactClass: function _toggleCompactClass() {\n    this.$element().toggleClass(DATEVIEW_COMPACT_CLASS, this.option(\"applyCompactClass\"));\n  },\n  _wrapper: function _wrapper() {\n    return this._$wrapper;\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this._$wrapper = $(\"<div>\").addClass(DATEVIEW_WRAPPER_CLASS);\n    this._renderRollers();\n    this._$wrapper.appendTo(this.$element());\n  },\n  _renderRollers: function _renderRollers() {\n    if (!this._$rollersContainer) {\n      this._$rollersContainer = $(\"<div>\").addClass(DATEVIEW_ROLLER_CONTAINER_CLASS);\n    }\n    this._$rollersContainer.empty();\n    this._createRollerConfigs();\n    this._rollers = {};\n    var that = this;\n    each(that._rollerConfigs, function (name) {\n      var $roller = $(\"<div>\").appendTo(that._$rollersContainer).addClass(DATEVIEW_ROLLER_CLASS + \"-\" + that._rollerConfigs[name].type);\n      that._rollers[that._rollerConfigs[name].type] = that._createComponent($roller, DateViewRoller, {\n        items: that._rollerConfigs[name].displayItems,\n        selectedIndex: that._rollerConfigs[name].selectedIndex,\n        showScrollbar: false,\n        onStart: function onStart(e) {\n          var roller = e.component;\n          roller._toggleActive(true);\n          that._setActiveRoller(that._rollerConfigs[name], roller.option(\"selectedIndex\"));\n        },\n        onEnd: function onEnd(e) {\n          var roller = e.component;\n          roller._toggleActive(false);\n        },\n        onClick: function onClick(e) {\n          var roller = e.component;\n          roller._toggleActive(true);\n          that._setActiveRoller(that._rollerConfigs[name], roller.option(\"selectedIndex\"));\n          that._setRollerState(that._rollerConfigs[name], roller.option(\"selectedIndex\"));\n          roller._toggleActive(false);\n        },\n        onSelectedIndexChanged: function onSelectedIndexChanged(e) {\n          var roller = e.component;\n          that._setRollerState(that._rollerConfigs[name], roller.option(\"selectedIndex\"));\n        }\n      });\n    });\n    that._$rollersContainer.appendTo(that._wrapper());\n  },\n  _createRollerConfigs: function _createRollerConfigs(type) {\n    var that = this;\n    type = type || that.option(\"type\");\n    that._rollerConfigs = {};\n    dateLocalization.getFormatParts(uiDateUtils.FORMATS_MAP[type]).forEach(function (partName) {\n      that._createRollerConfig(partName);\n    });\n  },\n  _createRollerConfig: function _createRollerConfig(componentName) {\n    var componentInfo = uiDateUtils.DATE_COMPONENTS_INFO[componentName],\n      valueRange = this._calculateRollerConfigValueRange(componentName),\n      startValue = valueRange.startValue,\n      endValue = valueRange.endValue,\n      formatter = componentInfo.formatter,\n      curDate = this._getCurrentDate();\n    var config = {\n      type: componentName,\n      setValue: componentInfo.setter,\n      valueItems: [],\n      displayItems: [],\n      getIndex: function getIndex(value) {\n        return value[componentInfo.getter]() - startValue;\n      }\n    };\n    for (var i = startValue; i <= endValue; i++) {\n      config.valueItems.push(i);\n      config.displayItems.push(formatter(i, curDate));\n    }\n    config.selectedIndex = config.getIndex(curDate);\n    this._rollerConfigs[componentName] = config;\n  },\n  _setActiveRoller: function _setActiveRoller(currentRoller) {\n    var activeRoller = currentRoller && this._rollers[currentRoller.type];\n    each(this._rollers, function () {\n      this.toggleActiveState(this === activeRoller);\n    });\n  },\n  _updateRollersPosition: function _updateRollersPosition() {\n    var that = this;\n    each(this._rollers, function (type) {\n      var correctIndex = that._rollerConfigs[type].getIndex(that._getCurrentDate());\n      this.option(\"selectedIndex\", correctIndex);\n    });\n  },\n  _setRollerState: function _setRollerState(roller, selectedIndex) {\n    if (selectedIndex !== roller.selectedIndex) {\n      var rollerValue = roller.valueItems[selectedIndex],\n        setValue = roller.setValue,\n        currentValue = new Date(this._getCurrentDate()),\n        currentDate = currentValue.getDate();\n      if (roller.type === ROLLER_TYPE.month) {\n        currentDate = Math.min(currentDate, uiDateUtils.getMaxMonthDay(currentValue.getFullYear(), rollerValue));\n      } else {\n        if (roller.type === ROLLER_TYPE.year) {\n          currentDate = Math.min(currentDate, uiDateUtils.getMaxMonthDay(rollerValue, currentValue.getMonth()));\n        }\n      }\n      currentValue.setDate(currentDate);\n      currentValue[setValue](rollerValue);\n      currentValue = dateUtils.normalizeDate(currentValue, this.option(\"minDate\"), this.option(\"maxDate\"));\n      this.option(\"value\", currentValue);\n      roller.selectedIndex = selectedIndex;\n    }\n    if (roller.type === ROLLER_TYPE.year) {\n      this._refreshRollers();\n    }\n    if (roller.type === ROLLER_TYPE.month) {\n      this._refreshRoller(ROLLER_TYPE.day);\n      this._refreshRoller(ROLLER_TYPE.hours);\n    }\n  },\n  _refreshRoller: function _refreshRoller(rollerType) {\n    var roller = this._rollers[rollerType];\n    if (roller) {\n      this._createRollerConfig(rollerType);\n      var rollerConfig = this._rollerConfigs[rollerType];\n      if (rollerType === ROLLER_TYPE.day || rollerConfig.displayItems.toString() !== roller.option(\"items\").toString()) {\n        roller.option({\n          items: rollerConfig.displayItems,\n          selectedIndex: rollerConfig.selectedIndex\n        });\n      }\n    }\n  },\n  _getCurrentDate: function _getCurrentDate() {\n    var curDate = this._valueOption(),\n      minDate = this.option(\"minDate\"),\n      maxDate = this.option(\"maxDate\");\n    if (minDate && curDate.getTime() <= minDate.getTime()) {\n      curDate = minDate;\n    } else {\n      if (maxDate && curDate.getTime() >= maxDate.getTime()) {\n        curDate = maxDate;\n      }\n    }\n    return curDate;\n  },\n  _calculateRollerConfigValueRange: function _calculateRollerConfigValueRange(componentName) {\n    var curDate = this._getCurrentDate(),\n      minDate = this.option(\"minDate\"),\n      maxDate = this.option(\"maxDate\"),\n      minYear = dateUtils.sameYear(curDate, minDate),\n      minMonth = minYear && curDate.getMonth() === minDate.getMonth(),\n      maxYear = dateUtils.sameYear(curDate, maxDate),\n      maxMonth = maxYear && curDate.getMonth() === maxDate.getMonth(),\n      minHour = minMonth && curDate.getDate() === minDate.getDate(),\n      maxHour = maxMonth && curDate.getDate() === maxDate.getDate(),\n      componentInfo = uiDateUtils.DATE_COMPONENTS_INFO[componentName],\n      startValue = componentInfo.startValue,\n      endValue = componentInfo.endValue;\n    if (componentName === ROLLER_TYPE.year) {\n      startValue = minDate.getFullYear();\n      endValue = maxDate.getFullYear();\n    }\n    if (componentName === ROLLER_TYPE.month) {\n      if (minYear) {\n        startValue = minDate.getMonth();\n      }\n      if (maxYear) {\n        endValue = maxDate.getMonth();\n      }\n    }\n    if (componentName === ROLLER_TYPE.day) {\n      endValue = uiDateUtils.getMaxMonthDay(curDate.getFullYear(), curDate.getMonth());\n      if (minYear && minMonth) {\n        startValue = minDate.getDate();\n      }\n      if (maxYear && maxMonth) {\n        endValue = maxDate.getDate();\n      }\n    }\n    if (componentName === ROLLER_TYPE.hours) {\n      startValue = minHour ? minDate.getHours() : startValue;\n      endValue = maxHour ? maxDate.getHours() : endValue;\n    }\n    return {\n      startValue: startValue,\n      endValue: endValue\n    };\n  },\n  _refreshRollers: function _refreshRollers() {\n    this._refreshRoller(ROLLER_TYPE.month);\n    this._refreshRoller(ROLLER_TYPE.day);\n    this._refreshRoller(ROLLER_TYPE.hours);\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"minDate\":\n      case \"maxDate\":\n      case \"type\":\n        this._renderRollers();\n        this._toggleFormatClasses(args.value, args.previousValue);\n        break;\n      case \"visible\":\n        this.callBase(args);\n        if (args.value) {\n          this._renderRollers();\n        }\n        break;\n      case \"value\":\n        this.option(\"value\", this._valueOption());\n        this._refreshRollers();\n        this._updateRollersPosition();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function _clean() {\n    this.callBase();\n    delete this._$rollersContainer;\n  },\n  _dispose: function _dispose() {\n    clearTimeout(this._deferredRenderDayTimeout);\n    clearTimeout(this._deferredRenderMonthTimeout);\n    this.callBase();\n  }\n});\nregisterComponent(\"dxDateView\", DateView);\nmodule.exports = DateView;","map":null,"metadata":{},"sourceType":"script"}