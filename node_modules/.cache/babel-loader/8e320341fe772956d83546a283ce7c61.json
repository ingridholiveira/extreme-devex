{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/ajax.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Deferred = require(\"./deferred\").Deferred;\nvar domAdapter = require(\"../../core/dom_adapter\");\nvar httpRequest = require(\"../../core/http_request\");\nvar windowUtils = require(\"../../core/utils/window\");\nvar window = windowUtils.getWindow();\nvar extendFromObject = require(\"./extend\").extendFromObject;\nvar isDefined = require(\"./type\").isDefined;\nvar Promise = require(\"../polyfills/promise\");\nvar injector = require(\"./dependency_injector\");\nvar SUCCESS = \"success\",\n  ERROR = \"error\",\n  TIMEOUT = \"timeout\",\n  NO_CONTENT = \"nocontent\",\n  PARSER_ERROR = \"parsererror\";\nvar isStatusSuccess = function isStatusSuccess(status) {\n  return 200 <= status && status < 300;\n};\nvar hasContent = function hasContent(status) {\n  return 204 !== status;\n};\nvar paramsConvert = function paramsConvert(params) {\n  var result = [];\n  for (var name in params) {\n    var value = params[name];\n    if (void 0 === value) {\n      continue;\n    }\n    if (null === value) {\n      value = \"\";\n    }\n    result.push(encodeURIComponent(name) + \"=\" + encodeURIComponent(value));\n  }\n  return result.join(\"&\");\n};\nvar createScript = function createScript(options) {\n  var script = domAdapter.createElement(\"script\");\n  for (var name in options) {\n    script[name] = options[name];\n  }\n  return script;\n};\nvar removeScript = function removeScript(scriptNode) {\n  scriptNode.parentNode.removeChild(scriptNode);\n};\nvar appendToHead = function appendToHead(element) {\n  return domAdapter.getHead().appendChild(element);\n};\nvar evalScript = function evalScript(code) {\n  var script = createScript({\n    text: code\n  });\n  appendToHead(script);\n  removeScript(script);\n};\nvar evalCrossDomainScript = function evalCrossDomainScript(url) {\n  var script = createScript({\n    src: url\n  });\n  return new Promise(function (resolve, reject) {\n    var events = {\n      load: resolve,\n      error: reject\n    };\n    var loadHandler = function loadHandler(e) {\n      events[e.type]();\n      removeScript(script);\n    };\n    for (var event in events) {\n      domAdapter.listen(script, event, loadHandler);\n    }\n    appendToHead(script);\n  });\n};\nvar getAcceptHeader = function getAcceptHeader(options) {\n  var dataType = options.dataType || \"*\",\n    scriptAccept = \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\",\n    accepts = {\n      \"*\": \"*/*\",\n      text: \"text/plain\",\n      html: \"text/html\",\n      xml: \"application/xml, text/xml\",\n      json: \"application/json, text/javascript\",\n      jsonp: scriptAccept,\n      script: scriptAccept\n    };\n  extendFromObject(accepts, options.accepts, true);\n  return accepts[dataType] ? accepts[dataType] + (\"*\" !== dataType ? \", */*; q=0.01\" : \"\") : accepts[\"*\"];\n};\nvar getContentTypeHeader = function getContentTypeHeader(options) {\n  var defaultContentType;\n  if (options.data && !options.upload && \"GET\" !== getMethod(options)) {\n    defaultContentType = \"application/x-www-form-urlencoded;charset=utf-8\";\n  }\n  return options.contentType || defaultContentType;\n};\nvar getDataFromResponse = function getDataFromResponse(xhr) {\n  return xhr.responseType && \"text\" !== xhr.responseType || \"string\" !== typeof xhr.responseText ? xhr.response : xhr.responseText;\n};\nvar postProcess = function postProcess(deferred, xhr, dataType) {\n  var data = getDataFromResponse(xhr);\n  switch (dataType) {\n    case \"jsonp\":\n      evalScript(data);\n      break;\n    case \"script\":\n      evalScript(data);\n      deferred.resolve(data, SUCCESS, xhr);\n      break;\n    case \"json\":\n      try {\n        deferred.resolve(JSON.parse(data), SUCCESS, xhr);\n      } catch (e) {\n        deferred.reject(xhr, PARSER_ERROR, e);\n      }\n      break;\n    default:\n      deferred.resolve(data, SUCCESS, xhr);\n  }\n};\nvar isCrossDomain = function isCrossDomain(url) {\n  if (!windowUtils.hasWindow()) {\n    return true;\n  }\n  var crossDomain = false,\n    originAnchor = domAdapter.createElement(\"a\"),\n    urlAnchor = domAdapter.createElement(\"a\");\n  originAnchor.href = window.location.href;\n  try {\n    urlAnchor.href = url;\n    urlAnchor.href = urlAnchor.href;\n    crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\n  } catch (e) {\n    crossDomain = true;\n  }\n  return crossDomain;\n};\nvar setHttpTimeout = function setHttpTimeout(timeout, xhr) {\n  return timeout && setTimeout(function () {\n    xhr.customStatus = TIMEOUT;\n    xhr.abort();\n  }, timeout);\n};\nvar getJsonpOptions = function getJsonpOptions(options) {\n  if (\"jsonp\" === options.dataType) {\n    var random = Math.random().toString().replace(/\\D/g, \"\"),\n      callbackName = options.jsonpCallback || \"dxCallback\" + Date.now() + \"_\" + random,\n      callbackParameter = options.jsonp || \"callback\";\n    options.data = options.data || {};\n    options.data[callbackParameter] = callbackName;\n    return callbackName;\n  }\n};\nvar getRequestOptions = function getRequestOptions(options, headers) {\n  var params = options.data,\n    paramsAlreadyString = \"string\" === typeof params,\n    url = options.url || window.location.href;\n  if (!paramsAlreadyString && !options.cache) {\n    params = params || {};\n    params._ = Date.now();\n  }\n  if (params && !options.upload) {\n    if (!paramsAlreadyString) {\n      params = paramsConvert(params);\n    }\n    if (\"GET\" === getMethod(options)) {\n      if (\"\" !== params) {\n        url += (url.indexOf(\"?\") > -1 ? \"&\" : \"?\") + params;\n      }\n      params = null;\n    } else {\n      if (headers[\"Content-Type\"] && headers[\"Content-Type\"].indexOf(\"application/x-www-form-urlencoded\") > -1) {\n        params = params.replace(/%20/g, \"+\");\n      }\n    }\n  }\n  return {\n    url: url,\n    parameters: params\n  };\n};\nvar getMethod = function getMethod(options) {\n  return (options.method || \"GET\").toUpperCase();\n};\nvar getRequestHeaders = function getRequestHeaders(options) {\n  var headers = options.headers || {};\n  headers[\"Content-Type\"] = headers[\"Content-Type\"] || getContentTypeHeader(options);\n  headers.Accept = headers.Accept || getAcceptHeader(options);\n  if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n    headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n  }\n  return headers;\n};\nvar sendRequest = function sendRequest(options) {\n  var timeoutId,\n    xhr = httpRequest.getXhr(),\n    d = new Deferred(),\n    result = d.promise(),\n    async = isDefined(options.async) ? options.async : true,\n    dataType = options.dataType,\n    timeout = options.timeout || 0;\n  options.crossDomain = isCrossDomain(options.url);\n  var needScriptEvaluation = \"jsonp\" === dataType || \"script\" === dataType;\n  if (void 0 === options.cache) {\n    options.cache = !needScriptEvaluation;\n  }\n  var callbackName = getJsonpOptions(options),\n    headers = getRequestHeaders(options),\n    requestOptions = getRequestOptions(options, headers),\n    url = requestOptions.url,\n    parameters = requestOptions.parameters;\n  if (callbackName) {\n    window[callbackName] = function (data) {\n      d.resolve(data, SUCCESS, xhr);\n    };\n  }\n  if (options.crossDomain && needScriptEvaluation) {\n    var reject = function reject() {\n        d.reject(xhr, ERROR);\n      },\n      resolve = function resolve() {\n        if (\"jsonp\" === dataType) {\n          return;\n        }\n        d.resolve(null, SUCCESS, xhr);\n      };\n    evalCrossDomainScript(url).then(resolve, reject);\n    return result;\n  }\n  if (options.crossDomain && !(\"withCredentials\" in xhr)) {\n    d.reject(xhr, ERROR);\n    return result;\n  }\n  xhr.open(getMethod(options), url, async, options.username, options.password);\n  if (async) {\n    xhr.timeout = timeout;\n    timeoutId = setHttpTimeout(timeout, xhr, d);\n  }\n  xhr.onreadystatechange = function (e) {\n    if (4 === xhr.readyState) {\n      clearTimeout(timeoutId);\n      if (isStatusSuccess(xhr.status)) {\n        if (hasContent(xhr.status)) {\n          postProcess(d, xhr, dataType);\n        } else {\n          d.resolve(null, NO_CONTENT, xhr);\n        }\n      } else {\n        d.reject(xhr, xhr.customStatus || ERROR);\n      }\n    }\n  };\n  if (options.upload) {\n    xhr.upload.onprogress = options.upload.onprogress;\n    xhr.upload.onloadstart = options.upload.onloadstart;\n    xhr.upload.onabort = options.upload.onabort;\n  }\n  if (options.xhrFields) {\n    for (var field in options.xhrFields) {\n      xhr[field] = options.xhrFields[field];\n    }\n  }\n  if (\"arraybuffer\" === options.responseType) {\n    xhr.responseType = options.responseType;\n  }\n  for (var name in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, name) && isDefined(headers[name])) {\n      xhr.setRequestHeader(name, headers[name]);\n    }\n  }\n  if (options.beforeSend) {\n    options.beforeSend(xhr);\n  }\n  xhr.send(parameters);\n  result.abort = function () {\n    xhr.abort();\n  };\n  return result;\n};\nmodule.exports = injector({\n  sendRequest: sendRequest\n});","map":null,"metadata":{},"sourceType":"script"}