{"ast":null,"code":"/**\r\n * DevExtreme (ui/scroll_view/ui.scroll_view.simulated.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  Callbacks = require(\"../../core/utils/callbacks\"),\n  each = require(\"../../core/utils/iterator\").each,\n  commonUtils = require(\"../../core/utils/common\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  math = Math,\n  simulatedStrategy = require(\"./ui.scrollable.simulated\"),\n  LoadIndicator = require(\"../load_indicator\");\nvar SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = \"dx-scrollview-pull-down-loading\",\n  SCROLLVIEW_PULLDOWN_READY_CLASS = \"dx-scrollview-pull-down-ready\",\n  SCROLLVIEW_PULLDOWN_IMAGE_CLASS = \"dx-scrollview-pull-down-image\",\n  SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = \"dx-scrollview-pull-down-indicator\",\n  SCROLLVIEW_PULLDOWN_TEXT_CLASS = \"dx-scrollview-pull-down-text\",\n  SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS = \"dx-scrollview-pull-down-text-visible\",\n  STATE_RELEASED = 0,\n  STATE_READY = 1,\n  STATE_REFRESHING = 2,\n  STATE_LOADING = 3;\nvar ScrollViewScroller = simulatedStrategy.Scroller.inherit({\n  ctor: function ctor() {\n    this._topPocketSize = 0;\n    this.callBase.apply(this, arguments);\n    this._initCallbacks();\n    this._releaseState();\n  },\n  _releaseState: function _releaseState() {\n    this._state = STATE_RELEASED;\n    this._refreshPullDownText();\n  },\n  _refreshPullDownText: function _refreshPullDownText() {\n    var that = this,\n      pullDownTextItems = [{\n        element: this._$pullingDownText,\n        visibleState: STATE_RELEASED\n      }, {\n        element: this._$pulledDownText,\n        visibleState: STATE_READY\n      }, {\n        element: this._$refreshingText,\n        visibleState: STATE_REFRESHING\n      }];\n    each(pullDownTextItems, function (_, item) {\n      var action = that._state === item.visibleState ? \"addClass\" : \"removeClass\";\n      item.element[action](SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS);\n    });\n  },\n  _initCallbacks: function _initCallbacks() {\n    this.pullDownCallbacks = Callbacks();\n    this.releaseCallbacks = Callbacks();\n    this.reachBottomCallbacks = Callbacks();\n  },\n  _updateBounds: function _updateBounds() {\n    var considerPockets = \"horizontal\" !== this._direction;\n    this._topPocketSize = considerPockets ? Math.round(this._$topPocket[this._dimension]()) : 0;\n    this._bottomPocketSize = considerPockets ? Math.round(this._$bottomPocket[this._dimension]()) : 0;\n    this.callBase();\n    this._bottomBound = this._minOffset + this._bottomPocketSize;\n  },\n  _updateScrollbar: function _updateScrollbar() {\n    this._scrollbar.option({\n      containerSize: this._containerSize(),\n      contentSize: this._contentSize() - this._topPocketSize - this._bottomPocketSize,\n      scaleRatio: this._getScaleRatio()\n    });\n  },\n  _moveContent: function _moveContent() {\n    this.callBase();\n    if (this._isPullDown()) {\n      this._pullDownReady();\n    } else {\n      if (this._isReachBottom()) {\n        this._reachBottomReady();\n      } else {\n        if (this._state !== STATE_RELEASED) {\n          this._stateReleased();\n        }\n      }\n    }\n  },\n  _moveScrollbar: function _moveScrollbar() {\n    this._scrollbar.moveTo(this._topPocketSize + this._location);\n  },\n  _isPullDown: function _isPullDown() {\n    return this._pullDownEnabled && this._location >= 0;\n  },\n  _isReachBottom: function _isReachBottom() {\n    return this._reachBottomEnabled && this._location <= this._bottomBound;\n  },\n  _scrollComplete: function _scrollComplete() {\n    if (this._inBounds() && this._state === STATE_READY) {\n      this._pullDownRefreshing();\n    } else {\n      if (this._inBounds() && this._state === STATE_LOADING) {\n        this._reachBottomLoading();\n      } else {\n        this.callBase();\n      }\n    }\n  },\n  _reachBottomReady: function _reachBottomReady() {\n    if (this._state === STATE_LOADING) {\n      return;\n    }\n    this._state = STATE_LOADING;\n    this._minOffset = this._getMinOffset();\n  },\n  _getMaxOffset: function _getMaxOffset() {\n    return -this._topPocketSize;\n  },\n  _getMinOffset: function _getMinOffset() {\n    return math.min(this.callBase(), -this._topPocketSize);\n  },\n  _reachBottomLoading: function _reachBottomLoading() {\n    this.reachBottomCallbacks.fire();\n  },\n  _pullDownReady: function _pullDownReady() {\n    if (this._state === STATE_READY) {\n      return;\n    }\n    this._state = STATE_READY;\n    this._maxOffset = 0;\n    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_READY_CLASS);\n    this._refreshPullDownText();\n  },\n  _stateReleased: function _stateReleased() {\n    if (this._state === STATE_RELEASED) {\n      return;\n    }\n    this._releaseState();\n    this._updateBounds();\n    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);\n    this.releaseCallbacks.fire();\n  },\n  _pullDownRefreshing: function _pullDownRefreshing() {\n    if (this._state === STATE_REFRESHING) {\n      return;\n    }\n    this._state = STATE_REFRESHING;\n    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);\n    this._refreshPullDownText();\n    this.pullDownCallbacks.fire();\n  },\n  _releaseHandler: function _releaseHandler() {\n    if (this._state === STATE_RELEASED) {\n      this._moveToBounds();\n    }\n    this._update();\n    if (this._releaseTask) {\n      this._releaseTask.abort();\n    }\n    this._releaseTask = commonUtils.executeAsync(this._release.bind(this));\n    return this._releaseTask.promise;\n  },\n  _release: function _release() {\n    this._stateReleased();\n    this._scrollComplete();\n  },\n  _reachBottomEnablingHandler: function _reachBottomEnablingHandler(enabled) {\n    if (this._reachBottomEnabled === enabled) {\n      return;\n    }\n    this._reachBottomEnabled = enabled;\n    this._updateBounds();\n  },\n  _pullDownEnablingHandler: function _pullDownEnablingHandler(enabled) {\n    if (this._pullDownEnabled === enabled) {\n      return;\n    }\n    this._pullDownEnabled = enabled;\n    this._considerTopPocketChange();\n    this._updateHandler();\n  },\n  _considerTopPocketChange: function _considerTopPocketChange() {\n    this._location -= this._$topPocket.height() || -this._topPocketSize;\n    this._maxOffset = 0;\n    this._move();\n  },\n  _pendingReleaseHandler: function _pendingReleaseHandler() {\n    this._state = STATE_READY;\n  },\n  dispose: function dispose() {\n    if (this._releaseTask) {\n      this._releaseTask.abort();\n    }\n    this.callBase();\n  }\n});\nvar SimulatedScrollViewStrategy = simulatedStrategy.SimulatedStrategy.inherit({\n  _init: function _init(scrollView) {\n    this.callBase(scrollView);\n    this._$pullDown = scrollView._$pullDown;\n    this._$topPocket = scrollView._$topPocket;\n    this._$bottomPocket = scrollView._$bottomPocket;\n    this._initCallbacks();\n  },\n  _initCallbacks: function _initCallbacks() {\n    this.pullDownCallbacks = Callbacks();\n    this.releaseCallbacks = Callbacks();\n    this.reachBottomCallbacks = Callbacks();\n  },\n  render: function render() {\n    this._renderPullDown();\n    this.callBase();\n  },\n  _renderPullDown: function _renderPullDown() {\n    var $image = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_IMAGE_CLASS),\n      $loadContainer = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS),\n      $loadIndicator = new LoadIndicator($(\"<div>\")).$element(),\n      $text = this._$pullDownText = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_TEXT_CLASS);\n    this._$pullingDownText = $(\"<div>\").text(this.option(\"pullingDownText\")).appendTo($text);\n    this._$pulledDownText = $(\"<div>\").text(this.option(\"pulledDownText\")).appendTo($text);\n    this._$refreshingText = $(\"<div>\").text(this.option(\"refreshingText\")).appendTo($text);\n    this._$pullDown.empty().append($image).append($loadContainer.append($loadIndicator)).append($text);\n  },\n  pullDownEnable: function pullDownEnable(enabled) {\n    this._eventHandler(\"pullDownEnabling\", enabled);\n  },\n  reachBottomEnable: function reachBottomEnable(enabled) {\n    this._eventHandler(\"reachBottomEnabling\", enabled);\n  },\n  _createScroller: function _createScroller(direction) {\n    var that = this;\n    var scroller = that._scrollers[direction] = new ScrollViewScroller(that._scrollerOptions(direction));\n    scroller.pullDownCallbacks.add(function () {\n      that.pullDownCallbacks.fire();\n    });\n    scroller.releaseCallbacks.add(function () {\n      that.releaseCallbacks.fire();\n    });\n    scroller.reachBottomCallbacks.add(function () {\n      that.reachBottomCallbacks.fire();\n    });\n  },\n  _scrollerOptions: function _scrollerOptions(direction) {\n    return extend(this.callBase(direction), {\n      $topPocket: this._$topPocket,\n      $bottomPocket: this._$bottomPocket,\n      $pullDown: this._$pullDown,\n      $pullDownText: this._$pullDownText,\n      $pullingDownText: this._$pullingDownText,\n      $pulledDownText: this._$pulledDownText,\n      $refreshingText: this._$refreshingText\n    });\n  },\n  pendingRelease: function pendingRelease() {\n    this._eventHandler(\"pendingRelease\");\n  },\n  release: function release() {\n    return this._eventHandler(\"release\").done(this._updateAction);\n  },\n  location: function location() {\n    var location = this.callBase();\n    location.top += this._$topPocket.height();\n    return location;\n  },\n  dispose: function dispose() {\n    each(this._scrollers, function () {\n      this.dispose();\n    });\n    this.callBase();\n  }\n});\nmodule.exports = SimulatedScrollViewStrategy;","map":null,"metadata":{},"sourceType":"script"}