{"ast":null,"code":"/**\r\n * DevExtreme (ui/validation_engine.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _class = require(\"../core/class\");\nvar _class2 = _interopRequireDefault(_class);\nvar _extend = require(\"../core/utils/extend\");\nvar _array = require(\"../core/utils/array\");\nvar _iterator = require(\"../core/utils/iterator\");\nvar _events_mixin = require(\"../core/events_mixin\");\nvar _events_mixin2 = _interopRequireDefault(_events_mixin);\nvar _errors = require(\"../core/errors\");\nvar _errors2 = _interopRequireDefault(_errors);\nvar _common = require(\"../core/utils/common\");\nvar _type = require(\"../core/utils/type\");\nvar _type2 = _interopRequireDefault(_type);\nvar _number = require(\"../localization/number\");\nvar _number2 = _interopRequireDefault(_number);\nvar _message = require(\"../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _promise = require(\"../core/polyfills/promise\");\nvar _promise2 = _interopRequireDefault(_promise);\nvar _deferred = require(\"../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar VALIDATION_STATUS_VALID = \"valid\",\n  VALIDATION_STATUS_INVALID = \"invalid\",\n  VALIDATION_STATUS_PENDING = \"pending\";\nvar BaseRuleValidator = function () {\n  function BaseRuleValidator() {\n    _classCallCheck(this, BaseRuleValidator);\n    this.NAME = \"base\";\n  }\n  _createClass(BaseRuleValidator, [{\n    key: \"defaultMessage\",\n    value: function value(_value) {\n      return _message2.default.getFormatter(\"validation-\" + this.NAME)(_value);\n    }\n  }, {\n    key: \"defaultFormattedMessage\",\n    value: function value(_value2) {\n      return _message2.default.getFormatter(\"validation-\" + this.NAME + \"-formatted\")(_value2);\n    }\n  }, {\n    key: \"_isValueEmpty\",\n    value: function value(_value3) {\n      return !rulesValidators.required.validate(_value3, {});\n    }\n  }, {\n    key: \"validate\",\n    value: function value(_value4, rule) {\n      var _this = this;\n      var valueArray = Array.isArray(_value4) ? _value4 : [_value4];\n      var result = true;\n      if (valueArray.length) {\n        valueArray.every(function (itemValue) {\n          result = _this._validate(itemValue, rule);\n          return result;\n        });\n      } else {\n        result = this._validate(null, rule);\n      }\n      return result;\n    }\n  }]);\n  return BaseRuleValidator;\n}();\nvar RequiredRuleValidator = function (_BaseRuleValidator) {\n  _inherits(RequiredRuleValidator, _BaseRuleValidator);\n  function RequiredRuleValidator() {\n    _classCallCheck(this, RequiredRuleValidator);\n    var _this2 = _possibleConstructorReturn(this, (RequiredRuleValidator.__proto__ || Object.getPrototypeOf(RequiredRuleValidator)).call(this));\n    _this2.NAME = \"required\";\n    return _this2;\n  }\n  _createClass(RequiredRuleValidator, [{\n    key: \"_validate\",\n    value: function value(_value5, rule) {\n      if (!_type2.default.isDefined(_value5)) {\n        return false;\n      }\n      if (false === _value5) {\n        return false;\n      }\n      _value5 = String(_value5);\n      if (rule.trim || !_type2.default.isDefined(rule.trim)) {\n        _value5 = _value5.trim();\n      }\n      return \"\" !== _value5;\n    }\n  }]);\n  return RequiredRuleValidator;\n}(BaseRuleValidator);\nvar NumericRuleValidator = function (_BaseRuleValidator2) {\n  _inherits(NumericRuleValidator, _BaseRuleValidator2);\n  function NumericRuleValidator() {\n    _classCallCheck(this, NumericRuleValidator);\n    var _this3 = _possibleConstructorReturn(this, (NumericRuleValidator.__proto__ || Object.getPrototypeOf(NumericRuleValidator)).call(this));\n    _this3.NAME = \"numeric\";\n    return _this3;\n  }\n  _createClass(NumericRuleValidator, [{\n    key: \"_validate\",\n    value: function value(_value6, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(_value6)) {\n        return true;\n      }\n      if (rule.useCultureSettings && _type2.default.isString(_value6)) {\n        return !isNaN(_number2.default.parse(_value6));\n      } else {\n        return _type2.default.isNumeric(_value6);\n      }\n    }\n  }]);\n  return NumericRuleValidator;\n}(BaseRuleValidator);\nvar RangeRuleValidator = function (_BaseRuleValidator3) {\n  _inherits(RangeRuleValidator, _BaseRuleValidator3);\n  function RangeRuleValidator() {\n    _classCallCheck(this, RangeRuleValidator);\n    var _this4 = _possibleConstructorReturn(this, (RangeRuleValidator.__proto__ || Object.getPrototypeOf(RangeRuleValidator)).call(this));\n    _this4.NAME = \"range\";\n    return _this4;\n  }\n  _createClass(RangeRuleValidator, [{\n    key: \"_validate\",\n    value: function value(_value7, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(_value7)) {\n        return true;\n      }\n      var validNumber = rulesValidators.numeric.validate(_value7, rule),\n        validValue = _type2.default.isDefined(_value7) && \"\" !== _value7,\n        number = validNumber ? parseFloat(_value7) : validValue && _value7.valueOf(),\n        min = rule.min,\n        max = rule.max;\n      if (!(validNumber || _type2.default.isDate(_value7)) && !validValue) {\n        return false;\n      }\n      if (_type2.default.isDefined(min)) {\n        if (_type2.default.isDefined(max)) {\n          return number >= min && number <= max;\n        }\n        return number >= min;\n      } else {\n        if (_type2.default.isDefined(max)) {\n          return number <= max;\n        } else {\n          throw _errors2.default.Error(\"E0101\");\n        }\n      }\n    }\n  }]);\n  return RangeRuleValidator;\n}(BaseRuleValidator);\nvar StringLengthRuleValidator = function (_BaseRuleValidator4) {\n  _inherits(StringLengthRuleValidator, _BaseRuleValidator4);\n  function StringLengthRuleValidator() {\n    _classCallCheck(this, StringLengthRuleValidator);\n    var _this5 = _possibleConstructorReturn(this, (StringLengthRuleValidator.__proto__ || Object.getPrototypeOf(StringLengthRuleValidator)).call(this));\n    _this5.NAME = \"stringLength\";\n    return _this5;\n  }\n  _createClass(StringLengthRuleValidator, [{\n    key: \"_validate\",\n    value: function value(_value8, rule) {\n      _value8 = _type2.default.isDefined(_value8) ? String(_value8) : \"\";\n      if (rule.trim || !_type2.default.isDefined(rule.trim)) {\n        _value8 = _value8.trim();\n      }\n      if (rule.ignoreEmptyValue && this._isValueEmpty(_value8)) {\n        return true;\n      }\n      return rulesValidators.range.validate(_value8.length, (0, _extend.extend)({}, rule));\n    }\n  }]);\n  return StringLengthRuleValidator;\n}(BaseRuleValidator);\nvar CustomRuleValidator = function (_BaseRuleValidator5) {\n  _inherits(CustomRuleValidator, _BaseRuleValidator5);\n  function CustomRuleValidator() {\n    _classCallCheck(this, CustomRuleValidator);\n    var _this6 = _possibleConstructorReturn(this, (CustomRuleValidator.__proto__ || Object.getPrototypeOf(CustomRuleValidator)).call(this));\n    _this6.NAME = \"custom\";\n    return _this6;\n  }\n  _createClass(CustomRuleValidator, [{\n    key: \"validate\",\n    value: function value(_value9, rule) {\n      if (rule.ignoreEmptyValue && this._isValueEmpty(_value9)) {\n        return true;\n      }\n      var validator = rule.validator,\n        dataGetter = validator && _type2.default.isFunction(validator.option) && validator.option(\"dataGetter\"),\n        data = _type2.default.isFunction(dataGetter) && dataGetter(),\n        params = {\n          value: _value9,\n          validator: validator,\n          rule: rule\n        };\n      if (data) {\n        params.data = data;\n      }\n      return rule.validationCallback(params);\n    }\n  }]);\n  return CustomRuleValidator;\n}(BaseRuleValidator);\nvar AsyncRuleValidator = function (_CustomRuleValidator) {\n  _inherits(AsyncRuleValidator, _CustomRuleValidator);\n  function AsyncRuleValidator() {\n    _classCallCheck(this, AsyncRuleValidator);\n    var _this7 = _possibleConstructorReturn(this, (AsyncRuleValidator.__proto__ || Object.getPrototypeOf(AsyncRuleValidator)).call(this));\n    _this7.NAME = \"async\";\n    return _this7;\n  }\n  _createClass(AsyncRuleValidator, [{\n    key: \"validate\",\n    value: function value(_value10, rule) {\n      if (!_type2.default.isDefined(rule.reevaluate)) {\n        (0, _extend.extend)(rule, {\n          reevaluate: true\n        });\n      }\n      if (rule.ignoreEmptyValue && this._isValueEmpty(_value10)) {\n        return new _promise2.default(function (resolve) {\n          resolve(true);\n        });\n      }\n      var validator = rule.validator,\n        dataGetter = validator && _type2.default.isFunction(validator.option) && validator.option(\"dataGetter\"),\n        data = _type2.default.isFunction(dataGetter) && dataGetter(),\n        params = {\n          value: _value10,\n          validator: validator,\n          rule: rule\n        };\n      if (data) {\n        params.data = data;\n      }\n      var callbackResult = rule.validationCallback(params);\n      if (!_type2.default.isPromise(callbackResult)) {\n        throw _errors2.default.Error(\"E0103\");\n      }\n      return this._getWrappedPromise((0, _deferred.fromPromise)(callbackResult).promise());\n    }\n  }, {\n    key: \"_getWrappedPromise\",\n    value: function value(promise) {\n      var deferred = new _deferred.Deferred();\n      promise.then(function (res) {\n        deferred.resolve(res);\n      }, function (err) {\n        deferred.resolve(_type2.default.isDefined(err) ? err : false);\n      });\n      return deferred.promise();\n    }\n  }]);\n  return AsyncRuleValidator;\n}(CustomRuleValidator);\nvar CompareRuleValidator = function (_BaseRuleValidator6) {\n  _inherits(CompareRuleValidator, _BaseRuleValidator6);\n  function CompareRuleValidator() {\n    _classCallCheck(this, CompareRuleValidator);\n    var _this8 = _possibleConstructorReturn(this, (CompareRuleValidator.__proto__ || Object.getPrototypeOf(CompareRuleValidator)).call(this));\n    _this8.NAME = \"compare\";\n    return _this8;\n  }\n  _createClass(CompareRuleValidator, [{\n    key: \"_validate\",\n    value: function value(_value11, rule) {\n      if (!rule.comparisonTarget) {\n        throw _errors2.default.Error(\"E0102\");\n      }\n      if (rule.ignoreEmptyValue && this._isValueEmpty(_value11)) {\n        return true;\n      }\n      (0, _extend.extend)(rule, {\n        reevaluate: true\n      });\n      var otherValue = rule.comparisonTarget(),\n        type = rule.comparisonType || \"==\";\n      switch (type) {\n        case \"==\":\n          return _value11 == otherValue;\n        case \"!=\":\n          return _value11 != otherValue;\n        case \"===\":\n          return _value11 === otherValue;\n        case \"!==\":\n          return _value11 !== otherValue;\n        case \">\":\n          return _value11 > otherValue;\n        case \">=\":\n          return _value11 >= otherValue;\n        case \"<\":\n          return _value11 < otherValue;\n        case \"<=\":\n          return _value11 <= otherValue;\n      }\n    }\n  }]);\n  return CompareRuleValidator;\n}(BaseRuleValidator);\nvar PatternRuleValidator = function (_BaseRuleValidator7) {\n  _inherits(PatternRuleValidator, _BaseRuleValidator7);\n  function PatternRuleValidator() {\n    _classCallCheck(this, PatternRuleValidator);\n    var _this9 = _possibleConstructorReturn(this, (PatternRuleValidator.__proto__ || Object.getPrototypeOf(PatternRuleValidator)).call(this));\n    _this9.NAME = \"pattern\";\n    return _this9;\n  }\n  _createClass(PatternRuleValidator, [{\n    key: \"_validate\",\n    value: function value(_value12, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(_value12)) {\n        return true;\n      }\n      var pattern = rule.pattern;\n      if (_type2.default.isString(pattern)) {\n        pattern = new RegExp(pattern);\n      }\n      return pattern.test(_value12);\n    }\n  }]);\n  return PatternRuleValidator;\n}(BaseRuleValidator);\nvar EmailRuleValidator = function (_BaseRuleValidator8) {\n  _inherits(EmailRuleValidator, _BaseRuleValidator8);\n  function EmailRuleValidator() {\n    _classCallCheck(this, EmailRuleValidator);\n    var _this10 = _possibleConstructorReturn(this, (EmailRuleValidator.__proto__ || Object.getPrototypeOf(EmailRuleValidator)).call(this));\n    _this10.NAME = \"email\";\n    return _this10;\n  }\n  _createClass(EmailRuleValidator, [{\n    key: \"_validate\",\n    value: function value(_value13, rule) {\n      if (false !== rule.ignoreEmptyValue && this._isValueEmpty(_value13)) {\n        return true;\n      }\n      return rulesValidators.pattern.validate(_value13, (0, _extend.extend)({}, rule, {\n        pattern: /^[\\d\\w._-]+@([\\d\\w._-]+\\.)+[\\w]+$/i\n      }));\n    }\n  }]);\n  return EmailRuleValidator;\n}(BaseRuleValidator);\nvar rulesValidators = {\n  required: new RequiredRuleValidator(),\n  numeric: new NumericRuleValidator(),\n  range: new RangeRuleValidator(),\n  stringLength: new StringLengthRuleValidator(),\n  custom: new CustomRuleValidator(),\n  async: new AsyncRuleValidator(),\n  compare: new CompareRuleValidator(),\n  pattern: new PatternRuleValidator(),\n  email: new EmailRuleValidator()\n};\nvar GroupConfig = _class2.default.inherit({\n  ctor: function ctor(group) {\n    this.group = group;\n    this.validators = [];\n    this._pendingValidators = [];\n    this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);\n    this._resetValidationInfo();\n  },\n  validate: function validate() {\n    var _this11 = this;\n    var result = {\n      isValid: true,\n      brokenRules: [],\n      validators: [],\n      status: VALIDATION_STATUS_VALID,\n      complete: null\n    };\n    this._unsubscribeFromAllChangeEvents();\n    this._pendingValidators = [];\n    this._resetValidationInfo();\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      var validatorResult = validator.validate();\n      result.isValid = result.isValid && validatorResult.isValid;\n      if (validatorResult.brokenRules) {\n        result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules);\n      }\n      result.validators.push(validator);\n      if (validatorResult.status === VALIDATION_STATUS_PENDING) {\n        _this11._addPendingValidator(validator);\n      }\n      _this11._subscribeToChangeEvents(validator);\n    });\n    if (this._pendingValidators.length) {\n      result.status = VALIDATION_STATUS_PENDING;\n    } else {\n      result.status = result.isValid ? VALIDATION_STATUS_VALID : VALIDATION_STATUS_INVALID;\n      this._unsubscribeFromAllChangeEvents();\n      this._raiseValidatedEvent(result);\n    }\n    this._updateValidationInfo(result);\n    return result;\n  },\n  _subscribeToChangeEvents: function _subscribeToChangeEvents(validator) {\n    validator.on(\"validating\", this._onValidatorStatusChanged);\n    validator.on(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromChangeEvents: function _unsubscribeFromChangeEvents(validator) {\n    validator.off(\"validating\", this._onValidatorStatusChanged);\n    validator.off(\"validated\", this._onValidatorStatusChanged);\n  },\n  _unsubscribeFromAllChangeEvents: function _unsubscribeFromAllChangeEvents() {\n    var _this12 = this;\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      _this12._unsubscribeFromChangeEvents(validator);\n    });\n  },\n  _updateValidationInfo: function _updateValidationInfo(result) {\n    this._validationInfo.result = result;\n    if (result.status !== VALIDATION_STATUS_PENDING) {\n      return;\n    }\n    if (!this._validationInfo.deferred) {\n      this._validationInfo.deferred = new _deferred.Deferred();\n      this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n    }\n  },\n  _addPendingValidator: function _addPendingValidator(validator) {\n    var foundValidator = (0, _common.grep)(this._pendingValidators, function (val) {\n      return val === validator;\n    })[0];\n    if (!foundValidator) {\n      this._pendingValidators.push(validator);\n    }\n  },\n  _removePendingValidator: function _removePendingValidator(validator) {\n    var index = (0, _array.inArray)(validator, this._pendingValidators);\n    if (index >= 0) {\n      this._pendingValidators.splice(index, 1);\n    }\n  },\n  _orderBrokenRules: function _orderBrokenRules(brokenRules) {\n    var orderedRules = [];\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      var foundRules = (0, _common.grep)(brokenRules, function (rule) {\n        return rule.validator === validator;\n      });\n      if (foundRules.length) {\n        orderedRules = orderedRules.concat(foundRules);\n      }\n    });\n    return orderedRules;\n  },\n  _updateBrokenRules: function _updateBrokenRules(result) {\n    if (!this._validationInfo.result) {\n      return;\n    }\n    var brokenRules = this._validationInfo.result.brokenRules;\n    var rules = (0, _common.grep)(brokenRules, function (rule) {\n      return rule.validator !== result.validator;\n    });\n    if (result.brokenRules) {\n      brokenRules = rules.concat(result.brokenRules);\n    }\n    this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules);\n  },\n  _onValidatorStatusChanged: function _onValidatorStatusChanged(result) {\n    if (result.status === VALIDATION_STATUS_PENDING) {\n      this._addPendingValidator(result.validator);\n      return;\n    }\n    this._resolveIfComplete(result);\n  },\n  _resolveIfComplete: function _resolveIfComplete(result) {\n    this._removePendingValidator(result.validator);\n    this._updateBrokenRules(result);\n    if (!this._pendingValidators.length) {\n      this._unsubscribeFromAllChangeEvents();\n      if (!this._validationInfo.result) {\n        return;\n      }\n      this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? VALIDATION_STATUS_VALID : VALIDATION_STATUS_INVALID;\n      this._validationInfo.result.isValid = this._validationInfo.result.status === VALIDATION_STATUS_VALID;\n      var res = (0, _extend.extend)({}, this._validationInfo.result, {\n          complete: null\n        }),\n        deferred = this._validationInfo.deferred;\n      this._resetValidationInfo();\n      this._raiseValidatedEvent(res);\n      deferred && setTimeout(function () {\n        deferred.resolve(res);\n      });\n    }\n  },\n  _raiseValidatedEvent: function _raiseValidatedEvent(result) {\n    this.fireEvent(\"validated\", [result]);\n  },\n  _resetValidationInfo: function _resetValidationInfo() {\n    this._validationInfo = {\n      result: null,\n      deferred: null\n    };\n  },\n  _synchronizeValidationInfo: function _synchronizeValidationInfo() {\n    if (this._validationInfo.result) {\n      this._validationInfo.result.validators = this.validators;\n    }\n  },\n  removeRegisteredValidator: function removeRegisteredValidator(validator) {\n    var index = (0, _array.inArray)(validator, this.validators);\n    if (index > -1) {\n      this.validators.splice(index, 1);\n      this._synchronizeValidationInfo();\n      this._resolveIfComplete({\n        validator: validator\n      });\n    }\n  },\n  registerValidator: function registerValidator(validator) {\n    if ((0, _array.inArray)(validator, this.validators) < 0) {\n      this.validators.push(validator);\n      this._synchronizeValidationInfo();\n    }\n  },\n  reset: function reset() {\n    (0, _iterator.each)(this.validators, function (_, validator) {\n      validator.reset();\n    });\n    this._pendingValidators = [];\n    this._resetValidationInfo();\n  }\n}).include(_events_mixin2.default);\nvar ValidationEngine = {\n  groups: [],\n  getGroupConfig: function getGroupConfig(group) {\n    var result = (0, _common.grep)(this.groups, function (config) {\n      return config.group === group;\n    });\n    if (result.length) {\n      return result[0];\n    }\n  },\n  initGroups: function initGroups() {\n    this.groups = [];\n    this.addGroup();\n  },\n  addGroup: function addGroup(group) {\n    var config = this.getGroupConfig(group);\n    if (!config) {\n      config = new GroupConfig(group);\n      this.groups.push(config);\n    }\n    return config;\n  },\n  removeGroup: function removeGroup(group) {\n    var config = this.getGroupConfig(group),\n      index = (0, _array.inArray)(config, this.groups);\n    if (index > -1) {\n      this.groups.splice(index, 1);\n    }\n    return config;\n  },\n  _setDefaultMessage: function _setDefaultMessage(info) {\n    var rule = info.rule,\n      validator = info.validator,\n      name = info.name;\n    if (!_type2.default.isDefined(rule.message)) {\n      if (validator.defaultFormattedMessage && _type2.default.isDefined(name)) {\n        rule.message = validator.defaultFormattedMessage(name);\n      } else {\n        rule.message = validator.defaultMessage();\n      }\n    }\n  },\n  _addBrokenRule: function _addBrokenRule(info) {\n    var result = info.result,\n      rule = info.rule;\n    if (!result.brokenRule) {\n      result.brokenRule = rule;\n    }\n    if (!result.brokenRules) {\n      result.brokenRules = [];\n    }\n    result.brokenRules.push(rule);\n  },\n  validate: function validate(value, rules, name) {\n    var _this13 = this;\n    var result = {\n      name: name,\n      value: value,\n      brokenRule: null,\n      brokenRules: null,\n      isValid: true,\n      validationRules: rules,\n      pendingRules: null,\n      status: VALIDATION_STATUS_VALID,\n      complete: null\n    };\n    var asyncRuleItems = [];\n    (0, _iterator.each)(rules || [], function (_, rule) {\n      var ruleValidator = rulesValidators[rule.type];\n      var ruleValidationResult = void 0;\n      if (ruleValidator) {\n        if (_type2.default.isDefined(rule.isValid) && rule.value === value && !rule.reevaluate) {\n          if (!rule.isValid) {\n            result.isValid = false;\n            _this13._addBrokenRule({\n              result: result,\n              rule: rule\n            });\n            return false;\n          }\n          return true;\n        }\n        rule.value = value;\n        if (\"async\" === rule.type) {\n          asyncRuleItems.push({\n            rule: rule,\n            ruleValidator: ruleValidator\n          });\n          return true;\n        }\n        ruleValidationResult = ruleValidator.validate(value, rule);\n        rule.isValid = ruleValidationResult;\n        if (!ruleValidationResult) {\n          result.isValid = false;\n          _this13._setDefaultMessage({\n            rule: rule,\n            validator: ruleValidator,\n            name: name\n          });\n          _this13._addBrokenRule({\n            result: result,\n            rule: rule\n          });\n        }\n        if (!rule.isValid) {\n          return false;\n        }\n      } else {\n        throw _errors2.default.Error(\"E0100\");\n      }\n    });\n    if (result.isValid && !result.brokenRules && asyncRuleItems.length) {\n      result = this._validateAsyncRules({\n        value: value,\n        items: asyncRuleItems,\n        result: result,\n        name: name\n      });\n    }\n    result.status = result.pendingRules ? VALIDATION_STATUS_PENDING : result.isValid ? VALIDATION_STATUS_VALID : VALIDATION_STATUS_INVALID;\n    return result;\n  },\n  _validateAsyncRules: function _validateAsyncRules(_ref) {\n    var _this14 = this;\n    var result = _ref.result,\n      value = _ref.value,\n      items = _ref.items,\n      name = _ref.name;\n    var asyncResults = [];\n    result.pendingRules = [];\n    (0, _iterator.each)(items, function (_, item) {\n      result.pendingRules.push(item.rule);\n      var asyncResult = item.ruleValidator.validate(value, item.rule).then(function (res) {\n        var ruleResult = _this14._getPatchedRuleResult(res);\n        _this14._updateRuleConfig({\n          rule: item.rule,\n          ruleResult: ruleResult,\n          validator: item.ruleValidator,\n          name: name\n        });\n        return ruleResult;\n      });\n      asyncResults.push(asyncResult);\n    });\n    result.complete = _promise2.default.all(asyncResults).then(function (values) {\n      return _this14._getAsyncRulesResult({\n        result: result,\n        values: values\n      });\n    });\n    return result;\n  },\n  _updateRuleConfig: function _updateRuleConfig(_ref2) {\n    var rule = _ref2.rule,\n      ruleResult = _ref2.ruleResult,\n      validator = _ref2.validator,\n      name = _ref2.name;\n    rule.isValid = ruleResult.isValid;\n    if (!ruleResult.isValid) {\n      if (_type2.default.isDefined(ruleResult.message) && _type2.default.isString(ruleResult.message) && ruleResult.message.length) {\n        rule.message = ruleResult.message;\n      } else {\n        this._setDefaultMessage({\n          rule: rule,\n          validator: validator,\n          name: name\n        });\n      }\n    }\n  },\n  _getPatchedRuleResult: function _getPatchedRuleResult(ruleResult) {\n    var result = void 0;\n    var isValid = true;\n    if (_type2.default.isObject(ruleResult)) {\n      result = (0, _extend.extend)({}, ruleResult);\n      if (!_type2.default.isDefined(result.isValid)) {\n        result.isValid = isValid;\n      }\n    } else {\n      result = {\n        isValid: _type2.default.isBoolean(ruleResult) ? ruleResult : isValid\n      };\n    }\n    return result;\n  },\n  _getAsyncRulesResult: function _getAsyncRulesResult(_ref3) {\n    var _this15 = this;\n    var values = _ref3.values,\n      result = _ref3.result;\n    (0, _iterator.each)(values, function (index, val) {\n      if (false === val.isValid) {\n        result.isValid = val.isValid;\n        var rule = result.pendingRules[index];\n        _this15._addBrokenRule({\n          result: result,\n          rule: rule\n        });\n      }\n    });\n    result.pendingRules = null;\n    result.complete = null;\n    result.status = result.isValid ? VALIDATION_STATUS_VALID : VALIDATION_STATUS_INVALID;\n    return result;\n  },\n  registerValidatorInGroup: function registerValidatorInGroup(group, validator) {\n    var groupConfig = ValidationEngine.addGroup(group);\n    groupConfig.registerValidator.call(groupConfig, validator);\n  },\n  _shouldRemoveGroup: function _shouldRemoveGroup(group, validatorsInGroup) {\n    var isDefaultGroup = void 0 === group,\n      isValidationGroupInstance = group && \"dxValidationGroup\" === group.NAME;\n    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;\n  },\n  removeRegisteredValidator: function removeRegisteredValidator(group, validator) {\n    var config = ValidationEngine.getGroupConfig(group);\n    if (config) {\n      config.removeRegisteredValidator.call(config, validator);\n      var validatorsInGroup = config.validators;\n      if (this._shouldRemoveGroup(group, validatorsInGroup)) {\n        this.removeGroup(group);\n      }\n    }\n  },\n  validateGroup: function validateGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n    if (!groupConfig) {\n      throw _errors2.default.Error(\"E0110\");\n    }\n    return groupConfig.validate();\n  },\n  resetGroup: function resetGroup(group) {\n    var groupConfig = ValidationEngine.getGroupConfig(group);\n    if (!groupConfig) {\n      throw _errors2.default.Error(\"E0110\");\n    }\n    return groupConfig.reset();\n  }\n};\nValidationEngine.initGroups();\nmodule.exports = ValidationEngine;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}