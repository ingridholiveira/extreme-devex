{"ast":null,"code":"/**\r\n * DevExtreme (ui/pager.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  eventsEngine = require(\"../events/core/events_engine\"),\n  Class = require(\"../core/class\"),\n  stringUtils = require(\"../core/utils/string\"),\n  registerComponent = require(\"../core/component_registrator\"),\n  commonUtils = require(\"../core/utils/common\"),\n  each = require(\"../core/utils/iterator\").each,\n  typeUtils = require(\"../core/utils/type\"),\n  extend = require(\"../core/utils/extend\").extend,\n  clickEvent = require(\"../events/click\"),\n  pointerEvents = require(\"../events/pointer\"),\n  messageLocalization = require(\"../localization/message\"),\n  Widget = require(\"./widget/ui.widget\"),\n  SelectBox = require(\"./select_box\"),\n  NumberBox = require(\"./number_box\"),\n  eventUtils = require(\"../events/utils\"),\n  accessibility = require(\"./shared/accessibility\");\nvar PAGES_LIMITER = 4,\n  PAGER_CLASS = \"dx-pager\",\n  PAGER_PAGE_CLASS = \"dx-page\",\n  PAGER_PAGE_CLASS_SELECTOR = \".\" + PAGER_PAGE_CLASS,\n  PAGER_PAGES_CLASS = \"dx-pages\",\n  LIGHT_MODE_CLASS = \"dx-light-mode\",\n  LIGHT_PAGES_CLASS = \"dx-light-pages\",\n  PAGER_PAGE_INDEX_CLASS = \"dx-page-index\",\n  PAGER_PAGES_COUNT_CLASS = \"dx-pages-count\",\n  PAGER_SELECTION_CLASS = \"dx-selection\",\n  PAGER_PAGE_SEPARATOR_CLASS = \"dx-separator\",\n  PAGER_PAGE_SIZES_CLASS = \"dx-page-sizes\",\n  PAGER_PAGE_SIZE_CLASS = \"dx-page-size\",\n  PAGER_PAGE_SIZE_CLASS_SELECTOR = \".\" + PAGER_PAGE_SIZE_CLASS,\n  PAGER_NAVIGATE_BUTTON = \"dx-navigate-button\",\n  PAGER_PREV_BUTTON_CLASS = \"dx-prev-button\",\n  PAGER_NEXT_BUTTON_CLASS = \"dx-next-button\",\n  PAGER_INFO_CLASS = \"dx-info\",\n  PAGER_INFO_TEXT_CLASS = \"dx-info-text\",\n  PAGER_BUTTON_DISABLE_CLASS = \"dx-button-disable\";\nvar Page = Class.inherit({\n  ctor: function ctor(value, index) {\n    var that = this;\n    that.index = index;\n    that._$page = $(\"<div>\").text(value).addClass(PAGER_PAGE_CLASS);\n  },\n  value: function value(_value) {\n    var that = this;\n    if (typeUtils.isDefined(_value)) {\n      that._$page.text(_value);\n    } else {\n      var text = that._$page.text();\n      if (typeUtils.isNumeric(text)) {\n        return parseInt(text);\n      } else {\n        return text;\n      }\n    }\n  },\n  element: function element() {\n    return this._$page;\n  },\n  select: function select(value) {\n    this._$page.toggleClass(PAGER_SELECTION_CLASS, value);\n  },\n  render: function render(rootElement, rtlEnabled) {\n    rtlEnabled ? this._$page.prependTo(rootElement) : this._$page.appendTo(rootElement);\n  }\n});\nvar Pager = Widget.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      visible: true,\n      pagesNavigatorVisible: \"auto\",\n      pageIndex: 1,\n      maxPagesCount: 10,\n      pageCount: 10,\n      totalCount: 0,\n      pageSize: 5,\n      showPageSizes: true,\n      pageSizes: [5, 10],\n      hasKnownLastPage: true,\n      showNavigationButtons: false,\n      showInfo: false,\n      infoText: messageLocalization.getFormatter(\"dxPager-infoText\"),\n      pagesCountText: messageLocalization.getFormatter(\"dxPager-pagesCountText\"),\n      rtlEnabled: false,\n      lightModeEnabled: false,\n      pageIndexChanged: commonUtils.noop,\n      pageSizeChanged: commonUtils.noop\n    });\n  },\n  _toggleVisibility: function _toggleVisibility(value) {\n    var $element = this.$element();\n    if ($element) {\n      $element.css(\"display\", value ? \"\" : \"none\");\n    }\n  },\n  _getPages: function _getPages(currentPage, count) {\n    var firstValue,\n      i,\n      pages = [],\n      showMoreButton = !this.option(\"hasKnownLastPage\");\n    if (count > 0 || showMoreButton) {\n      if (count <= this.option(\"maxPagesCount\")) {\n        for (i = 1; i <= count; i++) {\n          pages.push(new Page(i, i - 1));\n        }\n        if (showMoreButton) {\n          pages.push(new Page(\">\", i - 1));\n        }\n      } else {\n        pages.push(new Page(1, 0));\n        firstValue = currentPage ? currentPage.value() - currentPage.index : 1;\n        for (i = 1; i <= PAGES_LIMITER; i++) {\n          pages.push(new Page(firstValue + i, i));\n        }\n        pages.push(new Page(count, PAGES_LIMITER + 1));\n        if (showMoreButton) {\n          pages.push(new Page(\">\", PAGES_LIMITER + 1));\n        }\n      }\n    }\n    return pages;\n  },\n  _getPageByValue: function _getPageByValue(value) {\n    var page,\n      i,\n      that = this;\n    for (i = 0; i < that._pages.length; i++) {\n      page = that._pages[i];\n      if (page.value() === value) {\n        return page;\n      }\n    }\n  },\n  _processSelectedPage: function _processSelectedPage(maxPagesCount, pageIndex, pageCount) {\n    var selectedPageIndex,\n      that = this,\n      isPageIndexValid = false;\n    if (that._pages) {\n      each(that._pages, function (key, page) {\n        if (pageIndex === page.value()) {\n          isPageIndexValid = true;\n        }\n      });\n      if (!isPageIndexValid) {\n        that.selectedPage = null;\n      }\n    }\n    if (typeUtils.isDefined(that.selectedPage)) {\n      if (pageIndex === pageCount && pageCount > maxPagesCount && that.selectedPage.index !== PAGES_LIMITER + 1) {\n        that.selectedPage.index = PAGES_LIMITER + 1;\n      }\n    } else {\n      if (pageIndex > PAGES_LIMITER && pageIndex < pageCount) {\n        selectedPageIndex = pageCount - PAGES_LIMITER < pageIndex ? PAGES_LIMITER - (pageCount - pageIndex) + 1 : 2;\n        that.selectedPage = new Page(pageIndex, selectedPageIndex);\n      }\n    }\n  },\n  _selectPageByValue: function _selectPageByValue(value) {\n    var i,\n      prevPage,\n      nextPage,\n      morePage,\n      that = this,\n      page = that._getPageByValue(value),\n      pages = that._pages,\n      pagesLength = pages.length;\n    if (!typeUtils.isDefined(page)) {\n      return;\n    }\n    prevPage = that._pages[page.index - 1];\n    nextPage = that._pages[page.index + 1];\n    if (nextPage && \">\" === nextPage.value()) {\n      morePage = nextPage;\n      nextPage = void 0;\n      pagesLength--;\n      pages.pop();\n    }\n    if (that.selectedPage) {\n      that.selectedPage.select(false);\n    }\n    page.select(true);\n    that.selectedPage = page;\n    if (nextPage && nextPage.value() - value > 1) {\n      if (0 !== page.index) {\n        prevPage.value(value + 1);\n        that._pages.splice(page.index, 1);\n        that._pages.splice(page.index - 1, 0, page);\n        that._pages[page.index].index = page.index;\n        page.index = page.index - 1;\n        for (i = page.index - 1; i > 0; i--) {\n          that._pages[i].value(that._pages[i + 1].value() - 1);\n        }\n      } else {\n        for (i = 0; i < pagesLength - 1; i++) {\n          that._pages[i].value(i + 1);\n        }\n      }\n    }\n    if (prevPage && value - prevPage.value() > 1) {\n      if (page.index !== pagesLength - 1) {\n        nextPage.value(value - 1);\n        that._pages.splice(page.index, 1);\n        that._pages.splice(page.index + 1, 0, page);\n        that._pages[page.index].index = page.index;\n        page.index = page.index + 1;\n        for (i = page.index + 1; i < pagesLength - 1; i++) {\n          that._pages[i].value(that._pages[i - 1].value() + 1);\n        }\n      } else {\n        for (i = 1; i <= pagesLength - 2; i++) {\n          that._pages[pagesLength - 1 - i].value(that._pages[pagesLength - 1].value() - i);\n        }\n      }\n    }\n    if (morePage) {\n      pages.push(morePage);\n    }\n  },\n  _updatePagesTabIndices: function _updatePagesTabIndices() {\n    var _this = this;\n    var $selectedPage = this.selectedPage._$page,\n      updatePageIndices = function updatePageIndices() {\n        var buttons = $(_this.element()).find(\"[role=button]:not(.dx-button-disable)\");\n        each(buttons, function (_, element) {\n          return $(element).attr(\"tabindex\", 0);\n        });\n        eventsEngine.off($selectedPage, \"focus\", updatePageIndices);\n      };\n    eventsEngine.on($selectedPage, \"focus\", updatePageIndices);\n  },\n  _nextPage: function _nextPage(direction) {\n    var pageIndex = this.option(\"pageIndex\"),\n      pageCount = this.option(\"pageCount\");\n    if (typeUtils.isDefined(pageIndex)) {\n      pageIndex = \"next\" === direction ? ++pageIndex : --pageIndex;\n      if (pageIndex > 0 && pageIndex <= pageCount) {\n        this.option(\"pageIndex\", pageIndex);\n      }\n    }\n  },\n  _wrapClickAction: function _wrapClickAction(action) {\n    var _this2 = this;\n    return function (e) {\n      if (\"dxpointerup\" === e.type) {\n        _this2._pointerUpHappened = true;\n      } else {\n        if (_this2._pointerUpHappened) {\n          _this2._pointerUpHappened = false;\n          return;\n        }\n      }\n      action({\n        event: e\n      });\n    };\n  },\n  _renderPages: function _renderPages(pages) {\n    var $separator,\n      page,\n      that = this,\n      pagesLength = pages.length,\n      clickPagesIndexAction = that._createAction(function (args) {\n        var e = args.event,\n          pageNumber = $(e.target).text(),\n          pageIndex = \">\" === pageNumber ? that.option(\"pageCount\") + 1 : Number(pageNumber);\n        that.option(\"pageIndex\", pageIndex);\n      });\n    if (pagesLength > 1) {\n      that._pageClickHandler = this._wrapClickAction(clickPagesIndexAction);\n      eventsEngine.on(that._$pagesChooser, eventUtils.addNamespace([pointerEvents.up, clickEvent.name], that.Name + \"Pages\"), PAGER_PAGE_CLASS_SELECTOR, that._pageClickHandler);\n      accessibility.registerKeyboardAction(\"pager\", that, that._$pagesChooser, PAGER_PAGE_CLASS_SELECTOR, clickPagesIndexAction);\n    }\n    for (var i = 0; i < pagesLength; i++) {\n      page = pages[i];\n      page.render(that._$pagesChooser, that.option(\"rtlEnabled\"));\n      that.setAria({\n        role: \"button\",\n        label: \"Page \" + page.value()\n      }, page.element());\n      accessibility.setTabIndex(that, page.element());\n      if (pages[i + 1] && pages[i + 1].value() - page.value() > 1) {\n        $separator = $(\"<div>\").text(\". . .\").addClass(PAGER_PAGE_SEPARATOR_CLASS);\n        that.option(\"rtlEnabled\") ? $separator.prependTo(that._$pagesChooser) : $separator.appendTo(that._$pagesChooser);\n      }\n    }\n  },\n  _calculateLightPagesWidth: function _calculateLightPagesWidth($pageIndex, pageCount) {\n    return Number($pageIndex.css(\"minWidth\").replace(\"px\", \"\")) + 10 * pageCount.toString().length;\n  },\n  _renderLightPages: function _renderLightPages() {\n    var $pageCount,\n      $pageIndex,\n      that = this,\n      pageCount = this.option(\"pageCount\"),\n      pageIndex = this.option(\"pageIndex\"),\n      clickAction = that._createAction(function () {\n        that.option(\"pageIndex\", pageCount);\n      }),\n      pagesCountText = this.option(\"pagesCountText\");\n    var $container = $(\"<div>\").addClass(LIGHT_PAGES_CLASS).appendTo(this._$pagesChooser);\n    $pageIndex = $(\"<div>\").addClass(PAGER_PAGE_INDEX_CLASS).appendTo($container);\n    that._pageIndexEditor = that._createComponent($pageIndex, NumberBox, {\n      value: pageIndex,\n      min: 1,\n      max: pageCount,\n      width: that._calculateLightPagesWidth($pageIndex, pageCount),\n      onValueChanged: function onValueChanged(e) {\n        that.option(\"pageIndex\", e.value);\n      }\n    });\n    $(\"<span>\").text(pagesCountText).addClass(PAGER_INFO_TEXT_CLASS + \" \" + PAGER_INFO_CLASS).appendTo($container);\n    $pageCount = $(\"<span>\").addClass(PAGER_PAGES_COUNT_CLASS).text(pageCount);\n    eventsEngine.on($pageCount, eventUtils.addNamespace(clickEvent.name, that.Name + \"PagesCount\"), function (e) {\n      clickAction({\n        event: e\n      });\n    });\n    accessibility.registerKeyboardAction(\"pager\", that, $pageCount, void 0, clickAction);\n    $pageCount.appendTo($container);\n    that.setAria({\n      role: \"button\",\n      label: \"Navigates to the last page\"\n    }, $pageCount);\n  },\n  _renderPagesChooser: function _renderPagesChooser() {\n    var that = this,\n      lightModeEnabled = that.option(\"lightModeEnabled\"),\n      pagesNavigatorVisible = that.option(\"pagesNavigatorVisible\"),\n      $element = that.$element();\n    that._$pagesChooser && that._$pagesChooser.remove();\n    if (!pagesNavigatorVisible) {\n      return;\n    }\n    if (that._pages && 0 === that._pages.length) {\n      that.selectedPage = null;\n      return;\n    }\n    that._$pagesChooser = $(\"<div>\").addClass(PAGER_PAGES_CLASS).appendTo($element);\n    if (\"auto\" === pagesNavigatorVisible) {\n      that._$pagesChooser.css(\"visibility\", 1 === that.option(\"pageCount\") ? \"hidden\" : \"\");\n    }\n    if (!lightModeEnabled) {\n      that._renderInfo();\n    }\n    that._renderNavigateButton(\"prev\");\n    if (lightModeEnabled) {\n      that._renderLightPages();\n    } else {\n      that._renderPages(that._pages);\n    }\n    that._renderNavigateButton(\"next\");\n    that._updatePagesChooserWidth();\n  },\n  _renderPageSizes: function _renderPageSizes() {\n    var i,\n      pageSizeValue,\n      $pageSize,\n      that = this,\n      pageSizes = that.option(\"pageSizes\"),\n      pagesSizesLength = pageSizes && pageSizes.length,\n      currentPageSize = that.option(\"pageSize\"),\n      clickPagesSizeAction = that._createAction(function (args) {\n        var e = args.event;\n        pageSizeValue = parseInt($(e.target).text());\n        that.option(\"pageSize\", pageSizeValue);\n      });\n    eventsEngine.on(that._$pagesSizeChooser, eventUtils.addNamespace(clickEvent.name, that.Name + \"PageSize\"), PAGER_PAGE_SIZE_CLASS_SELECTOR, function (e) {\n      clickPagesSizeAction({\n        event: e\n      });\n    });\n    accessibility.registerKeyboardAction(\"pager\", that, that._$pagesSizeChooser, PAGER_PAGE_SIZE_CLASS_SELECTOR, clickPagesSizeAction);\n    for (i = 0; i < pagesSizesLength; i++) {\n      $pageSize = $(\"<div>\").text(pageSizes[i]).addClass(PAGER_PAGE_SIZE_CLASS);\n      that.setAria({\n        role: \"button\",\n        label: \"Display \" + pageSizes[i] + \" items on page\"\n      }, $pageSize);\n      accessibility.setTabIndex(that, $pageSize);\n      if (currentPageSize === pageSizes[i]) {\n        $pageSize.addClass(PAGER_SELECTION_CLASS);\n      }\n      that._$pagesSizeChooser.append($pageSize);\n    }\n  },\n  _calculateLightPageSizesWidth: function _calculateLightPageSizesWidth(pageSizes) {\n    return Number(this._$pagesSizeChooser.css(\"minWidth\").replace(\"px\", \"\")) + 10 * Math.max.apply(Math, pageSizes).toString().length;\n  },\n  _renderLightPageSizes: function _renderLightPageSizes() {\n    var $editor,\n      that = this,\n      pageSizes = that.option(\"pageSizes\");\n    $editor = $(\"<div>\").appendTo(that._$pagesSizeChooser);\n    that._pageSizeEditor = that._createComponent($editor, SelectBox, {\n      dataSource: pageSizes,\n      value: that.option(\"pageSize\"),\n      onSelectionChanged: function onSelectionChanged(e) {\n        that.option(\"pageSize\", e.selectedItem);\n      },\n      width: that._calculateLightPageSizesWidth(pageSizes)\n    });\n  },\n  _renderPagesSizeChooser: function _renderPagesSizeChooser() {\n    var that = this,\n      pageSizes = that.option(\"pageSizes\"),\n      showPageSizes = that.option(\"showPageSizes\"),\n      pagesSizesLength = pageSizes && pageSizes.length,\n      $element = that.$element();\n    that._$pagesSizeChooser && that._$pagesSizeChooser.remove();\n    if (!showPageSizes || !pagesSizesLength) {\n      return;\n    }\n    that._$pagesSizeChooser = $(\"<div>\").addClass(PAGER_PAGE_SIZES_CLASS).appendTo($element);\n    if (that.option(\"lightModeEnabled\")) {\n      that._renderLightPageSizes();\n    } else {\n      that._renderPageSizes();\n    }\n    that._pagesSizeChooserWidth = that._$pagesSizeChooser.width();\n  },\n  _renderInfo: function _renderInfo() {\n    var infoText = this.option(\"infoText\");\n    if (this.option(\"showInfo\") && typeUtils.isDefined(infoText)) {\n      this._$info = $(\"<div>\").css(\"display\", this._isInfoHide ? \"none\" : \"\").addClass(PAGER_INFO_CLASS).text(stringUtils.format(infoText, this.selectedPage && this.selectedPage.value(), this.option(\"pageCount\"), this.option(\"totalCount\"))).appendTo(this._$pagesChooser);\n      if (!this._isInfoHide) {\n        this._infoWidth = this._$info.outerWidth(true);\n      }\n    }\n  },\n  _renderNavigateButton: function _renderNavigateButton(direction) {\n    var $button,\n      that = this,\n      clickAction = that._createAction(function () {\n        that._nextPage(direction);\n      });\n    if (that.option(\"showNavigationButtons\") || that.option(\"lightModeEnabled\")) {\n      $button = $(\"<div>\").addClass(PAGER_NAVIGATE_BUTTON);\n      eventsEngine.on($button, eventUtils.addNamespace([pointerEvents.up, clickEvent.name], that.Name + \"Pages\"), that._wrapClickAction(clickAction));\n      accessibility.registerKeyboardAction(\"pager\", that, $button, void 0, clickAction);\n      that.setAria({\n        role: \"button\",\n        label: \"prev\" === direction ? \"Previous page\" : \" Next page\"\n      }, $button);\n      accessibility.setTabIndex(that, $button);\n      if (that.option(\"rtlEnabled\")) {\n        $button.addClass(\"prev\" === direction ? PAGER_NEXT_BUTTON_CLASS : PAGER_PREV_BUTTON_CLASS);\n        $button.prependTo(this._$pagesChooser);\n      } else {\n        $button.addClass(\"prev\" === direction ? PAGER_PREV_BUTTON_CLASS : PAGER_NEXT_BUTTON_CLASS);\n        $button.appendTo(this._$pagesChooser);\n      }\n    }\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this.$element().toggleClass(LIGHT_MODE_CLASS, this.option(\"lightModeEnabled\"));\n    this._toggleVisibility(this.option(\"visible\"));\n    this._updatePageSizes(true);\n    this._updatePages(true);\n    accessibility.restoreFocus(this);\n  },\n  _initMarkup: function _initMarkup() {\n    var $element = this.$element();\n    $element.addClass(PAGER_CLASS);\n    var $pageSize = $(\"<div>\").addClass(PAGER_PAGE_CLASS);\n    this._$pagesChooser = $(\"<div>\").addClass(PAGER_PAGES_CLASS).append($pageSize).appendTo($element);\n  },\n  _render: function _render() {\n    this.option().lightModeEnabled = false;\n    this.callBase();\n    this._updateLightMode();\n  },\n  _updatePageSizes: function _updatePageSizes(forceRender) {\n    var lightModeEnabled = this.option(\"lightModeEnabled\"),\n      pageSize = this.option(\"pageSize\"),\n      pageSizes = this.option(\"pageSizes\");\n    if (lightModeEnabled) {\n      this._pageSizeEditor && this._pageSizeEditor.option({\n        value: pageSize,\n        dataSource: pageSizes,\n        width: this._calculateLightPageSizesWidth(pageSizes)\n      });\n    }\n    if (!lightModeEnabled || forceRender) {\n      this._renderPagesSizeChooser();\n    }\n  },\n  _updatePages: function _updatePages(forceRender) {\n    var pageCount = this.option(\"pageCount\"),\n      pageIndex = this.option(\"pageIndex\"),\n      lightModeEnabled = this.option(\"lightModeEnabled\");\n    if (!lightModeEnabled) {\n      this._processSelectedPage(this.option(\"maxPagesCount\"), pageIndex, pageCount);\n      this._pages = this._getPages(this.selectedPage, pageCount);\n      this._selectPageByValue(pageIndex);\n    } else {\n      this._pageIndexEditor && this._pageIndexEditor.option({\n        value: pageIndex,\n        width: this._calculateLightPagesWidth(this._pageIndexEditor.$element(), pageCount)\n      });\n    }\n    if (!lightModeEnabled || forceRender) {\n      this._renderPagesChooser();\n    }\n    this._updateButtonsState(pageIndex);\n  },\n  _isPageIndexInvalid: function _isPageIndexInvalid(direction, pageIndex) {\n    var isNextDirection = \"next\" === direction,\n      rtlEnabled = this.option(\"rtlEnabled\");\n    if (rtlEnabled && isNextDirection || !rtlEnabled && !isNextDirection) {\n      return pageIndex <= 1;\n    }\n    return pageIndex >= this.option(\"pageCount\");\n  },\n  _updateButtonsState: function _updateButtonsState(pageIndex) {\n    var nextButton = this.$element().find(\".\" + PAGER_NEXT_BUTTON_CLASS),\n      prevButton = this.$element().find(\".\" + PAGER_PREV_BUTTON_CLASS);\n    nextButton.toggleClass(PAGER_BUTTON_DISABLE_CLASS, this._isPageIndexInvalid(\"next\", pageIndex));\n    prevButton.toggleClass(PAGER_BUTTON_DISABLE_CLASS, this._isPageIndexInvalid(\"prev\", pageIndex));\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"visible\":\n        this._toggleVisibility(args.value);\n        break;\n      case \"pageIndex\":\n        var pageIndexChanged = this.option(\"pageIndexChanged\");\n        if (pageIndexChanged) {\n          pageIndexChanged(args.value);\n        }\n        this._updatePages();\n        break;\n      case \"maxPagesCount\":\n      case \"pageCount\":\n      case \"totalCount\":\n      case \"hasKnownLastPage\":\n      case \"pagesNavigatorVisible\":\n      case \"showNavigationButtons\":\n        this._updatePages();\n        break;\n      case \"pageSize\":\n        var pageSizeChanged = this.option(\"pageSizeChanged\");\n        if (pageSizeChanged) {\n          pageSizeChanged(args.value);\n        }\n        this._updatePageSizes();\n        break;\n      case \"pageSizes\":\n        this._updatePageSizes();\n        break;\n      case \"lightModeEnabled\":\n        this._renderContentImpl();\n        !args.value && this._updateLightMode();\n        break;\n      default:\n        this._invalidate();\n    }\n  },\n  _clean: function _clean() {\n    if (this._$pagesChooser) {\n      eventsEngine.off(this._$pagesChooser, eventUtils.addNamespace([pointerEvents.up, clickEvent.name], this.Name + \"Pages\"), PAGER_PAGE_CLASS_SELECTOR, this._pageClickHandler);\n      accessibility.registerKeyboardAction(\"pager\", this, this._$pagesChooser, PAGER_PAGE_CLASS_SELECTOR, this._pageKeyDownHandler);\n    }\n    this.callBase();\n  },\n  _getMinPagerWidth: function _getMinPagerWidth() {\n    var pagesChooserWidth = typeUtils.isDefined(this._pagesChooserWidth) ? this._pagesChooserWidth : 0,\n      pagesSizeChooserWidth = typeUtils.isDefined(this._pagesSizeChooserWidth) ? this._pagesSizeChooserWidth : 0;\n    return pagesChooserWidth + pagesSizeChooserWidth;\n  },\n  _updatePagesChooserWidth: commonUtils.deferUpdater(function () {\n    var lastPageWidth = this._pages && this._pages.length > 0 ? this._pages[this._pages.length - 1]._$page.width() : 0;\n    this._pagesChooserWidth = this._$pagesChooser.width() + lastPageWidth;\n  }),\n  _updateLightMode: commonUtils.deferUpdater(function () {\n    var that = this,\n      width = this.$element().width(),\n      infoWidth = typeUtils.isDefined(this._infoWidth) ? this._infoWidth : 0;\n    commonUtils.deferRender(function () {\n      if (that._isInfoHide && width > that._getMinPagerWidth() + infoWidth) {\n        that._$info.show();\n        that._updatePagesChooserWidth();\n        that._isInfoHide = false;\n      }\n      if (!that._isInfoHide && width > that._getMinPagerWidth() - infoWidth && width < that._getMinPagerWidth()) {\n        that._$info.hide();\n        that._updatePagesChooserWidth();\n        that._isInfoHide = true;\n      }\n      commonUtils.deferUpdate(function () {\n        commonUtils.deferRender(function () {\n          if (that.option(\"lightModeEnabled\") && width > that._previousWidth) {\n            that.option(\"lightModeEnabled\", false);\n          } else {\n            if (width < that._getMinPagerWidth()) {\n              that.option(\"lightModeEnabled\", true);\n            }\n          }\n          that._previousWidth = width;\n        });\n      });\n    });\n  }),\n  _dimensionChanged: function _dimensionChanged() {\n    this._updateLightMode();\n  },\n  getHeight: function getHeight() {\n    return this.option(\"visible\") ? this.$element().outerHeight() : 0;\n  }\n});\nmodule.exports = Pager;\nregisterComponent(\"dxPager\", Pager);","map":null,"metadata":{},"sourceType":"script"}