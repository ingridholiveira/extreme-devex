{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.editor_factory.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _click = require(\"../../events/click\");\nvar _click2 = _interopRequireDefault(_click);\nvar _pointer = require(\"../../events/pointer\");\nvar _pointer2 = _interopRequireDefault(_pointer);\nvar _position = require(\"../../animation/position\");\nvar _position2 = _interopRequireDefault(_position);\nvar _utils = require(\"../../events/utils\");\nvar _browser = require(\"../../core/utils/browser\");\nvar _browser2 = _interopRequireDefault(_browser);\nvar _extend = require(\"../../core/utils/extend\");\nvar _ui = require(\"../shared/ui.editor_factory_mixin\");\nvar _ui2 = _interopRequireDefault(_ui);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar EDITOR_INLINE_BLOCK = \"dx-editor-inline-block\",\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  FOCUS_OVERLAY_CLASS = \"focus-overlay\",\n  CONTENT_CLASS = \"content\",\n  FOCUSED_ELEMENT_CLASS = \"dx-focused\",\n  ROW_CLASS = \"dx-row\",\n  MODULE_NAMESPACE = \"dxDataGridEditorFactory\",\n  UPDATE_FOCUS_EVENTS = (0, _utils.addNamespace)([_pointer2.default.down, \"focusin\", _click2.default.name].join(\" \"), MODULE_NAMESPACE),\n  POINTER_EVENTS_TARGET_CLASS = \"dx-pointer-events-target\",\n  POINTER_EVENTS_NONE_CLASS = \"dx-pointer-events-none\",\n  DX_HIDDEN = \"dx-hidden\";\nvar EditorFactory = _uiGrid_core2.default.ViewController.inherit({\n  _getFocusedElement: function _getFocusedElement($dataGridElement) {\n    var rowSelector = this.option(\"focusedRowEnabled\") ? \"tr[tabindex]:focus\" : \"tr[tabindex]:not(.dx-data-row):focus\",\n      focusedElementSelector = \"td[tabindex]:focus, \" + rowSelector + \", input:focus, textarea:focus, .dx-lookup-field:focus, .dx-checkbox:focus\";\n    return $dataGridElement.find(focusedElementSelector);\n  },\n  _getFocusCellSelector: function _getFocusCellSelector() {\n    return \".dx-row > td\";\n  },\n  _updateFocusCore: function _updateFocusCore() {\n    var $focusCell,\n      hideBorders,\n      $focus = this._$focusedElement,\n      $dataGridElement = this.component && this.component.$element();\n    if ($dataGridElement) {\n      $focus = this._getFocusedElement($dataGridElement);\n      if ($focus.length) {\n        if (!$focus.hasClass(CELL_FOCUS_DISABLED_CLASS) && !$focus.hasClass(ROW_CLASS)) {\n          $focusCell = $focus.closest(this._getFocusCellSelector() + \", .\" + CELL_FOCUS_DISABLED_CLASS);\n          hideBorders = $focusCell.get(0) !== $focus.get(0) && $focusCell.hasClass(EDITOR_INLINE_BLOCK);\n          $focus = $focusCell;\n        }\n        if ($focus.length && !$focus.hasClass(CELL_FOCUS_DISABLED_CLASS)) {\n          this.focus($focus, hideBorders);\n          return;\n        }\n      }\n    }\n    this.loseFocus();\n  },\n  _updateFocus: function _updateFocus(e) {\n    var that = this,\n      isFocusOverlay = e && e.event && (0, _renderer2.default)(e.event.target).hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n    that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;\n    clearTimeout(that._updateFocusTimeoutID);\n    that._updateFocusTimeoutID = setTimeout(function () {\n      delete that._updateFocusTimeoutID;\n      if (!that._isFocusOverlay) {\n        that._updateFocusCore();\n      }\n      that._isFocusOverlay = false;\n    });\n  },\n  _updateFocusOverlaySize: function _updateFocusOverlaySize($element, position) {\n    var location = _position2.default.calculate($element, (0, _extend.extend)({\n      collision: \"fit\"\n    }, position));\n    if (location.h.oversize > 0) {\n      $element.outerWidth($element.outerWidth() - location.h.oversize);\n    }\n    if (location.v.oversize > 0) {\n      $element.outerHeight($element.outerHeight() - location.v.oversize);\n    }\n  },\n  callbackNames: function callbackNames() {\n    return [\"focused\"];\n  },\n  focus: function focus($element, hideBorder) {\n    var that = this;\n    if (void 0 === $element) {\n      return that._$focusedElement;\n    } else {\n      if ($element) {\n        if (!$element.is(that._$focusedElement)) {\n          that._$focusedElement && that._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);\n        }\n        that._$focusedElement = $element;\n        clearTimeout(that._focusTimeoutID);\n        that._focusTimeoutID = setTimeout(function () {\n          delete that._focusTimeoutID;\n          that.renderFocusOverlay($element, hideBorder);\n          $element.addClass(FOCUSED_ELEMENT_CLASS);\n          that.focused.fire($element);\n        });\n      }\n    }\n  },\n  renderFocusOverlay: function renderFocusOverlay($element, hideBorder) {\n    var focusOverlayPosition,\n      that = this;\n    if (!that._$focusOverlay) {\n      that._$focusOverlay = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS) + \" \" + POINTER_EVENTS_TARGET_CLASS);\n    }\n    if (hideBorder) {\n      that._$focusOverlay.addClass(DX_HIDDEN);\n    } else {\n      if ($element.length) {\n        var align = _browser2.default.msie ? \"left bottom\" : _browser2.default.mozilla ? \"right bottom\" : \"left top\",\n          $content = $element.closest(\".\" + that.addWidgetPrefix(CONTENT_CLASS)),\n          elemCoord = $element[0].getBoundingClientRect();\n        that._$focusOverlay.removeClass(DX_HIDDEN).appendTo($content).outerWidth(elemCoord.right - elemCoord.left + 1).outerHeight(elemCoord.bottom - elemCoord.top + 1);\n        focusOverlayPosition = {\n          precise: true,\n          my: align,\n          at: align,\n          of: $element,\n          boundary: $content.length && $content\n        };\n        that._updateFocusOverlaySize(that._$focusOverlay, focusOverlayPosition);\n        _position2.default.setup(that._$focusOverlay, focusOverlayPosition);\n        that._$focusOverlay.css(\"visibility\", \"visible\");\n      }\n    }\n  },\n  resize: function resize() {\n    var $focusedElement = this._$focusedElement;\n    if ($focusedElement) {\n      this.focus($focusedElement);\n    }\n  },\n  loseFocus: function loseFocus() {\n    this._$focusedElement && this._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);\n    this._$focusedElement = null;\n    this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN);\n  },\n  init: function init() {\n    this.createAction(\"onEditorPreparing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this.createAction(\"onEditorPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));\n    _events_engine2.default.on(_dom_adapter2.default.getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n    this._attachContainerEventHandlers();\n  },\n  _attachContainerEventHandlers: function _attachContainerEventHandlers() {\n    var that = this,\n      $container = that.component && that.component.$element();\n    if ($container) {\n      _events_engine2.default.on($container, (0, _utils.addNamespace)(\"keydown\", MODULE_NAMESPACE), function (e) {\n        if (\"tab\" === (0, _utils.normalizeKeyName)(e)) {\n          that._updateFocusHandler(e);\n        }\n      });\n    }\n  },\n  _focusOverlayEventProxy: function _focusOverlayEventProxy(e) {\n    var element,\n      $target = (0, _renderer2.default)(e.target),\n      $currentTarget = (0, _renderer2.default)(e.currentTarget),\n      needProxy = $target.hasClass(POINTER_EVENTS_TARGET_CLASS) || $target.hasClass(POINTER_EVENTS_NONE_CLASS);\n    if (!needProxy || $currentTarget.hasClass(DX_HIDDEN)) {\n      return;\n    }\n    $currentTarget.addClass(DX_HIDDEN);\n    element = $target.get(0).ownerDocument.elementFromPoint(e.clientX, e.clientY);\n    (0, _utils.fireEvent)({\n      originalEvent: e,\n      target: element\n    });\n    e.stopPropagation();\n    $currentTarget.removeClass(DX_HIDDEN);\n    if (e.type === _click2.default.name && \"INPUT\" === element.tagName) {\n      _events_engine2.default.trigger((0, _renderer2.default)(element), \"focus\");\n    }\n  },\n  dispose: function dispose() {\n    clearTimeout(this._focusTimeoutID);\n    clearTimeout(this._updateFocusTimeoutID);\n    _events_engine2.default.off(_dom_adapter2.default.getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);\n  }\n}).include(_ui2.default);\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {};\n  },\n  controllers: {\n    editorFactory: EditorFactory\n  },\n  extenders: {\n    controllers: {\n      columnsResizer: {\n        _startResizing: function _startResizing(args) {\n          this.callBase(args);\n          if (this.isResizing()) {\n            this.getController(\"editorFactory\").loseFocus();\n          }\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}