{"ast":null,"code":"/**\r\n * DevExtreme (ui/shared/accessibility.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _utils = require(\"../../events/utils\");\nvar _utils2 = _interopRequireDefault(_utils);\nvar _extend = require(\"../../core/utils/extend\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar FOCUS_STATE_CLASS = \"dx-state-focused\",\n  FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  GRID_CELL_SELECTOR = \".dx-datagrid-rowsview .dx-datagrid-content .dx-row > td\",\n  TREELIST_CELL_SELECTOR = \".dx-treelist-rowsview .dx-treelist-content .dx-row > td\",\n  viewItemSelectorMap = {\n    groupPanel: [\".dx-datagrid-group-panel .dx-group-panel-item[tabindex]\"],\n    columnHeaders: [\".dx-datagrid-headers .dx-header-row > td.dx-datagrid-action\", \".dx-treelist-headers .dx-header-row > td.dx-treelist-action\"],\n    filterRow: [\".dx-datagrid-headers .dx-datagrid-filter-row .dx-editor-cell input\", \".dx-treelist-headers .dx-treelist-filter-row .dx-editor-cell input\"],\n    rowsView: [GRID_CELL_SELECTOR + \"[tabindex]\", \"\" + GRID_CELL_SELECTOR, TREELIST_CELL_SELECTOR + \"[tabindex]\", \"\" + TREELIST_CELL_SELECTOR],\n    footer: [\".dx-datagrid-total-footer .dx-datagrid-summary-item\", \".dx-treelist-total-footer .dx-treelist-summary-item\"],\n    filterPanel: [\".dx-datagrid-filter-panel .dx-icon-filter\", \".dx-treelist-filter-panel .dx-icon-filter\"],\n    pager: [\".dx-datagrid-pager [tabindex]\", \".dx-treelist-pager [tabindex]\"]\n  };\nvar isMouseDown = false,\n  isHiddenFocusing = false,\n  focusedElementInfo = null;\nfunction processKeyDown(viewName, instance, event, action, $mainElement, executeKeyDown) {\n  var isHandled = fireKeyDownEvent(instance, event.originalEvent, executeKeyDown);\n  if (isHandled) {\n    return;\n  }\n  var keyName = _utils2.default.normalizeKeyName(event);\n  if (\"enter\" === keyName || \"space\" === keyName) {\n    saveFocusedElementInfo(event.target, instance);\n    action && action({\n      event: event\n    });\n  } else {\n    if (\"tab\" === keyName) {\n      $mainElement.addClass(FOCUS_STATE_CLASS);\n    } else {\n      module.exports.selectView(viewName, instance, event);\n    }\n  }\n}\nfunction saveFocusedElementInfo(target, instance) {\n  var $target = (0, _renderer2.default)(target),\n    ariaLabel = $target.attr(\"aria-label\"),\n    $activeElements = getActiveAccessibleElements(ariaLabel, instance.element()),\n    targetIndex = $activeElements.index($target);\n  focusedElementInfo = (0, _extend.extend)({}, {\n    ariaLabel: ariaLabel,\n    index: targetIndex\n  }, {\n    viewInstance: instance\n  });\n}\nfunction getActiveAccessibleElements(ariaLabel, viewElement) {\n  var $activeElements,\n    $viewElement = (0, _renderer2.default)(viewElement);\n  if (ariaLabel) {\n    $activeElements = $viewElement.find('[aria-label=\"' + ariaLabel + '\"][tabindex]');\n  } else {\n    $activeElements = $viewElement.find(\"[tabindex]\");\n  }\n  return $activeElements;\n}\nfunction findFocusedViewElement(viewSelectors) {\n  for (var index in viewSelectors) {\n    var selector = viewSelectors[index],\n      $focusViewElement = void 0;\n    $focusViewElement = (0, _renderer2.default)(selector).first();\n    if ($focusViewElement.length) {\n      return $focusViewElement;\n    }\n  }\n}\nfunction fireKeyDownEvent(instance, event, executeAction) {\n  var args = {\n    event: event,\n    handled: false\n  };\n  if (executeAction) {\n    executeAction(args);\n  } else {\n    instance._createActionByOption(\"onKeyDown\")(args);\n  }\n  return args.handled;\n}\nmodule.exports = {\n  hiddenFocus: function hiddenFocus(element) {\n    isHiddenFocusing = true;\n    element.focus();\n    isHiddenFocusing = false;\n  },\n  registerKeyboardAction: function registerKeyboardAction(viewName, instance, $element, selector, action, executeKeyDown) {\n    if (instance.option(\"useLegacyKeyboardNavigation\")) {\n      return;\n    }\n    var $mainElement = (0, _renderer2.default)(instance.element());\n    _events_engine2.default.on($element, \"keydown\", selector, function (e) {\n      return processKeyDown(viewName, instance, e, action, $mainElement, executeKeyDown);\n    });\n    _events_engine2.default.on($element, \"mousedown\", selector, function () {\n      isMouseDown = true;\n      $mainElement.removeClass(FOCUS_STATE_CLASS);\n    });\n    _events_engine2.default.on($element, \"focusin\", selector, function () {\n      if (!isMouseDown && !isHiddenFocusing) {\n        $mainElement.addClass(FOCUS_STATE_CLASS);\n      }\n      isMouseDown = false;\n    });\n  },\n  restoreFocus: function restoreFocus(instance) {\n    if (!instance.option(\"useLegacyKeyboardNavigation\") && focusedElementInfo) {\n      var viewInstance = focusedElementInfo.viewInstance;\n      if (viewInstance) {\n        var $activeElements = getActiveAccessibleElements(focusedElementInfo.ariaLabel, viewInstance.element()),\n          $targetElement = $activeElements.eq(focusedElementInfo.index);\n        focusedElementInfo = null;\n        _events_engine2.default.trigger($targetElement, \"focus\");\n      }\n    }\n  },\n  selectView: function selectView(viewName, instance, event) {\n    var keyName = _utils2.default.normalizeKeyName(event);\n    if (event.ctrlKey && (\"upArrow\" === keyName || \"downArrow\" === keyName)) {\n      var viewNames = Object.keys(viewItemSelectorMap),\n        viewItemIndex = viewNames.indexOf(viewName);\n      while (viewItemIndex >= 0 && viewItemIndex < viewNames.length) {\n        viewItemIndex = \"upArrow\" === keyName ? --viewItemIndex : ++viewItemIndex;\n        var _viewName = viewNames[viewItemIndex],\n          viewSelectors = viewItemSelectorMap[_viewName],\n          $focusViewElement = findFocusedViewElement(viewSelectors);\n        if ($focusViewElement && $focusViewElement.length) {\n          $focusViewElement.attr(\"tabindex\", instance.option(\"tabindex\") || 0);\n          _events_engine2.default.trigger($focusViewElement, \"focus\");\n          $focusViewElement.removeClass(FOCUS_DISABLED_CLASS);\n          break;\n        }\n      }\n    }\n  },\n  setTabIndex: function setTabIndex(instance, $element) {\n    if (!instance.option(\"useLegacyKeyboardnavigation\")) {\n      $element.attr(\"tabindex\", instance.option(\"tabindex\") || 0);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}