{"ast":null,"code":"/**\r\n * DevExtreme (localization/ldml/date.parser.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar escapeRegExp = require(\"../../core/utils/common\").escapeRegExp;\nvar FORMAT_TYPES = {\n  3: \"abbreviated\",\n  4: \"wide\",\n  5: \"narrow\"\n};\nvar monthRegExpGenerator = function monthRegExpGenerator(count, dateParts) {\n  if (count > 2) {\n    return Object.keys(FORMAT_TYPES).map(function (count) {\n      return [\"format\", \"standalone\"].map(function (type) {\n        return dateParts.getMonthNames(FORMAT_TYPES[count], type).join(\"|\");\n      }).join(\"|\");\n    }).join(\"|\");\n  }\n  return \"0?[1-9]|1[012]\";\n};\nvar PATTERN_REGEXPS = {\n  y: function y(count) {\n    return \"[0-9]+\";\n  },\n  M: monthRegExpGenerator,\n  L: monthRegExpGenerator,\n  Q: function Q(count, dateParts) {\n    if (count > 2) {\n      return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").join(\"|\");\n    }\n    return \"0?[1-4]\";\n  },\n  E: function E(count, dateParts) {\n    return \"\\\\D*\";\n  },\n  a: function a(count, dateParts) {\n    return dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\").join(\"|\");\n  },\n  d: function d(count) {\n    return \"0?[1-9]|[12][0-9]|3[01]\";\n  },\n  H: function H(count) {\n    return \"0?[0-9]|1[0-9]|2[0-3]\";\n  },\n  h: function h(count) {\n    return \"0?[1-9]|1[012]\";\n  },\n  m: function m(count) {\n    return \"0?[0-9]|[1-5][0-9]\";\n  },\n  s: function s(count) {\n    return \"0?[0-9]|[1-5][0-9]\";\n  },\n  S: function S(count) {\n    return \"[0-9]{1,\" + count + \"}\";\n  }\n};\nvar parseNumber = Number;\nvar caseInsensitiveIndexOf = function caseInsensitiveIndexOf(array, value) {\n  return array.map(function (item) {\n    return item.toLowerCase();\n  }).indexOf(value.toLowerCase());\n};\nvar monthPatternParser = function monthPatternParser(text, count, dateParts) {\n  if (count > 2) {\n    return [\"format\", \"standalone\"].map(function (type) {\n      return Object.keys(FORMAT_TYPES).map(function (count) {\n        var monthNames = dateParts.getMonthNames(FORMAT_TYPES[count], type);\n        return caseInsensitiveIndexOf(monthNames, text);\n      });\n    }).reduce(function (a, b) {\n      return a.concat(b);\n    }).filter(function (index) {\n      return index >= 0;\n    })[0];\n  }\n  return parseNumber(text) - 1;\n};\nvar PATTERN_PARSERS = {\n  y: function y(text, count) {\n    var year = parseNumber(text);\n    if (2 === count) {\n      return year < 30 ? 2e3 + year : 1900 + year;\n    }\n    return year;\n  },\n  M: monthPatternParser,\n  L: monthPatternParser,\n  Q: function Q(text, count, dateParts) {\n    if (count > 2) {\n      return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").indexOf(text);\n    }\n    return parseNumber(text) - 1;\n  },\n  E: function E(text, count, dateParts) {\n    var dayNames = dateParts.getDayNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\n    return caseInsensitiveIndexOf(dayNames, text);\n  },\n  a: function a(text, count, dateParts) {\n    var periodNames = dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\n    return caseInsensitiveIndexOf(periodNames, text);\n  },\n  d: parseNumber,\n  H: parseNumber,\n  h: parseNumber,\n  m: parseNumber,\n  s: parseNumber,\n  S: function S(text, count) {\n    count = Math.max(count, 3);\n    text = text.slice(0, 3);\n    while (count < 3) {\n      text += \"0\";\n      count++;\n    }\n    return parseNumber(text);\n  }\n};\nvar ORDERED_PATTERNS = [\"y\", \"M\", \"d\", \"h\", \"m\", \"s\", \"S\"];\nvar PATTERN_SETTERS = {\n  y: \"setFullYear\",\n  M: \"setMonth\",\n  L: \"setMonth\",\n  a: function a(date, value) {\n    var hours = date.getHours();\n    if (!value && 12 === hours) {\n      date.setHours(0);\n    } else {\n      if (value && 12 !== hours) {\n        date.setHours(hours + 12);\n      }\n    }\n  },\n  d: \"setDate\",\n  H: \"setHours\",\n  h: \"setHours\",\n  m: \"setMinutes\",\n  s: \"setSeconds\",\n  S: \"setMilliseconds\"\n};\nvar getSameCharCount = function getSameCharCount(text, index) {\n  var char = text[index],\n    count = 0;\n  do {\n    index++;\n    count++;\n  } while (text[index] === char);\n  return count;\n};\nvar createPattern = function createPattern(char, count) {\n  var result = \"\";\n  for (var i = 0; i < count; i++) {\n    result += char;\n  }\n  return result;\n};\nvar getRegExpInfo = function getRegExpInfo(format, dateParts) {\n  var isEscaping,\n    regexpText = \"\",\n    stubText = \"\",\n    patterns = [];\n  var addPreviousStub = function addPreviousStub() {\n    if (stubText) {\n      patterns.push(\"'\" + stubText + \"'\");\n      regexpText += escapeRegExp(stubText) + \")\";\n      stubText = \"\";\n    }\n  };\n  for (var i = 0; i < format.length; i++) {\n    var char = format[i],\n      isEscapeChar = \"'\" === char,\n      regexpPart = PATTERN_REGEXPS[char];\n    if (isEscapeChar) {\n      isEscaping = !isEscaping;\n      if (\"'\" !== format[i - 1]) {\n        continue;\n      }\n    }\n    if (regexpPart && !isEscaping) {\n      var count = getSameCharCount(format, i),\n        pattern = createPattern(char, count);\n      addPreviousStub();\n      patterns.push(pattern);\n      regexpText += \"(\" + regexpPart(count, dateParts) + \")\";\n      i += count - 1;\n    } else {\n      if (!stubText) {\n        regexpText += \"(\";\n      }\n      stubText += char;\n    }\n  }\n  addPreviousStub();\n  return {\n    patterns: patterns,\n    regexp: new RegExp(\"^\" + regexpText + \"$\", \"i\")\n  };\n};\nvar getPatternSetters = function getPatternSetters() {\n  return PATTERN_SETTERS;\n};\nvar setPatternPart = function setPatternPart(date, pattern, text, dateParts) {\n  var patternChar = pattern[0],\n    partSetter = PATTERN_SETTERS[patternChar],\n    partParser = PATTERN_PARSERS[patternChar];\n  if (partSetter && partParser) {\n    var value = partParser(text, pattern.length, dateParts);\n    if (date[partSetter]) {\n      date[partSetter](value);\n    } else {\n      partSetter(date, value);\n    }\n  }\n};\nvar setPatternPartFromNow = function setPatternPartFromNow(date, pattern, now) {\n  var setterName = PATTERN_SETTERS[pattern],\n    getterName = \"g\" + setterName.substr(1);\n  date[setterName](now[getterName]());\n};\nvar getShortPatterns = function getShortPatterns(fullPatterns) {\n  return fullPatterns.map(function (pattern) {\n    if (\"'\" === pattern[0]) {\n      return \"\";\n    } else {\n      return \"H\" === pattern[0] ? \"h\" : pattern[0];\n    }\n  });\n};\nvar getMaxOrderedPatternIndex = function getMaxOrderedPatternIndex(patterns) {\n  var indexes = patterns.map(function (pattern) {\n    return ORDERED_PATTERNS.indexOf(pattern);\n  });\n  return Math.max.apply(Math, indexes);\n};\nvar getOrderedFormatPatterns = function getOrderedFormatPatterns(formatPatterns) {\n  var otherPatterns = formatPatterns.filter(function (pattern) {\n    return ORDERED_PATTERNS.indexOf(pattern) < 0;\n  });\n  return ORDERED_PATTERNS.concat(otherPatterns);\n};\nvar getParser = function getParser(format, dateParts) {\n  var regExpInfo = getRegExpInfo(format, dateParts);\n  return function (text) {\n    var regExpResult = regExpInfo.regexp.exec(text);\n    if (regExpResult) {\n      var now = new Date(),\n        date = new Date(now.getFullYear(), 0, 1),\n        formatPatterns = getShortPatterns(regExpInfo.patterns),\n        maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns),\n        orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);\n      orderedFormatPatterns.forEach(function (pattern, index) {\n        if (!pattern || index < ORDERED_PATTERNS.length && index > maxPatternIndex) {\n          return;\n        }\n        var patternIndex = formatPatterns.indexOf(pattern);\n        if (patternIndex >= 0) {\n          setPatternPart(date, regExpInfo.patterns[patternIndex], regExpResult[patternIndex + 1], dateParts);\n        } else {\n          setPatternPartFromNow(date, pattern, now);\n        }\n      });\n      return date;\n    }\n    return null;\n  };\n};\nexports.getParser = getParser;\nexports.getRegExpInfo = getRegExpInfo;\nexports.getPatternSetters = getPatternSetters;","map":null,"metadata":{},"sourceType":"script"}