{"ast":null,"code":"/**\r\n * DevExtreme (ui/menu/ui.submenu.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (void 0 === getter) {\n        return;\n      }\n      return getter.call(receiver);\n    }\n  }\n};\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _common = require(\"../../core/utils/common\");\nvar _dom = require(\"../../core/utils/dom\");\nvar _position = require(\"../../animation/position\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _context_menu = require(\"../context_menu\");\nvar _context_menu2 = _interopRequireDefault(_context_menu);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS = \"dx-context-menu-content-delimiter\";\nvar DX_SUBMENU_CLASS = \"dx-submenu\";\nvar Submenu = function (_ContextMenu) {\n  _inherits(Submenu, _ContextMenu);\n  function Submenu() {\n    _classCallCheck(this, Submenu);\n    return _possibleConstructorReturn(this, (Submenu.__proto__ || Object.getPrototypeOf(Submenu)).apply(this, arguments));\n  }\n  _createClass(Submenu, [{\n    key: \"_getDefaultOptions\",\n    value: function value() {\n      return (0, _extend.extend)(_get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_getDefaultOptions\", this).call(this), {\n        orientation: \"horizontal\",\n        tabIndex: null,\n        onHoverStart: _common.noop\n      });\n    }\n  }, {\n    key: \"_initDataAdapter\",\n    value: function value() {\n      this._dataAdapter = this.option(\"_dataAdapter\");\n      if (!this._dataAdapter) {\n        _get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_initDataAdapter\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_renderContentImpl\",\n    value: function value() {\n      this._renderContextMenuOverlay();\n      _get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_renderContentImpl\", this).call(this);\n      var node = this._dataAdapter.getNodeByKey(this.option(\"_parentKey\"));\n      node && this._renderItems(this._getChildNodes(node));\n      this._renderDelimiter();\n    }\n  }, {\n    key: \"_renderDelimiter\",\n    value: function value() {\n      this.$contentDelimiter = (0, _renderer2.default)(\"<div>\").appendTo(this._itemContainer()).addClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS);\n    }\n  }, {\n    key: \"_getOverlayOptions\",\n    value: function value() {\n      return (0, _extend.extend)(_get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_getOverlayOptions\", this).call(this), {\n        onPositioned: this._overlayPositionedActionHandler.bind(this)\n      });\n    }\n  }, {\n    key: \"_overlayPositionedActionHandler\",\n    value: function value(arg) {\n      this._showDelimiter(arg);\n    }\n  }, {\n    key: \"_hoverEndHandler\",\n    value: function value(e) {\n      _get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_hoverEndHandler\", this).call(this, e);\n      this._toggleFocusClass(false, e.currentTarget);\n    }\n  }, {\n    key: \"_isMenuHorizontal\",\n    value: function value() {\n      return \"horizontal\" === this.option(\"orientation\");\n    }\n  }, {\n    key: \"_hoverStartHandler\",\n    value: function value(e) {\n      var hoverStartAction = this.option(\"onHoverStart\");\n      hoverStartAction(e);\n      _get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_hoverStartHandler\", this).call(this, e);\n      this._toggleFocusClass(true, e.currentTarget);\n    }\n  }, {\n    key: \"_drawSubmenu\",\n    value: function value($rootItem) {\n      this._actions.onShowing({\n        rootItem: (0, _dom.getPublicElement)($rootItem),\n        submenu: this\n      });\n      _get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_drawSubmenu\", this).call(this, $rootItem);\n      this._actions.onShown({\n        rootItem: (0, _dom.getPublicElement)($rootItem),\n        submenu: this\n      });\n    }\n  }, {\n    key: \"_hideSubmenu\",\n    value: function value($rootItem) {\n      this._actions.onHiding({\n        cancel: true,\n        rootItem: (0, _dom.getPublicElement)($rootItem),\n        submenu: this\n      });\n      _get(Submenu.prototype.__proto__ || Object.getPrototypeOf(Submenu.prototype), \"_hideSubmenu\", this).call(this, $rootItem);\n      this._actions.onHidden({\n        rootItem: (0, _dom.getPublicElement)($rootItem),\n        submenu: this\n      });\n    }\n  }, {\n    key: \"_showDelimiter\",\n    value: function value(arg) {\n      if (!this.$contentDelimiter) {\n        return;\n      }\n      var $submenu = this._itemContainer().children(\".\" + DX_SUBMENU_CLASS).eq(0);\n      var $rootItem = this.option(\"position\").of;\n      var position = {\n        of: $submenu\n      };\n      var containerOffset = arg.position;\n      var vLocation = containerOffset.v.location;\n      var hLocation = containerOffset.h.location;\n      var rootOffset = $rootItem.offset();\n      var offsetLeft = Math.round(rootOffset.left);\n      var offsetTop = Math.round(rootOffset.top);\n      var rootWidth = $rootItem.width();\n      var rootHeight = $rootItem.height();\n      var submenuWidth = $submenu.width();\n      var submenuHeight = $submenu.height();\n      this.$contentDelimiter.css(\"display\", \"block\");\n      this.$contentDelimiter.width(this._isMenuHorizontal() ? rootWidth < submenuWidth ? rootWidth - 2 : submenuWidth : 2);\n      this.$contentDelimiter.height(this._isMenuHorizontal() ? 2 : rootHeight < submenuHeight ? rootHeight - 2 : submenuHeight);\n      if (this._isMenuHorizontal()) {\n        if (vLocation > offsetTop) {\n          if (Math.round(hLocation) === offsetLeft) {\n            position.offset = \"1 -1\";\n            position.at = position.my = \"left top\";\n          } else {\n            position.offset = \"-1 -1\";\n            position.at = position.my = \"right top\";\n          }\n        } else {\n          this.$contentDelimiter.height(5);\n          if (Math.round(hLocation) === offsetLeft) {\n            position.offset = \"1 4\";\n            position.at = position.my = \"left bottom\";\n          } else {\n            position.offset = \"-1 2\";\n            position.at = position.my = \"right bottom\";\n          }\n        }\n      } else {\n        if (hLocation > offsetLeft) {\n          if (Math.round(vLocation) === offsetTop) {\n            position.offset = \"-1 1\";\n            position.at = position.my = \"left top\";\n          } else {\n            position.offset = \"-1 -1\";\n            position.at = position.my = \"left bottom\";\n          }\n        } else {\n          if (Math.round(vLocation) === offsetTop) {\n            position.offset = \"1 1\";\n            position.at = position.my = \"right top\";\n          } else {\n            position.offset = \"1 -1\";\n            position.at = position.my = \"right bottom\";\n          }\n        }\n      }\n      (0, _position.setup)(this.$contentDelimiter, position);\n    }\n  }, {\n    key: \"_getContextMenuPosition\",\n    value: function value() {\n      return this.option(\"position\");\n    }\n  }, {\n    key: \"isOverlayVisible\",\n    value: function value() {\n      return this._overlay.option(\"visible\");\n    }\n  }, {\n    key: \"getOverlayContent\",\n    value: function value() {\n      return this._overlay.$content();\n    }\n  }]);\n  return Submenu;\n}(_context_menu2.default);\nmodule.exports = Submenu;","map":null,"metadata":{},"sourceType":"script"}