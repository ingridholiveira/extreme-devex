{"ast":null,"code":"/**\r\n * DevExtreme (core/component.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _typeof = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar Config = require(\"./config\"),\n  domAdapter = require(\"./dom_adapter\"),\n  extend = require(\"./utils/extend\").extend,\n  Class = require(\"./class\"),\n  Action = require(\"./action\"),\n  errors = require(\"./errors\"),\n  coreDataUtils = require(\"./utils/data\"),\n  commonUtils = require(\"./utils/common\"),\n  typeUtils = require(\"./utils/type\"),\n  deferredUtils = require(\"../core/utils/deferred\"),\n  Deferred = deferredUtils.Deferred,\n  when = deferredUtils.when,\n  Callbacks = require(\"./utils/callbacks\"),\n  EventsMixin = require(\"./events_mixin\"),\n  publicComponentUtils = require(\"./utils/public_component\"),\n  devices = require(\"./devices\"),\n  isFunction = typeUtils.isFunction,\n  noop = commonUtils.noop;\nvar cachedGetters = {};\nvar cachedSetters = {};\nvar PostponedOperations = function () {\n  function PostponedOperations() {\n    _classCallCheck(this, PostponedOperations);\n    this._postponedOperations = {};\n  }\n  _createClass(PostponedOperations, [{\n    key: \"add\",\n    value: function value(key, fn, postponedPromise) {\n      if (key in this._postponedOperations) {\n        postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);\n      } else {\n        var completePromise = new Deferred();\n        this._postponedOperations[key] = {\n          fn: fn,\n          completePromise: completePromise,\n          promises: postponedPromise ? [postponedPromise] : []\n        };\n      }\n      return this._postponedOperations[key].completePromise.promise();\n    }\n  }, {\n    key: \"callPostponedOperations\",\n    value: function value() {\n      for (var key in this._postponedOperations) {\n        var operation = this._postponedOperations[key];\n        if (typeUtils.isDefined(operation)) {\n          if (operation.promises && operation.promises.length) {\n            when.apply(void 0, _toConsumableArray(operation.promises)).done(operation.fn).then(operation.completePromise.resolve);\n          } else {\n            operation.fn().done(operation.completePromise.resolve);\n          }\n        }\n      }\n      this._postponedOperations = {};\n    }\n  }]);\n  return PostponedOperations;\n}();\nvar Component = Class.inherit({\n  _setDeprecatedOptions: function _setDeprecatedOptions() {\n    this._deprecatedOptions = {};\n  },\n  _getDeprecatedOptions: function _getDeprecatedOptions() {\n    return this._deprecatedOptions;\n  },\n  _getOptionAliasesByName: function _getOptionAliasesByName(optionName) {\n    var _this = this;\n    return Object.keys(this._deprecatedOptions).filter(function (aliasName) {\n      return optionName === _this._deprecatedOptions[aliasName].alias;\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return {\n      onInitialized: null,\n      onOptionChanged: null,\n      onDisposing: null,\n      defaultOptionsRules: null\n    };\n  },\n  _setDefaultOptions: function _setDefaultOptions() {\n    this._options = this._getDefaultOptions();\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return [];\n  },\n  _setOptionsByDevice: function _setOptionsByDevice(customRules) {\n    var rules = this._defaultOptionsRules();\n    if (Array.isArray(customRules)) {\n      rules = rules.concat(customRules);\n    }\n    var rulesOptions = this._convertRulesToOptions(rules);\n    extend(true, this._options, rulesOptions);\n    for (var fieldName in this._optionsByReference) {\n      if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {\n        this._options[fieldName] = rulesOptions[fieldName];\n      }\n    }\n  },\n  _convertRulesToOptions: function _convertRulesToOptions(rules) {\n    var options = {};\n    var currentDevice = devices.current();\n    var deviceMatch = function deviceMatch(device, filter) {\n      var filterArray = [];\n      Array.prototype.push.call(filterArray, filter);\n      return 1 === filterArray.length && typeUtils.isEmptyObject(filterArray[0]) || commonUtils.findBestMatches(device, filterArray).length > 0;\n    };\n    for (var i = 0; i < rules.length; i++) {\n      var match,\n        rule = rules[i],\n        deviceFilter = rule.device || {};\n      if (isFunction(deviceFilter)) {\n        match = deviceFilter(currentDevice);\n      } else {\n        match = deviceMatch(currentDevice, deviceFilter);\n      }\n      if (match) {\n        extend(options, rule.options);\n      }\n    }\n    return options;\n  },\n  _isInitialOptionValue: function _isInitialOptionValue(name) {\n    var optionValue = this.option(name),\n      initialOptionValue = this.initialOption(name),\n      isInitialOption = isFunction(optionValue) && isFunction(initialOptionValue) ? optionValue.toString() === initialOptionValue.toString() : commonUtils.equalByValue(optionValue, initialOptionValue);\n    return isInitialOption;\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this._optionsByReference = {};\n  },\n  _getOptionsByReference: function _getOptionsByReference() {\n    return this._optionsByReference;\n  },\n  ctor: function ctor(options) {\n    this.NAME = publicComponentUtils.name(this.constructor);\n    options = options || {};\n    if (options.eventsStrategy) {\n      this.setEventsStrategy(options.eventsStrategy);\n    }\n    this._options = {};\n    this._updateLockCount = 0;\n    this._optionChangedCallbacks = options._optionChangedCallbacks || Callbacks();\n    this._disposingCallbacks = options._disposingCallbacks || Callbacks();\n    this.postponedOperations = new PostponedOperations();\n    this.beginUpdate();\n    try {\n      this._suppressDeprecatedWarnings();\n      this._setOptionsByReference();\n      this._setDeprecatedOptions();\n      this._setDefaultOptions();\n      if (options && options.onInitializing) {\n        options.onInitializing.apply(this, [options]);\n      }\n      this._setOptionsByDevice(options.defaultOptionsRules);\n      this._resumeDeprecatedWarnings();\n      this._initOptions(options);\n    } finally {\n      this.endUpdate();\n    }\n  },\n  _initOptions: function _initOptions(options) {\n    this.option(options);\n  },\n  _optionValuesEqual: function _optionValuesEqual(name, oldValue, newValue) {\n    oldValue = coreDataUtils.toComparable(oldValue, true);\n    newValue = coreDataUtils.toComparable(newValue, true);\n    if (oldValue && newValue && typeUtils.isRenderer(oldValue) && typeUtils.isRenderer(newValue)) {\n      return newValue.is(oldValue);\n    }\n    var oldValueIsNaN = oldValue !== oldValue,\n      newValueIsNaN = newValue !== newValue;\n    if (oldValueIsNaN && newValueIsNaN) {\n      return true;\n    }\n    if (null === oldValue || \"object\" !== (\"undefined\" === typeof oldValue ? \"undefined\" : _typeof(oldValue)) || domAdapter.isElementNode(oldValue)) {\n      return oldValue === newValue;\n    }\n    return false;\n  },\n  _init: function _init() {\n    this._createOptionChangedAction();\n    this.on(\"disposing\", function (args) {\n      this._disposingCallbacks.fireWith(this, [args]);\n    }.bind(this));\n  },\n  _createOptionChangedAction: function _createOptionChangedAction() {\n    this._optionChangedAction = this._createActionByOption(\"onOptionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _createDisposingAction: function _createDisposingAction() {\n    this._disposingAction = this._createActionByOption(\"onDisposing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onDisposing\":\n      case \"onInitialized\":\n        break;\n      case \"onOptionChanged\":\n        this._createOptionChangedAction();\n        break;\n      case \"defaultOptionsRules\":\n    }\n  },\n  _dispose: function _dispose() {\n    this._optionChangedCallbacks.empty();\n    this._createDisposingAction();\n    this._disposingAction();\n    this._disposeEvents();\n    this._disposed = true;\n  },\n  instance: function instance() {\n    return this;\n  },\n  beginUpdate: function beginUpdate() {\n    this._updateLockCount++;\n  },\n  endUpdate: function endUpdate() {\n    this._updateLockCount = Math.max(this._updateLockCount - 1, 0);\n    if (!this._updateLockCount) {\n      this.postponedOperations.callPostponedOperations();\n      if (!this._initializing && !this._initialized) {\n        this._initializing = true;\n        try {\n          this._init();\n        } finally {\n          this._initializing = false;\n          this._updateLockCount++;\n          this._createActionByOption(\"onInitialized\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          })();\n          this._updateLockCount--;\n          this._initialized = true;\n        }\n      }\n    }\n  },\n  _logWarningIfDeprecated: function _logWarningIfDeprecated(option) {\n    var info = this._deprecatedOptions[option];\n    if (info && !this._deprecatedOptionsSuppressed) {\n      this._logDeprecatedWarning(option, info);\n    }\n  },\n  _logDeprecatedWarningCount: 0,\n  _logDeprecatedWarning: function _logDeprecatedWarning(option, info) {\n    var message = info.message || \"Use the '\" + info.alias + \"' option instead\";\n    errors.log(\"W0001\", this.NAME, option, info.since, message);\n    ++this._logDeprecatedWarningCount;\n  },\n  _suppressDeprecatedWarnings: function _suppressDeprecatedWarnings() {\n    this._deprecatedOptionsSuppressed = true;\n  },\n  _resumeDeprecatedWarnings: function _resumeDeprecatedWarnings() {\n    this._deprecatedOptionsSuppressed = false;\n  },\n  _optionChanging: noop,\n  _notifyOptionChanged: function _notifyOptionChanged(option, value, previousValue) {\n    var that = this;\n    if (this._initialized) {\n      var optionNames = [option].concat(that._getOptionAliasesByName(option));\n      for (var i = 0; i < optionNames.length; i++) {\n        var name = optionNames[i],\n          args = {\n            name: name.split(/[.[]/)[0],\n            fullName: name,\n            value: value,\n            previousValue: previousValue\n          };\n        that._optionChangedCallbacks.fireWith(that, [extend(that._defaultActionArgs(), args)]);\n        that._optionChangedAction(extend({}, args));\n        if (!that._disposed && this._cancelOptionChange !== args.name) {\n          that._optionChanged(args);\n        }\n      }\n    }\n  },\n  initialOption: function initialOption(optionName) {\n    var currentOptions,\n      currentInitialized = this._initialized;\n    if (!this._initialOptions) {\n      currentOptions = this._options;\n      this._options = {};\n      this._initialized = false;\n      this._setDefaultOptions();\n      this._setOptionsByDevice(currentOptions.defaultOptionsRules);\n      this._initialOptions = this._options;\n      this._options = currentOptions;\n      this._initialized = currentInitialized;\n    }\n    return this._initialOptions[optionName];\n  },\n  _defaultActionConfig: function _defaultActionConfig() {\n    return {\n      context: this,\n      component: this\n    };\n  },\n  _defaultActionArgs: function _defaultActionArgs() {\n    return {\n      component: this\n    };\n  },\n  _createAction: function _createAction(actionSource, config) {\n    var action,\n      that = this;\n    return function (e) {\n      if (!arguments.length) {\n        e = {};\n      }\n      if (!typeUtils.isPlainObject(e)) {\n        e = {\n          actionValue: e\n        };\n      }\n      action = action || new Action(actionSource, extend(config, that._defaultActionConfig()));\n      return action.execute.call(action, extend(e, that._defaultActionArgs()));\n    };\n  },\n  _createActionByOption: function _createActionByOption(optionName, config) {\n    var action,\n      eventName,\n      actionFunc,\n      that = this;\n    var result = function result() {\n      if (!eventName) {\n        config = config || {};\n        if (\"string\" !== typeof optionName) {\n          throw errors.Error(\"E0008\");\n        }\n        if (0 === optionName.indexOf(\"on\")) {\n          eventName = that._getEventName(optionName);\n        }\n        actionFunc = that.option(optionName);\n      }\n      if (!action && !actionFunc && !config.beforeExecute && !config.afterExecute && !that.hasEvent(eventName)) {\n        return;\n      }\n      if (!action) {\n        var beforeExecute = config.beforeExecute;\n        config.beforeExecute = function (args) {\n          beforeExecute && beforeExecute.apply(that, arguments);\n          that.fireEvent(eventName, args.args);\n        };\n        that._suppressDeprecatedWarnings();\n        action = that._createAction(actionFunc, config);\n        that._resumeDeprecatedWarnings();\n      }\n      if (Config().wrapActionsBeforeExecute) {\n        var beforeActionExecute = that.option(\"beforeActionExecute\") || noop;\n        var wrappedAction = beforeActionExecute(that, action, config) || action;\n        return wrappedAction.apply(that, arguments);\n      }\n      return action.apply(that, arguments);\n    };\n    if (!Config().wrapActionsBeforeExecute) {\n      var onActionCreated = that.option(\"onActionCreated\") || noop;\n      result = onActionCreated(that, result, config) || result;\n    }\n    return result;\n  },\n  _getEventName: function _getEventName(actionName) {\n    return actionName.charAt(2).toLowerCase() + actionName.substr(3);\n  },\n  hasActionSubscription: function hasActionSubscription(actionName) {\n    return !!this.option(actionName) || this.hasEvent(this._getEventName(actionName));\n  },\n  isOptionDeprecated: function isOptionDeprecated(name) {\n    var deprecatedOptions = this._getDeprecatedOptions();\n    return Object.prototype.hasOwnProperty.call(deprecatedOptions, name);\n  },\n  _setOptionSilent: function _setOptionSilent(name, value) {\n    this._cancelOptionChange = name;\n    this.option(name, value);\n    this._cancelOptionChange = false;\n  },\n  option: function () {\n    var normalizeOptionName = function normalizeOptionName(that, name) {\n      var deprecate;\n      if (name) {\n        if (!that._cachedDeprecateNames) {\n          that._cachedDeprecateNames = [];\n          for (var optionName in that._deprecatedOptions) {\n            that._cachedDeprecateNames.push(optionName);\n          }\n        }\n        for (var i = 0; i < that._cachedDeprecateNames.length; i++) {\n          if (that._cachedDeprecateNames[i] === name) {\n            deprecate = that._deprecatedOptions[name];\n            break;\n          }\n        }\n        if (deprecate) {\n          that._logWarningIfDeprecated(name);\n          var alias = deprecate.alias;\n          if (alias) {\n            name = alias;\n          }\n        }\n      }\n      return name;\n    };\n    var getPreviousName = function getPreviousName(fullName) {\n      var splitNames = fullName.split(\".\");\n      splitNames.pop();\n      return splitNames.join(\".\");\n    };\n    var getFieldName = function getFieldName(fullName) {\n      var splitNames = fullName.split(\".\");\n      return splitNames[splitNames.length - 1];\n    };\n    var getOptionValue = function getOptionValue(options, name, unwrapObservables) {\n      var getter = cachedGetters[name];\n      if (!getter) {\n        getter = cachedGetters[name] = coreDataUtils.compileGetter(name);\n      }\n      return getter(options, {\n        functionsAsIs: true,\n        unwrapObservables: unwrapObservables\n      });\n    };\n    var clearOptionsField = function clearOptionsField(options, name) {\n      delete options[name];\n      var previousFieldName = getPreviousName(name),\n        fieldName = getFieldName(name),\n        fieldObject = previousFieldName ? getOptionValue(options, previousFieldName, false) : options;\n      if (fieldObject) {\n        delete fieldObject[fieldName];\n      }\n    };\n    var setOptionsField = function setOptionsField(options, fullName, value) {\n      var fieldObject,\n        fieldName = \"\";\n      do {\n        if (fieldName) {\n          fieldName = \".\" + fieldName;\n        }\n        fieldName = getFieldName(fullName) + fieldName;\n        fullName = getPreviousName(fullName);\n        fieldObject = fullName ? getOptionValue(options, fullName, false) : options;\n      } while (!fieldObject);\n      fieldObject[fieldName] = value;\n    };\n    var normalizeOptionValue = function normalizeOptionValue(that, options, name, value) {\n      if (name) {\n        var alias = normalizeOptionName(that, name);\n        if (alias && alias !== name) {\n          setOptionsField(options, alias, value);\n          clearOptionsField(options, name);\n        }\n      }\n    };\n    var prepareOption = function prepareOption(that, options, name, value) {\n      if (typeUtils.isPlainObject(value)) {\n        for (var valueName in value) {\n          prepareOption(that, options, name + \".\" + valueName, value[valueName]);\n        }\n      }\n      normalizeOptionValue(that, options, name, value);\n    };\n    var setOptionValue = function setOptionValue(that, name, value) {\n      if (!cachedSetters[name]) {\n        cachedSetters[name] = coreDataUtils.compileSetter(name);\n      }\n      var path = name.split(/[.[]/);\n      cachedSetters[name](that._options, value, {\n        functionsAsIs: true,\n        merge: !that._getOptionsByReference()[name],\n        unwrapObservables: path.length > 1 && !!that._getOptionsByReference()[path[0]]\n      });\n    };\n    var setOption = function setOption(that, name, value) {\n      var previousValue = getOptionValue(that._options, name, false);\n      if (that._optionValuesEqual(name, previousValue, value)) {\n        return;\n      }\n      if (that._initialized) {\n        that._optionChanging(name, previousValue, value);\n      }\n      setOptionValue(that, name, value);\n      that._notifyOptionChanged(name, value, previousValue);\n    };\n    return function (options, value) {\n      var that = this,\n        name = options;\n      if (arguments.length < 2 && \"object\" !== typeUtils.type(name)) {\n        name = normalizeOptionName(that, name);\n        return getOptionValue(that._options, name);\n      }\n      if (\"string\" === typeof name) {\n        options = {};\n        options[name] = value;\n      }\n      that.beginUpdate();\n      try {\n        var optionName;\n        for (optionName in options) {\n          prepareOption(that, options, optionName, options[optionName]);\n        }\n        for (optionName in options) {\n          setOption(that, optionName, options[optionName]);\n        }\n      } finally {\n        that.endUpdate();\n      }\n    };\n  }(),\n  _getOptionValue: function _getOptionValue(name, context) {\n    var value = this.option(name);\n    if (isFunction(value)) {\n      return value.bind(context)();\n    }\n    return value;\n  }\n}).include(EventsMixin);\nmodule.exports = Component;\nmodule.exports.PostponedOperations = PostponedOperations;","map":null,"metadata":{},"sourceType":"script"}