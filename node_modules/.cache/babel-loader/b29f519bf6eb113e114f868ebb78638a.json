{"ast":null,"code":"/**\r\n * DevExtreme (ui/calendar/ui.calendar.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  Guid = require(\"../../core/guid\"),\n  registerComponent = require(\"../../core/component_registrator\"),\n  noop = require(\"../../core/utils/common\").noop,\n  typeUtils = require(\"../../core/utils/type\"),\n  inRange = require(\"../../core/utils/math\").inRange,\n  extend = require(\"../../core/utils/extend\").extend,\n  Button = require(\"../button\"),\n  Editor = require(\"../editor/editor\"),\n  Swipeable = require(\"../../events/gesture/swipeable\"),\n  Navigator = require(\"./ui.calendar.navigator\"),\n  Views = require(\"./ui.calendar.views\"),\n  translator = require(\"../../animation/translator\"),\n  browser = require(\"../../core/utils/browser\"),\n  dateUtils = require(\"../../core/utils/date\"),\n  dateSerialization = require(\"../../core/utils/date_serialization\"),\n  devices = require(\"../../core/devices\"),\n  fx = require(\"../../animation/fx\"),\n  windowUtils = require(\"../../core/utils/window\"),\n  messageLocalization = require(\"../../localization/message\"),\n  FunctionTemplate = require(\"../../core/templates/function_template\").FunctionTemplate;\nvar CALENDAR_CLASS = \"dx-calendar\",\n  CALENDAR_BODY_CLASS = \"dx-calendar-body\",\n  CALENDAR_CELL_CLASS = \"dx-calendar-cell\",\n  CALENDAR_FOOTER_CLASS = \"dx-calendar-footer\",\n  CALENDAR_TODAY_BUTTON_CLASS = \"dx-calendar-today-button\",\n  CALENDAR_HAS_FOOTER_CLASS = \"dx-calendar-with-footer\",\n  CALENDAR_VIEWS_WRAPPER_CLASS = \"dx-calendar-views-wrapper\",\n  CALENDAR_VIEW_CLASS = \"dx-calendar-view\",\n  FOCUSED_STATE_CLASS = \"dx-state-focused\",\n  ANIMATION_DURATION_SHOW_VIEW = 250,\n  POP_ANIMATION_FROM = .6,\n  POP_ANIMATION_TO = 1,\n  CALENDAR_INPUT_STANDARD_PATTERN = \"yyyy-MM-dd\",\n  CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\",\n  LEVEL_COMPARE_MAP = {\n    month: 3,\n    year: 2,\n    decade: 1,\n    century: 0\n  };\nvar ZOOM_LEVEL = {\n  MONTH: \"month\",\n  YEAR: \"year\",\n  DECADE: \"decade\",\n  CENTURY: \"century\"\n};\nvar Calendar = Editor.inherit({\n  _activeStateUnit: \".\" + CALENDAR_CELL_CLASS,\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      currentDate: new Date(),\n      value: null,\n      dateSerializationFormat: void 0,\n      min: new Date(1e3, 0),\n      max: new Date(3e3, 0),\n      firstDayOfWeek: void 0,\n      zoomLevel: ZOOM_LEVEL.MONTH,\n      maxZoomLevel: ZOOM_LEVEL.MONTH,\n      minZoomLevel: ZOOM_LEVEL.CENTURY,\n      showTodayButton: false,\n      cellTemplate: \"cell\",\n      disabledDates: null,\n      onCellClick: null,\n      onContouredChanged: null,\n      hasFocus: function hasFocus(element) {\n        return element.hasClass(FOCUSED_STATE_CLASS);\n      }\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _supportedKeys: function _supportedKeys() {\n    return extend(this.callBase(), {\n      rightArrow: function rightArrow(e) {\n        e.preventDefault();\n        if (e.ctrlKey) {\n          this._waitRenderView(1);\n        } else {\n          this._moveCurrentDate(1 * this._getRtlCorrection());\n        }\n      },\n      leftArrow: function leftArrow(e) {\n        e.preventDefault();\n        if (e.ctrlKey) {\n          this._waitRenderView(-1);\n        } else {\n          this._moveCurrentDate(-1 * this._getRtlCorrection());\n        }\n      },\n      upArrow: function upArrow(e) {\n        e.preventDefault();\n        if (e.ctrlKey) {\n          this._navigateUp();\n        } else {\n          if (fx.isAnimating(this._view.$element())) {\n            return;\n          }\n          this._moveCurrentDate(-1 * this._view.option(\"colCount\"));\n        }\n      },\n      downArrow: function downArrow(e) {\n        e.preventDefault();\n        if (e.ctrlKey) {\n          this._navigateDown();\n        } else {\n          if (fx.isAnimating(this._view.$element())) {\n            return;\n          }\n          this._moveCurrentDate(1 * this._view.option(\"colCount\"));\n        }\n      },\n      home: function home(e) {\n        e.preventDefault();\n        var zoomLevel = this.option(\"zoomLevel\");\n        var currentDate = this.option(\"currentDate\");\n        var min = this._dateOption(\"min\");\n        var date = dateUtils.sameView(zoomLevel, currentDate, min) ? min : dateUtils.getViewFirstCellDate(zoomLevel, currentDate);\n        this._moveToClosestAvailableDate(date, 1);\n      },\n      end: function end(e) {\n        e.preventDefault();\n        var zoomLevel = this.option(\"zoomLevel\");\n        var currentDate = this.option(\"currentDate\");\n        var max = this._dateOption(\"max\");\n        var date = dateUtils.sameView(zoomLevel, currentDate, max) ? max : dateUtils.getViewLastCellDate(zoomLevel, currentDate);\n        this._moveToClosestAvailableDate(date, -1);\n      },\n      pageUp: function pageUp(e) {\n        e.preventDefault();\n        this._waitRenderView(-1);\n      },\n      pageDown: function pageDown(e) {\n        e.preventDefault();\n        this._waitRenderView(1);\n      },\n      tab: noop,\n      enter: function enter(e) {\n        if (!this._isMaxZoomLevel()) {\n          this._navigateDown();\n        } else {\n          var value = this._updateTimeComponent(this.option(\"currentDate\"));\n          this._dateValue(value, e);\n        }\n      }\n    });\n  },\n  _getSerializationFormat: function _getSerializationFormat(optionName) {\n    var value = this.option(optionName || \"value\");\n    if (this.option(\"dateSerializationFormat\")) {\n      return this.option(\"dateSerializationFormat\");\n    }\n    if (typeUtils.isNumeric(value)) {\n      return \"number\";\n    }\n    if (!typeUtils.isString(value)) {\n      return;\n    }\n    return dateSerialization.getDateSerializationFormat(value);\n  },\n  _convertToDate: function _convertToDate(value, optionName) {\n    return dateSerialization.deserializeDate(value);\n  },\n  _dateValue: function _dateValue(value, dxEvent) {\n    if (dxEvent) {\n      this._saveValueChangeEvent(dxEvent);\n    }\n    this._dateOption(\"value\", value);\n  },\n  _dateOption: function _dateOption(optionName, optionValue) {\n    if (1 === arguments.length) {\n      return this._convertToDate(this.option(optionName), optionName);\n    }\n    var serializationFormat = this._getSerializationFormat(optionName);\n    this.option(optionName, dateSerialization.serializeDate(optionValue, serializationFormat));\n  },\n  _moveCurrentDate: function _moveCurrentDate(offset, baseDate) {\n    var currentDate = baseDate || new Date(this.option(\"currentDate\")),\n      maxDate = this._getMaxDate(),\n      minDate = this._getMinDate(),\n      zoomLevel = this.option(\"zoomLevel\"),\n      currentDateInRange = inRange(currentDate, minDate, maxDate),\n      dateForward = new Date(currentDate),\n      dateBackward = new Date(currentDate),\n      dateForwardInRange = currentDateInRange,\n      dateBackwardInRange = currentDateInRange;\n    while (!offset && (dateForwardInRange || dateBackwardInRange) || offset && dateForwardInRange) {\n      var step = offset || 1;\n      switch (zoomLevel) {\n        case ZOOM_LEVEL.MONTH:\n          dateForward.setDate(dateForward.getDate() + step);\n          dateBackward.setDate(dateBackward.getDate() - step);\n          break;\n        case ZOOM_LEVEL.YEAR:\n          dateForward.setMonth(dateForward.getMonth() + step);\n          dateBackward.setMonth(dateBackward.getMonth() - step);\n          break;\n        case ZOOM_LEVEL.DECADE:\n          dateForward.setFullYear(dateForward.getFullYear() + step);\n          dateBackward.setFullYear(dateBackward.getFullYear() - step);\n          break;\n        case ZOOM_LEVEL.CENTURY:\n          dateForward.setFullYear(dateForward.getFullYear() + 10 * step);\n          dateBackward.setFullYear(dateBackward.getFullYear() - 10 * step);\n      }\n      if (!this._view.isDateDisabled(dateForward)) {\n        currentDate = dateForward;\n        break;\n      }\n      if (!offset && !this._view.isDateDisabled(dateBackward)) {\n        currentDate = dateBackward;\n        break;\n      }\n      dateBackwardInRange = inRange(dateBackward, minDate, maxDate);\n      dateForwardInRange = inRange(dateForward, minDate, maxDate);\n    }\n    this.option(\"currentDate\", currentDate);\n  },\n  _moveToClosestAvailableDate: function _moveToClosestAvailableDate(baseDate, offset) {\n    if (this._view.isDateDisabled(baseDate)) {\n      this._moveCurrentDate(offset, baseDate);\n    } else {\n      this.option(\"currentDate\", baseDate);\n    }\n  },\n  _init: function _init() {\n    this.callBase();\n    this._correctZoomLevel();\n    this._initCurrentDate();\n    this._initActions();\n  },\n  _correctZoomLevel: function _correctZoomLevel() {\n    var minZoomLevel = this.option(\"minZoomLevel\"),\n      maxZoomLevel = this.option(\"maxZoomLevel\"),\n      zoomLevel = this.option(\"zoomLevel\");\n    if (LEVEL_COMPARE_MAP[maxZoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\n      return;\n    }\n    if (LEVEL_COMPARE_MAP[zoomLevel] > LEVEL_COMPARE_MAP[maxZoomLevel]) {\n      this.option(\"zoomLevel\", maxZoomLevel);\n    } else {\n      if (LEVEL_COMPARE_MAP[zoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {\n        this.option(\"zoomLevel\", minZoomLevel);\n      }\n    }\n  },\n  _initCurrentDate: function _initCurrentDate() {\n    var currentDate = this._getNormalizedDate(this._dateOption(\"value\")) || this._getNormalizedDate(this.option(\"currentDate\"));\n    this.option(\"currentDate\", currentDate);\n  },\n  _getNormalizedDate: function _getNormalizedDate(date) {\n    date = dateUtils.normalizeDate(date, this._getMinDate(), this._getMaxDate());\n    return typeUtils.isDefined(date) ? new Date(date) : date;\n  },\n  _initActions: function _initActions() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n    this._onContouredChanged = this._createActionByOption(\"onContouredChanged\");\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n    this._defaultTemplates.cell = new FunctionTemplate(function (options) {\n      var data = options.model;\n      $(options.container).append($(\"<span>\").text(data && data.text || String(data)));\n    });\n  },\n  _updateCurrentDate: function _updateCurrentDate(date) {\n    if (fx.isAnimating(this._$viewsWrapper)) {\n      fx.stop(this._$viewsWrapper, true);\n    }\n    var min = this._getMinDate(),\n      max = this._getMaxDate();\n    if (min > max) {\n      this.option(\"currentDate\", new Date());\n      return;\n    }\n    var normalizedDate = this._getNormalizedDate(date);\n    if (date.getTime() !== normalizedDate.getTime()) {\n      this.option(\"currentDate\", new Date(normalizedDate));\n      return;\n    }\n    var offset = this._getViewsOffset(this._view.option(\"date\"), normalizedDate);\n    if (0 !== offset && !this._isMaxZoomLevel() && this._isOtherViewCellClicked) {\n      offset = 0;\n    }\n    if (this._view && 0 !== offset && !this._suppressNavigation) {\n      this._navigate(offset, normalizedDate);\n    } else {\n      this._renderNavigator();\n      this._setViewContoured(normalizedDate);\n      this._updateAriaId(normalizedDate);\n    }\n  },\n  _setViewContoured: function _setViewContoured(date) {\n    if (this.option(\"hasFocus\")(this._focusTarget())) {\n      this._view.option(\"contouredDate\", date);\n    }\n  },\n  _getMinDate: function _getMinDate() {\n    if (this.min) {\n      return this.min;\n    }\n    this.min = this._dateOption(\"min\") || new Date(1e3, 0);\n    return this.min;\n  },\n  _getMaxDate: function _getMaxDate() {\n    if (this.max) {\n      return this.max;\n    }\n    this.max = this._dateOption(\"max\") || new Date(3e3, 0);\n    return this.max;\n  },\n  _getViewsOffset: function _getViewsOffset(startDate, endDate) {\n    var zoomLevel = this.option(\"zoomLevel\");\n    if (zoomLevel === ZOOM_LEVEL.MONTH) {\n      return this._getMonthsOffset(startDate, endDate);\n    }\n    var zoomCorrection;\n    switch (zoomLevel) {\n      case ZOOM_LEVEL.CENTURY:\n        zoomCorrection = 100;\n        break;\n      case ZOOM_LEVEL.DECADE:\n        zoomCorrection = 10;\n        break;\n      default:\n        zoomCorrection = 1;\n    }\n    return parseInt(endDate.getFullYear() / zoomCorrection) - parseInt(startDate.getFullYear() / zoomCorrection);\n  },\n  _getMonthsOffset: function _getMonthsOffset(startDate, endDate) {\n    var yearOffset = endDate.getFullYear() - startDate.getFullYear(),\n      monthOffset = endDate.getMonth() - startDate.getMonth();\n    return 12 * yearOffset + monthOffset;\n  },\n  _waitRenderView: function _waitRenderView(offset) {\n    if (this._alreadyViewRender) {\n      return;\n    }\n    this._alreadyViewRender = true;\n    var date = this._getDateByOffset(offset * this._getRtlCorrection());\n    this._moveToClosestAvailableDate(date, offset);\n    setTimeout(function () {\n      this._alreadyViewRender = false;\n    }.bind(this));\n  },\n  _getRtlCorrection: function _getRtlCorrection() {\n    return this.option(\"rtlEnabled\") ? -1 : 1;\n  },\n  _getDateByOffset: function _getDateByOffset(offset, date) {\n    date = new Date(date || this.option(\"currentDate\"));\n    var currentDay = date.getDate();\n    var difference = dateUtils.getDifferenceInMonth(this.option(\"zoomLevel\")) * offset;\n    date.setDate(1);\n    date.setMonth(date.getMonth() + difference);\n    var lastDay = dateUtils.getLastMonthDate(date).getDate();\n    date.setDate(currentDay > lastDay ? lastDay : currentDay);\n    return date;\n  },\n  _focusTarget: function _focusTarget() {\n    return this.$element();\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSubmitElement();\n    this.callBase();\n    var $element = this.$element();\n    $element.addClass(CALENDAR_CLASS);\n    this._renderBody();\n    $element.append(this.$body);\n    this._renderViews();\n    this._renderNavigator();\n    $element.append(this._navigator.$element());\n    this._renderSwipeable();\n    this._renderFooter();\n    this.setAria({\n      role: \"listbox\",\n      label: messageLocalization.format(\"dxCalendar-ariaWidgetName\")\n    });\n    this._updateAriaSelected();\n    this._updateAriaId();\n    if (this._view.isDateDisabled(this.option(\"currentDate\"))) {\n      this._moveCurrentDate(0);\n    }\n  },\n  _render: function _render() {\n    this.callBase();\n    this._setViewContoured(this.option(\"currentDate\"));\n  },\n  _renderBody: function _renderBody() {\n    if (!this._$viewsWrapper) {\n      this.$body = $(\"<div>\").addClass(CALENDAR_BODY_CLASS);\n      this._$viewsWrapper = $(\"<div>\").addClass(CALENDAR_VIEWS_WRAPPER_CLASS);\n      this.$body.append(this._$viewsWrapper);\n    }\n  },\n  _renderViews: function _renderViews() {\n    this.$element().addClass(CALENDAR_VIEW_CLASS + \"-\" + this.option(\"zoomLevel\"));\n    var currentDate = this.option(\"currentDate\");\n    this._view = this._renderSpecificView(currentDate);\n    this._view.option(\"_keyboardProcessor\", this._viewKeyboardProcessor);\n    if (windowUtils.hasWindow()) {\n      var beforeDate = this._getDateByOffset(-1, currentDate);\n      this._beforeView = this._isViewAvailable(beforeDate) ? this._renderSpecificView(beforeDate) : null;\n      var afterDate = this._getDateByOffset(1, currentDate);\n      afterDate.setDate(1);\n      this._afterView = this._isViewAvailable(afterDate) ? this._renderSpecificView(afterDate) : null;\n    }\n    this._translateViews();\n  },\n  _renderSpecificView: function _renderSpecificView(date) {\n    var specificView = Views[this.option(\"zoomLevel\")],\n      $view = $(\"<div>\").appendTo(this._$viewsWrapper),\n      config = this._viewConfig(date);\n    return new specificView($view, config);\n  },\n  _viewConfig: function _viewConfig(date) {\n    var disabledDates = this.option(\"disabledDates\");\n    disabledDates = typeUtils.isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this)) : disabledDates;\n    return {\n      date: date,\n      min: this._getMinDate(),\n      max: this._getMaxDate(),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\"),\n      value: this._dateOption(\"value\"),\n      rtl: this.option(\"rtlEnabled\"),\n      disabled: this.option(\"disabled\"),\n      tabIndex: void 0,\n      focusStateEnabled: this.option(\"focusStateEnabled\"),\n      hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n      disabledDates: disabledDates,\n      onCellClick: this._cellClickHandler.bind(this),\n      cellTemplate: this._getTemplateByOption(\"cellTemplate\"),\n      allowValueSelection: this._isMaxZoomLevel()\n    };\n  },\n  _injectComponent: function _injectComponent(func) {\n    var that = this;\n    return function (params) {\n      extend(params, {\n        component: that\n      });\n      return func(params);\n    };\n  },\n  _isViewAvailable: function _isViewAvailable(date) {\n    var zoomLevel = this.option(\"zoomLevel\");\n    var min = dateUtils.getViewMinBoundaryDate(zoomLevel, this._getMinDate());\n    var max = dateUtils.getViewMaxBoundaryDate(zoomLevel, this._getMaxDate());\n    return dateUtils.dateInRange(date, min, max);\n  },\n  _translateViews: function _translateViews() {\n    translator.move(this._view.$element(), {\n      left: 0,\n      top: 0\n    });\n    this._beforeView && translator.move(this._beforeView.$element(), {\n      left: this._getViewPosition(-1),\n      top: 0\n    });\n    this._afterView && translator.move(this._afterView.$element(), {\n      left: this._getViewPosition(1),\n      top: 0\n    });\n  },\n  _getViewPosition: function _getViewPosition(coefficient) {\n    var rtlCorrection = this.option(\"rtlEnabled\") && !browser.msie ? -1 : 1;\n    return 100 * coefficient * rtlCorrection + \"%\";\n  },\n  _cellClickHandler: function _cellClickHandler(e) {\n    var zoomLevel = this.option(\"zoomLevel\"),\n      nextView = dateUtils.getViewDown(zoomLevel);\n    var isMaxZoomLevel = this._isMaxZoomLevel();\n    if (nextView && !isMaxZoomLevel) {\n      this._navigateDown(e.event.currentTarget);\n    } else {\n      var newValue = this._updateTimeComponent(e.value);\n      this._dateValue(newValue, e.event);\n      this._cellClickAction(e);\n    }\n  },\n  _updateTimeComponent: function _updateTimeComponent(date) {\n    var result = new Date(date);\n    var currentValue = this._dateOption(\"value\");\n    if (currentValue) {\n      result.setHours(currentValue.getHours());\n      result.setMinutes(currentValue.getMinutes());\n      result.setSeconds(currentValue.getSeconds());\n      result.setMilliseconds(currentValue.getMilliseconds());\n    }\n    return result;\n  },\n  _isMaxZoomLevel: function _isMaxZoomLevel() {\n    return this.option(\"zoomLevel\") === this.option(\"maxZoomLevel\");\n  },\n  _navigateDown: function _navigateDown(cell) {\n    var zoomLevel = this.option(\"zoomLevel\");\n    if (this._isMaxZoomLevel()) {\n      return;\n    }\n    var nextView = dateUtils.getViewDown(zoomLevel);\n    if (!nextView) {\n      return;\n    }\n    var newCurrentDate = this._view.option(\"contouredDate\") || this._view.option(\"date\");\n    if (cell) {\n      newCurrentDate = $(cell).data(CALENDAR_DATE_VALUE_KEY);\n    }\n    this._isOtherViewCellClicked = true;\n    this.option(\"currentDate\", newCurrentDate);\n    this.option(\"zoomLevel\", nextView);\n    this._isOtherViewCellClicked = false;\n    this._renderNavigator();\n    this._animateShowView();\n    this._setViewContoured(this._getNormalizedDate(newCurrentDate));\n  },\n  _renderNavigator: function _renderNavigator() {\n    if (!this._navigator) {\n      this._navigator = new Navigator($(\"<div>\"), this._navigatorConfig());\n    }\n    this._navigator.option(\"text\", this._view.getNavigatorCaption());\n    this._updateButtonsVisibility();\n  },\n  _navigatorConfig: function _navigatorConfig() {\n    return {\n      text: this._view.getNavigatorCaption(),\n      onClick: this._navigatorClickHandler.bind(this),\n      onCaptionClick: this._navigateUp.bind(this),\n      rtlEnabled: this.option(\"rtlEnabled\")\n    };\n  },\n  _navigatorClickHandler: function _navigatorClickHandler(e) {\n    var currentDate = this._getDateByOffset(e.direction, this.option(\"currentDate\"));\n    this._moveToClosestAvailableDate(currentDate, 1 * e.direction);\n    this._updateNavigatorCaption(-e.direction * this._getRtlCorrection());\n  },\n  _navigateUp: function _navigateUp() {\n    var zoomLevel = this.option(\"zoomLevel\"),\n      nextView = dateUtils.getViewUp(zoomLevel);\n    if (!nextView || this._isMinZoomLevel(zoomLevel)) {\n      return;\n    }\n    var contouredDate = this._view.option(\"contouredDate\");\n    this.option(\"zoomLevel\", nextView);\n    this.option(\"currentDate\", contouredDate || this._view.option(\"date\"));\n    this._renderNavigator();\n    this._animateShowView().done(function () {\n      this._setViewContoured(contouredDate);\n    }.bind(this));\n  },\n  _isMinZoomLevel: function _isMinZoomLevel(zoomLevel) {\n    var min = this._getMinDate(),\n      max = this._getMaxDate();\n    return dateUtils.sameView(zoomLevel, min, max) || this.option(\"minZoomLevel\") === zoomLevel;\n  },\n  _updateButtonsVisibility: function _updateButtonsVisibility() {\n    this._navigator.toggleButton(\"next\", !typeUtils.isDefined(this._getRequiredView(\"next\")));\n    this._navigator.toggleButton(\"prev\", !typeUtils.isDefined(this._getRequiredView(\"prev\")));\n  },\n  _renderSwipeable: function _renderSwipeable() {\n    if (!this._swipeable) {\n      this._swipeable = this._createComponent(this.$element(), Swipeable, {\n        onStart: this._swipeStartHandler.bind(this),\n        onUpdated: this._swipeUpdateHandler.bind(this),\n        onEnd: this._swipeEndHandler.bind(this),\n        itemSizeFunc: this._viewWidth.bind(this)\n      });\n    }\n  },\n  _swipeStartHandler: function _swipeStartHandler(e) {\n    fx.stop(this._$viewsWrapper, true);\n    e.event.maxLeftOffset = this._getRequiredView(\"next\") ? 1 : 0;\n    e.event.maxRightOffset = this._getRequiredView(\"prev\") ? 1 : 0;\n  },\n  _getRequiredView: function _getRequiredView(name) {\n    var view;\n    var isRtl = this.option(\"rtlEnabled\");\n    if (\"next\" === name) {\n      view = isRtl ? this._beforeView : this._afterView;\n    } else {\n      if (\"prev\" === name) {\n        view = isRtl ? this._afterView : this._beforeView;\n      }\n    }\n    return view;\n  },\n  _swipeUpdateHandler: function _swipeUpdateHandler(e) {\n    var offset = e.event.offset;\n    translator.move(this._$viewsWrapper, {\n      left: offset * this._viewWidth(),\n      top: 0\n    });\n    this._updateNavigatorCaption(offset);\n  },\n  _swipeEndHandler: function _swipeEndHandler(e) {\n    var targetOffset = e.event.targetOffset,\n      moveOffset = !targetOffset ? 0 : targetOffset / Math.abs(targetOffset);\n    if (0 === moveOffset) {\n      this._animateWrapper(0, ANIMATION_DURATION_SHOW_VIEW);\n      return;\n    }\n    var date = this._getDateByOffset(-moveOffset * this._getRtlCorrection());\n    if (this._isDateInInvalidRange(date)) {\n      if (moveOffset >= 0) {\n        date = new Date(this._getMinDate());\n      } else {\n        date = new Date(this._getMaxDate());\n      }\n    }\n    this.option(\"currentDate\", date);\n  },\n  _viewWidth: function _viewWidth() {\n    if (!this._viewWidthValue) {\n      this._viewWidthValue = this.$element().width();\n    }\n    return this._viewWidthValue;\n  },\n  _updateNavigatorCaption: function _updateNavigatorCaption(offset) {\n    offset *= this._getRtlCorrection();\n    var view = this._view;\n    if (offset > .5 && this._beforeView) {\n      view = this._beforeView;\n    } else {\n      if (offset < -.5 && this._afterView) {\n        view = this._afterView;\n      }\n    }\n    this._navigator.option(\"text\", view.getNavigatorCaption());\n  },\n  _isDateInInvalidRange: function _isDateInInvalidRange(date) {\n    if (this._view.isBoundary(date)) {\n      return;\n    }\n    var min = this._getMinDate(),\n      max = this._getMaxDate(),\n      normalizedDate = dateUtils.normalizeDate(date, min, max);\n    return normalizedDate === min || normalizedDate === max;\n  },\n  _renderFooter: function _renderFooter() {\n    var showTodayButton = this.option(\"showTodayButton\");\n    if (showTodayButton) {\n      var $todayButton = this._createComponent($(\"<a>\"), Button, {\n        focusStateEnabled: false,\n        text: messageLocalization.format(\"dxCalendar-todayButtonText\"),\n        onClick: function () {\n          this._toTodayView();\n        }.bind(this),\n        integrationOptions: {}\n      }).$element().addClass(CALENDAR_TODAY_BUTTON_CLASS);\n      this._$footer = $(\"<div>\").addClass(CALENDAR_FOOTER_CLASS).append($todayButton);\n      this.$element().append(this._$footer);\n    }\n    this.$element().toggleClass(CALENDAR_HAS_FOOTER_CLASS, showTodayButton);\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n    this._setSubmitValue(this.option(\"value\"));\n  },\n  _setSubmitValue: function _setSubmitValue(value) {\n    var dateValue = this._convertToDate(value);\n    this._getSubmitElement().val(dateSerialization.serializeDate(dateValue, CALENDAR_INPUT_STANDARD_PATTERN));\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._$submitElement;\n  },\n  _animateShowView: function _animateShowView() {\n    fx.stop(this._view.$element(), true);\n    return this._popAnimationView(this._view, POP_ANIMATION_FROM, POP_ANIMATION_TO, ANIMATION_DURATION_SHOW_VIEW).promise();\n  },\n  _popAnimationView: function _popAnimationView(view, from, to, duration) {\n    return fx.animate(view.$element(), {\n      type: \"pop\",\n      from: {\n        scale: from,\n        opacity: from\n      },\n      to: {\n        scale: to,\n        opacity: to\n      },\n      duration: duration\n    });\n  },\n  _navigate: function _navigate(offset, value) {\n    if (0 !== offset && 1 !== Math.abs(offset) && this._isViewAvailable(value)) {\n      var newView = this._renderSpecificView(value);\n      if (offset > 0) {\n        this._afterView && this._afterView.$element().remove();\n        this._afterView = newView;\n      } else {\n        this._beforeView && this._beforeView.$element().remove();\n        this._beforeView = newView;\n      }\n      this._translateViews();\n    }\n    var rtlCorrection = this._getRtlCorrection(),\n      offsetSign = offset > 0 ? 1 : offset < 0 ? -1 : 0,\n      endPosition = -rtlCorrection * offsetSign * this._viewWidth();\n    var viewsWrapperPosition = this._$viewsWrapper.position().left;\n    if (viewsWrapperPosition !== endPosition) {\n      if (this._preventViewChangeAnimation) {\n        this._wrapperAnimationEndHandler(offset, value);\n      } else {\n        this._animateWrapper(endPosition, ANIMATION_DURATION_SHOW_VIEW).done(this._wrapperAnimationEndHandler.bind(this, offset, value));\n      }\n    }\n  },\n  _animateWrapper: function _animateWrapper(to, duration) {\n    return fx.animate(this._$viewsWrapper, {\n      type: \"slide\",\n      from: {\n        left: this._$viewsWrapper.position().left\n      },\n      to: {\n        left: to\n      },\n      duration: duration\n    });\n  },\n  _toTodayView: function _toTodayView() {\n    var today = new Date();\n    if (this._isMaxZoomLevel()) {\n      this._dateOption(\"value\", today);\n      return;\n    }\n    this._preventViewChangeAnimation = true;\n    this.option(\"zoomLevel\", this.option(\"maxZoomLevel\"));\n    this._dateOption(\"value\", today);\n    this._animateShowView();\n    this._preventViewChangeAnimation = false;\n  },\n  _wrapperAnimationEndHandler: function _wrapperAnimationEndHandler(offset, newDate) {\n    this._rearrangeViews(offset);\n    this._translateViews();\n    this._resetLocation();\n    this._renderNavigator();\n    this._setViewContoured(newDate);\n    this._updateAriaId(newDate);\n  },\n  _rearrangeViews: function _rearrangeViews(offset) {\n    if (0 === offset) {\n      return;\n    }\n    var viewOffset, viewToCreateKey, viewToRemoveKey;\n    if (offset < 0) {\n      viewOffset = 1;\n      viewToCreateKey = \"_beforeView\";\n      viewToRemoveKey = \"_afterView\";\n    } else {\n      viewOffset = -1;\n      viewToCreateKey = \"_afterView\";\n      viewToRemoveKey = \"_beforeView\";\n    }\n    if (!this[viewToCreateKey]) {\n      return;\n    }\n    var destinationDate = this[viewToCreateKey].option(\"date\");\n    if (this[viewToRemoveKey]) {\n      this[viewToRemoveKey].$element().remove();\n    }\n    if (offset === viewOffset) {\n      this[viewToRemoveKey] = this._view;\n    } else {\n      this[viewToRemoveKey] = this._renderSpecificView(this._getDateByOffset(viewOffset, destinationDate));\n      this._view.$element().remove();\n    }\n    this._view = this[viewToCreateKey];\n    var dateByOffset = this._getDateByOffset(-viewOffset, destinationDate);\n    this[viewToCreateKey] = this._isViewAvailable(dateByOffset) ? this._renderSpecificView(dateByOffset) : null;\n  },\n  _resetLocation: function _resetLocation() {\n    translator.move(this._$viewsWrapper, {\n      left: 0,\n      top: 0\n    });\n  },\n  _clean: function _clean() {\n    this.callBase();\n    this._clearViewWidthCache();\n    delete this._$viewsWrapper;\n    delete this._navigator;\n    delete this._$footer;\n  },\n  _clearViewWidthCache: function _clearViewWidthCache() {\n    delete this._viewWidthValue;\n  },\n  _disposeViews: function _disposeViews() {\n    this._view.$element().remove();\n    this._beforeView && this._beforeView.$element().remove();\n    this._afterView && this._afterView.$element().remove();\n    delete this._view;\n    delete this._beforeView;\n    delete this._afterView;\n  },\n  _refreshViews: function _refreshViews() {\n    this._disposeViews();\n    this._renderViews();\n  },\n  _visibilityChanged: function _visibilityChanged() {\n    this._translateViews();\n  },\n  _focusInHandler: function _focusInHandler() {\n    this.callBase.apply(this, arguments);\n    this._view.option(\"contouredDate\", this.option(\"currentDate\"));\n  },\n  _focusOutHandler: function _focusOutHandler() {\n    this.callBase.apply(this, arguments);\n    this._view.option(\"contouredDate\", null);\n  },\n  _updateViewsValue: function _updateViewsValue(value) {\n    var newValue = value ? new Date(value) : null;\n    this._view.option(\"value\", newValue);\n    this._beforeView && this._beforeView.option(\"value\", newValue);\n    this._afterView && this._afterView.option(\"value\", newValue);\n  },\n  _updateAriaSelected: function _updateAriaSelected(value, previousValue) {\n    value = value || this._dateOption(\"value\");\n    var $prevSelectedCell = this._view._getCellByDate(previousValue);\n    var $selectedCell = this._view._getCellByDate(value);\n    this.setAria(\"selected\", void 0, $prevSelectedCell);\n    this.setAria(\"selected\", true, $selectedCell);\n    if (value && this.option(\"currentDate\").getTime() === value.getTime()) {\n      this._updateAriaId(value);\n    }\n  },\n  _updateAriaId: function _updateAriaId(value) {\n    value = value || this.option(\"currentDate\");\n    var ariaId = \"dx-\" + new Guid();\n    var $newCell = this._view._getCellByDate(value);\n    this.setAria(\"id\", ariaId, $newCell);\n    this.setAria(\"activedescendant\", ariaId);\n    this._onContouredChanged(ariaId);\n  },\n  _suppressingNavigation: function _suppressingNavigation(callback, args) {\n    this._suppressNavigation = true;\n    callback.apply(this, args);\n    delete this._suppressNavigation;\n  },\n  _optionChanged: function _optionChanged(args) {\n    var value = args.value;\n    var previousValue = args.previousValue;\n    switch (args.name) {\n      case \"width\":\n        this.callBase(args);\n        this._clearViewWidthCache();\n        break;\n      case \"min\":\n      case \"max\":\n        this.min = void 0;\n        this.max = void 0;\n        this._suppressingNavigation(this._updateCurrentDate, [this.option(\"currentDate\")]);\n        this._refreshViews();\n        this._renderNavigator();\n        break;\n      case \"firstDayOfWeek\":\n        this._refreshViews();\n        this._updateButtonsVisibility();\n        break;\n      case \"currentDate\":\n        this.setAria(\"id\", void 0, this._view._getCellByDate(previousValue));\n        this._updateCurrentDate(value);\n        break;\n      case \"zoomLevel\":\n        this.$element().removeClass(CALENDAR_VIEW_CLASS + \"-\" + previousValue);\n        this._correctZoomLevel();\n        this._refreshViews();\n        this._renderNavigator();\n        this._updateAriaId();\n        break;\n      case \"minZoomLevel\":\n      case \"maxZoomLevel\":\n        this._correctZoomLevel();\n        this._updateButtonsVisibility();\n        break;\n      case \"value\":\n        value = this._convertToDate(value);\n        previousValue = this._convertToDate(previousValue);\n        this._updateAriaSelected(value, previousValue);\n        this.option(\"currentDate\", typeUtils.isDefined(value) ? new Date(value) : new Date());\n        this._updateViewsValue(value);\n        this._setSubmitValue(value);\n        this.callBase(args);\n        break;\n      case \"disabled\":\n        this._view.option(\"disabled\", value);\n        this.callBase(args);\n        break;\n      case \"onCellClick\":\n        this._view.option(\"onCellClick\", value);\n        break;\n      case \"onContouredChanged\":\n        this._onContouredChanged = this._createActionByOption(\"onContouredChanged\");\n        break;\n      case \"disabledDates\":\n      case \"dateSerializationFormat\":\n      case \"cellTemplate\":\n      case \"showTodayButton\":\n        this._invalidate();\n        break;\n      case \"hasFocus\":\n        break;\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxCalendar\", Calendar);\nmodule.exports = Calendar;","map":null,"metadata":{},"sourceType":"script"}