{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/string.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _typeof = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar typeUtils = require(\"./type\");\nvar encodeHtml = function () {\n  var encodeRegExp = [new RegExp(\"&\", \"g\"), new RegExp('\"', \"g\"), new RegExp(\"'\", \"g\"), new RegExp(\"<\", \"g\"), new RegExp(\">\", \"g\")];\n  return function (str) {\n    return String(str).replace(encodeRegExp[0], \"&amp;\").replace(encodeRegExp[1], \"&quot;\").replace(encodeRegExp[2], \"&#39;\").replace(encodeRegExp[3], \"&lt;\").replace(encodeRegExp[4], \"&gt;\");\n  };\n}();\nvar splitQuad = function splitQuad(raw) {\n  switch (\"undefined\" === typeof raw ? \"undefined\" : _typeof(raw)) {\n    case \"string\":\n      return raw.split(/\\s+/, 4);\n    case \"object\":\n      return [raw.x || raw.h || raw.left, raw.y || raw.v || raw.top, raw.x || raw.h || raw.right, raw.y || raw.v || raw.bottom];\n    case \"number\":\n      return [raw];\n    default:\n      return raw;\n  }\n};\nvar quadToObject = function quadToObject(raw) {\n  var quad = splitQuad(raw),\n    left = parseInt(quad && quad[0], 10),\n    top = parseInt(quad && quad[1], 10),\n    right = parseInt(quad && quad[2], 10),\n    bottom = parseInt(quad && quad[3], 10);\n  if (!isFinite(left)) {\n    left = 0;\n  }\n  if (!isFinite(top)) {\n    top = left;\n  }\n  if (!isFinite(right)) {\n    right = left;\n  }\n  if (!isFinite(bottom)) {\n    bottom = top;\n  }\n  return {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n};\nvar stringFormat = function stringFormat() {\n  var replaceDollarCount,\n    reg,\n    value,\n    s = arguments[0],\n    values = [].slice.call(arguments).slice(1);\n  if (typeUtils.isFunction(s)) {\n    return s.apply(this, values);\n  }\n  for (var i = 0; i < values.length; i++) {\n    reg = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"gm\");\n    value = values[i];\n    if (\"string\" === typeUtils.type(value) && value.indexOf(\"$\") >= 0) {\n      replaceDollarCount = \"$\".replace(\"$\", \"$$\").length;\n      value = value.replace(\"$\", 1 === replaceDollarCount ? \"$$$$\" : \"$$\");\n    }\n    s = s.replace(reg, value);\n  }\n  return s;\n};\nvar replaceAll = function () {\n  var quote = function quote(str) {\n    return (str + \"\").replace(/([+*?.[^\\]$(){}><|=!:])/g, \"\\\\$1\");\n  };\n  return function (text, searchToken, replacementToken) {\n    return text.replace(new RegExp(\"(\" + quote(searchToken) + \")\", \"gi\"), replacementToken);\n  };\n}();\nvar isEmpty = function () {\n  var SPACE_REGEXP = /\\s/g;\n  return function (text) {\n    return !text || !text.replace(SPACE_REGEXP, \"\");\n  };\n}();\nexports.encodeHtml = encodeHtml;\nexports.quadToObject = quadToObject;\nexports.format = stringFormat;\nexports.replaceAll = replaceAll;\nexports.isEmpty = isEmpty;","map":null,"metadata":{},"sourceType":"script"}