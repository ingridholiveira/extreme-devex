{"ast":null,"code":"/**\r\n * DevExtreme (ui/context_menu/ui.context_menu.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (void 0 === getter) {\n        return;\n      }\n      return getter.call(receiver);\n    }\n  }\n};\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _guid = require(\"../../core/guid\");\nvar _guid2 = _interopRequireDefault(_guid);\nvar _component_registrator = require(\"../../core/component_registrator\");\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\nvar _common = require(\"../../core/utils/common\");\nvar _type = require(\"../../core/utils/type\");\nvar _dom = require(\"../../core/utils/dom\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _array = require(\"../../core/utils/array\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _window = require(\"../../core/utils/window\");\nvar _fx = require(\"../../animation/fx\");\nvar _fx2 = _interopRequireDefault(_fx);\nvar _position = require(\"../../animation/position\");\nvar _devices = require(\"../../core/devices\");\nvar _devices2 = _interopRequireDefault(_devices);\nvar _utils = require(\"../../events/utils\");\nvar _overlay = require(\"../overlay\");\nvar _overlay2 = _interopRequireDefault(_overlay);\nvar _ui = require(\"./ui.menu_base\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _deferred = require(\"../../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar DX_MENU_CLASS = \"dx-menu\";\nvar DX_MENU_ITEM_CLASS = DX_MENU_CLASS + \"-item\";\nvar DX_MENU_ITEM_EXPANDED_CLASS = DX_MENU_ITEM_CLASS + \"-expanded\";\nvar DX_MENU_PHONE_CLASS = \"dx-menu-phone-overlay\";\nvar DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + \"-items-container\";\nvar DX_MENU_ITEM_WRAPPER_CLASS = DX_MENU_ITEM_CLASS + \"-wrapper\";\nvar DX_SUBMENU_CLASS = \"dx-submenu\";\nvar DX_CONTEXT_MENU_CLASS = \"dx-context-menu\";\nvar DX_HAS_CONTEXT_MENU_CLASS = \"dx-has-context-menu\";\nvar DX_STATE_DISABLED_CLASS = \"dx-state-disabled\";\nvar DX_STATE_FOCUSED_CLASS = \"dx-state-focused\";\nvar DX_STATE_HOVER_CLASS = \"dx-state-hover\";\nvar FOCUS_UP = \"up\";\nvar FOCUS_DOWN = \"down\";\nvar FOCUS_LEFT = \"left\";\nvar FOCUS_RIGHT = \"right\";\nvar FOCUS_FIRST = \"first\";\nvar FOCUS_LAST = \"last\";\nvar ACTIONS = [\"onShowing\", \"onShown\", \"onSubmenuCreated\", \"onHiding\", \"onHidden\", \"onPositioning\", \"onLeftFirstItem\", \"onLeftLastItem\", \"onCloseRootSubmenu\", \"onExpandLastSubmenu\"];\nvar LOCAL_SUBMENU_DIRECTIONS = [FOCUS_UP, FOCUS_DOWN, FOCUS_FIRST, FOCUS_LAST];\nvar DEFAULT_SHOW_EVENT = \"dxcontextmenu\";\nvar ContextMenu = function (_MenuBase) {\n  _inherits(ContextMenu, _MenuBase);\n  function ContextMenu() {\n    _classCallCheck(this, ContextMenu);\n    return _possibleConstructorReturn(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).apply(this, arguments));\n  }\n  _createClass(ContextMenu, [{\n    key: \"getShowEvent\",\n    value: function value(showEventOption) {\n      var result = null;\n      if ((0, _type.isObject)(showEventOption)) {\n        if (null !== showEventOption.name) {\n          result = showEventOption.name || DEFAULT_SHOW_EVENT;\n        }\n      } else {\n        result = showEventOption;\n      }\n      return result;\n    }\n  }, {\n    key: \"getShowDelay\",\n    value: function value(showEventOption) {\n      return (0, _type.isObject)(showEventOption) && showEventOption.delay;\n    }\n  }, {\n    key: \"_getDefaultOptions\",\n    value: function value() {\n      return (0, _extend.extend)(_get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_getDefaultOptions\", this).call(this), {\n        showEvent: DEFAULT_SHOW_EVENT,\n        closeOnOutsideClick: true,\n        position: {\n          at: \"top left\",\n          my: \"top left\"\n        },\n        onShowing: null,\n        onShown: null,\n        onSubmenuCreated: null,\n        onHiding: null,\n        onHidden: null,\n        onPositioning: null,\n        submenuDirection: \"auto\",\n        visible: false,\n        target: void 0,\n        onLeftFirstItem: null,\n        onLeftLastItem: null,\n        onCloseRootSubmenu: null,\n        onExpandLastSubmenu: null\n      });\n    }\n  }, {\n    key: \"_defaultOptionsRules\",\n    value: function value() {\n      return _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_defaultOptionsRules\", this).call(this).concat([{\n        device: function device() {\n          return !(0, _window.hasWindow)();\n        },\n        options: {\n          animation: null\n        }\n      }]);\n    }\n  }, {\n    key: \"_initActions\",\n    value: function value() {\n      var _this2 = this;\n      this._actions = {};\n      (0, _iterator.each)(ACTIONS, function (index, action) {\n        _this2._actions[action] = _this2._createActionByOption(action) || _common.noop;\n      });\n    }\n  }, {\n    key: \"_setOptionsByReference\",\n    value: function value() {\n      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_setOptionsByReference\", this).call(this);\n      (0, _extend.extend)(this._optionsByReference, {\n        animation: true,\n        selectedItem: true\n      });\n    }\n  }, {\n    key: \"_focusInHandler\",\n    value: function value() {}\n  }, {\n    key: \"_itemContainer\",\n    value: function value() {\n      return this._overlay ? this._overlay.$content() : (0, _renderer2.default)();\n    }\n  }, {\n    key: \"_eventBindingTarget\",\n    value: function value() {\n      return this._itemContainer();\n    }\n  }, {\n    key: \"itemsContainer\",\n    value: function value() {\n      return this._overlay ? this._overlay.$content() : void 0;\n    }\n  }, {\n    key: \"_supportedKeys\",\n    value: function value() {\n      var _this3 = this;\n      var selectItem = function selectItem() {\n        var $item = (0, _renderer2.default)(_this3.option(\"focusedElement\"));\n        _this3.hide();\n        if (!$item.length || !_this3._isSelectionEnabled()) {\n          return;\n        }\n        _this3.selectItem($item[0]);\n      };\n      return (0, _extend.extend)(_get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_supportedKeys\", this).call(this), {\n        space: selectItem,\n        esc: this.hide\n      });\n    }\n  }, {\n    key: \"_getActiveItem\",\n    value: function value() {\n      var $availableItems = this._getAvailableItems();\n      var $focusedItem = $availableItems.filter(\".\" + DX_STATE_FOCUSED_CLASS);\n      var $hoveredItem = $availableItems.filter(\".\" + DX_STATE_HOVER_CLASS);\n      var $hoveredItemContainer = $hoveredItem.closest(\".\" + DX_MENU_ITEMS_CONTAINER_CLASS);\n      if ($hoveredItemContainer.find(\".\" + DX_MENU_ITEM_CLASS).index($focusedItem) >= 0) {\n        return $focusedItem;\n      }\n      if ($hoveredItem.length) {\n        return $hoveredItem;\n      }\n      return _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_getActiveItem\", this).call(this);\n    }\n  }, {\n    key: \"_moveFocus\",\n    value: function value(location) {\n      var $items = this._getItemsByLocation(location);\n      var $oldTarget = this._getActiveItem(true);\n      var $hoveredItem = this.itemsContainer().find(\".\" + DX_STATE_HOVER_CLASS);\n      var $focusedItem = (0, _renderer2.default)(this.option(\"focusedElement\"));\n      var $activeItemHighlighted = !!($focusedItem.length || $hoveredItem.length);\n      var $newTarget = void 0;\n      switch (location) {\n        case FOCUS_UP:\n          $newTarget = $activeItemHighlighted ? this._prevItem($items) : $oldTarget;\n          if ($oldTarget.is($items.first())) {\n            this._actions.onLeftFirstItem($oldTarget);\n          }\n          break;\n        case FOCUS_DOWN:\n          $newTarget = $activeItemHighlighted ? this._nextItem($items) : $oldTarget;\n          if ($oldTarget.is($items.last())) {\n            this._actions.onLeftLastItem($oldTarget);\n          }\n          break;\n        case FOCUS_RIGHT:\n          $newTarget = this.option(\"rtlEnabled\") ? this._hideSubmenuHandler() : this._expandSubmenuHandler($items, location);\n          break;\n        case FOCUS_LEFT:\n          $newTarget = this.option(\"rtlEnabled\") ? this._expandSubmenuHandler($items, location) : this._hideSubmenuHandler();\n          break;\n        case FOCUS_FIRST:\n          $newTarget = $items.first();\n          break;\n        case FOCUS_LAST:\n          $newTarget = $items.last();\n          break;\n        default:\n          return _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_moveFocus\", this).call(this, location);\n      }\n      if (0 !== $newTarget.length) {\n        this.option(\"focusedElement\", (0, _dom.getPublicElement)($newTarget));\n      }\n    }\n  }, {\n    key: \"_getItemsByLocation\",\n    value: function value(location) {\n      var $activeItem = this._getActiveItem(true);\n      var $items = void 0;\n      if ((0, _array.inArray)(location, LOCAL_SUBMENU_DIRECTIONS) >= 0) {\n        $items = $activeItem.closest(\".\" + DX_MENU_ITEMS_CONTAINER_CLASS).children().children();\n      }\n      $items = this._getAvailableItems($items);\n      return $items;\n    }\n  }, {\n    key: \"_getAriaTarget\",\n    value: function value() {\n      return this.$element();\n    }\n  }, {\n    key: \"_refreshActiveDescendant\",\n    value: function value() {\n      if (!this._overlay) {\n        return;\n      }\n      var id = this.getFocusedItemId();\n      this.setAria(\"activedescendant\", \"\", this._overlay.$content());\n      this.setAria(\"activedescendant\", id, this._overlay.$content());\n    }\n  }, {\n    key: \"_hideSubmenuHandler\",\n    value: function value() {\n      var $curItem = this._getActiveItem(true);\n      var $parentItem = $curItem.parents(\".\" + DX_MENU_ITEM_EXPANDED_CLASS).first();\n      if ($parentItem.length) {\n        this._hideSubmenusOnSameLevel($parentItem);\n        this._hideSubmenu($curItem.closest(\".\" + DX_SUBMENU_CLASS));\n        return $parentItem;\n      }\n      this._actions.onCloseRootSubmenu($curItem);\n      return $curItem;\n    }\n  }, {\n    key: \"_expandSubmenuHandler\",\n    value: function value($items, location) {\n      var $curItem = this._getActiveItem(true);\n      var itemData = this._getItemData($curItem);\n      var node = this._dataAdapter.getNodeByItem(itemData);\n      var isItemHasSubmenu = this._hasSubmenu(node);\n      var $submenu = $curItem.children(\".\" + DX_SUBMENU_CLASS);\n      if (isItemHasSubmenu && !$curItem.hasClass(DX_STATE_DISABLED_CLASS)) {\n        if (!$submenu.length || \"hidden\" === $submenu.css(\"visibility\")) {\n          this._showSubmenu($curItem);\n        }\n        return this._nextItem(this._getItemsByLocation(location));\n      }\n      this._actions.onExpandLastSubmenu($curItem);\n      return $curItem;\n    }\n  }, {\n    key: \"_clean\",\n    value: function value() {\n      if (this._overlay) {\n        this._overlay.$element().remove();\n        this._overlay = null;\n      }\n      this._detachShowContextMenuEvents(this._getTarget());\n      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function value() {\n      this.$element().addClass(DX_HAS_CONTEXT_MENU_CLASS);\n      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_initMarkup\", this).call(this);\n    }\n  }, {\n    key: \"_render\",\n    value: function value() {\n      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_render\", this).call(this);\n      this._renderVisibility(this.option(\"visible\"));\n      this._addWidgetClass();\n    }\n  }, {\n    key: \"_renderContentImpl\",\n    value: function value() {\n      this._detachShowContextMenuEvents(this._getTarget());\n      this._attachShowContextMenuEvents();\n    }\n  }, {\n    key: \"_attachKeyboardEvents\",\n    value: function value() {\n      !this._keyboardProcessor && this._focusTarget().length && _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_attachKeyboardEvents\", this).call(this);\n    }\n  }, {\n    key: \"_renderContextMenuOverlay\",\n    value: function value() {\n      if (this._overlay) {\n        return;\n      }\n      var overlayOptions = this._getOverlayOptions();\n      this._overlay = this._createComponent((0, _renderer2.default)(\"<div>\").appendTo(this._$element), _overlay2.default, overlayOptions);\n      var $overlayContent = this._overlay.$content();\n      $overlayContent.addClass(DX_CONTEXT_MENU_CLASS);\n      this._addCustomCssClass($overlayContent);\n      this._addPlatformDependentClass($overlayContent);\n      this._attachContextMenuEvent();\n    }\n  }, {\n    key: \"_itemContextMenuHandler\",\n    value: function value(e) {\n      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_itemContextMenuHandler\", this).call(this, e);\n      e.stopPropagation();\n    }\n  }, {\n    key: \"_addPlatformDependentClass\",\n    value: function value($element) {\n      if (_devices2.default.current().phone) {\n        $element.addClass(DX_MENU_PHONE_CLASS);\n      }\n    }\n  }, {\n    key: \"_detachShowContextMenuEvents\",\n    value: function value(target) {\n      var showEvent = this.getShowEvent(this.option(\"showEvent\"));\n      if (!showEvent) {\n        return;\n      }\n      var eventName = (0, _utils.addNamespace)(showEvent, this.NAME);\n      if (this._showContextMenuEventHandler) {\n        _events_engine2.default.off(_dom_adapter2.default.getDocument(), eventName, target, this._showContextMenuEventHandler);\n      } else {\n        _events_engine2.default.off((0, _renderer2.default)(target), eventName);\n      }\n    }\n  }, {\n    key: \"_attachShowContextMenuEvents\",\n    value: function value() {\n      var _this4 = this;\n      var target = this._getTarget();\n      var showEvent = this.getShowEvent(this.option(\"showEvent\"));\n      if (!showEvent) {\n        return;\n      }\n      var eventName = (0, _utils.addNamespace)(showEvent, this.NAME);\n      var contextMenuAction = this._createAction(function (e) {\n        var delay = _this4.getShowDelay(_this4.option(\"showEvent\"));\n        if (delay) {\n          setTimeout(function () {\n            return _this4._show(e.event);\n          }, delay);\n        } else {\n          _this4._show(e.event);\n        }\n      }, {\n        validatingTargetName: \"target\"\n      });\n      var handler = function handler(e) {\n        return contextMenuAction({\n          event: e,\n          target: (0, _renderer2.default)(e.currentTarget)\n        });\n      };\n      contextMenuAction = this._createAction(contextMenuAction);\n      if ((0, _type.isRenderer)(target) || target.nodeType || (0, _type.isWindow)(target)) {\n        this._showContextMenuEventHandler = void 0;\n        _events_engine2.default.on(target, eventName, handler);\n      } else {\n        this._showContextMenuEventHandler = handler;\n        _events_engine2.default.on(_dom_adapter2.default.getDocument(), eventName, target, this._showContextMenuEventHandler);\n      }\n    }\n  }, {\n    key: \"_hoverEndHandler\",\n    value: function value(e) {\n      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_hoverEndHandler\", this).call(this, e);\n      e.stopPropagation();\n    }\n  }, {\n    key: \"_renderDimensions\",\n    value: function value() {}\n  }, {\n    key: \"_renderContainer\",\n    value: function value($wrapper, submenuContainer) {\n      var $holder = submenuContainer || this._itemContainer();\n      $wrapper = (0, _renderer2.default)(\"<div>\");\n      $wrapper.appendTo($holder).addClass(DX_SUBMENU_CLASS).css(\"visibility\", submenuContainer ? \"hidden\" : \"visible\");\n      var $itemsContainer = _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_renderContainer\", this).call(this, $wrapper);\n      if (submenuContainer) {\n        return $itemsContainer;\n      }\n      if (this.option(\"width\")) {\n        return $itemsContainer.css(\"minWidth\", this.option(\"width\"));\n      }\n      if (this.option(\"height\")) {\n        return $itemsContainer.css(\"minHeight\", this.option(\"height\"));\n      }\n      return $itemsContainer;\n    }\n  }, {\n    key: \"_renderSubmenuItems\",\n    value: function value(node, $itemFrame) {\n      this._renderItems(this._getChildNodes(node), $itemFrame);\n      this._actions.onSubmenuCreated({\n        itemElement: (0, _dom.getPublicElement)($itemFrame),\n        itemData: node.internalFields.item,\n        submenuElement: (0, _dom.getPublicElement)($itemFrame.children(\".\" + DX_SUBMENU_CLASS))\n      });\n    }\n  }, {\n    key: \"_getOverlayOptions\",\n    value: function value() {\n      var position = this.option(\"position\");\n      var overlayOptions = {\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        animation: this.option(\"animation\"),\n        innerOverlay: true,\n        closeOnOutsideClick: this._closeOnOutsideClickHandler.bind(this),\n        propagateOutsideClick: true,\n        closeOnTargetScroll: true,\n        deferRendering: false,\n        position: {\n          at: position.at,\n          my: position.my,\n          of: this._getTarget(),\n          collision: \"flipfit\"\n        },\n        shading: false,\n        showTitle: false,\n        height: \"auto\",\n        width: \"auto\",\n        onShown: this._overlayShownActionHandler.bind(this),\n        onHiding: this._overlayHidingActionHandler.bind(this),\n        onHidden: this._overlayHiddenActionHandler.bind(this)\n      };\n      return overlayOptions;\n    }\n  }, {\n    key: \"_overlayShownActionHandler\",\n    value: function value(arg) {\n      this._actions.onShown(arg);\n    }\n  }, {\n    key: \"_overlayHidingActionHandler\",\n    value: function value(arg) {\n      this._actions.onHiding(arg);\n      if (!arg.cancel) {\n        this._hideAllShownSubmenus();\n        this._setOptionSilent(\"visible\", false);\n      }\n    }\n  }, {\n    key: \"_overlayHiddenActionHandler\",\n    value: function value(arg) {\n      this._actions.onHidden(arg);\n    }\n  }, {\n    key: \"_closeOnOutsideClickHandler\",\n    value: function value(e) {\n      var closeOnOutsideClick = this.option(\"closeOnOutsideClick\");\n      if ((0, _type.isFunction)(closeOnOutsideClick)) {\n        return closeOnOutsideClick(e);\n      }\n      if (!closeOnOutsideClick) {\n        return false;\n      }\n      if (_dom_adapter2.default.isDocument(e.target)) {\n        return true;\n      }\n      var $activeItemContainer = this._getActiveItemsContainer(e.target);\n      var $itemContainers = this._getItemsContainers();\n      var $clickedItem = this._searchActiveItem(e.target);\n      var $rootItem = this.$element().parents(\".\" + DX_MENU_ITEM_CLASS);\n      var isRootItemClicked = $clickedItem[0] === $rootItem[0] && $clickedItem.length && $rootItem.length;\n      var isInnerOverlayClicked = this._isIncludeOverlay($activeItemContainer, $itemContainers) && $clickedItem.length;\n      if (isInnerOverlayClicked || isRootItemClicked) {\n        if (\"onClick\" === this._getShowSubmenuMode()) {\n          this._hideAllShownChildSubmenus($clickedItem);\n        }\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"_getActiveItemsContainer\",\n    value: function value(target) {\n      return (0, _renderer2.default)(target).closest(\".\" + DX_MENU_ITEMS_CONTAINER_CLASS);\n    }\n  }, {\n    key: \"_getItemsContainers\",\n    value: function value() {\n      return this._overlay._$content.find(\".\" + DX_MENU_ITEMS_CONTAINER_CLASS);\n    }\n  }, {\n    key: \"_searchActiveItem\",\n    value: function value(target) {\n      return (0, _renderer2.default)(target).closest(\".\" + DX_MENU_ITEM_CLASS).eq(0);\n    }\n  }, {\n    key: \"_isIncludeOverlay\",\n    value: function value($activeOverlay, $allOverlays) {\n      var isSame = false;\n      (0, _iterator.each)($allOverlays, function (index, $overlay) {\n        if ($activeOverlay.is($overlay) && !isSame) {\n          isSame = true;\n        }\n      });\n      return isSame;\n    }\n  }, {\n    key: \"_hideAllShownChildSubmenus\",\n    value: function value($clickedItem) {\n      var _this5 = this;\n      var $submenuElements = $clickedItem.find(\".\" + DX_SUBMENU_CLASS);\n      var shownSubmenus = (0, _extend.extend)([], this._shownSubmenus);\n      if ($submenuElements.length > 0) {\n        (0, _iterator.each)(shownSubmenus, function (index, $submenu) {\n          var $context = _this5._searchActiveItem($submenu.context).parent();\n          if ($context.parent().is($clickedItem.parent().parent()) && !$context.is($clickedItem.parent())) {\n            _this5._hideSubmenu($submenu);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_showSubmenu\",\n    value: function value($item) {\n      var node = this._dataAdapter.getNodeByItem(this._getItemData($item));\n      this._hideSubmenusOnSameLevel($item);\n      if (!this._hasSubmenu(node)) {\n        return;\n      }\n      var $submenu = $item.children(\".\" + DX_SUBMENU_CLASS);\n      var isSubmenuRendered = $submenu.length;\n      _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_showSubmenu\", this).call(this, $item);\n      if (!isSubmenuRendered) {\n        this._renderSubmenuItems(node, $item);\n      }\n      if (!this._isSubmenuVisible($submenu)) {\n        this._drawSubmenu($item);\n      }\n    }\n  }, {\n    key: \"_hideSubmenusOnSameLevel\",\n    value: function value($item) {\n      var $expandedItems = $item.parent(\".\" + DX_MENU_ITEM_WRAPPER_CLASS).siblings().find(\".\" + DX_MENU_ITEM_EXPANDED_CLASS);\n      if ($expandedItems.length) {\n        $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS);\n        this._hideSubmenu($expandedItems.find(\".\" + DX_SUBMENU_CLASS));\n      }\n    }\n  }, {\n    key: \"_hideSubmenuGroup\",\n    value: function value($submenu) {\n      if (this._isSubmenuVisible($submenu)) {\n        this._hideSubmenuCore($submenu);\n      }\n    }\n  }, {\n    key: \"_isSubmenuVisible\",\n    value: function value($submenu) {\n      return \"visible\" === $submenu.css(\"visibility\");\n    }\n  }, {\n    key: \"_drawSubmenu\",\n    value: function value($itemElement) {\n      var animation = this.option(\"animation\") ? this.option(\"animation\").show : {};\n      var $submenu = $itemElement.children(\".\" + DX_SUBMENU_CLASS);\n      var submenuPosition = this._getSubmenuPosition($itemElement);\n      if (this._overlay && this._overlay.option(\"visible\")) {\n        if (!(0, _type.isDefined)(this._shownSubmenus)) {\n          this._shownSubmenus = [];\n        }\n        if ((0, _array.inArray)($submenu, this._shownSubmenus)) {\n          this._shownSubmenus.push($submenu);\n        }\n        if (animation) {\n          _fx2.default.stop($submenu);\n        }\n        (0, _position.setup)($submenu, submenuPosition);\n        if (animation) {\n          if ((0, _type.isPlainObject)(animation.to)) {\n            animation.to.position = submenuPosition;\n          }\n          this._animate($submenu, animation);\n        }\n        $submenu.css(\"visibility\", \"visible\");\n      }\n    }\n  }, {\n    key: \"_animate\",\n    value: function value($container, options) {\n      _fx2.default.animate($container, options);\n    }\n  }, {\n    key: \"_getSubmenuPosition\",\n    value: function value($rootItem) {\n      var submenuDirection = this.option(\"submenuDirection\").toLowerCase();\n      var $rootItemWrapper = $rootItem.parent(\".\" + DX_MENU_ITEM_WRAPPER_CLASS);\n      var position = {\n        collision: \"flip\",\n        of: $rootItemWrapper,\n        offset: {\n          h: 0,\n          v: -1\n        }\n      };\n      switch (submenuDirection) {\n        case \"left\":\n          position.at = \"left top\";\n          position.my = \"right top\";\n          break;\n        case \"right\":\n          position.at = \"right top\";\n          position.my = \"left top\";\n          break;\n        default:\n          if (this.option(\"rtlEnabled\")) {\n            position.at = \"left top\";\n            position.my = \"right top\";\n          } else {\n            position.at = \"right top\";\n            position.my = \"left top\";\n          }\n      }\n      return position;\n    }\n  }, {\n    key: \"_updateSubmenuVisibilityOnClick\",\n    value: function value(actionArgs) {\n      if (!actionArgs.args.length) {\n        return;\n      }\n      var itemData = actionArgs.args[0].itemData;\n      var node = this._dataAdapter.getNodeByItem(itemData);\n      if (!node) {\n        return;\n      }\n      var $itemElement = (0, _renderer2.default)(actionArgs.args[0].itemElement);\n      var $submenu = $itemElement.find(\".\" + DX_SUBMENU_CLASS);\n      var shouldRenderSubmenu = this._hasSubmenu(node) && !$submenu.length;\n      if (shouldRenderSubmenu) {\n        this._renderSubmenuItems(node, $itemElement);\n        $submenu = $itemElement.find(\".\" + DX_SUBMENU_CLASS);\n      }\n      if ($itemElement.context === $submenu.context && \"visible\" === $submenu.css(\"visibility\")) {\n        return;\n      }\n      var notCloseMenuOnItemClick = itemData && false === itemData.closeMenuOnClick;\n      if (!itemData || itemData.disabled || notCloseMenuOnItemClick) {\n        return;\n      }\n      this._updateSelectedItemOnClick(actionArgs);\n      if (0 === $submenu.length) {\n        var $prevSubmenu = (0, _renderer2.default)($itemElement.parents(\".\" + DX_SUBMENU_CLASS)[0]);\n        this._hideSubmenu($prevSubmenu);\n        if (!actionArgs.canceled && this._overlay && this._overlay.option(\"visible\")) {\n          this.option(\"visible\", false);\n        }\n      } else {\n        if (this._shownSubmenus && this._shownSubmenus.length > 0) {\n          if (this._shownSubmenus[0].is($submenu)) {\n            this._hideSubmenu($submenu);\n          }\n        }\n        this._showSubmenu($itemElement);\n      }\n    }\n  }, {\n    key: \"_hideSubmenu\",\n    value: function value($curSubmenu) {\n      var _this6 = this;\n      var shownSubmenus = (0, _extend.extend)([], this._shownSubmenus);\n      (0, _iterator.each)(shownSubmenus, function (index, $submenu) {\n        if ($curSubmenu.is($submenu) || (0, _dom.contains)($curSubmenu[0], $submenu[0])) {\n          $submenu.parent().removeClass(DX_MENU_ITEM_EXPANDED_CLASS);\n          _this6._hideSubmenuCore($submenu);\n        }\n      });\n    }\n  }, {\n    key: \"_hideSubmenuCore\",\n    value: function value($submenu) {\n      var index = (0, _array.inArray)($submenu, this._shownSubmenus);\n      var animation = this.option(\"animation\") ? this.option(\"animation\").hide : null;\n      if (index >= 0) {\n        this._shownSubmenus.splice(index, 1);\n      }\n      this._stopAnimate($submenu);\n      animation && this._animate($submenu, animation);\n      $submenu.css(\"visibility\", \"hidden\");\n    }\n  }, {\n    key: \"_stopAnimate\",\n    value: function value($container) {\n      _fx2.default.stop($container, true);\n    }\n  }, {\n    key: \"_hideAllShownSubmenus\",\n    value: function value() {\n      var _this7 = this;\n      var shownSubmenus = (0, _extend.extend)([], this._shownSubmenus);\n      var $expandedItems = this._overlay.$content().find(\".\" + DX_MENU_ITEM_EXPANDED_CLASS);\n      $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS);\n      (0, _iterator.each)(shownSubmenus, function (_, $submenu) {\n        _this7._hideSubmenu($submenu);\n      });\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function value(visible) {\n      if (visible) {\n        this._renderContentImpl();\n      }\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function value(args) {\n      if ((0, _array.inArray)(args.name, ACTIONS) > -1) {\n        this._initActions();\n        return;\n      }\n      switch (args.name) {\n        case \"visible\":\n          this._renderVisibility(args.value);\n          break;\n        case \"showEvent\":\n        case \"position\":\n        case \"submenuDirection\":\n          this._invalidate();\n          break;\n        case \"target\":\n          args.previousValue && this._detachShowContextMenuEvents(args.previousValue);\n          this._invalidate();\n          break;\n        case \"closeOnOutsideClick\":\n          break;\n        default:\n          _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }, {\n    key: \"_renderVisibility\",\n    value: function value(showing) {\n      return showing ? this._show() : this._hide();\n    }\n  }, {\n    key: \"_toggleVisibility\",\n    value: function value() {}\n  }, {\n    key: \"_show\",\n    value: function value(event) {\n      var args = {\n        jQEvent: event\n      };\n      var promise = new _deferred.Deferred().reject().promise();\n      this._actions.onShowing(args);\n      if (args.cancel) {\n        return promise;\n      }\n      var position = this._positionContextMenu(event);\n      if (position) {\n        if (!this._overlay) {\n          this._renderContextMenuOverlay();\n          this._overlay.$content().addClass(this._widgetClass());\n          this._renderFocusState();\n          this._attachHoverEvents();\n          this._attachClickEvent();\n          this._renderItems(this._dataAdapter.getRootNodes());\n        }\n        this._setOptionSilent(\"visible\", true);\n        this._overlay.option(\"position\", position);\n        promise = this._overlay.show();\n        event && event.stopPropagation();\n        var id = \"dx-\" + new _guid2.default();\n        this._overlay.$content().attr({\n          id: id,\n          role: \"menu\"\n        });\n        this.setAria(\"owns\", id);\n      }\n      return promise;\n    }\n  }, {\n    key: \"_getTarget\",\n    value: function value() {\n      return this.option(\"target\") || this.option(\"position\").of || (0, _renderer2.default)(_dom_adapter2.default.getDocument());\n    }\n  }, {\n    key: \"_getContextMenuPosition\",\n    value: function value() {\n      return (0, _extend.extend)({}, this.option(\"position\"), {\n        of: this._getTarget()\n      });\n    }\n  }, {\n    key: \"_positionContextMenu\",\n    value: function value(jQEvent) {\n      var position = this._getContextMenuPosition();\n      var isInitialPosition = this._isInitialOptionValue(\"position\");\n      var positioningAction = this._createActionByOption(\"onPositioning\", actionArgs);\n      if (jQEvent && jQEvent.preventDefault && isInitialPosition) {\n        position.of = jQEvent;\n      }\n      var actionArgs = {\n        position: position,\n        event: jQEvent\n      };\n      positioningAction(actionArgs);\n      if (actionArgs.cancel) {\n        position = null;\n      } else {\n        if (actionArgs.event) {\n          actionArgs.event.cancel = true;\n          jQEvent.preventDefault();\n        }\n      }\n      return position;\n    }\n  }, {\n    key: \"_refresh\",\n    value: function value() {\n      if (!(0, _window.hasWindow)()) {\n        _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_refresh\", this).call(this);\n      } else {\n        if (this._overlay) {\n          var lastPosition = this._overlay.option(\"position\");\n          _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_refresh\", this).call(this);\n          this._overlay && this._overlay.option(\"position\", lastPosition);\n        } else {\n          _get(ContextMenu.prototype.__proto__ || Object.getPrototypeOf(ContextMenu.prototype), \"_refresh\", this).call(this);\n        }\n      }\n    }\n  }, {\n    key: \"_hide\",\n    value: function value() {\n      var promise = void 0;\n      if (this._overlay) {\n        this._overlay.$content().removeAttr(\"id\");\n        promise = this._overlay.hide();\n        this._setOptionSilent(\"visible\", false);\n      }\n      this.setAria(\"owns\", void 0);\n      this.option(\"focusedElement\", null);\n      return promise || new _deferred.Deferred().reject().promise();\n    }\n  }, {\n    key: \"toggle\",\n    value: function value(showing) {\n      var visible = this.option(\"visible\");\n      showing = void 0 === showing ? !visible : showing;\n      return this._renderVisibility(showing);\n    }\n  }, {\n    key: \"show\",\n    value: function value() {\n      return this.toggle(true);\n    }\n  }, {\n    key: \"hide\",\n    value: function value() {\n      return this.toggle(false);\n    }\n  }]);\n  return ContextMenu;\n}(_ui2.default);\n(0, _component_registrator2.default)(\"dxContextMenu\", ContextMenu);\nmodule.exports = ContextMenu;","map":null,"metadata":{},"sourceType":"script"}