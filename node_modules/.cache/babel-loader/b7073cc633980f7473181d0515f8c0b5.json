{"ast":null,"code":"/**\r\n * DevExtreme (core/element_data.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar WeakMap = require(\"./polyfills/weak_map\");\nvar domAdapter = require(\"./dom_adapter\");\nvar eventsEngine = require(\"../events/core/events_engine\");\nvar MemorizedCallbacks = require(\"./memorized_callbacks\");\nvar dataMap = new WeakMap();\nvar strategy;\nvar strategyChanging = new MemorizedCallbacks();\nvar beforeCleanData = function beforeCleanData() {};\nvar afterCleanData = function afterCleanData() {};\nvar setDataStrategy = exports.setDataStrategy = function (value) {\n  strategyChanging.fire(value);\n  strategy = value;\n  var cleanData = strategy.cleanData;\n  strategy.cleanData = function (nodes) {\n    beforeCleanData(nodes);\n    var result = cleanData.call(this, nodes);\n    afterCleanData(nodes);\n    return result;\n  };\n};\nsetDataStrategy({\n  data: function data() {\n    var element = arguments[0];\n    var key = arguments[1];\n    var value = arguments[2];\n    if (!element) {\n      return;\n    }\n    var elementData = dataMap.get(element);\n    if (!elementData) {\n      elementData = {};\n      dataMap.set(element, elementData);\n    }\n    if (void 0 === key) {\n      return elementData;\n    }\n    if (2 === arguments.length) {\n      return elementData[key];\n    }\n    elementData[key] = value;\n    return value;\n  },\n  removeData: function removeData(element, key) {\n    if (!element) {\n      return;\n    }\n    if (void 0 === key) {\n      dataMap.delete(element);\n    } else {\n      var elementData = dataMap.get(element);\n      if (elementData) {\n        delete elementData[key];\n      }\n    }\n  },\n  cleanData: function cleanData(elements) {\n    for (var i = 0; i < elements.length; i++) {\n      eventsEngine.off(elements[i]);\n      dataMap.delete(elements[i]);\n    }\n  }\n});\nexports.setDataStrategy = setDataStrategy;\nexports.getDataStrategy = function () {\n  return strategy;\n};\nexports.data = function () {\n  return strategy.data.apply(this, arguments);\n};\nexports.strategyChanging = strategyChanging;\nexports.beforeCleanData = function (callback) {\n  beforeCleanData = callback;\n};\nexports.afterCleanData = function (callback) {\n  afterCleanData = callback;\n};\nexports.cleanData = function (nodes) {\n  return strategy.cleanData.call(this, nodes);\n};\nexports.removeData = function (element, key) {\n  return strategy.removeData.call(this, element, key);\n};\nexports.cleanDataRecursive = function (element, cleanSelf) {\n  if (!domAdapter.isElementNode(element)) {\n    return;\n  }\n  var childElements = element.getElementsByTagName(\"*\");\n  strategy.cleanData(childElements);\n  if (cleanSelf) {\n    strategy.cleanData([element]);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}