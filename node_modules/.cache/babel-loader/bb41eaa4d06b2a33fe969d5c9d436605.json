{"ast":null,"code":"/**\r\n * DevExtreme (core/devices.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  windowUtils = require(\"./utils/window\"),\n  navigator = windowUtils.getNavigator(),\n  window = windowUtils.getWindow(),\n  extend = require(\"./utils/extend\").extend,\n  isPlainObject = require(\"./utils/type\").isPlainObject,\n  each = require(\"./utils/iterator\").each,\n  Class = require(\"./class\"),\n  errors = require(\"./errors\"),\n  Callbacks = require(\"./utils/callbacks\"),\n  resizeCallbacks = require(\"./utils/resize_callbacks\"),\n  EventsMixin = require(\"./events_mixin\"),\n  SessionStorage = require(\"./utils/storage\").sessionStorage,\n  viewPort = require(\"./utils/view_port\"),\n  Config = require(\"./config\");\nvar KNOWN_UA_TABLE = {\n  iPhone: \"iPhone\",\n  iPhone5: \"iPhone\",\n  iPhone6: \"iPhone\",\n  iPhone6plus: \"iPhone\",\n  iPad: \"iPad\",\n  iPadMini: \"iPad Mini\",\n  androidPhone: \"Android Mobile\",\n  androidTablet: \"Android\",\n  msSurface: \"Windows ARM Tablet PC\",\n  desktop: \"desktop\"\n};\nvar DEFAULT_DEVICE = {\n  deviceType: \"desktop\",\n  platform: \"generic\",\n  version: [],\n  phone: false,\n  tablet: false,\n  android: false,\n  ios: false,\n  generic: true,\n  grade: \"A\",\n  mac: false\n};\nvar uaParsers = {\n  generic: function generic(userAgent) {\n    var isPhone = /windows phone/i.test(userAgent) || userAgent.match(/WPDesktop/),\n      isTablet = !isPhone && /Windows(.*)arm(.*)Tablet PC/i.test(userAgent),\n      isDesktop = !isPhone && !isTablet && /msapphost/i.test(userAgent),\n      isMac = /((intel|ppc) mac os x)/.test(userAgent.toLowerCase());\n    if (!(isPhone || isTablet || isDesktop || isMac)) {\n      return;\n    }\n    return {\n      deviceType: isPhone ? \"phone\" : isTablet ? \"tablet\" : \"desktop\",\n      platform: \"generic\",\n      version: [],\n      grade: \"A\",\n      mac: isMac\n    };\n  },\n  ios: function ios(userAgent) {\n    if (!/ip(hone|od|ad)/i.test(userAgent)) {\n      return;\n    }\n    var isPhone = /ip(hone|od)/i.test(userAgent),\n      matches = userAgent.match(/os (\\d+)_(\\d+)_?(\\d+)?/i),\n      version = matches ? [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3] || 0, 10)] : [],\n      isIPhone4 = 480 === window.screen.height,\n      grade = isIPhone4 ? \"B\" : \"A\";\n    return {\n      deviceType: isPhone ? \"phone\" : \"tablet\",\n      platform: \"ios\",\n      version: version,\n      grade: grade\n    };\n  },\n  android: function android(userAgent) {\n    if (!/android|htc_|silk/i.test(userAgent)) {\n      return;\n    }\n    var isPhone = /mobile/i.test(userAgent),\n      matches = userAgent.match(/android (\\d+)\\.?(\\d+)?\\.?(\\d+)?/i),\n      version = matches ? [parseInt(matches[1], 10), parseInt(matches[2] || 0, 10), parseInt(matches[3] || 0, 10)] : [],\n      worseThan4_4 = version.length > 1 && (version[0] < 4 || 4 === version[0] && version[1] < 4),\n      grade = worseThan4_4 ? \"B\" : \"A\";\n    return {\n      deviceType: isPhone ? \"phone\" : \"tablet\",\n      platform: \"android\",\n      version: version,\n      grade: grade\n    };\n  }\n};\nvar Devices = Class.inherit({\n  ctor: function ctor(options) {\n    this._window = options && options.window || window;\n    this._realDevice = this._getDevice();\n    this._currentDevice = void 0;\n    this._currentOrientation = void 0;\n    this.changed = Callbacks();\n    if (windowUtils.hasWindow()) {\n      this._recalculateOrientation();\n      resizeCallbacks.add(this._recalculateOrientation.bind(this));\n    }\n  },\n  current: function current(deviceOrName) {\n    if (deviceOrName) {\n      this._currentDevice = this._getDevice(deviceOrName);\n      this._forced = true;\n      this.changed.fire();\n      return;\n    }\n    if (!this._currentDevice) {\n      deviceOrName = void 0;\n      try {\n        deviceOrName = this._getDeviceOrNameFromWindowScope();\n      } catch (e) {\n        deviceOrName = this._getDeviceNameFromSessionStorage();\n      } finally {\n        if (!deviceOrName) {\n          deviceOrName = this._getDeviceNameFromSessionStorage();\n        }\n        if (deviceOrName) {\n          this._forced = true;\n        }\n      }\n      this._currentDevice = this._getDevice(deviceOrName);\n    }\n    return this._currentDevice;\n  },\n  real: function real() {\n    return extend({}, this._realDevice);\n  },\n  orientation: function orientation() {\n    return this._currentOrientation;\n  },\n  isForced: function isForced() {\n    return this._forced;\n  },\n  isRippleEmulator: function isRippleEmulator() {\n    return !!this._window.tinyHippos;\n  },\n  _getCssClasses: function _getCssClasses(device) {\n    var result = [];\n    var realDevice = this._realDevice;\n    device = device || this.current();\n    if (device.deviceType) {\n      result.push(\"dx-device-\" + device.deviceType);\n      if (\"desktop\" !== device.deviceType) {\n        result.push(\"dx-device-mobile\");\n      }\n    }\n    result.push(\"dx-device-\" + realDevice.platform);\n    if (realDevice.version && realDevice.version.length) {\n      result.push(\"dx-device-\" + realDevice.platform + \"-\" + realDevice.version[0]);\n    }\n    if (devices.isSimulator()) {\n      result.push(\"dx-simulator\");\n    }\n    if (Config().rtlEnabled) {\n      result.push(\"dx-rtl\");\n    }\n    return result;\n  },\n  attachCssClasses: function attachCssClasses(element, device) {\n    this._deviceClasses = this._getCssClasses(device).join(\" \");\n    $(element).addClass(this._deviceClasses);\n  },\n  detachCssClasses: function detachCssClasses(element) {\n    $(element).removeClass(this._deviceClasses);\n  },\n  isSimulator: function isSimulator() {\n    try {\n      return this._isSimulator || windowUtils.hasWindow() && this._window.top !== this._window.self && this._window.top[\"dx-force-device\"] || this.isRippleEmulator();\n    } catch (e) {\n      return false;\n    }\n  },\n  forceSimulator: function forceSimulator() {\n    this._isSimulator = true;\n  },\n  _getDevice: function _getDevice(deviceName) {\n    if (\"genericPhone\" === deviceName) {\n      deviceName = {\n        deviceType: \"phone\",\n        platform: \"generic\",\n        generic: true\n      };\n    }\n    if (isPlainObject(deviceName)) {\n      return this._fromConfig(deviceName);\n    } else {\n      var ua;\n      if (deviceName) {\n        ua = KNOWN_UA_TABLE[deviceName];\n        if (!ua) {\n          throw errors.Error(\"E0005\");\n        }\n      } else {\n        ua = navigator.userAgent;\n      }\n      return this._fromUA(ua);\n    }\n  },\n  _getDeviceOrNameFromWindowScope: function _getDeviceOrNameFromWindowScope() {\n    var result;\n    if (windowUtils.hasWindow() && (this._window.top[\"dx-force-device-object\"] || this._window.top[\"dx-force-device\"])) {\n      result = this._window.top[\"dx-force-device-object\"] || this._window.top[\"dx-force-device\"];\n    }\n    return result;\n  },\n  _getDeviceNameFromSessionStorage: function _getDeviceNameFromSessionStorage() {\n    var sessionStorage = SessionStorage();\n    if (!sessionStorage) {\n      return;\n    }\n    var deviceOrName = sessionStorage.getItem(\"dx-force-device\");\n    try {\n      return JSON.parse(deviceOrName);\n    } catch (ex) {\n      return deviceOrName;\n    }\n  },\n  _fromConfig: function _fromConfig(config) {\n    var result = extend({}, DEFAULT_DEVICE, this._currentDevice, config),\n      shortcuts = {\n        phone: \"phone\" === result.deviceType,\n        tablet: \"tablet\" === result.deviceType,\n        android: \"android\" === result.platform,\n        ios: \"ios\" === result.platform,\n        generic: \"generic\" === result.platform\n      };\n    return extend(result, shortcuts);\n  },\n  _fromUA: function _fromUA(ua) {\n    var config;\n    each(uaParsers, function (platform, parser) {\n      config = parser(ua);\n      return !config;\n    });\n    if (config) {\n      return this._fromConfig(config);\n    }\n    return DEFAULT_DEVICE;\n  },\n  _changeOrientation: function _changeOrientation() {\n    var $window = $(this._window),\n      orientation = $window.height() > $window.width() ? \"portrait\" : \"landscape\";\n    if (this._currentOrientation === orientation) {\n      return;\n    }\n    this._currentOrientation = orientation;\n    this.fireEvent(\"orientationChanged\", [{\n      orientation: orientation\n    }]);\n  },\n  _recalculateOrientation: function _recalculateOrientation() {\n    var windowWidth = $(this._window).width();\n    if (this._currentWidth === windowWidth) {\n      return;\n    }\n    this._currentWidth = windowWidth;\n    this._changeOrientation();\n  }\n}).include(EventsMixin);\nvar devices = new Devices();\nviewPort.changeCallback.add(function (viewPort, prevViewport) {\n  devices.detachCssClasses(prevViewport);\n  devices.attachCssClasses(viewPort);\n});\nmodule.exports = devices;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}