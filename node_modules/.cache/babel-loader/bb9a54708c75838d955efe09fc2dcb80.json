{"ast":null,"code":"/**\r\n * DevExtreme (ui/popup.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  window = require(\"../core/utils/window\").getWindow(),\n  translator = require(\"../animation/translator\"),\n  camelize = require(\"../core/utils/inflector\").camelize,\n  noop = require(\"../core/utils/common\").noop,\n  getPublicElement = require(\"../core/utils/dom\").getPublicElement,\n  each = require(\"../core/utils/iterator\").each,\n  isDefined = require(\"../core/utils/type\").isDefined,\n  inArray = require(\"../core/utils/array\").inArray,\n  extend = require(\"../core/utils/extend\").extend,\n  browser = require(\"../core/utils/browser\"),\n  compareVersions = require(\"../core/utils/version\").compare,\n  messageLocalization = require(\"../localization/message\"),\n  devices = require(\"../core/devices\"),\n  registerComponent = require(\"../core/component_registrator\"),\n  Button = require(\"./button\"),\n  themes = require(\"./themes\"),\n  Overlay = require(\"./overlay\"),\n  EmptyTemplate = require(\"../core/templates/empty_template\").EmptyTemplate,\n  domUtils = require(\"../core/utils/dom\"),\n  sizeUtils = require(\"../core/utils/size\"),\n  windowUtils = require(\"../core/utils/window\");\nrequire(\"./toolbar/ui.toolbar.base\");\nvar POPUP_CLASS = \"dx-popup\",\n  POPUP_WRAPPER_CLASS = \"dx-popup-wrapper\",\n  POPUP_FULL_SCREEN_CLASS = \"dx-popup-fullscreen\",\n  POPUP_FULL_SCREEN_WIDTH_CLASS = \"dx-popup-fullscreen-width\",\n  POPUP_NORMAL_CLASS = \"dx-popup-normal\",\n  POPUP_CONTENT_CLASS = \"dx-popup-content\",\n  POPUP_DRAGGABLE_CLASS = \"dx-popup-draggable\",\n  POPUP_TITLE_CLASS = \"dx-popup-title\",\n  POPUP_TITLE_CLOSEBUTTON_CLASS = \"dx-closebutton\",\n  POPUP_BOTTOM_CLASS = \"dx-popup-bottom\",\n  TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\",\n  POPUP_CONTENT_FLEX_HEIGHT_CLASS = \"dx-popup-flex-height\",\n  POPUP_CONTENT_INHERIT_HEIGHT_CLASS = \"dx-popup-inherit-height\",\n  ALLOWED_TOOLBAR_ITEM_ALIASES = [\"cancel\", \"clear\", \"done\"],\n  BUTTON_DEFAULT_TYPE = \"default\",\n  BUTTON_NORMAL_TYPE = \"normal\",\n  BUTTON_TEXT_MODE = \"text\",\n  BUTTON_CONTAINED_MODE = \"contained\";\nvar IS_IE11 = browser.msie && 11 === parseInt(browser.version);\nvar IS_OLD_SAFARI = browser.safari && compareVersions(browser.version, [11]) < 0;\nvar HEIGHT_STRATEGIES = {\n  \"static\": \"\",\n  inherit: POPUP_CONTENT_INHERIT_HEIGHT_CLASS,\n  flex: POPUP_CONTENT_FLEX_HEIGHT_CLASS\n};\nvar getButtonPlace = function getButtonPlace(name) {\n  var device = devices.current(),\n    platform = device.platform,\n    toolbar = \"bottom\",\n    location = \"before\";\n  if (\"ios\" === platform) {\n    switch (name) {\n      case \"cancel\":\n        toolbar = \"top\";\n        break;\n      case \"clear\":\n        toolbar = \"top\";\n        location = \"after\";\n        break;\n      case \"done\":\n        location = \"after\";\n    }\n  } else {\n    if (\"android\" === platform && device.version && parseInt(device.version[0]) > 4) {\n      switch (name) {\n        case \"cancel\":\n          location = \"after\";\n          break;\n        case \"done\":\n          location = \"after\";\n      }\n    } else {\n      if (\"android\" === platform) {\n        location = \"center\";\n      }\n    }\n  }\n  return {\n    toolbar: toolbar,\n    location: location\n  };\n};\nvar Popup = Overlay.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      fullScreen: false,\n      title: \"\",\n      showTitle: true,\n      titleTemplate: \"title\",\n      onTitleRendered: null,\n      dragEnabled: false,\n      toolbarItems: [],\n      showCloseButton: false,\n      bottomTemplate: \"bottom\",\n      useDefaultToolbarButtons: false,\n      useFlatToolbarButtons: false,\n      autoResizeEnabled: true\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    var themeName = themes.current();\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        animation: this._iosAnimation\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        animation: this._androidAnimation\n      }\n    }, {\n      device: {\n        platform: \"generic\"\n      },\n      options: {\n        showCloseButton: true\n      }\n    }, {\n      device: function device(_device) {\n        return \"desktop\" === devices.real().deviceType && \"generic\" === _device.platform;\n      },\n      options: {\n        dragEnabled: true\n      }\n    }, {\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }, {\n      device: function device() {\n        return themes.isMaterial(themeName);\n      },\n      options: {\n        useDefaultToolbarButtons: true,\n        useFlatToolbarButtons: true\n      }\n    }]);\n  },\n  _iosAnimation: {\n    show: {\n      type: \"slide\",\n      duration: 400,\n      from: {\n        position: {\n          my: \"top\",\n          at: \"bottom\"\n        }\n      },\n      to: {\n        position: {\n          my: \"center\",\n          at: \"center\"\n        }\n      }\n    },\n    hide: {\n      type: \"slide\",\n      duration: 400,\n      from: {\n        opacity: 1,\n        position: {\n          my: \"center\",\n          at: \"center\"\n        }\n      },\n      to: {\n        opacity: 1,\n        position: {\n          my: \"top\",\n          at: \"bottom\"\n        }\n      }\n    }\n  },\n  _androidAnimation: function _androidAnimation() {\n    var fullScreenConfig = {\n        show: {\n          type: \"slide\",\n          duration: 300,\n          from: {\n            top: \"30%\",\n            opacity: 0\n          },\n          to: {\n            top: 0,\n            opacity: 1\n          }\n        },\n        hide: {\n          type: \"slide\",\n          duration: 300,\n          from: {\n            top: 0,\n            opacity: 1\n          },\n          to: {\n            top: \"30%\",\n            opacity: 0\n          }\n        }\n      },\n      defaultConfig = {\n        show: {\n          type: \"fade\",\n          duration: 400,\n          from: 0,\n          to: 1\n        },\n        hide: {\n          type: \"fade\",\n          duration: 400,\n          from: 1,\n          to: 0\n        }\n      };\n    return this.option(\"fullScreen\") ? fullScreenConfig : defaultConfig;\n  },\n  _init: function _init() {\n    this.callBase();\n    this.$element().addClass(POPUP_CLASS);\n    this._wrapper().addClass(POPUP_WRAPPER_CLASS);\n    this._$popupContent = this._$content.wrapInner($(\"<div>\").addClass(POPUP_CONTENT_CLASS)).children().eq(0);\n  },\n  _render: function _render() {\n    var isFullscreen = this.option(\"fullScreen\");\n    this._toggleFullScreenClass(isFullscreen);\n    this.callBase();\n  },\n  _toggleFullScreenClass: function _toggleFullScreenClass(value) {\n    this._$content.toggleClass(POPUP_FULL_SCREEN_CLASS, value).toggleClass(POPUP_NORMAL_CLASS, !value);\n  },\n  _initTemplates: function _initTemplates() {\n    this.callBase();\n    this._defaultTemplates.title = new EmptyTemplate();\n    this._defaultTemplates.bottom = new EmptyTemplate();\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this._renderTitle();\n    this.callBase();\n    this._renderBottom();\n  },\n  _renderTitle: function _renderTitle() {\n    var items = this._getToolbarItems(\"top\"),\n      titleText = this.option(\"title\"),\n      showTitle = this.option(\"showTitle\");\n    if (showTitle && !!titleText) {\n      items.unshift({\n        location: devices.current().ios ? \"center\" : \"before\",\n        text: titleText\n      });\n    }\n    if (showTitle || items.length > 0) {\n      this._$title && this._$title.remove();\n      var $title = $(\"<div>\").addClass(POPUP_TITLE_CLASS).insertBefore(this.$content());\n      this._$title = this._renderTemplateByType(\"titleTemplate\", items, $title).addClass(POPUP_TITLE_CLASS);\n      this._renderDrag();\n      this._executeTitleRenderAction(this._$title);\n    } else {\n      if (this._$title) {\n        this._$title.detach();\n      }\n    }\n  },\n  _renderTemplateByType: function _renderTemplateByType(optionName, data, $container, additionalToolbarOptions) {\n    var template = this._getTemplateByOption(optionName),\n      toolbarTemplate = template instanceof EmptyTemplate;\n    if (toolbarTemplate) {\n      var toolbarOptions = extend(additionalToolbarOptions, {\n        items: data,\n        rtlEnabled: this.option(\"rtlEnabled\"),\n        useDefaultButtons: this.option(\"useDefaultToolbarButtons\"),\n        useFlatButtons: this.option(\"useFlatToolbarButtons\")\n      });\n      this._getTemplate(\"dx-polymorph-widget\").render({\n        container: $container,\n        model: {\n          widget: \"dxToolbarBase\",\n          options: toolbarOptions\n        }\n      });\n      var $toolbar = $container.children(\"div\");\n      $container.replaceWith($toolbar);\n      return $toolbar;\n    } else {\n      var $result = $(template.render({\n        container: getPublicElement($container)\n      }));\n      if ($result.hasClass(TEMPLATE_WRAPPER_CLASS)) {\n        $container.replaceWith($result);\n        $container = $result;\n      }\n      return $container;\n    }\n  },\n  _executeTitleRenderAction: function _executeTitleRenderAction($titleElement) {\n    this._getTitleRenderAction()({\n      titleElement: getPublicElement($titleElement)\n    });\n  },\n  _getTitleRenderAction: function _getTitleRenderAction() {\n    return this._titleRenderAction || this._createTitleRenderAction();\n  },\n  _createTitleRenderAction: function _createTitleRenderAction() {\n    return this._titleRenderAction = this._createActionByOption(\"onTitleRendered\", {\n      element: this.element(),\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _getCloseButton: function _getCloseButton() {\n    return {\n      toolbar: \"top\",\n      location: \"after\",\n      template: this._getCloseButtonRenderer()\n    };\n  },\n  _getCloseButtonRenderer: function _getCloseButtonRenderer() {\n    return function (_, __, container) {\n      var $button = $(\"<div>\").addClass(POPUP_TITLE_CLOSEBUTTON_CLASS);\n      this._createComponent($button, Button, {\n        icon: \"close\",\n        onClick: this._createToolbarItemAction(void 0),\n        integrationOptions: {}\n      });\n      $(container).append($button);\n    }.bind(this);\n  },\n  _getToolbarItems: function _getToolbarItems(toolbar) {\n    var toolbarItems = this.option(\"toolbarItems\");\n    var toolbarsItems = [];\n    this._toolbarItemClasses = [];\n    var currentPlatform = devices.current().platform,\n      index = 0;\n    each(toolbarItems, function (_, data) {\n      var isShortcut = isDefined(data.shortcut),\n        item = isShortcut ? getButtonPlace(data.shortcut) : data;\n      if (isShortcut && \"ios\" === currentPlatform && index < 2) {\n        item.toolbar = \"top\";\n        index++;\n      }\n      item.toolbar = data.toolbar || item.toolbar || \"top\";\n      if (item && item.toolbar === toolbar) {\n        if (isShortcut) {\n          extend(item, {\n            location: data.location\n          }, this._getToolbarItemByAlias(data));\n        }\n        var isLTROrder = \"generic\" === currentPlatform;\n        if (\"done\" === data.shortcut && isLTROrder || \"cancel\" === data.shortcut && !isLTROrder) {\n          toolbarsItems.unshift(item);\n        } else {\n          toolbarsItems.push(item);\n        }\n      }\n    }.bind(this));\n    if (\"top\" === toolbar && this.option(\"showCloseButton\") && this.option(\"showTitle\")) {\n      toolbarsItems.push(this._getCloseButton());\n    }\n    return toolbarsItems;\n  },\n  _getLocalizationKey: function _getLocalizationKey(itemType) {\n    return \"done\" === itemType.toLowerCase() ? \"OK\" : camelize(itemType, true);\n  },\n  _getToolbarItemByAlias: function _getToolbarItemByAlias(data) {\n    var that = this,\n      itemType = data.shortcut;\n    if (inArray(itemType, ALLOWED_TOOLBAR_ITEM_ALIASES) < 0) {\n      return false;\n    }\n    var itemConfig = extend({\n      text: messageLocalization.format(this._getLocalizationKey(itemType)),\n      onClick: this._createToolbarItemAction(data.onClick),\n      integrationOptions: {},\n      type: that.option(\"useDefaultToolbarButtons\") ? BUTTON_DEFAULT_TYPE : BUTTON_NORMAL_TYPE,\n      stylingMode: that.option(\"useFlatToolbarButtons\") ? BUTTON_TEXT_MODE : BUTTON_CONTAINED_MODE\n    }, data.options || {});\n    var itemClass = POPUP_CLASS + \"-\" + itemType;\n    this._toolbarItemClasses.push(itemClass);\n    return {\n      template: function template(_, __, container) {\n        var $toolbarItem = $(\"<div>\").addClass(itemClass).appendTo(container);\n        that._createComponent($toolbarItem, Button, itemConfig);\n      }\n    };\n  },\n  _createToolbarItemAction: function _createToolbarItemAction(clickAction) {\n    return this._createAction(clickAction, {\n      afterExecute: function afterExecute(e) {\n        e.component.hide();\n      }\n    });\n  },\n  _renderBottom: function _renderBottom() {\n    var items = this._getToolbarItems(\"bottom\");\n    if (items.length) {\n      this._$bottom && this._$bottom.remove();\n      var $bottom = $(\"<div>\").addClass(POPUP_BOTTOM_CLASS).insertAfter(this.$content());\n      this._$bottom = this._renderTemplateByType(\"bottomTemplate\", items, $bottom, {\n        compactMode: true\n      }).addClass(POPUP_BOTTOM_CLASS);\n      this._toggleClasses();\n    } else {\n      this._$bottom && this._$bottom.detach();\n    }\n  },\n  _toggleClasses: function _toggleClasses() {\n    var aliases = ALLOWED_TOOLBAR_ITEM_ALIASES;\n    each(aliases, function (_, alias) {\n      var className = POPUP_CLASS + \"-\" + alias;\n      if (inArray(className, this._toolbarItemClasses) >= 0) {\n        this._wrapper().addClass(className + \"-visible\");\n        this._$bottom.addClass(className);\n      } else {\n        this._wrapper().removeClass(className + \"-visible\");\n        this._$bottom.removeClass(className);\n      }\n    }.bind(this));\n  },\n  _getDragTarget: function _getDragTarget() {\n    return this.topToolbar();\n  },\n  _renderGeometryImpl: function _renderGeometryImpl(isDimensionChanged) {\n    if (!isDimensionChanged) {\n      this._resetContentHeight();\n    }\n    this.callBase.apply(this, arguments);\n    this._setContentHeight();\n  },\n  _resetContentHeight: function _resetContentHeight() {\n    this._$popupContent.css({\n      height: \"auto\"\n    });\n  },\n  _renderDrag: function _renderDrag() {\n    this.callBase();\n    this._$content.toggleClass(POPUP_DRAGGABLE_CLASS, this.option(\"dragEnabled\"));\n  },\n  _renderResize: function _renderResize() {\n    this.callBase();\n    this._resizable.option(\"onResize\", function () {\n      this._setContentHeight();\n      this._actions.onResize(arguments);\n    }.bind(this));\n  },\n  _setContentHeight: function _setContentHeight() {\n    (this.option(\"forceApplyBindings\") || noop)();\n    var overlayContent = this.overlayContent().get(0),\n      currentHeightStrategyClass = this._chooseHeightStrategy(overlayContent);\n    this.$content().css(this._getHeightCssStyles(currentHeightStrategyClass, overlayContent));\n    this._setHeightClasses(this.overlayContent(), currentHeightStrategyClass);\n  },\n  _heightStrategyChangeOffset: function _heightStrategyChangeOffset(currentHeightStrategyClass, popupVerticalPaddings) {\n    return currentHeightStrategyClass === HEIGHT_STRATEGIES.flex ? -popupVerticalPaddings : 0;\n  },\n  _chooseHeightStrategy: function _chooseHeightStrategy(overlayContent) {\n    var isAutoWidth = \"auto\" === overlayContent.style.width || \"\" === overlayContent.style.width,\n      currentHeightStrategyClass = HEIGHT_STRATEGIES.static;\n    if (this._isAutoHeight() && this.option(\"autoResizeEnabled\")) {\n      if (isAutoWidth || IS_OLD_SAFARI) {\n        if (!IS_IE11) {\n          currentHeightStrategyClass = HEIGHT_STRATEGIES.inherit;\n        }\n      } else {\n        currentHeightStrategyClass = HEIGHT_STRATEGIES.flex;\n      }\n    }\n    return currentHeightStrategyClass;\n  },\n  _getHeightCssStyles: function _getHeightCssStyles(currentHeightStrategyClass, overlayContent) {\n    var cssStyles = {},\n      contentMaxHeight = this._getOptionValue(\"maxHeight\", overlayContent),\n      contentMinHeight = this._getOptionValue(\"minHeight\", overlayContent),\n      popupHeightParts = this._splitPopupHeight(),\n      toolbarsAndVerticalOffsetsHeight = popupHeightParts.header + popupHeightParts.footer + popupHeightParts.contentVerticalOffsets + popupHeightParts.popupVerticalOffsets + this._heightStrategyChangeOffset(currentHeightStrategyClass, popupHeightParts.popupVerticalPaddings);\n    if (currentHeightStrategyClass === HEIGHT_STRATEGIES.static) {\n      if (!this._isAutoHeight() || contentMaxHeight || contentMinHeight) {\n        var contentHeight = overlayContent.getBoundingClientRect().height - toolbarsAndVerticalOffsetsHeight;\n        cssStyles = {\n          height: Math.max(0, contentHeight),\n          minHeight: \"auto\",\n          maxHeight: \"auto\"\n        };\n      }\n    } else {\n      var container = $(this._getContainer()).get(0),\n        maxHeightValue = sizeUtils.addOffsetToMaxHeight(contentMaxHeight, -toolbarsAndVerticalOffsetsHeight, container),\n        minHeightValue = sizeUtils.addOffsetToMinHeight(contentMinHeight, -toolbarsAndVerticalOffsetsHeight, container);\n      cssStyles = {\n        height: \"auto\",\n        minHeight: minHeightValue,\n        maxHeight: maxHeightValue\n      };\n    }\n    return cssStyles;\n  },\n  _setHeightClasses: function _setHeightClasses($container, currentClass) {\n    var excessClasses = \"\";\n    for (var name in HEIGHT_STRATEGIES) {\n      if (HEIGHT_STRATEGIES[name] !== currentClass) {\n        excessClasses += \" \" + HEIGHT_STRATEGIES[name];\n      }\n    }\n    $container.removeClass(excessClasses).addClass(currentClass);\n  },\n  _isAutoHeight: function _isAutoHeight() {\n    return \"auto\" === this.overlayContent().get(0).style.height;\n  },\n  _splitPopupHeight: function _splitPopupHeight() {\n    var topToolbar = this.topToolbar(),\n      bottomToolbar = this.bottomToolbar();\n    return {\n      header: sizeUtils.getVisibleHeight(topToolbar && topToolbar.get(0)),\n      footer: sizeUtils.getVisibleHeight(bottomToolbar && bottomToolbar.get(0)),\n      contentVerticalOffsets: sizeUtils.getVerticalOffsets(this.overlayContent().get(0), true),\n      popupVerticalOffsets: sizeUtils.getVerticalOffsets(this.$content().get(0), true),\n      popupVerticalPaddings: sizeUtils.getVerticalOffsets(this.$content().get(0), false)\n    };\n  },\n  _useFixedPosition: function _useFixedPosition() {\n    return this.callBase() || this.option(\"fullScreen\");\n  },\n  _renderDimensions: function _renderDimensions() {\n    if (this.option(\"fullScreen\")) {\n      this._$content.css({\n        width: \"100%\",\n        height: \"100%\"\n      });\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n    if (windowUtils.hasWindow()) {\n      this._renderFullscreenWidthClass();\n    }\n  },\n  _renderFullscreenWidthClass: function _renderFullscreenWidthClass() {\n    this.overlayContent().toggleClass(POPUP_FULL_SCREEN_WIDTH_CLASS, this.overlayContent().outerWidth() === $(window).width());\n  },\n  refreshPosition: function refreshPosition() {\n    this._renderPosition();\n  },\n  _renderPosition: function _renderPosition() {\n    if (this.option(\"fullScreen\")) {\n      translator.move(this._$content, {\n        top: 0,\n        left: 0\n      });\n    } else {\n      (this.option(\"forceApplyBindings\") || noop)();\n      return this.callBase.apply(this, arguments);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"showTitle\":\n      case \"title\":\n      case \"titleTemplate\":\n        this._renderTitle();\n        this._renderGeometry();\n        break;\n      case \"bottomTemplate\":\n        this._renderBottom();\n        this._renderGeometry();\n        break;\n      case \"onTitleRendered\":\n        this._createTitleRenderAction(args.value);\n        break;\n      case \"toolbarItems\":\n      case \"useDefaultToolbarButtons\":\n      case \"useFlatToolbarButtons\":\n        var isPartialUpdate = args.fullName.search(\".options\") !== -1;\n        var isToolbarItemsChange = args.fullName.match(/^toolbarItems(\\[\\d+\\])?$/);\n        this._renderTitle();\n        this._renderBottom();\n        if (!isPartialUpdate && !isToolbarItemsChange) {\n          this._renderGeometry();\n        }\n        break;\n      case \"dragEnabled\":\n        this._renderDrag();\n        break;\n      case \"autoResizeEnabled\":\n        this._renderGeometry();\n        domUtils.triggerResizeEvent(this._$content);\n        break;\n      case \"fullScreen\":\n        this._toggleFullScreenClass(args.value);\n        this._toggleSafariScrolling(!args.value);\n        this._renderGeometry();\n        domUtils.triggerResizeEvent(this._$content);\n        break;\n      case \"showCloseButton\":\n        this._renderTitle();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  bottomToolbar: function bottomToolbar() {\n    return this._$bottom;\n  },\n  topToolbar: function topToolbar() {\n    return this._$title;\n  },\n  $content: function $content() {\n    return this._$popupContent;\n  },\n  content: function content() {\n    return getPublicElement(this._$popupContent);\n  },\n  overlayContent: function overlayContent() {\n    return this._$content;\n  }\n});\nregisterComponent(\"dxPopup\", Popup);\nmodule.exports = Popup;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}