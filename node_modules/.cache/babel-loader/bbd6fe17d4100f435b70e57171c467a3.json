{"ast":null,"code":"/**\r\n * DevExtreme (localization/message.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dependency_injector = require(\"../core/utils/dependency_injector\");\nvar _dependency_injector2 = _interopRequireDefault(_dependency_injector);\nvar _extend = require(\"../core/utils/extend\");\nvar _iterator = require(\"../core/utils/iterator\");\nvar _string = require(\"../core/utils/string\");\nvar _inflector = require(\"../core/utils/inflector\");\nvar _core = require(\"./core\");\nvar _core2 = _interopRequireDefault(_core);\nvar _default_messages = require(\"./default_messages\");\nvar _default_messages2 = _interopRequireDefault(_default_messages);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar baseDictionary = (0, _extend.extend)(true, {}, _default_messages2.default);\nvar getDataByLocale = function getDataByLocale(localeData, locale) {\n  return localeData[locale] || {};\n};\nvar newMessages = {};\nvar messageLocalization = (0, _dependency_injector2.default)({\n  engine: function engine() {\n    return \"base\";\n  },\n  _dictionary: baseDictionary,\n  load: function load(messages) {\n    (0, _extend.extend)(true, this._dictionary, messages);\n  },\n  _localizablePrefix: \"@\",\n  setup: function setup(localizablePrefix) {\n    this._localizablePrefix = localizablePrefix;\n  },\n  localizeString: function localizeString(text) {\n    var that = this;\n    var regex = new RegExp(\"(^|[^a-zA-Z_0-9\" + that._localizablePrefix + \"-]+)(\" + that._localizablePrefix + \"{1,2})([a-zA-Z_0-9-]+)\", \"g\");\n    var escapeString = that._localizablePrefix + that._localizablePrefix;\n    return text.replace(regex, function (str, prefix, escape, localizationKey) {\n      var defaultResult = that._localizablePrefix + localizationKey;\n      var result = void 0;\n      if (escape !== escapeString) {\n        result = that.format(localizationKey);\n      }\n      if (!result) {\n        newMessages[localizationKey] = (0, _inflector.humanize)(localizationKey);\n      }\n      return prefix + (result || defaultResult);\n    });\n  },\n  localizeNode: function localizeNode(node) {\n    var that = this;\n    (0, _renderer2.default)(node).each(function (index, nodeItem) {\n      if (!nodeItem.nodeType) {\n        return;\n      }\n      if (3 === nodeItem.nodeType) {\n        nodeItem.nodeValue = that.localizeString(nodeItem.nodeValue);\n      } else {\n        if (!(0, _renderer2.default)(nodeItem).is(\"iframe\")) {\n          (0, _iterator.each)(nodeItem.attributes || [], function (index, attr) {\n            if (\"string\" === typeof attr.value) {\n              var localizedValue = that.localizeString(attr.value);\n              if (attr.value !== localizedValue) {\n                attr.value = localizedValue;\n              }\n            }\n          });\n          (0, _renderer2.default)(nodeItem).contents().each(function (index, node) {\n            that.localizeNode(node);\n          });\n        }\n      }\n    });\n  },\n  getMessagesByLocales: function getMessagesByLocales() {\n    return this._dictionary;\n  },\n  getDictionary: function getDictionary(onlyNew) {\n    if (onlyNew) {\n      return newMessages;\n    }\n    return (0, _extend.extend)({}, newMessages, this.getMessagesByLocales()[_core2.default.locale()]);\n  },\n  getFormatter: function getFormatter(key) {\n    return this._getFormatterBase(key) || this._getFormatterBase(key, \"en\");\n  },\n  _getFormatterBase: function _getFormatterBase(key, locale) {\n    var _this = this;\n    var message = _core2.default.getValueByClosestLocale(function (locale) {\n      return getDataByLocale(_this._dictionary, locale)[key];\n    });\n    if (message) {\n      return function () {\n        var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);\n        args.unshift(message);\n        return _string.format.apply(this, args);\n      };\n    }\n  },\n  format: function format(key) {\n    var formatter = this.getFormatter(key);\n    var values = Array.prototype.slice.call(arguments, 1);\n    return formatter && formatter.apply(this, values) || \"\";\n  }\n});\nmodule.exports = messageLocalization;","map":null,"metadata":{},"sourceType":"script"}