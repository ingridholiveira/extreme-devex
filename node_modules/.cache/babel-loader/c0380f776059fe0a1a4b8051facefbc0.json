{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.columns_view.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _window = require(\"../../core/utils/window\");\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _element_data = require(\"../../core/element_data\");\nvar _element_data2 = _interopRequireDefault(_element_data);\nvar _click = require(\"../../events/click\");\nvar _click2 = _interopRequireDefault(_click);\nvar _double_click = require(\"../../events/double_click\");\nvar _double_click2 = _interopRequireDefault(_double_click);\nvar _browser = require(\"../../core/utils/browser\");\nvar _browser2 = _interopRequireDefault(_browser);\nvar _common = require(\"../../core/utils/common\");\nvar _style = require(\"../../core/utils/style\");\nvar _style2 = _interopRequireDefault(_style);\nvar _dom = require(\"../../core/utils/dom\");\nvar _type = require(\"../../core/utils/type\");\nvar _type2 = _interopRequireDefault(_type);\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _iterator2 = _interopRequireDefault(_iterator);\nvar _extend = require(\"../../core/utils/extend\");\nvar _position = require(\"../../core/utils/position\");\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core4 = require(\"./ui.grid_core.column_state_mixin\");\nvar _uiGrid_core5 = _interopRequireDefault(_uiGrid_core4);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar SCROLL_CONTAINER_CLASS = \"scroll-container\",\n  GROUP_SPACE_CLASS = \"group-space\",\n  CONTENT_CLASS = \"content\",\n  TABLE_CLASS = \"table\",\n  TABLE_FIXED_CLASS = \"table-fixed\",\n  CONTENT_FIXED_CLASS = \"content-fixed\",\n  ROW_CLASS = \"dx-row\",\n  GROUP_ROW_CLASS = \"dx-group-row\",\n  DETAIL_ROW_CLASS = \"dx-master-detail-row\",\n  FILTER_ROW_CLASS = \"filter-row\",\n  CELL_UPDATED_ANIMATION_CLASS = \"cell-updated-animation\",\n  HIDDEN_COLUMNS_WIDTH = \"0.0001px\",\n  CELL_HINT_VISIBLE = \"dxCellHintVisible\",\n  FORM_FIELD_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar appendElementTemplate = {\n  render: function render(options) {\n    options.container.append(options.content);\n  }\n};\nvar subscribeToEvent = function subscribeToEvent(that, $table, event) {\n  var touchTarget, touchCurrentTarget, timeoutId;\n  function clearTouchTargets(timeout) {\n    return setTimeout(function () {\n      touchTarget = touchCurrentTarget = null;\n    }, timeout);\n  }\n  _events_engine2.default.on($table, \"touchstart touchend\", \".dx-row\", function (e) {\n    clearTimeout(timeoutId);\n    if (\"touchstart\" === e.type) {\n      touchTarget = e.target;\n      touchCurrentTarget = e.currentTarget;\n      timeoutId = clearTouchTargets(1e3);\n    } else {\n      timeoutId = clearTouchTargets();\n    }\n  });\n  _events_engine2.default.on($table, event.name, \".dx-row\", {\n    useNative: that._isNativeClick()\n  }, that.createAction(function (e) {\n    var dxEvent = e.event;\n    if (touchTarget) {\n      dxEvent.target = touchTarget;\n      dxEvent.currentTarget = touchCurrentTarget;\n    }\n    if (!(0, _renderer2.default)(dxEvent.target).closest(\"a\").length) {\n      e.rowIndex = that.getRowIndex(dxEvent.currentTarget);\n      if (e.rowIndex >= 0) {\n        e.rowElement = (0, _dom.getPublicElement)((0, _renderer2.default)(dxEvent.currentTarget));\n        e.columns = that.getColumns();\n        if (\"dxclick\" === event.name) {\n          that._rowClick(e);\n        } else {\n          that._rowDblClick(e);\n        }\n      }\n    }\n  }));\n};\nvar subscribeToRowClick = function subscribeToRowClick(that, $table) {\n  subscribeToEvent(that, $table, _click2.default);\n};\nvar subscribeToRowDblClick = function subscribeToRowDblClick(that, $table) {\n  subscribeToEvent(that, $table, _double_click2.default);\n};\nvar getWidthStyle = function getWidthStyle(width) {\n  if (\"auto\" === width) {\n    return \"\";\n  }\n  return _type2.default.isNumeric(width) ? width + \"px\" : width;\n};\nvar setCellWidth = function setCellWidth(cell, column, width) {\n  cell.style.width = cell.style.maxWidth = \"auto\" === column.width ? \"\" : width;\n};\nvar copyAttributes = function copyAttributes(element, newElement) {\n  if (!element || !newElement) {\n    return;\n  }\n  var name,\n    i,\n    oldAttributes = element.attributes,\n    newAttributes = newElement.attributes;\n  for (i = 0; i < oldAttributes.length; i++) {\n    name = oldAttributes[i].nodeName;\n    if (!newElement.hasAttribute(name)) {\n      element.removeAttribute(name);\n    }\n  }\n  for (i = 0; i < newAttributes.length; i++) {\n    element.setAttribute(newAttributes[i].nodeName, newAttributes[i].nodeValue);\n  }\n};\nexports.ColumnsView = _uiGrid_core2.default.View.inherit(_uiGrid_core5.default).inherit({\n  _createScrollableOptions: function _createScrollableOptions() {\n    var that = this,\n      scrollingOptions = that.option(\"scrolling\"),\n      useNativeScrolling = that.option(\"scrolling.useNative\");\n    var options = (0, _extend.extend)({\n      pushBackValue: 0\n    }, scrollingOptions, {\n      direction: \"both\",\n      bounceEnabled: false,\n      useKeyboard: false\n    });\n    if (void 0 === useNativeScrolling) {\n      useNativeScrolling = true;\n    }\n    if (\"auto\" === useNativeScrolling) {\n      delete options.useNative;\n      delete options.useSimulatedScrollbar;\n    } else {\n      options.useNative = !!useNativeScrolling;\n      options.useSimulatedScrollbar = !useNativeScrolling;\n    }\n    return options;\n  },\n  _updateCell: function _updateCell($cell, parameters) {\n    if (parameters.rowType) {\n      this._cellPrepared($cell, parameters);\n    }\n  },\n  _createCell: function _createCell(options) {\n    var column = options.column,\n      alignment = column.alignment || (0, _position.getDefaultAlignment)(this.option(\"rtlEnabled\"));\n    var cell = _dom_adapter2.default.createElement(\"td\");\n    cell.style.textAlign = alignment;\n    var $cell = (0, _renderer2.default)(cell);\n    if (\"data\" === options.rowType) {\n      column.headerId && this.setAria(\"describedby\", column.headerId, $cell);\n    }\n    if (!_type2.default.isDefined(column.groupIndex) && column.cssClass) {\n      $cell.addClass(column.cssClass);\n    }\n    if (\"expand\" === column.command) {\n      $cell.addClass(column.cssClass);\n      $cell.addClass(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n    }\n    if (column.colspan > 1) {\n      $cell.attr(\"colSpan\", column.colspan);\n    } else {\n      if (!column.isBand && \"auto\" !== column.visibleWidth && !this.option(\"legacyRendering\") && this.option(\"columnAutoWidth\")) {\n        if (column.width || column.minWidth) {\n          cell.style.minWidth = getWidthStyle(column.minWidth || column.width);\n        }\n        if (column.width) {\n          setCellWidth(cell, column, getWidthStyle(column.width));\n        }\n      }\n    }\n    return $cell;\n  },\n  _createRow: function _createRow(rowObject) {\n    var $element = (0, _renderer2.default)(\"<tr>\").addClass(ROW_CLASS);\n    this.setAria(\"role\", \"row\", $element);\n    return $element;\n  },\n  _createTable: function _createTable(columns, isAppend) {\n    var that = this,\n      $table = (0, _renderer2.default)(\"<table>\").addClass(that.addWidgetPrefix(TABLE_CLASS)).addClass(that.addWidgetPrefix(TABLE_FIXED_CLASS));\n    if (columns && !isAppend) {\n      $table.append(that._createColGroup(columns));\n      if (_browser2.default.safari) {\n        $table.append((0, _renderer2.default)(\"<thead>\").append(\"<tr>\"));\n      }\n      that.setAria(\"role\", \"presentation\", $table);\n    } else {\n      that.setAria(\"hidden\", true, $table);\n    }\n    this.setAria(\"role\", \"presentation\", (0, _renderer2.default)(\"<tbody>\").appendTo($table));\n    if (isAppend) {\n      return $table;\n    }\n    if (_browser2.default.mozilla) {\n      _events_engine2.default.on($table, \"mousedown\", \"td\", function (e) {\n        if (e.ctrlKey) {\n          e.preventDefault();\n        }\n      });\n    }\n    if (that.option(\"cellHintEnabled\")) {\n      _events_engine2.default.on($table, \"mousemove\", \".dx-row > td\", this.createAction(function (args) {\n        var difference,\n          e = args.event,\n          $element = (0, _renderer2.default)(e.target),\n          $cell = (0, _renderer2.default)(e.currentTarget),\n          $row = $cell.parent(),\n          isDataRow = $row.hasClass(\"dx-data-row\"),\n          isHeaderRow = $row.hasClass(\"dx-header-row\"),\n          isGroupRow = $row.hasClass(GROUP_ROW_CLASS),\n          isMasterDetailRow = $row.hasClass(DETAIL_ROW_CLASS),\n          isFilterRow = $row.hasClass(that.addWidgetPrefix(FILTER_ROW_CLASS)),\n          visibleColumns = that._columnsController.getVisibleColumns(),\n          rowOptions = $row.data(\"options\"),\n          columnIndex = $cell.index(),\n          cellOptions = rowOptions && rowOptions.cells && rowOptions.cells[columnIndex],\n          column = cellOptions ? cellOptions.column : visibleColumns[columnIndex],\n          msieCorrection = _browser2.default.msie ? 1 : 0;\n        if (!isMasterDetailRow && !isFilterRow && (!isDataRow || isDataRow && column && !column.cellTemplate) && (!isHeaderRow || isHeaderRow && column && !column.headerCellTemplate) && (!isGroupRow || isGroupRow && column && (void 0 === column.groupIndex || !column.groupCellTemplate))) {\n          if ($element.data(CELL_HINT_VISIBLE)) {\n            $element.removeAttr(\"title\");\n            $element.data(CELL_HINT_VISIBLE, false);\n          }\n          difference = $element[0].scrollWidth - $element[0].clientWidth - msieCorrection;\n          if (difference > 0 && !_type2.default.isDefined($element.attr(\"title\"))) {\n            $element.attr(\"title\", $element.text());\n            $element.data(CELL_HINT_VISIBLE, true);\n          }\n        }\n      }));\n    }\n    var getOptions = function getOptions(event) {\n      var formItemOptions,\n        resultOptions,\n        $cell = (0, _renderer2.default)(event.currentTarget),\n        $fieldItemContent = (0, _renderer2.default)(event.target).closest(\".\" + FORM_FIELD_ITEM_CONTENT_CLASS),\n        rowOptions = $cell.parent().data(\"options\"),\n        options = rowOptions && rowOptions.cells && rowOptions.cells[$cell.index()];\n      if (!$cell.closest(\"table\").is(event.delegateTarget)) {\n        return;\n      }\n      resultOptions = (0, _extend.extend)({}, options, {\n        cellElement: (0, _dom.getPublicElement)($cell),\n        event: event,\n        eventType: event.type\n      });\n      if ($fieldItemContent.length) {\n        formItemOptions = $fieldItemContent.data(\"dx-form-item\");\n        if (formItemOptions.column) {\n          resultOptions.column = formItemOptions.column;\n          resultOptions.columnIndex = that._columnsController.getVisibleIndex(resultOptions.column.index);\n        }\n      }\n      return resultOptions;\n    };\n    _events_engine2.default.on($table, \"mouseover\", \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellHoverChanged\", options);\n    });\n    _events_engine2.default.on($table, \"mouseout\", \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellHoverChanged\", options);\n    });\n    _events_engine2.default.on($table, _click2.default.name, \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellClick\", options);\n    });\n    _events_engine2.default.on($table, _double_click2.default.name, \".dx-row > td\", function (e) {\n      var options = getOptions(e);\n      options && that.executeAction(\"onCellDblClick\", options);\n    });\n    subscribeToRowClick(that, $table);\n    subscribeToRowDblClick(that, $table);\n    return $table;\n  },\n  _isNativeClick: _common.noop,\n  _rowClick: _common.noop,\n  _rowDblClick: _common.noop,\n  _createColGroup: function _createColGroup(columns) {\n    var i,\n      j,\n      colspan,\n      colgroupElement = (0, _renderer2.default)(\"<colgroup>\");\n    for (i = 0; i < columns.length; i++) {\n      colspan = columns[i].colspan || 1;\n      for (j = 0; j < colspan; j++) {\n        colgroupElement.append(this._createCol(columns[i]));\n      }\n    }\n    return colgroupElement;\n  },\n  _createCol: function _createCol(column) {\n    var width = column.visibleWidth || column.width;\n    if (\"adaptiveHidden\" === width) {\n      width = HIDDEN_COLUMNS_WIDTH;\n    }\n    var col = (0, _renderer2.default)(\"<col>\");\n    _style2.default.setWidth(col, width);\n    return col;\n  },\n  renderDelayedTemplates: function renderDelayedTemplates() {\n    var delayedTemplates = this._delayedTemplates,\n      syncTemplates = delayedTemplates.filter(function (template) {\n        return !template.async;\n      }),\n      asyncTemplates = delayedTemplates.filter(function (template) {\n        return template.async;\n      });\n    this._delayedTemplates = [];\n    this._renderDelayedTemplatesCore(syncTemplates);\n    this._renderDelayedTemplatesCoreAsync(asyncTemplates);\n  },\n  _renderDelayedTemplatesCoreAsync: function _renderDelayedTemplatesCoreAsync(templates) {\n    var that = this;\n    if (templates.length) {\n      (0, _window.getWindow)().setTimeout(function () {\n        that._renderDelayedTemplatesCore(templates, true);\n      });\n    }\n  },\n  _renderDelayedTemplatesCore: function _renderDelayedTemplatesCore(templates, isAsync) {\n    var templateParameters,\n      date = new Date();\n    while (templates.length) {\n      templateParameters = templates.shift();\n      var options = templateParameters.options,\n        model = options.model,\n        doc = _dom_adapter2.default.getDocument();\n      if (!isAsync || (0, _renderer2.default)(options.container).closest(doc).length) {\n        templateParameters.template.render(options);\n        if (model && model.column) {\n          this._updateCell(options.container, model);\n        }\n      }\n      if (isAsync && new Date() - date > 30) {\n        this._renderDelayedTemplatesCoreAsync(templates);\n        break;\n      }\n    }\n  },\n  _processTemplate: function _processTemplate(template) {\n    var templateID,\n      renderingTemplate,\n      that = this;\n    if (template && template.render && !_type2.default.isRenderer(template)) {\n      renderingTemplate = {\n        allowRenderToDetachedContainer: template.allowRenderToDetachedContainer,\n        render: function render(options) {\n          template.render(options.container, options.model);\n        }\n      };\n    } else {\n      if (_type2.default.isFunction(template)) {\n        renderingTemplate = {\n          render: function render(options) {\n            var renderedTemplate = template((0, _dom.getPublicElement)(options.container), options.model);\n            if (renderedTemplate && (renderedTemplate.nodeType || _type2.default.isRenderer(renderedTemplate))) {\n              options.container.append(renderedTemplate);\n            }\n          }\n        };\n      } else {\n        templateID = _type2.default.isString(template) ? template : (0, _renderer2.default)(template).attr(\"id\");\n        if (!templateID) {\n          renderingTemplate = that.getTemplate(template);\n        } else {\n          if (!that._templatesCache[templateID]) {\n            that._templatesCache[templateID] = that.getTemplate(template);\n          }\n          renderingTemplate = that._templatesCache[templateID];\n        }\n      }\n    }\n    return renderingTemplate;\n  },\n  renderTemplate: function renderTemplate(container, template, options, allowRenderToDetachedContainer) {\n    var async,\n      that = this,\n      renderingTemplate = that._processTemplate(template, options),\n      column = options.column,\n      isDataRow = \"data\" === options.rowType;\n    if (renderingTemplate) {\n      options.component = that.component;\n      async = column && (column.renderAsync && isDataRow || that.option(\"renderAsync\") && (false !== column.renderAsync && (column.command || column.showEditorAlways) && isDataRow || \"filter\" === options.rowType));\n      if ((renderingTemplate.allowRenderToDetachedContainer || allowRenderToDetachedContainer) && !async) {\n        renderingTemplate.render({\n          container: container,\n          model: options\n        });\n        return true;\n      } else {\n        that._delayedTemplates.push({\n          template: renderingTemplate,\n          options: {\n            container: container,\n            model: options\n          },\n          async: async\n        });\n      }\n    }\n    return false;\n  },\n  _getBodies: function _getBodies(tableElement) {\n    return (0, _renderer2.default)(tableElement).children(\"tbody\").not(\".dx-header\").not(\".dx-footer\");\n  },\n  _wrapRowIfNeed: function _wrapRowIfNeed($table, $row) {\n    var $tBodies = this.option(\"rowTemplate\") && this._getBodies(this._tableElement || $table);\n    if ($tBodies && $tBodies.filter(\".\" + ROW_CLASS).length) {\n      var $tbody = (0, _renderer2.default)(\"<tbody>\").addClass($row.attr(\"class\"));\n      this.setAria(\"role\", \"presentation\", $tbody);\n      return $tbody.append($row);\n    }\n    return $row;\n  },\n  _appendRow: function _appendRow($table, $row, appendTemplate) {\n    appendTemplate = appendTemplate || appendElementTemplate;\n    appendTemplate.render({\n      content: $row,\n      container: $table\n    });\n  },\n  _resizeCore: function _resizeCore() {\n    var that = this,\n      scrollLeft = that._scrollLeft;\n    if (scrollLeft >= 0) {\n      that._scrollLeft = 0;\n      that.scrollTo({\n        left: scrollLeft\n      });\n    }\n  },\n  _renderCore: function _renderCore(e) {\n    var $root = this.element().parent();\n    if (!$root || $root.parent().length) {\n      this.renderDelayedTemplates(e);\n    }\n  },\n  _renderTable: function _renderTable(options) {\n    options = options || {};\n    var $table,\n      that = this;\n    options.columns = that._columnsController.getVisibleColumns();\n    var changeType = options.change && options.change.changeType;\n    $table = that._createTable(options.columns, \"append\" === changeType || \"prepend\" === changeType || \"update\" === changeType);\n    that._renderRows($table, options);\n    return $table;\n  },\n  _renderRows: function _renderRows($table, options) {\n    var i,\n      that = this,\n      rows = that._getRows(options.change),\n      columnIndices = options.change && options.change.columnIndices || [],\n      changeTypes = options.change && options.change.changeTypes || [];\n    for (i = 0; i < rows.length; i++) {\n      that._renderRow($table, (0, _extend.extend)({\n        row: rows[i],\n        columnIndices: columnIndices[i],\n        changeType: changeTypes[i]\n      }, options));\n    }\n  },\n  _renderRow: function _renderRow($table, options) {\n    var $row,\n      $wrappedRow,\n      that = this;\n    if (!options.columnIndices) {\n      options.row.cells = [];\n    }\n    $row = that._createRow(options.row);\n    $wrappedRow = that._wrapRowIfNeed($table, $row);\n    if (\"remove\" !== options.changeType) {\n      that._renderCells($row, options);\n    }\n    that._appendRow($table, $wrappedRow);\n    var rowOptions = (0, _extend.extend)({\n      columns: options.columns\n    }, options.row);\n    that._addWatchMethod(rowOptions, options.row);\n    that._rowPrepared($wrappedRow, rowOptions, options.row);\n  },\n  _renderCells: function _renderCells($row, options) {\n    var i,\n      that = this,\n      columnIndex = 0,\n      row = options.row,\n      columns = options.columns;\n    for (i = 0; i < columns.length; i++) {\n      if (!options.columnIndices || options.columnIndices.indexOf(i) >= 0) {\n        that._renderCell($row, (0, _extend.extend)({\n          column: columns[i],\n          columnIndex: columnIndex,\n          value: row.values && row.values[columnIndex],\n          oldValue: row.oldValues && row.oldValues[columnIndex]\n        }, options));\n      }\n      if (columns[i].colspan > 1) {\n        columnIndex += columns[i].colspan;\n      } else {\n        columnIndex++;\n      }\n    }\n  },\n  _updateCells: function _updateCells($rowElement, $newRowElement, columnIndices) {\n    var $cells = $rowElement.children(),\n      $newCells = $newRowElement.children(),\n      highlightChanges = this.option(\"highlightChanges\"),\n      cellUpdatedClass = this.addWidgetPrefix(CELL_UPDATED_ANIMATION_CLASS);\n    columnIndices.forEach(function (columnIndex, index) {\n      var $cell = $cells.eq(columnIndex),\n        $newCell = $newCells.eq(index);\n      $cell.replaceWith($newCell);\n      if (highlightChanges && !$newCell.hasClass(\"dx-command-expand\")) {\n        $newCell.addClass(cellUpdatedClass);\n      }\n    });\n    copyAttributes($rowElement.get(0), $newRowElement.get(0));\n  },\n  _setCellAriaAttributes: function _setCellAriaAttributes($cell, cellOptions) {\n    if (\"freeSpace\" !== cellOptions.rowType) {\n      this.setAria(\"selected\", false, $cell);\n      this.setAria(\"role\", \"gridcell\", $cell);\n      this.setAria(\"colindex\", cellOptions.columnIndex + 1, $cell);\n    }\n  },\n  _renderCell: function _renderCell($row, options) {\n    var $cell,\n      that = this,\n      cellOptions = that._getCellOptions(options);\n    if (options.columnIndices) {\n      if (options.row.cells) {\n        options.row.cells[cellOptions.columnIndex] = cellOptions;\n      }\n    } else {\n      options.row.cells.push(cellOptions);\n    }\n    $cell = that._createCell(cellOptions);\n    that._setCellAriaAttributes($cell, cellOptions);\n    that._renderCellContent($cell, cellOptions);\n    $row.get(0).appendChild($cell.get(0));\n    return $cell;\n  },\n  _renderCellContent: function _renderCellContent($cell, options) {\n    var template = this._getCellTemplate(options);\n    if (!template || this.renderTemplate($cell, template, options)) {\n      this._updateCell($cell, options);\n    }\n  },\n  _getCellTemplate: function _getCellTemplate() {},\n  _getRows: function _getRows() {\n    return [];\n  },\n  _getCellOptions: function _getCellOptions(options) {\n    var cellOptions = {\n      column: options.column,\n      columnIndex: options.columnIndex,\n      rowType: options.row.rowType\n    };\n    this._addWatchMethod(cellOptions);\n    return cellOptions;\n  },\n  _addWatchMethod: function _addWatchMethod(options, source) {\n    if (!this.option(\"repaintChangesOnly\")) {\n      return;\n    }\n    var watchers = [];\n    source = source || options;\n    source.watch = source.watch || function (getter, updateFunc) {\n      var oldValue = getter(source.data);\n      var watcher = function watcher() {\n        var newValue = getter(source.data);\n        if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n          updateFunc(newValue, oldValue);\n          oldValue = newValue;\n        }\n      };\n      watchers.push(watcher);\n      var stopWatch = function stopWatch() {\n        var index = watchers.indexOf(watcher);\n        if (index >= 0) {\n          watchers.splice(index, 1);\n        }\n      };\n      return stopWatch;\n    };\n    source.update = source.update || function (row) {\n      this.data = options.data = row.data;\n      this.rowIndex = options.rowIndex = row.rowIndex;\n      this.dataIndex = options.dataIndex = row.dataIndex;\n      this.isExpanded = options.isExpanded = row.isExpanded;\n      if (options.row) {\n        options.row = row;\n      }\n      watchers.forEach(function (watcher) {\n        watcher();\n      });\n    };\n    if (source !== options) {\n      options.watch = source.watch.bind(source);\n    }\n    return options;\n  },\n  _cellPrepared: function _cellPrepared(cell, options) {\n    options.cellElement = (0, _dom.getPublicElement)((0, _renderer2.default)(cell));\n    this.executeAction(\"onCellPrepared\", options);\n  },\n  _rowPrepared: function _rowPrepared($row, options) {\n    _element_data2.default.data($row.get(0), \"options\", options);\n    options.rowElement = (0, _dom.getPublicElement)($row);\n    this.executeAction(\"onRowPrepared\", options);\n  },\n  _columnOptionChanged: function _columnOptionChanged(e) {\n    var optionNames = e.optionNames;\n    if ((0, _uiGrid_core3.checkChanges)(optionNames, [\"width\", \"visibleWidth\"])) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n      var widths = _iterator2.default.map(visibleColumns, function (column) {\n        var width = column.visibleWidth || column.width;\n        return _type2.default.isDefined(width) ? width : \"auto\";\n      });\n      this.setColumnWidths(widths);\n      return;\n    }\n    if (!this._requireReady) {\n      this.render();\n    }\n  },\n  getCellIndex: function getCellIndex($cell) {\n    var cellIndex = $cell.length ? $cell[0].cellIndex : -1;\n    return cellIndex;\n  },\n  getTableElements: function getTableElements() {\n    return this._tableElement || (0, _renderer2.default)();\n  },\n  _getTableElement: function _getTableElement() {\n    return this._tableElement;\n  },\n  _setTableElement: function _setTableElement(tableElement) {\n    this._tableElement = tableElement;\n  },\n  optionChanged: function optionChanged(args) {\n    this.callBase(args);\n    switch (args.name) {\n      case \"cellHintEnabled\":\n      case \"onCellPrepared\":\n      case \"onRowPrepared\":\n      case \"onCellHoverChanged\":\n        this._invalidate(true, true);\n        args.handled = true;\n    }\n  },\n  init: function init() {\n    var that = this;\n    that._scrollLeft = -1;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._delayedTemplates = [];\n    that._templatesCache = {};\n    that.createAction(\"onCellClick\");\n    that.createAction(\"onRowClick\");\n    that.createAction(\"onCellDblClick\");\n    that.createAction(\"onRowDblClick\");\n    that.createAction(\"onCellHoverChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    that.createAction(\"onCellPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    });\n    that.createAction(\"onRowPrepared\", {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\",\n      afterExecute: function afterExecute(e) {\n        that._afterRowPrepared(e);\n      }\n    });\n    that._columnsController.columnsChanged.add(that._columnOptionChanged.bind(that));\n    that._dataController && that._dataController.changed.add(that._handleDataChanged.bind(that));\n  },\n  _afterRowPrepared: _common.noop,\n  _handleDataChanged: function _handleDataChanged() {},\n  callbackNames: function callbackNames() {\n    return [\"scrollChanged\"];\n  },\n  scrollTo: function scrollTo(pos) {\n    var that = this,\n      $element = that.element(),\n      $scrollContainer = $element && $element.children(\".\" + that.addWidgetPrefix(SCROLL_CONTAINER_CLASS)).not(\".\" + that.addWidgetPrefix(CONTENT_FIXED_CLASS));\n    that._skipScrollChanged = false;\n    if (_type2.default.isDefined(pos) && _type2.default.isDefined(pos.left) && that._scrollLeft !== pos.left) {\n      that._scrollLeft = pos.left;\n      $scrollContainer && $scrollContainer.scrollLeft(Math.round(pos.left));\n      that._skipScrollChanged = true;\n    }\n  },\n  _wrapTableInScrollContainer: function _wrapTableInScrollContainer($table) {\n    var $scrollContainer,\n      that = this;\n    $scrollContainer = (0, _renderer2.default)(\"<div>\");\n    _events_engine2.default.on($scrollContainer, \"scroll\", function () {\n      !that._skipScrollChanged && that.scrollChanged.fire({\n        left: $scrollContainer.scrollLeft()\n      }, that.name);\n      that._skipScrollChanged = false;\n    });\n    $scrollContainer.addClass(that.addWidgetPrefix(CONTENT_CLASS)).addClass(that.addWidgetPrefix(SCROLL_CONTAINER_CLASS)).append($table).appendTo(that.element());\n    that.setAria(\"role\", \"presentation\", $scrollContainer);\n    return $scrollContainer;\n  },\n  _updateContent: function _updateContent($newTableElement) {\n    this._setTableElement($newTableElement);\n    this._wrapTableInScrollContainer($newTableElement);\n  },\n  _findContentElement: _common.noop,\n  _getWidths: function _getWidths($cellElements) {\n    var width,\n      clientRect,\n      result = [],\n      legacyRendering = this.option(\"legacyRendering\");\n    if ($cellElements) {\n      _iterator2.default.each($cellElements, function (index, item) {\n        width = item.offsetWidth;\n        if (item.getBoundingClientRect) {\n          clientRect = item.getBoundingClientRect();\n          if (clientRect.width > width - 1) {\n            width = legacyRendering ? Math.ceil(clientRect.width) : clientRect.width;\n          }\n        }\n        result.push(width);\n      });\n    }\n    return result;\n  },\n  getColumnWidths: function getColumnWidths($tableElement) {\n    var $rows,\n      $cells,\n      that = this,\n      result = [];\n    (this.option(\"forceApplyBindings\") || _common.noop)();\n    $tableElement = $tableElement || that._getTableElement();\n    if ($tableElement) {\n      $rows = $tableElement.children(\"tbody\").children();\n      for (var i = 0; i < $rows.length; i++) {\n        var $row = $rows.eq(i);\n        var isRowVisible = \"none\" !== $row.get(0).style.display && !$row.hasClass(\"dx-state-invisible\");\n        if (!$row.is(\".\" + GROUP_ROW_CLASS) && !$row.is(\".\" + DETAIL_ROW_CLASS) && isRowVisible) {\n          $cells = $row.children(\"td\");\n          break;\n        }\n      }\n      result = that._getWidths($cells);\n    }\n    return result;\n  },\n  getVisibleColumnIndex: function getVisibleColumnIndex(columnIndex, rowIndex) {\n    return columnIndex;\n  },\n  setColumnWidths: function setColumnWidths(widths, $tableElement, columns, fixed) {\n    var $cols,\n      i,\n      width,\n      minWidth,\n      columnIndex,\n      columnAutoWidth = this.option(\"columnAutoWidth\"),\n      legacyRendering = this.option(\"legacyRendering\");\n    $tableElement = $tableElement || this._getTableElement();\n    if ($tableElement && $tableElement.length && widths) {\n      columnIndex = 0;\n      $cols = $tableElement.children(\"colgroup\").children(\"col\");\n      _style2.default.setWidth($cols, \"auto\");\n      columns = columns || this.getColumns(null, $tableElement);\n      for (i = 0; i < columns.length; i++) {\n        if (!legacyRendering && columnAutoWidth && !fixed) {\n          width = columns[i].width;\n          if (width && !columns[i].command) {\n            width = columns[i].visibleWidth || width;\n            width = getWidthStyle(width);\n            minWidth = getWidthStyle(columns[i].minWidth || width);\n            var $rows = $rows || $tableElement.children().children(\".dx-row\").not(\".\" + GROUP_ROW_CLASS).not(\".\" + DETAIL_ROW_CLASS);\n            for (var rowIndex = 0; rowIndex < $rows.length; rowIndex++) {\n              var visibleIndex = this.getVisibleColumnIndex(i, rowIndex);\n              var cell = $rows[rowIndex].cells[visibleIndex];\n              if (cell) {\n                setCellWidth(cell, columns[i], width);\n                cell.style.minWidth = minWidth;\n              }\n            }\n          }\n        }\n        if (columns[i].colspan) {\n          columnIndex += columns[i].colspan;\n          continue;\n        }\n        width = widths[columnIndex];\n        if (\"adaptiveHidden\" === width) {\n          width = HIDDEN_COLUMNS_WIDTH;\n        }\n        if (\"number\" === typeof width) {\n          width = width.toFixed(3) + \"px\";\n        }\n        _style2.default.setWidth($cols.eq(columnIndex), _type2.default.isDefined(width) ? width : \"auto\");\n        columnIndex++;\n      }\n    }\n  },\n  getCellElements: function getCellElements(rowIndex) {\n    return this._getCellElementsCore(rowIndex);\n  },\n  _getCellElementsCore: function _getCellElementsCore(rowIndex) {\n    var $row = this._getRowElements().eq(rowIndex);\n    return $row.children();\n  },\n  _getCellElement: function _getCellElement(rowIndex, columnIdentifier) {\n    var $cell,\n      that = this,\n      $cells = that.getCellElements(rowIndex),\n      columnVisibleIndex = that._getVisibleColumnIndex($cells, rowIndex, columnIdentifier);\n    if ($cells.length && columnVisibleIndex >= 0) {\n      $cell = $cells.eq(columnVisibleIndex);\n    }\n    if ($cell && $cell.length) {\n      return $cell;\n    }\n  },\n  _getRowElement: function _getRowElement(rowIndex) {\n    var that = this,\n      $rowElement = (0, _renderer2.default)(),\n      $tableElements = that.getTableElements();\n    _iterator2.default.each($tableElements, function (_, tableElement) {\n      $rowElement = $rowElement.add(that._getRowElements((0, _renderer2.default)(tableElement)).eq(rowIndex));\n    });\n    if ($rowElement.length) {\n      return $rowElement;\n    }\n  },\n  getCellElement: function getCellElement(rowIndex, columnIdentifier) {\n    return (0, _dom.getPublicElement)(this._getCellElement(rowIndex, columnIdentifier));\n  },\n  getRowElement: function getRowElement(rowIndex) {\n    var $rows = this._getRowElement(rowIndex),\n      elements = [];\n    if ($rows && !(0, _dom.getPublicElement)($rows).get) {\n      for (var i = 0; i < $rows.length; i++) {\n        elements.push($rows[i]);\n      }\n    } else {\n      elements = $rows;\n    }\n    return elements;\n  },\n  _getVisibleColumnIndex: function _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {\n    var columnIndex;\n    if (_type2.default.isString(columnIdentifier)) {\n      columnIndex = this._columnsController.columnOption(columnIdentifier, \"index\");\n      return this._columnsController.getVisibleIndex(columnIndex);\n    }\n    return columnIdentifier;\n  },\n  getColumnElements: function getColumnElements() {},\n  getColumns: function getColumns(rowIndex) {\n    return this._columnsController.getVisibleColumns(rowIndex);\n  },\n  getCell: function getCell(cellPosition, rows) {\n    var $cells,\n      $rows = rows || this._getRowElements();\n    if ($rows.length > 0 && cellPosition.rowIndex >= 0) {\n      if (\"virtual\" !== this.option(\"scrolling.mode\")) {\n        cellPosition.rowIndex = cellPosition.rowIndex < $rows.length ? cellPosition.rowIndex : $rows.length - 1;\n      }\n      $cells = this.getCellElements(cellPosition.rowIndex);\n      if ($cells && $cells.length > 0) {\n        return $cells.eq($cells.length > cellPosition.columnIndex ? cellPosition.columnIndex : $cells.length - 1);\n      }\n    }\n  },\n  getRowsCount: function getRowsCount() {\n    var tableElement = this._getTableElement();\n    if (tableElement && 1 === tableElement.length) {\n      return tableElement[0].rows.length;\n    }\n    return 0;\n  },\n  _getRowElementsCore: function _getRowElementsCore(tableElement) {\n    tableElement = tableElement || this._getTableElement();\n    if (tableElement) {\n      var tBodies = this.option(\"rowTemplate\") && tableElement.find(\"> tbody.\" + ROW_CLASS);\n      return tBodies && tBodies.length ? tBodies : tableElement.find(\"> tbody > .\" + ROW_CLASS + \", > .\" + ROW_CLASS);\n    }\n    return (0, _renderer2.default)();\n  },\n  _getRowElements: function _getRowElements(tableElement) {\n    return this._getRowElementsCore(tableElement);\n  },\n  getRowIndex: function getRowIndex($row) {\n    return this._getRowElements().index($row);\n  },\n  getBoundingRect: function getBoundingRect() {},\n  getName: function getName() {},\n  setScrollerSpacing: function setScrollerSpacing(width) {\n    var that = this,\n      $element = that.element(),\n      rtlEnabled = that.option(\"rtlEnabled\");\n    $element && $element.css(rtlEnabled ? {\n      paddingLeft: width\n    } : {\n      paddingRight: width\n    });\n  },\n  isScrollbarVisible: function isScrollbarVisible(isHorizontal) {\n    var $element = this.element(),\n      $tableElement = this._tableElement;\n    if ($element && $tableElement) {\n      return isHorizontal ? $tableElement.outerWidth() - $element.width() > 0 : $tableElement.outerHeight() - $element.height() > 0;\n    }\n    return false;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}