{"ast":null,"code":"/**\r\n * DevExtreme (ui/check_box.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\"),\n  eventsEngine = require(\"../events/core/events_engine\"),\n  devices = require(\"../core/devices\"),\n  extend = require(\"../core/utils/extend\").extend,\n  inkRipple = require(\"./widget/utils.ink_ripple\"),\n  Editor = require(\"./editor/editor\"),\n  registerComponent = require(\"../core/component_registrator\"),\n  eventUtils = require(\"../events/utils\"),\n  clickEvent = require(\"../events/click\");\nvar CHECKBOX_CLASS = \"dx-checkbox\",\n  CHECKBOX_ICON_CLASS = \"dx-checkbox-icon\",\n  CHECKBOX_CHECKED_CLASS = \"dx-checkbox-checked\",\n  CHECKBOX_CONTAINER_CLASS = \"dx-checkbox-container\",\n  CHECKBOX_TEXT_CLASS = \"dx-checkbox-text\",\n  CHECKBOX_HAS_TEXT_CLASS = \"dx-checkbox-has-text\",\n  CHECKBOX_INDETERMINATE_CLASS = \"dx-checkbox-indeterminate\",\n  CHECKBOX_FEEDBACK_HIDE_TIMEOUT = 100;\nvar CheckBox = Editor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var click = function click(e) {\n      e.preventDefault();\n      this._clickAction({\n        event: e\n      });\n    };\n    return extend(this.callBase(), {\n      space: click\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      hoverStateEnabled: true,\n      activeStateEnabled: true,\n      value: false,\n      text: \"\",\n      useInkRipple: false\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _canValueBeChangedByClick: function _canValueBeChangedByClick() {\n    return true;\n  },\n  _feedbackHideTimeout: CHECKBOX_FEEDBACK_HIDE_TIMEOUT,\n  _initMarkup: function _initMarkup() {\n    this._renderSubmitElement();\n    this._$container = $(\"<div>\").addClass(CHECKBOX_CONTAINER_CLASS);\n    this.setAria(\"role\", \"checkbox\");\n    this.$element().addClass(CHECKBOX_CLASS);\n    this._renderValue();\n    this._renderIcon();\n    this._renderText();\n    this.option(\"useInkRipple\") && this._renderInkRipple();\n    this.$element().append(this._$container);\n    this.callBase();\n  },\n  _render: function _render() {\n    this._renderClick();\n    this.callBase();\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._$submitElement;\n  },\n  _renderInkRipple: function _renderInkRipple() {\n    this._inkRipple = inkRipple.render({\n      waveSizeCoefficient: 2.5,\n      useHoldAnimation: false,\n      wavesNumber: 2,\n      isCentered: true\n    });\n  },\n  _renderInkWave: function _renderInkWave(element, dxEvent, doRender, waveIndex) {\n    if (!this._inkRipple) {\n      return;\n    }\n    var config = {\n      element: element,\n      event: dxEvent,\n      wave: waveIndex\n    };\n    if (doRender) {\n      this._inkRipple.showWave(config);\n    } else {\n      this._inkRipple.hideWave(config);\n    }\n  },\n  _updateFocusState: function _updateFocusState(e, value) {\n    this.callBase.apply(this, arguments);\n    this._renderInkWave(this._$icon, e, value, 0);\n  },\n  _toggleActiveState: function _toggleActiveState($element, value, e) {\n    this.callBase.apply(this, arguments);\n    this._renderInkWave(this._$icon, e, value, 1);\n  },\n  _renderIcon: function _renderIcon() {\n    this._$icon = $(\"<span>\").addClass(CHECKBOX_ICON_CLASS).prependTo(this._$container);\n  },\n  _renderText: function _renderText() {\n    var textValue = this.option(\"text\");\n    if (!textValue) {\n      if (this._$text) {\n        this._$text.remove();\n        this.$element().removeClass(CHECKBOX_HAS_TEXT_CLASS);\n      }\n      return;\n    }\n    if (!this._$text) {\n      this._$text = $(\"<span>\").addClass(CHECKBOX_TEXT_CLASS);\n    }\n    this._$text.text(textValue);\n    this._$container.append(this._$text);\n    this.$element().addClass(CHECKBOX_HAS_TEXT_CLASS);\n  },\n  _renderClick: function _renderClick() {\n    var that = this,\n      eventName = eventUtils.addNamespace(clickEvent.name, that.NAME);\n    that._clickAction = that._createAction(that._clickHandler);\n    eventsEngine.off(that.$element(), eventName);\n    eventsEngine.on(that.$element(), eventName, function (e) {\n      that._clickAction({\n        event: e\n      });\n    });\n  },\n  _clickHandler: function _clickHandler(args) {\n    var that = args.component;\n    that._saveValueChangeEvent(args.event);\n    that.option(\"value\", !that.option(\"value\"));\n  },\n  _renderValue: function _renderValue() {\n    var $element = this.$element(),\n      checked = this.option(\"value\"),\n      indeterminate = void 0 === checked;\n    $element.toggleClass(CHECKBOX_CHECKED_CLASS, Boolean(checked));\n    $element.toggleClass(CHECKBOX_INDETERMINATE_CLASS, indeterminate);\n    this._getSubmitElement().val(checked);\n    this.setAria(\"checked\", indeterminate ? \"mixed\" : checked || \"false\");\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"useInkRipple\":\n        this._invalidate();\n        break;\n      case \"value\":\n        this._renderValue();\n        this.callBase(args);\n        break;\n      case \"text\":\n        this._renderText();\n        this._renderDimensions();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _clean: function _clean() {\n    delete this._inkRipple;\n    this.callBase();\n  }\n});\nregisterComponent(\"dxCheckBox\", CheckBox);\nmodule.exports = CheckBox;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}