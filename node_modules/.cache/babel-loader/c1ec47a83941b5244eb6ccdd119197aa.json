{"ast":null,"code":"/**\r\n * DevExtreme (events/core/emitter.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  noop = require(\"../../core/utils/common\").noop,\n  Class = require(\"../../core/class\"),\n  Callbacks = require(\"../../core/utils/callbacks\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  eventUtils = require(\"../utils\");\nvar Emitter = Class.inherit({\n  ctor: function ctor(element) {\n    this._$element = $(element);\n    this._cancelCallback = Callbacks();\n    this._acceptCallback = Callbacks();\n  },\n  getElement: function getElement() {\n    return this._$element;\n  },\n  validate: function validate(e) {\n    return !eventUtils.isDxMouseWheelEvent(e);\n  },\n  validatePointers: function validatePointers(e) {\n    return 1 === eventUtils.hasTouches(e);\n  },\n  allowInterruptionByMouseWheel: function allowInterruptionByMouseWheel() {\n    return true;\n  },\n  configure: function configure(data) {\n    extend(this, data);\n  },\n  addCancelCallback: function addCancelCallback(callback) {\n    this._cancelCallback.add(callback);\n  },\n  removeCancelCallback: function removeCancelCallback() {\n    this._cancelCallback.empty();\n  },\n  _cancel: function _cancel(e) {\n    this._cancelCallback.fire(this, e);\n  },\n  addAcceptCallback: function addAcceptCallback(callback) {\n    this._acceptCallback.add(callback);\n  },\n  removeAcceptCallback: function removeAcceptCallback() {\n    this._acceptCallback.empty();\n  },\n  _accept: function _accept(e) {\n    this._acceptCallback.fire(this, e);\n  },\n  _requestAccept: function _requestAccept(e) {\n    this._acceptRequestEvent = e;\n  },\n  _forgetAccept: function _forgetAccept() {\n    this._accept(this._acceptRequestEvent);\n    this._acceptRequestEvent = null;\n  },\n  start: noop,\n  move: noop,\n  end: noop,\n  cancel: noop,\n  reset: function reset() {\n    if (this._acceptRequestEvent) {\n      this._accept(this._acceptRequestEvent);\n    }\n  },\n  _fireEvent: function _fireEvent(eventName, e, params) {\n    var eventData = extend({\n      type: eventName,\n      originalEvent: e,\n      target: this._getEmitterTarget(e),\n      delegateTarget: this.getElement().get(0)\n    }, params);\n    e = eventUtils.fireEvent(eventData);\n    if (e.cancel) {\n      this._cancel(e);\n    }\n    return e;\n  },\n  _getEmitterTarget: function _getEmitterTarget(e) {\n    return (this.delegateSelector ? $(e.target).closest(this.delegateSelector) : this.getElement()).get(0);\n  },\n  dispose: noop\n});\nmodule.exports = Emitter;","map":null,"metadata":{},"sourceType":"script"}