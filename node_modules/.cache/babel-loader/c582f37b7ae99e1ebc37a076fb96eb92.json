{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/extend.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar isPlainObject = require(\"./type\").isPlainObject;\nvar extendFromObject = function extendFromObject(target, source, overrideExistingValues) {\n  target = target || {};\n  for (var prop in source) {\n    if (Object.prototype.hasOwnProperty.call(source, prop)) {\n      var value = source[prop];\n      if (!(prop in target) || overrideExistingValues) {\n        target[prop] = value;\n      }\n    }\n  }\n  return target;\n};\nvar extend = function extend(target) {\n  target = target || {};\n  var i = 1,\n    deep = false;\n  if (\"boolean\" === typeof target) {\n    deep = target;\n    target = arguments[1] || {};\n    i++;\n  }\n  for (; i < arguments.length; i++) {\n    var source = arguments[i];\n    if (null == source) {\n      continue;\n    }\n    for (var key in source) {\n      var clone,\n        targetValue = target[key],\n        sourceValue = source[key],\n        sourceValueIsArray = false;\n      if (\"__proto__\" === key || target === sourceValue) {\n        continue;\n      }\n      if (deep && sourceValue && (isPlainObject(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {\n        if (sourceValueIsArray) {\n          clone = targetValue && Array.isArray(targetValue) ? targetValue : [];\n        } else {\n          clone = targetValue && isPlainObject(targetValue) ? targetValue : {};\n        }\n        target[key] = extend(deep, clone, sourceValue);\n      } else {\n        if (void 0 !== sourceValue) {\n          target[key] = sourceValue;\n        }\n      }\n    }\n  }\n  return target;\n};\nexports.extend = extend;\nexports.extendFromObject = extendFromObject;","map":null,"metadata":{},"sourceType":"script"}