{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.columns_resizing_reordering.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _callbacks = require(\"../../core/utils/callbacks\");\nvar _callbacks2 = _interopRequireDefault(_callbacks);\nvar _type = require(\"../../core/utils/type\");\nvar _type2 = _interopRequireDefault(_type);\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _utils = require(\"../../events/utils\");\nvar _pointer = require(\"../../events/pointer\");\nvar _pointer2 = _interopRequireDefault(_pointer);\nvar _drag = require(\"../../events/drag\");\nvar _drag2 = _interopRequireDefault(_drag);\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\nvar _fx = require(\"../../animation/fx\");\nvar _fx2 = _interopRequireDefault(_fx);\nvar _swatch_container = require(\"../widget/swatch_container\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar COLUMNS_SEPARATOR_CLASS = \"columns-separator\",\n  COLUMNS_SEPARATOR_TRANSPARENT = \"columns-separator-transparent\",\n  DRAGGING_HEADER_CLASS = \"drag-header\",\n  CELL_CONTENT_CLASS = \"text-content\",\n  HEADERS_DRAG_ACTION_CLASS = \"drag-action\",\n  TRACKER_CLASS = \"tracker\",\n  HEADERS_DROP_HIGHLIGHT_CLASS = \"drop-highlight\",\n  BLOCK_SEPARATOR_CLASS = \"dx-block-separator\",\n  HEADER_ROW_CLASS = \"dx-header-row\",\n  WIDGET_CLASS = \"dx-widget\",\n  DRAGGING_COMMAND_CELL_CLASS = \"dx-drag-command-cell\",\n  MODULE_NAMESPACE = \"dxDataGridResizingReordering\",\n  COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH = 10,\n  DRAGGING_DELTA = 5,\n  COLUMN_OPACITY = .5;\nvar allowResizing = function allowResizing(that) {\n  return that.option(\"allowColumnResizing\") || that.getController(\"columns\").isColumnOptionUsed(\"allowResizing\");\n};\nvar allowReordering = function allowReordering(that) {\n  return that.option(\"allowColumnReordering\") || that.getController(\"columns\").isColumnOptionUsed(\"allowReordering\");\n};\nvar TrackerView = _uiGrid_core2.default.View.inherit({\n  _renderCore: function _renderCore() {\n    this.callBase();\n    this.element().addClass(this.addWidgetPrefix(TRACKER_CLASS));\n    this.hide();\n  },\n  _unsubscribeFromCallback: function _unsubscribeFromCallback() {\n    if (this._positionChanged) {\n      this._tablePositionController.positionChanged.remove(this._positionChanged);\n    }\n  },\n  _subscribeToCallback: function _subscribeToCallback() {\n    var that = this;\n    that._positionChanged = function (position) {\n      var $element = that.element();\n      if ($element && $element.hasClass(that.addWidgetPrefix(TRACKER_CLASS))) {\n        $element.css({\n          top: position.top\n        });\n        $element.height(position.height);\n      }\n    };\n    this._tablePositionController.positionChanged.add(that._positionChanged);\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"allowColumnResizing\" === args.name) {\n      this._unsubscribeFromCallback();\n      if (args.value) {\n        this._subscribeToCallback();\n        this._invalidate();\n      }\n    }\n    this.callBase(args);\n  },\n  init: function init() {\n    this.callBase();\n    this._tablePositionController = this.getController(\"tablePosition\");\n    this._subscribeToCallback();\n  },\n  isVisible: function isVisible() {\n    return allowResizing(this);\n  },\n  show: function show() {\n    this.element().show();\n  },\n  hide: function hide() {\n    this.element() && this.element().hide();\n  },\n  setHeight: function setHeight(value) {\n    this.element().height(value);\n  },\n  dispose: function dispose() {\n    this._unsubscribeFromCallback();\n    this.callBase();\n  }\n});\nvar SeparatorView = _uiGrid_core2.default.View.inherit({\n  _renderSeparator: function _renderSeparator() {},\n  _renderCore: function _renderCore(options) {\n    this.callBase(options);\n    this._isShown = true;\n    this._renderSeparator();\n    this.hide();\n  },\n  show: function show() {\n    this._isShown = true;\n  },\n  hide: function hide() {\n    this._isShown = false;\n  },\n  height: function height(value) {\n    var $element = this.element();\n    if ($element) {\n      if (_type2.default.isDefined(value)) {\n        $element.height(value);\n      } else {\n        return $element.height();\n      }\n    }\n  },\n  width: function width(value) {\n    var $element = this.element();\n    if ($element) {\n      if (_type2.default.isDefined(value)) {\n        $element.width(value);\n      } else {\n        return $element.width();\n      }\n    }\n  }\n});\nvar ColumnsSeparatorView = SeparatorView.inherit({\n  _renderSeparator: function _renderSeparator() {\n    this.callBase();\n    var $element = this.element();\n    $element.addClass(this.addWidgetPrefix(COLUMNS_SEPARATOR_CLASS));\n  },\n  _subscribeToCallback: function _subscribeToCallback() {\n    var $element,\n      that = this;\n    that._positionChanged = function (position) {\n      $element = that.element();\n      if ($element) {\n        $element.css({\n          top: position.top\n        });\n        $element.height(position.height);\n      }\n    };\n    that._tablePositionController.positionChanged.add(that._positionChanged);\n  },\n  _unsubscribeFromCallback: function _unsubscribeFromCallback() {\n    this._positionChanged && this._tablePositionController.positionChanged.remove(this._positionChanged);\n  },\n  _init: function _init() {\n    this._isTransparent = allowResizing(this);\n    if (this.isVisible()) {\n      this._subscribeToCallback();\n    }\n  },\n  isVisible: function isVisible() {\n    return this.option(\"showColumnHeaders\") && (allowReordering(this) || allowResizing(this));\n  },\n  optionChanged: function optionChanged(args) {\n    if (\"allowColumnResizing\" === args.name) {\n      if (args.value) {\n        this._init();\n        this._invalidate();\n        this.hide(true);\n      } else {\n        this._unsubscribeFromCallback();\n        this._isTransparent = allowResizing(this);\n        this.hide(true);\n      }\n    }\n    this.callBase(args);\n  },\n  init: function init() {\n    this.callBase();\n    this._tablePositionController = this.getController(\"tablePosition\");\n    this._init();\n  },\n  show: function show() {\n    var that = this,\n      $element = this.element();\n    if ($element && !that._isShown) {\n      if (that._isTransparent) {\n        $element.removeClass(that.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT));\n      } else {\n        $element.show();\n      }\n    }\n    this.callBase();\n  },\n  hide: function hide(force) {\n    var $element = this.element(),\n      columnsSeparatorTransparent = this.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT);\n    if ($element && (this._isShown || force)) {\n      if (this._isTransparent) {\n        $element.addClass(columnsSeparatorTransparent);\n        $element.css(\"left\", \"\");\n        $element.show();\n      } else {\n        if ($element.hasClass(columnsSeparatorTransparent)) {\n          $element.removeClass(columnsSeparatorTransparent);\n        }\n        $element.hide();\n      }\n    }\n    this.callBase();\n  },\n  moveByX: function moveByX(outerX) {\n    var $element = this.element();\n    if ($element) {\n      $element.css(\"left\", outerX - this._parentElement().offset().left);\n    }\n  },\n  changeCursor: function changeCursor(cursorName) {\n    cursorName = _type2.default.isDefined(cursorName) ? cursorName : \"\";\n    var $element = this.element();\n    if ($element) {\n      $element.css(\"cursor\", cursorName);\n    }\n  },\n  dispose: function dispose() {\n    this._unsubscribeFromCallback();\n    this.callBase();\n  }\n});\nvar BlockSeparatorView = SeparatorView.inherit({\n  init: function init() {\n    var that = this;\n    this.callBase();\n    this.getController(\"data\").loadingChanged.add(function (isLoading) {\n      if (!isLoading) {\n        that.hide();\n      }\n    });\n  },\n  _renderSeparator: function _renderSeparator() {\n    this.callBase();\n    this.element().addClass(BLOCK_SEPARATOR_CLASS).html(\"&nbsp;\");\n  },\n  hide: function hide() {\n    var that = this,\n      $parent = this._parentElement(),\n      $element = this.element();\n    if ($element && this._isShown) {\n      $element.css(\"display\", \"none\");\n    }\n    if ($parent && !$parent.children(\".\" + BLOCK_SEPARATOR_CLASS).length) {\n      $parent.prepend(that.element());\n    }\n    that.callBase();\n  },\n  isVisible: function isVisible() {\n    var groupPanelOptions = this.option(\"groupPanel\"),\n      columnChooserOptions = this.option(\"columnChooser\");\n    return groupPanelOptions && groupPanelOptions.visible || columnChooserOptions && columnChooserOptions.enabled;\n  },\n  show: function show(targetLocation) {\n    var that = this,\n      $element = this.element(),\n      startAnimate = function startAnimate(toOptions) {\n        _fx2.default.stop($element, true);\n        _fx2.default.animate($element, {\n          type: \"slide\",\n          from: {\n            width: 0,\n            display: toOptions.display\n          },\n          to: toOptions,\n          duration: 300,\n          easing: \"swing\"\n        });\n      };\n    if ($element && !that._isShown) {\n      switch (targetLocation) {\n        case \"group\":\n          startAnimate({\n            width: \"50px\",\n            display: \"inline-block\"\n          });\n          break;\n        case \"columnChooser\":\n          startAnimate({\n            width: \"100%\",\n            display: \"block\"\n          });\n          break;\n        default:\n          $element.css(\"display\", \"\");\n      }\n    }\n    that.callBase();\n  }\n});\nvar DraggingHeaderView = _uiGrid_core2.default.View.inherit({\n  _isDragging: false,\n  _getDraggingPanelByPos: function _getDraggingPanelByPos(pos) {\n    var result,\n      that = this;\n    (0, _iterator.each)(that._dragOptions.draggingPanels, function (index, draggingPanel) {\n      if (draggingPanel) {\n        var boundingRect = draggingPanel.getBoundingRect();\n        if (boundingRect && (void 0 === boundingRect.bottom || pos.y < boundingRect.bottom) && (void 0 === boundingRect.top || pos.y > boundingRect.top) && (void 0 === boundingRect.left || pos.x > boundingRect.left) && (void 0 === boundingRect.right || pos.x < boundingRect.right)) {\n          result = draggingPanel;\n          return false;\n        }\n      }\n    });\n    return result;\n  },\n  _renderCore: function _renderCore() {\n    this.element().addClass(this.addWidgetPrefix(DRAGGING_HEADER_CLASS) + \" \" + this.addWidgetPrefix(CELL_CONTENT_CLASS) + \" \" + WIDGET_CLASS).hide();\n  },\n  _resetTargetColumnOptions: function _resetTargetColumnOptions() {\n    var params = this._dropOptions;\n    params.targetColumnIndex = -1;\n    delete params.targetColumnElement;\n    delete params.isLast;\n    delete params.posX;\n    delete params.posY;\n  },\n  _getVisibleIndexObject: function _getVisibleIndexObject(rowIndex, visibleIndex) {\n    if (_type2.default.isDefined(rowIndex)) {\n      return {\n        columnIndex: visibleIndex,\n        rowIndex: rowIndex\n      };\n    }\n    return visibleIndex;\n  },\n  dispose: function dispose() {\n    var element = this.element();\n    this._dragOptions = null;\n    element && element.parent().find(\".\" + this.addWidgetPrefix(DRAGGING_HEADER_CLASS)).remove();\n  },\n  isVisible: function isVisible() {\n    var columnsController = this.getController(\"columns\"),\n      commonColumnSettings = columnsController.getCommonSettings();\n    return this.option(\"showColumnHeaders\") && (allowReordering(this) || commonColumnSettings.allowGrouping || commonColumnSettings.allowHiding);\n  },\n  init: function init() {\n    var that = this;\n    this.callBase();\n    this._controller = this.getController(\"draggingHeader\");\n    this._columnsResizerViewController = this.getController(\"columnsResizer\");\n    this.getController(\"data\").loadingChanged.add(function (isLoading) {\n      var element = that.element();\n      if (!isLoading && element) {\n        element.hide();\n      }\n    });\n  },\n  dragHeader: function dragHeader(options) {\n    var that = this,\n      columnElement = options.columnElement,\n      isCommandColumn = !!options.sourceColumn.type;\n    that._isDragging = true;\n    that._dragOptions = options;\n    that._dropOptions = {\n      sourceIndex: options.index,\n      sourceColumnIndex: that._getVisibleIndexObject(options.rowIndex, options.columnIndex),\n      sourceColumnElement: options.columnElement,\n      sourceLocation: options.sourceLocation\n    };\n    var document = _dom_adapter2.default.getDocument();\n    that._onSelectStart = document.onselectstart;\n    document.onselectstart = function () {\n      return false;\n    };\n    that._controller.drag(that._dropOptions);\n    that.element().css({\n      textAlign: columnElement && columnElement.css(\"textAlign\"),\n      height: columnElement && (isCommandColumn && columnElement.get(0).clientHeight || columnElement.height()),\n      width: columnElement && (isCommandColumn && columnElement.get(0).clientWidth || columnElement.width()),\n      whiteSpace: columnElement && columnElement.css(\"whiteSpace\")\n    }).addClass(that.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS)).toggleClass(DRAGGING_COMMAND_CELL_CLASS, isCommandColumn).text(isCommandColumn ? \"\" : options.sourceColumn.caption);\n    that.element().appendTo((0, _swatch_container.getSwatchContainer)(columnElement));\n  },\n  moveHeader: function moveHeader(args) {\n    var newLeft,\n      newTop,\n      moveDeltaX,\n      moveDeltaY,\n      e = args.event,\n      that = e.data.that,\n      eventData = (0, _utils.eventData)(e),\n      isResizing = that._columnsResizerViewController ? that._columnsResizerViewController.isResizing() : false,\n      dragOptions = that._dragOptions;\n    if (that._isDragging && !isResizing) {\n      var $element = that.element();\n      moveDeltaX = Math.abs(eventData.x - dragOptions.columnElement.offset().left - dragOptions.deltaX);\n      moveDeltaY = Math.abs(eventData.y - dragOptions.columnElement.offset().top - dragOptions.deltaY);\n      if ($element.is(\":visible\") || moveDeltaX > DRAGGING_DELTA || moveDeltaY > DRAGGING_DELTA) {\n        $element.show();\n        newLeft = eventData.x - dragOptions.deltaX;\n        newTop = eventData.y - dragOptions.deltaY;\n        $element.css({\n          left: newLeft,\n          top: newTop\n        });\n        that.dockHeader(eventData);\n      }\n      e.preventDefault();\n    }\n  },\n  dockHeader: function dockHeader(eventData) {\n    var i,\n      centerPosition,\n      that = this,\n      targetDraggingPanel = that._getDraggingPanelByPos(eventData),\n      controller = that._controller,\n      params = that._dropOptions,\n      dragOptions = that._dragOptions;\n    if (targetDraggingPanel) {\n      var rtlEnabled = that.option(\"rtlEnabled\"),\n        isVerticalOrientation = \"columnChooser\" === targetDraggingPanel.getName(),\n        axisName = isVerticalOrientation ? \"y\" : \"x\",\n        targetLocation = targetDraggingPanel.getName(),\n        rowIndex = \"headers\" === targetLocation ? dragOptions.rowIndex : void 0,\n        sourceColumn = dragOptions.sourceColumn,\n        columnElements = targetDraggingPanel.getColumnElements(rowIndex, sourceColumn && sourceColumn.ownerBand) || [],\n        pointsByTarget = dragOptions.pointsByTarget = dragOptions.pointsByTarget || {},\n        pointsByColumns = \"columnChooser\" === targetLocation ? [] : pointsByTarget[targetLocation] || controller._generatePointsByColumns((0, _extend.extend)({}, dragOptions, {\n          targetDraggingPanel: targetDraggingPanel,\n          columns: targetDraggingPanel.getColumns(rowIndex),\n          columnElements: columnElements,\n          isVerticalOrientation: isVerticalOrientation,\n          startColumnIndex: \"headers\" === targetLocation && (0, _renderer2.default)(columnElements[0]).index()\n        }));\n      pointsByTarget[targetLocation] = pointsByColumns;\n      params.targetLocation = targetLocation;\n      if (pointsByColumns.length > 0) {\n        for (i = 0; i < pointsByColumns.length; i++) {\n          centerPosition = pointsByColumns[i + 1] && (pointsByColumns[i][axisName] + pointsByColumns[i + 1][axisName]) / 2;\n          if (void 0 === centerPosition || (rtlEnabled && \"x\" === axisName ? eventData[axisName] > centerPosition : eventData[axisName] < centerPosition)) {\n            params.targetColumnIndex = that._getVisibleIndexObject(rowIndex, pointsByColumns[i].columnIndex);\n            if (columnElements[i]) {\n              params.targetColumnElement = columnElements.eq(i);\n              params.isLast = false;\n            } else {\n              params.targetColumnElement = columnElements.last();\n              params.isLast = true;\n            }\n            params.posX = pointsByColumns[i].x;\n            params.posY = pointsByColumns[i].y;\n            controller.dock(params);\n            break;\n          }\n        }\n      } else {\n        that._resetTargetColumnOptions();\n        controller.dock(params);\n      }\n    }\n  },\n  dropHeader: function dropHeader(args) {\n    var e = args.event,\n      that = e.data.that,\n      controller = that._controller;\n    that.element().hide();\n    if (controller && that._isDragging) {\n      controller.drop(that._dropOptions);\n    }\n    that.element().appendTo(that._parentElement());\n    that._dragOptions = null;\n    that._dropOptions = null;\n    that._isDragging = false;\n    _dom_adapter2.default.getDocument().onselectstart = that._onSelectStart || null;\n  }\n});\nvar isNextColumnResizingMode = function isNextColumnResizingMode(that) {\n  return \"widget\" !== that.option(\"columnResizingMode\");\n};\nvar ColumnsResizerViewController = _uiGrid_core2.default.ViewController.inherit({\n  _isHeadersRowArea: function _isHeadersRowArea(posY) {\n    if (this._columnHeadersView) {\n      var headersRowHeight,\n        offsetTop,\n        element = this._columnHeadersView.element();\n      if (element) {\n        offsetTop = element.offset().top;\n        headersRowHeight = this._columnHeadersView.getHeadersRowHeight();\n        return posY >= offsetTop && posY <= offsetTop + headersRowHeight;\n      }\n    }\n    return false;\n  },\n  _pointCreated: function _pointCreated(point, cellsLength, columns) {\n    var currentColumn,\n      nextColumn,\n      isNextColumnMode = isNextColumnResizingMode(this),\n      rtlEnabled = this.option(\"rtlEnabled\"),\n      firstPointColumnIndex = !isNextColumnMode && rtlEnabled ? 0 : 1;\n    if (point.index >= firstPointColumnIndex && point.index < cellsLength + (!isNextColumnMode && !rtlEnabled ? 1 : 0)) {\n      point.columnIndex -= firstPointColumnIndex;\n      currentColumn = columns[point.columnIndex] || {};\n      nextColumn = columns[point.columnIndex + 1] || {};\n      return !(isNextColumnMode ? currentColumn.allowResizing && nextColumn.allowResizing : currentColumn.allowResizing);\n    }\n    return true;\n  },\n  _getTargetPoint: function _getTargetPoint(pointsByColumns, currentX, deltaX) {\n    if (pointsByColumns) {\n      for (var i = 0; i < pointsByColumns.length; i++) {\n        if (pointsByColumns[i].x === pointsByColumns[0].x && pointsByColumns[i + 1] && pointsByColumns[i].x === pointsByColumns[i + 1].x) {\n          continue;\n        }\n        if (pointsByColumns[i].x - deltaX <= currentX && currentX <= pointsByColumns[i].x + deltaX) {\n          return pointsByColumns[i];\n        }\n      }\n    }\n    return null;\n  },\n  _moveSeparator: function _moveSeparator(args) {\n    var e = args.event,\n      that = e.data,\n      columnsSeparatorWidth = that._columnsSeparatorView.width(),\n      isNextColumnMode = isNextColumnResizingMode(that),\n      deltaX = columnsSeparatorWidth / 2,\n      parentOffset = that._$parentContainer.offset(),\n      parentOffsetLeft = parentOffset.left,\n      eventData = (0, _utils.eventData)(e);\n    if (that._isResizing && that._resizingInfo) {\n      if (parentOffsetLeft <= eventData.x && (!isNextColumnMode || eventData.x <= parentOffsetLeft + that._$parentContainer.width())) {\n        if (that._updateColumnsWidthIfNeeded(eventData.x)) {\n          var $cell = that._columnHeadersView.getColumnElements().eq(that._resizingInfo.currentColumnIndex);\n          that._columnsSeparatorView.moveByX($cell.offset().left + (isNextColumnMode && that.option(\"rtlEnabled\") ? 0 : $cell.outerWidth()));\n          that._tablePositionController.update(that._targetPoint.y);\n          e.preventDefault();\n        }\n      }\n    } else {\n      if (that._isHeadersRowArea(eventData.y)) {\n        if (that._previousParentOffset) {\n          if (that._previousParentOffset.left !== parentOffset.left || that._previousParentOffset.top !== parentOffset.top) {\n            that.pointsByColumns(null);\n          }\n        }\n        that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, columnsSeparatorWidth);\n        that._previousParentOffset = parentOffset;\n        that._isReadyResizing = false;\n        if (that._targetPoint) {\n          that._columnsSeparatorView.changeCursor(\"col-resize\");\n          that._columnsSeparatorView.moveByX(that._targetPoint.x - deltaX);\n          that._tablePositionController.update(that._targetPoint.y);\n          that._isReadyResizing = true;\n          e.preventDefault();\n        } else {\n          that._columnsSeparatorView.changeCursor();\n        }\n      } else {\n        that.pointsByColumns(null);\n        that._isReadyResizing = false;\n        that._columnsSeparatorView.changeCursor();\n      }\n    }\n  },\n  _endResizing: function _endResizing(args) {\n    var e = args.event,\n      that = e.data;\n    if (that._isResizing) {\n      that.pointsByColumns(null);\n      that._resizingInfo = null;\n      that._columnsSeparatorView.hide();\n      that._columnsSeparatorView.changeCursor();\n      that._trackerView.hide();\n      if (!isNextColumnResizingMode(that)) {\n        var pageIndex = that.component.pageIndex();\n        that.component.updateDimensions();\n        if (that.option(\"wordWrapEnabled\") && \"virtual\" === that.option(\"scrolling.mode\")) {\n          that.component.refresh().done(function () {\n            that._rowsView.scrollToPage(pageIndex);\n          });\n        }\n      }\n      that._isReadyResizing = false;\n      that._isResizing = false;\n    }\n  },\n  _getNextColumnIndex: function _getNextColumnIndex(currentColumnIndex) {\n    return currentColumnIndex + 1;\n  },\n  _setupResizingInfo: function _setupResizingInfo(posX) {\n    var that = this,\n      currentColumnIndex = that._targetPoint.columnIndex,\n      nextColumnIndex = that._getNextColumnIndex(currentColumnIndex),\n      currentHeader = that._columnHeadersView.getHeaderElement(currentColumnIndex),\n      nextHeader = that._columnHeadersView.getHeaderElement(nextColumnIndex);\n    that._resizingInfo = {\n      startPosX: posX,\n      currentColumnIndex: currentColumnIndex,\n      currentColumnWidth: currentHeader && currentHeader.length > 0 ? currentHeader[0].getBoundingClientRect().width : 0,\n      nextColumnIndex: nextColumnIndex,\n      nextColumnWidth: nextHeader && nextHeader.length > 0 ? nextHeader[0].getBoundingClientRect().width : 0\n    };\n  },\n  _startResizing: function _startResizing(args) {\n    var e = args.event,\n      that = e.data,\n      eventData = (0, _utils.eventData)(e),\n      editingController = that.getController(\"editing\"),\n      editingMode = that.option(\"editing.mode\"),\n      isCellEditing = editingController.isEditing() && (\"batch\" === editingMode || \"cell\" === editingMode);\n    if ((0, _utils.isTouchEvent)(e)) {\n      if (that._isHeadersRowArea(eventData.y)) {\n        that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH);\n        if (that._targetPoint) {\n          that._columnsSeparatorView.moveByX(that._targetPoint.x - that._columnsSeparatorView.width() / 2);\n          that._isReadyResizing = true;\n        }\n      } else {\n        that._isReadyResizing = false;\n      }\n    }\n    if (that._isReadyResizing && !isCellEditing) {\n      that._setupResizingInfo(eventData.x);\n      that._tablePositionController.update(that._targetPoint.y);\n      that._columnsSeparatorView.show();\n      that._trackerView.show();\n      that._isResizing = true;\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  },\n  _generatePointsByColumns: function _generatePointsByColumns() {\n    var that = this,\n      columns = that._columnsController ? that._columnsController.getVisibleColumns() : [],\n      cells = that._columnHeadersView.getColumnElements(),\n      pointsByColumns = [];\n    if (cells && cells.length > 0) {\n      pointsByColumns = _uiGrid_core4.default.getPointsByColumns(cells, function (point) {\n        return that._pointCreated(point, cells.length, columns);\n      });\n    }\n    that._pointsByColumns = pointsByColumns;\n  },\n  _unsubscribeFromEvents: function _unsubscribeFromEvents() {\n    this._moveSeparatorHandler && _events_engine2.default.off(_dom_adapter2.default.getDocument(), (0, _utils.addNamespace)(_pointer2.default.move, MODULE_NAMESPACE), this._moveSeparatorHandler);\n    this._startResizingHandler && _events_engine2.default.off(this._$parentContainer, (0, _utils.addNamespace)(_pointer2.default.down, MODULE_NAMESPACE), this._startResizingHandler);\n    if (this._endResizingHandler) {\n      _events_engine2.default.off(this._columnsSeparatorView.element(), (0, _utils.addNamespace)(_pointer2.default.up, MODULE_NAMESPACE), this._endResizingHandler);\n      _events_engine2.default.off(_dom_adapter2.default.getDocument(), (0, _utils.addNamespace)(_pointer2.default.up, MODULE_NAMESPACE), this._endResizingHandler);\n    }\n  },\n  _subscribeToEvents: function _subscribeToEvents() {\n    this._moveSeparatorHandler = this.createAction(this._moveSeparator);\n    this._startResizingHandler = this.createAction(this._startResizing);\n    this._endResizingHandler = this.createAction(this._endResizing);\n    _events_engine2.default.on(_dom_adapter2.default.getDocument(), (0, _utils.addNamespace)(_pointer2.default.move, MODULE_NAMESPACE), this, this._moveSeparatorHandler);\n    _events_engine2.default.on(this._$parentContainer, (0, _utils.addNamespace)(_pointer2.default.down, MODULE_NAMESPACE), this, this._startResizingHandler);\n    _events_engine2.default.on(this._columnsSeparatorView.element(), (0, _utils.addNamespace)(_pointer2.default.up, MODULE_NAMESPACE), this, this._endResizingHandler);\n    _events_engine2.default.on(_dom_adapter2.default.getDocument(), (0, _utils.addNamespace)(_pointer2.default.up, MODULE_NAMESPACE), this, this._endResizingHandler);\n  },\n  _updateColumnsWidthIfNeeded: function _updateColumnsWidthIfNeeded(posX) {\n    var deltaX,\n      nextCellWidth,\n      column,\n      minWidth,\n      nextColumn,\n      cellWidth,\n      needUpdate = false,\n      resizingInfo = this._resizingInfo,\n      columnsController = this._columnsController,\n      visibleColumns = columnsController.getVisibleColumns(),\n      columnsSeparatorWidth = this._columnsSeparatorView.width(),\n      contentWidth = this._rowsView.contentWidth(),\n      isNextColumnMode = isNextColumnResizingMode(this),\n      adaptColumnWidthByRatio = isNextColumnMode && this.option(\"adaptColumnWidthByRatio\") && !this.option(\"columnAutoWidth\");\n    function isPercentWidth(width) {\n      return _type2.default.isString(width) && \"%\" === width.slice(-1);\n    }\n    function setColumnWidth(column, columnWidth, contentWidth, adaptColumnWidthByRatio) {\n      if (column) {\n        var oldColumnWidth = column.width;\n        if (oldColumnWidth) {\n          adaptColumnWidthByRatio = isPercentWidth(oldColumnWidth);\n        }\n        if (adaptColumnWidthByRatio) {\n          column && columnsController.columnOption(column.index, \"visibleWidth\", columnWidth);\n          column && columnsController.columnOption(column.index, \"width\", (columnWidth / contentWidth * 100).toFixed(3) + \"%\");\n        } else {\n          column && columnsController.columnOption(column.index, \"visibleWidth\", null);\n          column && columnsController.columnOption(column.index, \"width\", columnWidth);\n        }\n      }\n    }\n    function correctContentWidth(contentWidth, visibleColumns) {\n      var totalPercent,\n        allColumnsHaveWidth = visibleColumns.every(function (column) {\n          return column.width;\n        });\n      if (allColumnsHaveWidth) {\n        totalPercent = visibleColumns.reduce(function (sum, column) {\n          if (isPercentWidth(column.width)) {\n            sum += parseFloat(column.width);\n          }\n          return sum;\n        }, 0);\n        if (totalPercent > 100) {\n          contentWidth = contentWidth / totalPercent * 100;\n        }\n      }\n      return contentWidth;\n    }\n    deltaX = posX - resizingInfo.startPosX;\n    if (isNextColumnMode && this.option(\"rtlEnabled\")) {\n      deltaX = -deltaX;\n    }\n    cellWidth = resizingInfo.currentColumnWidth + deltaX;\n    column = visibleColumns[resizingInfo.currentColumnIndex];\n    minWidth = column && column.minWidth || columnsSeparatorWidth;\n    needUpdate = cellWidth >= minWidth;\n    if (isNextColumnMode) {\n      nextCellWidth = resizingInfo.nextColumnWidth - deltaX;\n      nextColumn = visibleColumns[resizingInfo.nextColumnIndex];\n      minWidth = nextColumn && nextColumn.minWidth || columnsSeparatorWidth;\n      needUpdate = needUpdate && nextCellWidth >= minWidth;\n    }\n    if (needUpdate) {\n      columnsController.beginUpdate();\n      cellWidth = Math.floor(cellWidth);\n      contentWidth = correctContentWidth(contentWidth, visibleColumns);\n      setColumnWidth(column, cellWidth, contentWidth, adaptColumnWidthByRatio);\n      if (isNextColumnMode) {\n        nextCellWidth = Math.floor(nextCellWidth);\n        setColumnWidth(nextColumn, nextCellWidth, contentWidth, adaptColumnWidthByRatio);\n      } else {\n        var columnWidths = this._columnHeadersView.getColumnWidths();\n        columnWidths[resizingInfo.currentColumnIndex] = cellWidth;\n        var hasScroll = columnWidths.reduce(function (totalWidth, width) {\n          return totalWidth + width;\n        }, 0) > this._rowsView.contentWidth();\n        if (!hasScroll) {\n          var lastColumnIndex = _uiGrid_core4.default.getLastResizableColumnIndex(visibleColumns);\n          if (lastColumnIndex >= 0) {\n            columnsController.columnOption(visibleColumns[lastColumnIndex].index, \"visibleWidth\", \"auto\");\n          }\n        }\n        for (var i = 0; i < columnWidths.length; i++) {\n          if (visibleColumns[i] && visibleColumns[i] !== column && void 0 === visibleColumns[i].width) {\n            columnsController.columnOption(visibleColumns[i].index, \"width\", columnWidths[i]);\n          }\n        }\n      }\n      columnsController.endUpdate();\n    }\n    return needUpdate;\n  },\n  _subscribeToCallback: function _subscribeToCallback(callback, handler) {\n    callback.add(handler);\n    this._subscribesToCallbacks.push({\n      callback: callback,\n      handler: handler\n    });\n  },\n  _unsubscribeFromCallbacks: function _unsubscribeFromCallbacks() {\n    var i, subscribe;\n    for (i = 0; i < this._subscribesToCallbacks.length; i++) {\n      subscribe = this._subscribesToCallbacks[i];\n      subscribe.callback.remove(subscribe.handler);\n    }\n    this._subscribesToCallbacks = [];\n  },\n  _unsubscribes: function _unsubscribes() {\n    this._unsubscribeFromEvents();\n    this._unsubscribeFromCallbacks();\n  },\n  _init: function _init() {\n    var that = this,\n      generatePointsByColumnsHandler = function generatePointsByColumnsHandler() {\n        if (!that._isResizing) {\n          that.pointsByColumns(null);\n        }\n      },\n      generatePointsByColumnsScrollHandler = function generatePointsByColumnsScrollHandler(offset) {\n        if (that._scrollLeft !== offset.left) {\n          that._scrollLeft = offset.left;\n          that.pointsByColumns(null);\n        }\n      };\n    that._columnsSeparatorView = that.getView(\"columnsSeparatorView\");\n    that._columnHeadersView = that.getView(\"columnHeadersView\");\n    that._trackerView = that.getView(\"trackerView\");\n    that._rowsView = that.getView(\"rowsView\");\n    that._columnsController = that.getController(\"columns\");\n    that._tablePositionController = that.getController(\"tablePosition\");\n    that._$parentContainer = that._columnsSeparatorView.component.$element();\n    that._subscribeToCallback(that._columnHeadersView.renderCompleted, generatePointsByColumnsHandler);\n    that._subscribeToCallback(that._columnHeadersView.resizeCompleted, generatePointsByColumnsHandler);\n    that._subscribeToCallback(that._columnsSeparatorView.renderCompleted, function () {\n      that._unsubscribeFromEvents();\n      that._subscribeToEvents();\n    });\n    that._subscribeToCallback(that._rowsView.renderCompleted, function () {\n      that._rowsView.scrollChanged.remove(generatePointsByColumnsScrollHandler);\n      that._rowsView.scrollChanged.add(generatePointsByColumnsScrollHandler);\n    });\n    var previousScrollbarVisibility = 0 !== that._rowsView.getScrollbarWidth();\n    var previousTableHeight = 0;\n    that._subscribeToCallback(that.getController(\"tablePosition\").positionChanged, function (e) {\n      if (that._isResizing && !that._rowsView.isResizing) {\n        var scrollbarVisibility = 0 !== that._rowsView.getScrollbarWidth();\n        if (previousScrollbarVisibility !== scrollbarVisibility || previousTableHeight && previousTableHeight !== e.height) {\n          previousScrollbarVisibility = scrollbarVisibility;\n          previousTableHeight = e.height;\n          that.component.updateDimensions();\n        } else {\n          that._rowsView.updateFreeSpaceRowHeight();\n        }\n      }\n      previousTableHeight = e.height;\n    });\n  },\n  optionChanged: function optionChanged(args) {\n    this.callBase(args);\n    if (\"allowColumnResizing\" === args.name) {\n      if (args.value) {\n        this._init();\n        this._subscribeToEvents();\n      } else {\n        this._unsubscribes();\n      }\n    }\n  },\n  isResizing: function isResizing() {\n    return this._isResizing;\n  },\n  init: function init() {\n    this._subscribesToCallbacks = [];\n    if (allowResizing(this)) {\n      this._init();\n    }\n  },\n  pointsByColumns: function pointsByColumns(value) {\n    if (void 0 !== value) {\n      this._pointsByColumns = value;\n    } else {\n      if (!this._pointsByColumns) {\n        this._generatePointsByColumns();\n      }\n      return this._pointsByColumns;\n    }\n  },\n  dispose: function dispose() {\n    this._unsubscribes();\n    this.callBase();\n  }\n});\nvar TablePositionViewController = _uiGrid_core2.default.ViewController.inherit({\n  update: function update(top) {\n    var that = this,\n      params = {},\n      $element = that._columnHeadersView.element(),\n      offset = $element && $element.offset(),\n      offsetTop = offset && offset.top || 0,\n      diffOffsetTop = _type2.default.isDefined(top) ? Math.abs(top - offsetTop) : 0,\n      columnsHeadersHeight = that._columnHeadersView ? that._columnHeadersView.getHeight() : 0,\n      rowsHeight = that._rowsView ? that._rowsView.height() - that._rowsView.getScrollbarWidth(true) : 0;\n    params.height = columnsHeadersHeight + rowsHeight - diffOffsetTop;\n    if (null !== top && $element && $element.length) {\n      params.top = $element[0].offsetTop + diffOffsetTop;\n    }\n    that.positionChanged.fire(params);\n  },\n  init: function init() {\n    var that = this;\n    that.callBase();\n    that._columnHeadersView = this.getView(\"columnHeadersView\");\n    that._rowsView = this.getView(\"rowsView\");\n    that._pagerView = this.getView(\"pagerView\");\n    that._rowsView.resizeCompleted.add(function () {\n      if (that.option(\"allowColumnResizing\")) {\n        that.update(null);\n      }\n    });\n  },\n  ctor: function ctor(component) {\n    this.callBase(component);\n    this.positionChanged = (0, _callbacks2.default)();\n  }\n});\nvar DraggingHeaderViewController = _uiGrid_core2.default.ViewController.inherit({\n  _generatePointsByColumns: function _generatePointsByColumns(options) {\n    var that = this;\n    return _uiGrid_core4.default.getPointsByColumns(options.columnElements, function (point) {\n      return that._pointCreated(point, options.columns, options.targetDraggingPanel.getName(), options.sourceColumn);\n    }, options.isVerticalOrientation, options.startColumnIndex);\n  },\n  _pointCreated: function _pointCreated(point, columns, location, sourceColumn) {\n    var targetColumn = columns[point.columnIndex],\n      prevColumn = columns[point.columnIndex - 1];\n    switch (location) {\n      case \"columnChooser\":\n        return true;\n      case \"headers\":\n        return sourceColumn && !sourceColumn.allowReordering || (!targetColumn || !targetColumn.allowReordering) && (!prevColumn || !prevColumn.allowReordering);\n      default:\n        return 0 === columns.length;\n    }\n  },\n  _subscribeToEvents: function _subscribeToEvents(draggingHeader, draggingPanels) {\n    var that = this;\n    (0, _iterator.each)(draggingPanels, function (_, draggingPanel) {\n      if (draggingPanel) {\n        var i,\n          columns,\n          columnElements,\n          rowCount = draggingPanel.getRowCount ? draggingPanel.getRowCount() : 1,\n          nameDraggingPanel = draggingPanel.getName(),\n          subscribeToEvents = function subscribeToEvents(index, columnElement) {\n            if (!columnElement) {\n              return;\n            }\n            var $columnElement = (0, _renderer2.default)(columnElement),\n              column = columns[index];\n            if (draggingPanel.allowDragging(column, nameDraggingPanel, draggingPanels)) {\n              $columnElement.addClass(that.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS));\n              _events_engine2.default.on($columnElement, (0, _utils.addNamespace)(_drag2.default.start, MODULE_NAMESPACE), that.createAction(function (args) {\n                var e = args.event,\n                  eventData = (0, _utils.eventData)(e);\n                draggingHeader.dragHeader({\n                  deltaX: eventData.x - (0, _renderer2.default)(e.currentTarget).offset().left,\n                  deltaY: eventData.y - (0, _renderer2.default)(e.currentTarget).offset().top,\n                  sourceColumn: column,\n                  index: column.index,\n                  columnIndex: index,\n                  columnElement: $columnElement,\n                  sourceLocation: nameDraggingPanel,\n                  draggingPanels: draggingPanels,\n                  rowIndex: that._columnsController.getRowIndex(column.index, true)\n                });\n              }));\n              _events_engine2.default.on($columnElement, (0, _utils.addNamespace)(_drag2.default.move, MODULE_NAMESPACE), {\n                that: draggingHeader\n              }, that.createAction(draggingHeader.moveHeader));\n              _events_engine2.default.on($columnElement, (0, _utils.addNamespace)(_drag2.default.end, MODULE_NAMESPACE), {\n                that: draggingHeader\n              }, that.createAction(draggingHeader.dropHeader));\n            }\n          };\n        for (i = 0; i < rowCount; i++) {\n          columnElements = draggingPanel.getColumnElements(i) || [];\n          if (columnElements.length) {\n            columns = draggingPanel.getColumns(i) || [];\n            (0, _iterator.each)(columnElements, subscribeToEvents);\n          }\n        }\n      }\n    });\n  },\n  _unsubscribeFromEvents: function _unsubscribeFromEvents(draggingHeader, draggingPanels) {\n    var that = this;\n    (0, _iterator.each)(draggingPanels, function (_, draggingPanel) {\n      if (draggingPanel) {\n        var columnElements = draggingPanel.getColumnElements() || [];\n        (0, _iterator.each)(columnElements, function (index, columnElement) {\n          var $columnElement = (0, _renderer2.default)(columnElement);\n          _events_engine2.default.off($columnElement, (0, _utils.addNamespace)(_drag2.default.start, MODULE_NAMESPACE));\n          _events_engine2.default.off($columnElement, (0, _utils.addNamespace)(_drag2.default.move, MODULE_NAMESPACE));\n          _events_engine2.default.off($columnElement, (0, _utils.addNamespace)(_drag2.default.end, MODULE_NAMESPACE));\n          $columnElement.removeClass(that.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS));\n        });\n      }\n    });\n  },\n  _getSeparator: function _getSeparator(targetLocation) {\n    return \"headers\" === targetLocation ? this._columnsSeparatorView : this._blockSeparatorView;\n  },\n  hideSeparators: function hideSeparators(type) {\n    var blockSeparator = this._blockSeparatorView,\n      columnsSeparator = this._columnsSeparatorView;\n    this._animationColumnIndex = null;\n    blockSeparator && blockSeparator.hide();\n    \"block\" !== type && columnsSeparator && columnsSeparator.hide();\n  },\n  init: function init() {\n    var subscribeToEvents,\n      that = this;\n    that.callBase();\n    that._columnsController = that.getController(\"columns\");\n    that._columnHeadersView = that.getView(\"columnHeadersView\");\n    that._columnsSeparatorView = that.getView(\"columnsSeparatorView\");\n    that._draggingHeaderView = that.getView(\"draggingHeaderView\");\n    that._rowsView = that.getView(\"rowsView\");\n    that._blockSeparatorView = that.getView(\"blockSeparatorView\");\n    that._headerPanelView = that.getView(\"headerPanel\");\n    that._columnChooserView = that.getView(\"columnChooserView\");\n    subscribeToEvents = function subscribeToEvents() {\n      if (that._draggingHeaderView) {\n        var draggingPanels = [that._columnChooserView, that._columnHeadersView, that._headerPanelView];\n        that._unsubscribeFromEvents(that._draggingHeaderView, draggingPanels);\n        that._subscribeToEvents(that._draggingHeaderView, draggingPanels);\n      }\n    };\n    that._columnHeadersView.renderCompleted.add(subscribeToEvents);\n    that._headerPanelView && that._headerPanelView.renderCompleted.add(subscribeToEvents);\n    that._columnChooserView && that._columnChooserView.renderCompleted.add(subscribeToEvents);\n  },\n  allowDrop: function allowDrop(parameters) {\n    return this._columnsController.allowMoveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation);\n  },\n  drag: function drag(parameters) {\n    var sourceIndex = parameters.sourceIndex,\n      sourceLocation = parameters.sourceLocation,\n      sourceColumnElement = parameters.sourceColumnElement,\n      headersView = this._columnHeadersView,\n      rowsView = this._rowsView;\n    if (sourceColumnElement) {\n      sourceColumnElement.css({\n        opacity: COLUMN_OPACITY\n      });\n      if (\"headers\" === sourceLocation) {\n        headersView && headersView.setRowsOpacity(sourceIndex, COLUMN_OPACITY);\n        rowsView && rowsView.setRowsOpacity(sourceIndex, COLUMN_OPACITY);\n      }\n    }\n  },\n  dock: function dock(parameters) {\n    var that = this,\n      targetColumnIndex = _type2.default.isObject(parameters.targetColumnIndex) ? parameters.targetColumnIndex.columnIndex : parameters.targetColumnIndex,\n      sourceLocation = parameters.sourceLocation,\n      targetLocation = parameters.targetLocation,\n      separator = that._getSeparator(targetLocation),\n      hasTargetVisibleIndex = targetColumnIndex >= 0;\n    var showSeparator = function showSeparator() {\n      if (that._animationColumnIndex !== targetColumnIndex) {\n        that.hideSeparators();\n        separator.element()[parameters.isLast ? \"insertAfter\" : \"insertBefore\"](parameters.targetColumnElement);\n        that._animationColumnIndex = targetColumnIndex;\n        separator.show(targetLocation);\n      }\n    };\n    that._columnHeadersView.element().find(\".\" + HEADER_ROW_CLASS).toggleClass(that.addWidgetPrefix(HEADERS_DROP_HIGHLIGHT_CLASS), \"headers\" !== sourceLocation && \"headers\" === targetLocation && !hasTargetVisibleIndex);\n    if (separator) {\n      if (that.allowDrop(parameters) && hasTargetVisibleIndex) {\n        if (\"group\" === targetLocation || \"columnChooser\" === targetLocation) {\n          showSeparator();\n        } else {\n          that.hideSeparators(\"block\");\n          that.getController(\"tablePosition\").update(parameters.posY);\n          separator.moveByX(parameters.posX - separator.width());\n          separator.show();\n        }\n      } else {\n        that.hideSeparators();\n      }\n    }\n  },\n  drop: function drop(parameters) {\n    var sourceColumnElement = parameters.sourceColumnElement;\n    if (sourceColumnElement) {\n      sourceColumnElement.css({\n        opacity: \"\"\n      });\n      this._columnHeadersView.setRowsOpacity(parameters.sourceIndex, \"\");\n      this._rowsView.setRowsOpacity(parameters.sourceIndex, \"\");\n      this._columnHeadersView.element().find(\".\" + HEADER_ROW_CLASS).removeClass(this.addWidgetPrefix(HEADERS_DROP_HIGHLIGHT_CLASS));\n    }\n    if (this.allowDrop(parameters)) {\n      var separator = this._getSeparator(parameters.targetLocation);\n      if (separator) {\n        separator.hide();\n      }\n      this._columnsController.moveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation);\n    }\n  },\n  dispose: function dispose() {\n    if (this._draggingHeaderView) {\n      this._unsubscribeFromEvents(this._draggingHeaderView, [this._columnChooserView, this._columnHeadersView, this._headerPanelView]);\n    }\n  }\n});\nmodule.exports = {\n  views: {\n    columnsSeparatorView: ColumnsSeparatorView,\n    blockSeparatorView: BlockSeparatorView,\n    draggingHeaderView: DraggingHeaderView,\n    trackerView: TrackerView\n  },\n  controllers: {\n    draggingHeader: DraggingHeaderViewController,\n    tablePosition: TablePositionViewController,\n    columnsResizer: ColumnsResizerViewController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _needUpdateRowHeight: function _needUpdateRowHeight(itemCount) {\n          var wordWrapEnabled = this.option(\"wordWrapEnabled\"),\n            columnsResizerController = this.getController(\"columnsResizer\"),\n            isResizing = columnsResizerController.isResizing();\n          return this.callBase.apply(this, arguments) || itemCount > 0 && wordWrapEnabled && isResizing;\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}