{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 19.2.2-beta\n * Build date: Tue Oct 01 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar utils_1 = require(\"./utils\");\nfunction buildConfig(root, ignoreInitialValues) {\n  var templatesAccum = {};\n  var options = buildNode(root, templatesAccum, ignoreInitialValues);\n  return {\n    templates: templatesAccum,\n    options: options\n  };\n}\nexports.buildConfig = buildConfig;\nfunction buildNode(node, templatesAccum, ignoreInitialValues) {\n  var result = {};\n  for (var _i = 0, _a = Object.keys(node.predefinedOptions); _i < _a.length; _i++) {\n    var key = _a[_i];\n    result[key] = node.predefinedOptions[key];\n  }\n  for (var _b = 0, _c = Object.keys(node.configs); _b < _c.length; _b++) {\n    var key = _c[_b];\n    result[key] = buildNode(node.configs[key], templatesAccum, ignoreInitialValues);\n  }\n  for (var _d = 0, _e = Object.keys(node.configCollections); _d < _e.length; _d++) {\n    var key = _e[_d];\n    result[key] = node.configCollections[key].map(function (item) {\n      return buildNode(item, templatesAccum, ignoreInitialValues);\n    });\n  }\n  if (!ignoreInitialValues) {\n    for (var _f = 0, _g = Object.keys(node.initialOptions); _f < _g.length; _f++) {\n      var key = _g[_f];\n      result[key] = node.initialOptions[key];\n    }\n  }\n  for (var _h = 0, _j = Object.keys(node.options); _h < _j.length; _h++) {\n    var key = _j[_h];\n    result[key] = node.options[key];\n  }\n  buildTemplates(node, result, templatesAccum);\n  return result;\n}\nexports.buildNode = buildNode;\nfunction buildTemplates(node, optionsAccum, templatesAccum) {\n  node.templates.map(function (template) {\n    if (template.isAnonymous) {\n      var templateName = utils_1.mergeNameParts(node.fullName, template.optionName);\n      optionsAccum[template.optionName] = templateName;\n      templatesAccum[templateName] = template;\n    } else {\n      templatesAccum[template.optionName] = template;\n    }\n  });\n}\nexports.buildTemplates = buildTemplates;\nvar ValueType;\n(function (ValueType) {\n  ValueType[ValueType[\"Simple\"] = 0] = \"Simple\";\n  ValueType[ValueType[\"Complex\"] = 1] = \"Complex\";\n  ValueType[ValueType[\"Array\"] = 2] = \"Array\";\n})(ValueType || (ValueType = {}));\nexports.ValueType = ValueType;\nfunction findValue(node, path) {\n  var name = path.shift();\n  if (!name) {\n    return {\n      value: buildConfig(node, true).options,\n      type: ValueType.Complex\n    };\n  }\n  var optionInfo = utils_1.parseOptionName(name);\n  if (optionInfo.isCollectionItem) {\n    var collection = node.configCollections[optionInfo.name];\n    if (!collection) {\n      return;\n    }\n    var item = collection[optionInfo.index];\n    if (!item) {\n      return;\n    }\n    return findValue(item, path);\n  }\n  var child = node.configs[optionInfo.name];\n  if (child) {\n    return findValue(child, path);\n  }\n  var childCollection = node.configCollections[optionInfo.name];\n  if (childCollection) {\n    if (path.length !== 0) {\n      return;\n    }\n    return {\n      value: childCollection.map(function (item) {\n        return buildNode(item, {}, true);\n      }),\n      type: ValueType.Array\n    };\n  }\n  var value = node.options[optionInfo.name];\n  if (value) {\n    return findValueInObject(value, path);\n  }\n  return;\n}\nexports.findValue = findValue;\nfunction findValueInObject(obj, path) {\n  if (!obj) {\n    return;\n  }\n  var key = path.shift();\n  if (!key) {\n    return {\n      value: obj,\n      type: ValueType.Simple\n    };\n  }\n  return findValueInObject(obj[key], path);\n}","map":null,"metadata":{},"sourceType":"script"}