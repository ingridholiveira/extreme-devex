{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _window = require(\"../../core/utils/window\");\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _guid = require(\"../../core/guid\");\nvar _guid2 = _interopRequireDefault(_guid);\nvar _type = require(\"../../core/utils/type\");\nvar _type2 = _interopRequireDefault(_type);\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _click = require(\"../../events/click\");\nvar _click2 = _interopRequireDefault(_click);\nvar _double_click = require(\"../../events/double_click\");\nvar _double_click2 = _interopRequireDefault(_double_click);\nvar _pointer = require(\"../../events/pointer\");\nvar _pointer2 = _interopRequireDefault(_pointer);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _utils = require(\"../../events/utils\");\nvar _dialog = require(\"../dialog\");\nvar _dialog2 = _interopRequireDefault(_dialog);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _button = require(\"../button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _popup = require(\"../popup\");\nvar _popup2 = _interopRequireDefault(_popup);\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _devices = require(\"../../core/devices\");\nvar _devices2 = _interopRequireDefault(_devices);\nvar _form = require(\"../form\");\nvar _form2 = _interopRequireDefault(_form);\nvar _hold = require(\"../../events/hold\");\nvar _hold2 = _interopRequireDefault(_hold);\nvar _deferred = require(\"../../core/utils/deferred\");\nvar _deferred2 = _interopRequireDefault(_deferred);\nvar _common = require(\"../../core/utils/common\");\nvar _common2 = _interopRequireDefault(_common);\nvar _icon = require(\"../../core/utils/icon\");\nvar _icon2 = _interopRequireDefault(_icon);\nvar _ui3 = require(\"../scroll_view/ui.scrollable\");\nvar _ui4 = _interopRequireDefault(_ui3);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nvar EDIT_FORM_CLASS = \"edit-form\",\n  EDIT_FORM_ITEM_CLASS = \"edit-form-item\",\n  FOCUS_OVERLAY_CLASS = \"focus-overlay\",\n  READONLY_CLASS = \"readonly\",\n  EDIT_POPUP_CLASS = \"edit-popup\",\n  FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\",\n  ADD_ROW_BUTTON_CLASS = \"addrow-button\",\n  LINK_CLASS = \"dx-link\",\n  EDITOR_CELL_CLASS = \"dx-editor-cell\",\n  ROW_SELECTED = \"dx-selection\",\n  EDIT_ROW = \"dx-edit-row\",\n  EDIT_BUTTON_CLASS = \"dx-edit-button\",\n  COMMAND_EDIT_CLASS = \"dx-command-edit\",\n  COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\",\n  SCROLLABLE_CONTAINER_CLASS = \"dx-scrollable-container\",\n  BUTTON_CLASS = \"dx-button\",\n  INSERT_INDEX = \"__DX_INSERT_INDEX__\",\n  ROW_CLASS = \"dx-row\",\n  ROW_REMOVED = \"dx-row-removed\",\n  ROW_INSERTED = \"dx-row-inserted\",\n  ROW_MODIFIED = \"dx-row-modified\",\n  CELL_MODIFIED = \"dx-cell-modified\",\n  CELL_HIGHLIGHT_OUTLINE = \"dx-highlight-outline\",\n  EDITING_NAMESPACE = \"dxDataGridEditing\",\n  DATA_ROW_CLASS = \"dx-data-row\",\n  CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\",\n  EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\",\n  FOCUSABLE_ELEMENT_SELECTOR = \"[tabindex], \" + EDITORS_INPUT_SELECTOR,\n  EDIT_MODE_BATCH = \"batch\",\n  EDIT_MODE_ROW = \"row\",\n  EDIT_MODE_CELL = \"cell\",\n  EDIT_MODE_FORM = \"form\",\n  EDIT_MODE_POPUP = \"popup\",\n  DATA_EDIT_DATA_INSERT_TYPE = \"insert\",\n  DATA_EDIT_DATA_UPDATE_TYPE = \"update\",\n  DATA_EDIT_DATA_REMOVE_TYPE = \"remove\",\n  POINTER_EVENTS_TARGET_CLASS = \"dx-pointer-events-target\",\n  DEFAULT_START_EDIT_ACTION = \"click\",\n  EDIT_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP],\n  ROW_BASED_MODES = [EDIT_MODE_ROW, EDIT_MODE_FORM, EDIT_MODE_POPUP],\n  CELL_BASED_MODES = [EDIT_MODE_BATCH, EDIT_MODE_CELL],\n  FORM_BASED_MODES = [EDIT_MODE_FORM, EDIT_MODE_POPUP],\n  MODES_WITH_DELAYED_FOCUS = [EDIT_MODE_ROW, EDIT_MODE_FORM],\n  TARGET_COMPONENT_NAME = \"targetComponent\";\nvar EDIT_LINK_CLASS = {\n    save: \"dx-link-save\",\n    cancel: \"dx-link-cancel\",\n    edit: \"dx-link-edit\",\n    undelete: \"dx-link-undelete\",\n    \"delete\": \"dx-link-delete\",\n    add: \"dx-link-add\"\n  },\n  EDIT_ICON_CLASS = {\n    save: \"save\",\n    cancel: \"revert\",\n    edit: \"edit\",\n    undelete: \"revert\",\n    \"delete\": \"trash\",\n    add: \"add\"\n  },\n  METHOD_NAMES = {\n    edit: \"editRow\",\n    \"delete\": \"deleteRow\",\n    undelete: \"undeleteRow\",\n    save: \"saveEditData\",\n    cancel: \"cancelEditData\",\n    add: \"addRowByRowIndex\"\n  },\n  ACTION_OPTION_NAMES = {\n    add: \"allowAdding\",\n    edit: \"allowUpdating\",\n    \"delete\": \"allowDeleting\"\n  },\n  BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar createFailureHandler = function createFailureHandler(deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\nvar _getEditMode = function _getEditMode(that) {\n  var editMode = that.option(\"editing.mode\");\n  if (EDIT_MODES.indexOf(editMode) !== -1) {\n    return editMode;\n  }\n  return EDIT_MODE_ROW;\n};\nvar _isRowEditMode = function _isRowEditMode(that) {\n  var editMode = _getEditMode(that);\n  return ROW_BASED_MODES.indexOf(editMode) !== -1;\n};\nvar getDocumentClickEventName = function getDocumentClickEventName() {\n  return \"desktop\" === _devices2.default.real().deviceType ? _pointer2.default.down : _click2.default.name;\n};\nvar EditingController = _uiGrid_core2.default.ViewController.inherit(function () {\n  var getDefaultEditorTemplate = function getDefaultEditorTemplate(that) {\n    return function (container, options) {\n      var $editor = (0, _renderer2.default)(\"<div>\").appendTo(container);\n      that.getController(\"editorFactory\").createEditor($editor, (0, _extend.extend)({}, options.column, {\n        value: options.value,\n        setValue: options.setValue,\n        row: options.row,\n        parentType: \"dataRow\",\n        width: null,\n        readOnly: !options.setValue,\n        isOnForm: options.isOnForm,\n        id: options.id\n      }));\n    };\n  };\n  var getEditingTexts = function getEditingTexts(options) {\n    var editingTexts = options.component.option(\"editing.texts\") || {};\n    return {\n      save: editingTexts.saveRowChanges,\n      cancel: editingTexts.cancelRowChanges,\n      edit: editingTexts.editRow,\n      undelete: editingTexts.undeleteRow,\n      \"delete\": editingTexts.deleteRow,\n      add: editingTexts.addRowToNode\n    };\n  };\n  var getButtonIndex = function getButtonIndex(buttons, name) {\n    var result = -1;\n    buttons.some(function (button, index) {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n  var getButtonName = function getButtonName(button) {\n    return _type2.default.isObject(button) ? button.name : button;\n  };\n  var getEditorType = function getEditorType(item) {\n    var column = item.column;\n    return item.isCustomEditorType ? item.editorType : column.formItem && column.formItem.editorType;\n  };\n  var forEachFormItems = function forEachFormItems(items, callBack) {\n    items.forEach(function (item) {\n      if (item.items || item.tabs) {\n        forEachFormItems(item.items || item.tabs, callBack);\n      } else {\n        callBack(item);\n      }\n    });\n  };\n  return {\n    init: function init() {\n      var that = this;\n      that._editRowIndex = -1;\n      that._editData = [];\n      that._editColumnIndex = -1;\n      that._columnsController = that.getController(\"columns\");\n      that._dataController = that.getController(\"data\");\n      that._rowsView = that.getView(\"rowsView\");\n      that._editForm = null;\n      if (that._deferreds) {\n        that._deferreds.forEach(function (d) {\n          return d.reject(\"cancel\");\n        });\n      }\n      that._deferreds = [];\n      if (!that._dataChangedHandler) {\n        that._dataChangedHandler = that._handleDataChanged.bind(that);\n        that._dataController.changed.add(that._dataChangedHandler);\n      }\n      if (!that._saveEditorHandler) {\n        that.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that._saveEditorHandler = that.createAction(function (e) {\n          var isEditorPopup,\n            isDomElement,\n            isFocusOverlay,\n            isAddRowButton,\n            isCellEditMode,\n            $target,\n            isAnotherComponent,\n            event = e.event,\n            targetComponent = event[TARGET_COMPONENT_NAME];\n          if (!_isRowEditMode(that) && !that._editCellInProgress) {\n            $target = (0, _renderer2.default)(event.target);\n            isEditorPopup = $target.closest(\".dx-dropdowneditor-overlay\").length;\n            isDomElement = $target.closest((0, _window.getWindow)().document).length;\n            isAnotherComponent = targetComponent && targetComponent !== that.component;\n            isAddRowButton = $target.closest(\".\" + that.addWidgetPrefix(ADD_ROW_BUTTON_CLASS)).length;\n            isFocusOverlay = $target.hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n            isCellEditMode = _getEditMode(that) === EDIT_MODE_CELL;\n            if (!isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && that.isEditing()) && (isDomElement || isAnotherComponent)) {\n              that._closeEditItem.bind(that)($target);\n            }\n          }\n        });\n        _events_engine2.default.on(_dom_adapter2.default.getDocument(), getDocumentClickEventName(), that._saveEditorHandler);\n      }\n      that._updateEditColumn();\n      that._updateEditButtons();\n    },\n    getUpdatedData: function getUpdatedData(data) {\n      var key = this._dataController.keyOf(data),\n        editData = this._editData,\n        editIndex = (0, _uiGrid_core3.getIndexByKey)(key, editData);\n      if (editData[editIndex]) {\n        return (0, _uiGrid_core3.createObjectWithChanges)(data, editData[editIndex].data);\n      }\n      return data;\n    },\n    getInsertedData: function getInsertedData() {\n      return this._editData.filter(function (editData) {\n        return editData.data && editData.type === DATA_EDIT_DATA_INSERT_TYPE;\n      }).map(function (editData) {\n        return editData.data;\n      });\n    },\n    getRemovedData: function getRemovedData() {\n      return this._editData.filter(function (editData) {\n        return editData.oldData && editData.type === DATA_EDIT_DATA_REMOVE_TYPE;\n      }).map(function (editData) {\n        return editData.oldData;\n      });\n    },\n    _fireDataErrorOccurred: function _fireDataErrorOccurred(arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n      var $popupContent = this.getPopupContent();\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: function _needToCloseEditableCell($targetElement) {\n      var $element = this.component.$element(),\n        result = this.isEditing(),\n        isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\n      if (isCurrentComponentElement) {\n        var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\n        if (isDataRow) {\n          var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\"),\n            columnIndex = $targetCell[0] && $targetCell[0].cellIndex,\n            rowIndex = this.getView(\"rowsView\").getRowIndex($targetCell.parent()),\n            visibleColumns = this._columnsController.getVisibleColumns(),\n            allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\n          result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex);\n        }\n      }\n      return result;\n    },\n    _closeEditItem: function _closeEditItem($targetElement) {\n      if (this._needToCloseEditableCell($targetElement)) {\n        this.closeEditCell();\n      }\n    },\n    _handleDataChanged: function _handleDataChanged(args) {\n      var that = this,\n        editForm = that._editForm;\n      if (\"standard\" === that.option(\"scrolling.mode\")) {\n        that.resetRowAndPageIndices();\n      }\n      if (\"prepend\" === args.changeType) {\n        (0, _iterator.each)(that._editData, function (_, editData) {\n          editData.rowIndex += args.items.length;\n          if (editData.type === DATA_EDIT_DATA_INSERT_TYPE) {\n            editData.key.rowIndex += args.items.length;\n            editData.key.dataRowIndex += args.items.filter(function (item) {\n              return \"data\" === item.rowType;\n            }).length;\n          }\n        });\n      }\n      if (\"refresh\" === args.changeType && _getEditMode(that) === EDIT_MODE_POPUP && editForm && editForm.option(\"visible\")) {\n        editForm.repaint();\n      }\n    },\n    _isDefaultButtonVisible: function _isDefaultButtonVisible(button, options) {\n      var result = true,\n        isRowMode = _isRowEditMode(this),\n        isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex() && isRowMode;\n      switch (button.name) {\n        case \"edit\":\n          result = !isEditRow && this.allowUpdating(options) && isRowMode;\n          break;\n        case \"save\":\n        case \"cancel\":\n          result = isEditRow;\n          break;\n        case \"delete\":\n          result = !isEditRow && this.allowDeleting(options) && !options.row.removed;\n          break;\n        case \"undelete\":\n          result = this.allowDeleting(options) && options.row.removed;\n      }\n      return result;\n    },\n    _isButtonVisible: function _isButtonVisible(button, options) {\n      var visible = button.visible;\n      if (!_type2.default.isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n      return _type2.default.isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _getButtonConfig: function _getButtonConfig(button, options) {\n      var _this = this;\n      var config = _type2.default.isObject(button) ? button : {},\n        buttonName = getButtonName(button),\n        editingTexts = getEditingTexts(options),\n        methodName = METHOD_NAMES[buttonName],\n        editingOptions = this.option(\"editing\"),\n        actionName = ACTION_OPTION_NAMES[buttonName],\n        allowAction = actionName ? editingOptions[actionName] : true;\n      return (0, _extend.extend)({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName],\n        onClick: function onClick(e) {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(function () {\n            options.row && allowAction && _this[methodName] && _this[methodName](options.row.rowIndex);\n          });\n        }\n      }, config);\n    },\n    _getEditingButtons: function _getEditingButtons(options) {\n      var _this2 = this;\n      var buttonIndex,\n        haveCustomButtons = !!options.column.buttons,\n        buttons = (options.column.buttons || []).slice();\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n      return buttons.map(function (button) {\n        return _this2._getButtonConfig(button, options);\n      });\n    },\n    _renderEditingButtons: function _renderEditingButtons($container, buttons, options) {\n      var _this3 = this;\n      buttons.forEach(function (button) {\n        if (_this3._isButtonVisible(button, options)) {\n          _this3._createButton($container, button, options);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function _getEditCommandCellTemplate() {\n      var _this4 = this;\n      return function (container, options) {\n        var buttons,\n          $container = (0, _renderer2.default)(container);\n        if (\"data\" === options.rowType) {\n          options.rtlEnabled = _this4.option(\"rtlEnabled\");\n          buttons = _this4._getEditingButtons(options);\n          _this4._renderEditingButtons($container, buttons, options);\n          options.watch && options.watch(function () {\n            return buttons.map(function (button) {\n              return _this4._isButtonVisible(button, options);\n            });\n          }, function () {\n            $container.empty();\n            _this4._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          (0, _uiGrid_core3.setEmptyText)($container);\n        }\n      };\n    },\n    correctEditRowIndexAfterExpand: function correctEditRowIndexAfterExpand(key) {\n      if (this._editRowIndex > this._dataController.getRowIndexByKey(key)) {\n        this._editRowIndex++;\n      }\n    },\n    correctEditRowIndex: function correctEditRowIndex(getRowIndexCorrection) {\n      this._editRowIndex += getRowIndexCorrection(this._getVisibleEditRowIndex());\n    },\n    isRowEditMode: function isRowEditMode() {\n      return _isRowEditMode(this);\n    },\n    isFormEditMode: function isFormEditMode() {\n      var editMode = _getEditMode(this);\n      return FORM_BASED_MODES.indexOf(editMode) !== -1;\n    },\n    getEditMode: function getEditMode() {\n      return _getEditMode(this);\n    },\n    getFirstEditableColumnIndex: function getFirstEditableColumnIndex() {\n      var columnIndex,\n        columnsController = this.getController(\"columns\"),\n        firstFormItem = this._firstFormItem;\n      if (_getEditMode(this) === EDIT_MODE_FORM && firstFormItem) {\n        var $editFormElements = this._rowsView.getCellElements(this._editRowIndex);\n        columnIndex = this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);\n      } else {\n        var visibleColumns = columnsController.getVisibleColumns();\n        (0, _iterator.each)(visibleColumns, function (index, column) {\n          if (column.allowEditing) {\n            columnIndex = index;\n            return false;\n          }\n        });\n      }\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function getFirstEditableCellInRow(rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function getFocusedCellInRow(rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function getIndexByKey(key, items) {\n      return (0, _uiGrid_core3.getIndexByKey)(key, items);\n    },\n    hasChanges: function hasChanges(rowIndex) {\n      var that = this,\n        result = false;\n      for (var i = 0; i < that._editData.length; i++) {\n        if (that._editData[i].type && (!_type2.default.isDefined(rowIndex) || that._dataController.getRowIndexByKey(that._editData[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n      return result;\n    },\n    dispose: function dispose() {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n      _events_engine2.default.off(_dom_adapter2.default.getDocument(), getDocumentClickEventName(), this._saveEditorHandler);\n    },\n    optionChanged: function optionChanged(args) {\n      if (\"editing\" === args.name) {\n        if (this._editPopup && this._editPopup.option(\"visible\") && 0 === args.fullName.indexOf(\"editing.form\")) {\n          var rowIndex = this._getVisibleEditRowIndex();\n          if (rowIndex >= 0) {\n            this._showEditPopup(rowIndex);\n          }\n        } else {\n          this.init();\n        }\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    publicMethods: function publicMethods() {\n      return [\"insertRow\", \"addRow\", \"removeRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"editCell\", \"closeEditCell\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function refresh() {\n      if (_getEditMode(this) === EDIT_MODE_CELL) {\n        return;\n      }\n      if (_getEditMode(this) !== EDIT_MODE_BATCH) {\n        this.init();\n      } else {\n        this._editRowIndex = -1;\n        this._editColumnIndex = -1;\n      }\n    },\n    isEditing: function isEditing() {\n      return this._editRowIndex > -1;\n    },\n    isEditRow: function isEditRow(rowIndex) {\n      var editMode = _getEditMode(this);\n      return this._getVisibleEditRowIndex() === rowIndex && ROW_BASED_MODES.indexOf(editMode) !== -1;\n    },\n    getEditRowKey: function getEditRowKey() {\n      var items = this._dataController.items(),\n        item = items[this._getVisibleEditRowIndex()];\n      return item && item.key;\n    },\n    getEditRowIndex: function getEditRowIndex() {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function getEditFormRowIndex() {\n      var editMode = _getEditMode(this);\n      return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP ? this._getVisibleEditRowIndex() : -1;\n    },\n    isEditCell: function isEditCell(rowIndex, columnIndex) {\n      var hasEditData = !!(Array.isArray(this._editData) && this._editData.length);\n      return hasEditData && this._getVisibleEditRowIndex() === rowIndex && this._editColumnIndex === columnIndex;\n    },\n    getPopupContent: function getPopupContent() {\n      var editMode = _getEditMode(this),\n        popupVisible = this._editPopup && this._editPopup.option(\"visible\");\n      if (editMode === EDIT_MODE_POPUP && popupVisible) {\n        return this._$popupContent;\n      }\n    },\n    getEditForm: function getEditForm() {\n      return this._editForm;\n    },\n    _needInsertItem: function _needInsertItem(editData, changeType) {\n      var that = this,\n        dataSource = that._dataController.dataSource(),\n        scrollingMode = that.option(\"scrolling.mode\"),\n        pageIndex = dataSource.pageIndex(),\n        beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : pageIndex,\n        endPageIndex = dataSource.endPageIndex ? dataSource.endPageIndex() : pageIndex;\n      if (\"standard\" !== scrollingMode) {\n        switch (changeType) {\n          case \"append\":\n            return editData.key.pageIndex === endPageIndex;\n          case \"prepend\":\n            return editData.key.pageIndex === beginPageIndex;\n          case \"refresh\":\n            editData.key.rowIndex = 0;\n            editData.key.dataRowIndex = 0;\n            editData.key.pageIndex = 0;\n            break;\n          default:\n            return editData.key.pageIndex >= beginPageIndex && editData.key.pageIndex <= endPageIndex;\n        }\n      }\n      return editData.key.pageIndex === pageIndex;\n    },\n    _generateNewItem: function _generateNewItem(key) {\n      var item = {\n        key: key\n      };\n      if (key && key[INSERT_INDEX]) {\n        item[INSERT_INDEX] = key[INSERT_INDEX];\n      }\n      return item;\n    },\n    processItems: function processItems(items, changeType) {\n      var i,\n        key,\n        item,\n        editData,\n        that = this;\n      that.update(changeType);\n      editData = that._editData;\n      for (i = 0; i < editData.length; i++) {\n        key = editData[i].key;\n        item = that._generateNewItem(key);\n        if (editData[i].type === DATA_EDIT_DATA_INSERT_TYPE && that._needInsertItem(editData[i], changeType, items, item)) {\n          items.splice(key.dataRowIndex, 0, item);\n        }\n      }\n      return items;\n    },\n    processDataItem: function processDataItem(item, options, generateDataValues) {\n      var data,\n        editMode,\n        editData,\n        editIndex,\n        that = this,\n        columns = options.visibleColumns,\n        key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\n      if (editIndex >= 0) {\n        editMode = _getEditMode(that);\n        editData = that._editData[editIndex];\n        data = editData.data;\n        item.isEditing = false;\n        switch (editData.type) {\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            if (editMode === EDIT_MODE_POPUP) {\n              item.visible = false;\n            }\n            item.isNewRow = true;\n            item.key = key;\n            item.data = data;\n            break;\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            item.modified = true;\n            item.oldData = item.data;\n            item.data = (0, _uiGrid_core3.createObjectWithChanges)(item.data, data);\n            item.modifiedValues = generateDataValues(data, columns, true);\n            break;\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            if (editMode === EDIT_MODE_BATCH) {\n              item.data = (0, _uiGrid_core3.createObjectWithChanges)(item.data, data);\n            }\n            item.removed = true;\n        }\n      }\n    },\n    insertRow: function insertRow() {\n      _ui2.default.log(\"W0002\", \"dxDataGrid\", \"insertRow\", \"15.2\", \"Use the 'addRow' method instead\");\n      return this.addRow();\n    },\n    _initNewRow: function _initNewRow(options) {\n      var _this5 = this;\n      this.executeAction(\"onInitNewRow\", options);\n      if (options.promise) {\n        var deferred = new _deferred.Deferred();\n        (0, _deferred.when)((0, _deferred.fromPromise)(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return _this5._fireDataErrorOccurred(arg);\n        });\n        return deferred;\n      }\n    },\n    _getInsertKey: function _getInsertKey(parentKey) {\n      var insertKey,\n        row,\n        that = this,\n        dataController = that._dataController,\n        rows = dataController.items(),\n        editMode = _getEditMode(that);\n      insertKey = {\n        parentKey: parentKey,\n        pageIndex: dataController.pageIndex(),\n        rowIndex: that._getInsertRowIndex(parentKey)\n      };\n      row = rows[insertKey.rowIndex];\n      if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n        insertKey.rowIndex++;\n      }\n      insertKey.dataRowIndex = dataController.getRowIndexDelta() + rows.filter(function (row, index) {\n        return index < insertKey.rowIndex && (\"data\" === row.rowType || \"group\" === row.rowType);\n      }).length;\n      if (editMode !== EDIT_MODE_BATCH) {\n        that._editRowIndex = insertKey.rowIndex + that._dataController.getRowIndexOffset();\n      }\n      insertKey[INSERT_INDEX] = that._getInsertIndex();\n      return insertKey;\n    },\n    _getInsertRowIndex: function _getInsertRowIndex(parentKey) {\n      var that = this,\n        rowsView = that.getView(\"rowsView\"),\n        parentRowIndex = that._dataController.getRowIndexByKey(parentKey);\n      if (parentRowIndex >= 0) {\n        return parentRowIndex + 1;\n      }\n      if (rowsView) {\n        return rowsView.getTopVisibleItemIndex(true);\n      }\n      return 0;\n    },\n    _getInsertIndex: function _getInsertIndex() {\n      var maxInsertIndex = 0;\n      this._editData.forEach(function (editItem) {\n        if (editItem.type === DATA_EDIT_DATA_INSERT_TYPE && editItem.key[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = editItem.key[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    addRow: function addRow(parentKey) {\n      var that = this,\n        dataController = that._dataController,\n        store = dataController.store(),\n        key = store && store.key(),\n        param = {\n          data: {}\n        },\n        editMode = _getEditMode(that);\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return;\n      }\n      if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\n        that.saveEditData().done(function () {\n          if (!that.hasChanges()) {\n            that.addRow(parentKey);\n          }\n        });\n        return;\n      }\n      that.refresh();\n      if (!that._allowRowAdding()) {\n        return;\n      }\n      if (!key) {\n        param.data.__KEY__ = String(new _guid2.default());\n      }\n      (0, _deferred.when)(that._initNewRow(param, parentKey)).done(function () {\n        if (that._allowRowAdding()) {\n          that._addRowCore(param.data, parentKey);\n        }\n      });\n    },\n    _allowRowAdding: function _allowRowAdding() {\n      var that = this,\n        editMode = _getEditMode(that),\n        insertIndex = that._getInsertIndex();\n      if (editMode !== EDIT_MODE_BATCH && insertIndex > 1) {\n        return false;\n      }\n      return true;\n    },\n    _addRowCore: function _addRowCore(data, parentKey) {\n      var that = this,\n        insertKey = that._getInsertKey(parentKey),\n        oldEditRowIndex = that._getVisibleEditRowIndex(),\n        editMode = _getEditMode(that);\n      that._addEditData({\n        key: insertKey,\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      });\n      that._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [oldEditRowIndex, insertKey.rowIndex]\n      });\n      if (editMode === EDIT_MODE_POPUP) {\n        that._showEditPopup(insertKey.rowIndex);\n      } else {\n        that._focusFirstEditableCellInRow(insertKey.rowIndex);\n      }\n      that._afterInsertRow({\n        key: insertKey,\n        data: data\n      });\n    },\n    _focusFirstEditableCellInRow: function _focusFirstEditableCellInRow(rowIndex) {\n      var that = this,\n        $firstCell = that.getFirstEditableCellInRow(rowIndex);\n      that._editCellInProgress = true;\n      that._delayedInputFocus($firstCell, function () {\n        that._editCellInProgress = false;\n        var $cell = that.getFirstEditableCellInRow(rowIndex),\n          eventToTrigger = \"dblClick\" === that.option(\"editing.startEditAction\") ? _double_click2.default.name : _click2.default.name;\n        $cell && _events_engine2.default.trigger($cell, eventToTrigger);\n      });\n    },\n    _isEditingStart: function _isEditingStart(options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeEditCell: function _beforeEditCell(rowIndex, columnIndex, item) {\n      var that = this;\n      if (_getEditMode(that) === EDIT_MODE_CELL && !item.isNewRow && that.hasChanges()) {\n        var d = new _deferred.Deferred();\n        that.saveEditData().always(function () {\n          d.resolve(that.hasChanges());\n        });\n        return d;\n      }\n    },\n    _beforeUpdateItems: function _beforeUpdateItems() {},\n    _getVisibleEditRowIndex: function _getVisibleEditRowIndex() {\n      return this._editRowIndex >= 0 ? this._editRowIndex - this._dataController.getRowIndexOffset() : -1;\n    },\n    editRow: function editRow(rowIndex) {\n      var $editingCell,\n        that = this,\n        dataController = that._dataController,\n        items = dataController.items(),\n        item = items[rowIndex],\n        params = {\n          data: item && item.data,\n          cancel: false\n        },\n        oldEditRowIndex = that._getVisibleEditRowIndex();\n      if (!item) {\n        return;\n      }\n      if (rowIndex === oldEditRowIndex) {\n        return true;\n      }\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n      if (that._isEditingStart(params)) {\n        return;\n      }\n      that.init();\n      that._pageIndex = dataController.pageIndex();\n      that._editRowIndex = (items[0].isNewRow ? rowIndex - 1 : rowIndex) + that._dataController.getRowIndexOffset();\n      that._addEditData({\n        data: {},\n        key: item.key,\n        oldData: item.data\n      });\n      var rowIndices = [oldEditRowIndex, rowIndex],\n        editMode = _getEditMode(that);\n      that._beforeUpdateItems(rowIndices, rowIndex, oldEditRowIndex);\n      if (editMode === EDIT_MODE_POPUP) {\n        that._showEditPopup(rowIndex);\n      } else {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: rowIndices\n        });\n      }\n      if (MODES_WITH_DELAYED_FOCUS.indexOf(editMode) !== -1) {\n        $editingCell = that.getFocusedCellInRow(that._getVisibleEditRowIndex());\n        that._delayedInputFocus($editingCell, function () {\n          $editingCell && that.component.focus($editingCell);\n        });\n      }\n    },\n    _showEditPopup: function _showEditPopup(rowIndex) {\n      var that = this,\n        isMobileDevice = \"desktop\" !== _devices2.default.current().deviceType,\n        popupOptions = (0, _extend.extend)({\n          showTitle: false,\n          fullScreen: isMobileDevice,\n          toolbarItems: [{\n            toolbar: \"bottom\",\n            location: \"after\",\n            widget: \"dxButton\",\n            options: that._getSaveButtonConfig()\n          }, {\n            toolbar: \"bottom\",\n            location: \"after\",\n            widget: \"dxButton\",\n            options: that._getCancelButtonConfig()\n          }],\n          contentTemplate: that._getPopupEditFormTemplate(rowIndex)\n        }, that.option(\"editing.popup\"));\n      if (!that._editPopup) {\n        var $popupContainer = (0, _renderer2.default)(\"<div>\").appendTo(that.component.$element()).addClass(that.addWidgetPrefix(EDIT_POPUP_CLASS));\n        that._editPopup = that._createComponent($popupContainer, _popup2.default, {});\n        that._editPopup.on(\"hiding\", that._getEditPopupHiddenHandler());\n        that._editPopup.on(\"shown\", function (e) {\n          _events_engine2.default.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\" + SCROLLABLE_CONTAINER_CLASS).first(), \"focus\");\n        });\n      }\n      that._editPopup.option(popupOptions);\n      that._editPopup.show();\n    },\n    _getEditPopupHiddenHandler: function _getEditPopupHiddenHandler() {\n      var that = this;\n      return function (e) {\n        if (that.isEditing()) {\n          that.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: function _getPopupEditFormTemplate(rowIndex) {\n      var that = this,\n        row = that.component.getVisibleRows()[rowIndex],\n        templateOptions = {\n          row: row,\n          rowType: row.rowType,\n          key: row.key\n        };\n      return function (container) {\n        var formTemplate = that.getEditFormTemplate(),\n          scrollable = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo(container), _ui4.default);\n        that._$popupContent = scrollable.$content();\n        formTemplate(that._$popupContent, templateOptions, true);\n      };\n    },\n    _getSaveButtonConfig: function _getSaveButtonConfig() {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function _getCancelButtonConfig() {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeEditDataItem: function _removeEditDataItem(index) {\n      if (index >= 0) {\n        this._editData.splice(index, 1);\n      }\n    },\n    editCell: function editCell(rowIndex, columnIndex) {\n      var _this6 = this;\n      var d = new _deferred.Deferred(),\n        coreResult = void 0;\n      _deferred.when.apply(void 0, _toConsumableArray(this._deferreds)).done(function () {\n        coreResult = _this6._editCellCore(rowIndex, columnIndex);\n        (0, _deferred.when)(coreResult).done(d.resolve).fail(d.reject);\n      });\n      return void 0 !== coreResult ? coreResult : d.promise();\n    },\n    _editCellCore: function _editCellCore(rowIndex, columnIndex) {\n      var that = this,\n        columnsController = that._columnsController,\n        dataController = that._dataController,\n        items = dataController.items(),\n        item = items[rowIndex],\n        params = {\n          data: item && item.data,\n          cancel: false\n        },\n        oldEditRowIndex = that._getVisibleEditRowIndex(),\n        visibleColumns = columnsController.getVisibleColumns(),\n        oldColumn = visibleColumns[that._editColumnIndex];\n      if (_type2.default.isString(columnIndex)) {\n        columnIndex = columnsController.columnOption(columnIndex, \"index\");\n        columnIndex = columnsController.getVisibleIndex(columnIndex);\n      }\n      var column = params.column = visibleColumns[columnIndex];\n      if (column && item && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && !_isRowEditMode(that)) {\n        if (that.isEditCell(rowIndex, columnIndex)) {\n          return true;\n        }\n        var editRowIndex = rowIndex + dataController.getRowIndexOffset();\n        return (0, _deferred.when)(that._beforeEditCell(rowIndex, columnIndex, item)).done(function (cancel) {\n          if (cancel) {\n            return;\n          }\n          if (that._prepareEditCell(params, item, columnIndex, editRowIndex)) {\n            _common2.default.deferRender(function () {\n              that._repaintEditCell(column, oldColumn, oldEditRowIndex);\n            });\n          } else {\n            that._processCanceledEditingCell();\n          }\n        });\n      }\n      return false;\n    },\n    _processCanceledEditingCell: function _processCanceledEditingCell() {},\n    _prepareEditCell: function _prepareEditCell(params, item, editColumnIndex, editRowIndex) {\n      var that = this;\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n      if (that._isEditingStart(params)) {\n        return false;\n      }\n      that._editRowIndex = editRowIndex;\n      that._editColumnIndex = editColumnIndex;\n      that._pageIndex = that._dataController.pageIndex();\n      that._addEditData({\n        data: {},\n        key: item.key,\n        oldData: item.data\n      });\n      return true;\n    },\n    _repaintEditCell: function _repaintEditCell(column, oldColumn, oldEditRowIndex) {\n      var that = this,\n        rowsView = that._rowsView;\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        that._editCellInProgress = true;\n        that.getController(\"editorFactory\").loseFocus();\n        that._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, that._getVisibleEditRowIndex()]\n        });\n      }\n      var $cell = rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), that._editColumnIndex);\n      if ($cell && !$cell.find(\":focus\").length) {\n        that._focusEditingCell(function () {\n          that._editCellInProgress = false;\n        }, $cell, true);\n      } else {\n        that._editCellInProgress = false;\n      }\n    },\n    _delayedInputFocus: function _delayedInputFocus($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var that = this;\n      function inputFocus() {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          (0, _uiGrid_core3.focusAndSelectElement)(that, $focusableElement);\n        }\n        that._beforeFocusCallback = null;\n      }\n      if (_devices2.default.real().ios || _devices2.default.real().android) {\n        inputFocus();\n      } else {\n        if (that._beforeFocusCallback) {\n          that._beforeFocusCallback();\n        }\n        clearTimeout(that._inputFocusTimeoutID);\n        if (callBeforeFocusCallbackAlways) {\n          that._beforeFocusCallback = beforeFocusCallback;\n        }\n        that._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function _focusEditingCell(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var that = this,\n        rowsView = that.getView(\"rowsView\");\n      $editCell = $editCell || rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), that._editColumnIndex);\n      that._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n    },\n    removeRow: function removeRow(rowIndex) {\n      _ui2.default.log(\"W0002\", \"dxDataGrid\", \"removeRow\", \"15.2\", \"Use the 'deleteRow' method instead\");\n      return this.deleteRow(rowIndex);\n    },\n    deleteRow: function deleteRow(rowIndex) {\n      var removeByKey,\n        showDialogTitle,\n        that = this,\n        editingOptions = that.option(\"editing\"),\n        editingTexts = editingOptions && editingOptions.texts,\n        confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle,\n        isBatchMode = editingOptions && editingOptions.mode === EDIT_MODE_BATCH,\n        confirmDeleteMessage = editingTexts && editingTexts.confirmDeleteMessage,\n        dataController = that._dataController,\n        oldEditRowIndex = that._getVisibleEditRowIndex(),\n        item = dataController.items()[rowIndex],\n        key = item && item.key,\n        allowDeleting = isBatchMode || !this.isEditing();\n      if (item && allowDeleting) {\n        removeByKey = function removeByKey(key) {\n          that.refresh();\n          var editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\n          if (editIndex >= 0) {\n            if (that._editData[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n              that._removeEditDataItem(editIndex);\n            } else {\n              that._addEditData({\n                key: key,\n                type: DATA_EDIT_DATA_REMOVE_TYPE\n              });\n            }\n          } else {\n            that._addEditData({\n              key: key,\n              oldData: item.data,\n              type: DATA_EDIT_DATA_REMOVE_TYPE\n            });\n          }\n          if (isBatchMode) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [oldEditRowIndex, rowIndex]\n            });\n          } else {\n            that.saveEditData();\n          }\n        };\n        if (isBatchMode || !confirmDeleteMessage) {\n          removeByKey(key);\n        } else {\n          showDialogTitle = _type2.default.isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          _dialog2.default.confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(function (confirmResult) {\n            if (confirmResult) {\n              removeByKey(key);\n            }\n          });\n        }\n      }\n    },\n    undeleteRow: function undeleteRow(rowIndex) {\n      var that = this,\n        dataController = that._dataController,\n        item = dataController.items()[rowIndex],\n        oldEditRowIndex = that._getVisibleEditRowIndex(),\n        key = item && item.key;\n      if (item) {\n        var editData,\n          editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\n        if (editIndex >= 0) {\n          editData = that._editData[editIndex];\n          if (_type2.default.isEmptyObject(editData.data)) {\n            that._removeEditDataItem(editIndex);\n          } else {\n            that._addEditData({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _saveEditDataCore: function _saveEditDataCore(deferreds, results, changes) {\n      var that = this,\n        store = that._dataController.store(),\n        isDataSaved = true;\n      function executeEditingAction(actionName, params, func) {\n        var deferred = new _deferred.Deferred();\n        that.executeAction(actionName, params);\n        (0, _deferred.when)((0, _deferred.fromPromise)(params.cancel)).done(function (cancel) {\n          if (cancel) {\n            setTimeout(function () {\n              deferred.resolve(\"cancel\");\n            });\n          } else {\n            func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n          }\n        }).fail(createFailureHandler(deferred));\n        return deferred;\n      }\n      (0, _iterator.each)(that._editData, function (index, editData) {\n        var deferred,\n          doneDeferred,\n          params,\n          data = editData.data,\n          oldData = editData.oldData,\n          type = editData.type;\n        if (that._beforeSaveEditData(editData, index)) {\n          return;\n        }\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: editData.key,\n              cancel: false\n            };\n            deferred = executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(editData.key).done(function (key) {\n                changes.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (_type2.default.isDefined(key)) {\n                  editData.key = key;\n                }\n                if (data && _type2.default.isObject(data) && data !== params.data) {\n                  editData.data = data;\n                }\n                changes.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: editData.key,\n              cancel: false\n            };\n            deferred = executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(editData.key, params.newData).done(function (data, key) {\n                if (data && _type2.default.isObject(data) && data !== params.newData) {\n                  editData.data = data;\n                }\n                changes.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n        if (deferred) {\n          doneDeferred = new _deferred.Deferred();\n          deferred.always(function (data) {\n            isDataSaved = \"cancel\" !== data;\n            results.push({\n              key: editData.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n      return isDataSaved;\n    },\n    _processSaveEditDataResult: function _processSaveEditDataResult(results) {\n      var i,\n        arg,\n        cancel,\n        editData,\n        editIndex,\n        isError,\n        that = this,\n        hasSavedData = false,\n        editMode = _getEditMode(that);\n      for (i = 0; i < results.length; i++) {\n        arg = results[i].result;\n        cancel = \"cancel\" === arg;\n        editIndex = (0, _uiGrid_core3.getIndexByKey)(results[i].key, that._editData);\n        editData = that._editData[editIndex];\n        isError = arg && arg instanceof Error;\n        if (isError) {\n          if (editData) {\n            editData.error = arg;\n          }\n          that._fireDataErrorOccurred(arg);\n          if (editMode !== EDIT_MODE_BATCH) {\n            if (editData && editData.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n              that._removeEditDataItem(editIndex);\n            }\n            break;\n          }\n        } else {\n          if (!cancel || !editData || editMode !== EDIT_MODE_BATCH && editData.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n            that._removeEditDataItem(editIndex);\n            hasSavedData = !cancel;\n          }\n        }\n      }\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function _fireSaveEditDataEvents(editData) {\n      var that = this;\n      (0, _iterator.each)(editData, function (_, itemData) {\n        var data = itemData.data,\n          key = itemData.key,\n          type = itemData.type,\n          params = {\n            key: key,\n            data: data\n          };\n        if (itemData.error) {\n          params.error = itemData.error;\n        }\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            that.executeAction(\"onRowRemoved\", (0, _extend.extend)({}, params, {\n              data: itemData.oldData\n            }));\n            break;\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            that.executeAction(\"onRowInserted\", params);\n            break;\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            that.executeAction(\"onRowUpdated\", params);\n        }\n      });\n    },\n    saveEditData: function saveEditData() {\n      var _this7 = this;\n      var deferred = new _deferred.Deferred();\n      var afterSaveEditData = function afterSaveEditData() {\n        (0, _deferred.when)(_this7._afterSaveEditData()).done(function () {\n          deferred.resolve();\n        });\n      };\n      _deferred.when.apply(void 0, _toConsumableArray(this._deferreds)).done(function () {\n        if (_this7._saving) {\n          afterSaveEditData();\n          return;\n        }\n        (0, _deferred.when)(_this7._beforeSaveEditData()).done(function (cancel) {\n          if (cancel) {\n            afterSaveEditData();\n            return;\n          }\n          _this7._saveEditDataInner().done(deferred.resolve).fail(deferred.reject);\n        });\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _saveEditDataInner: function _saveEditDataInner() {\n      var _this8 = this;\n      var results = [],\n        deferreds = [],\n        changes = [],\n        dataController = this._dataController,\n        dataSource = dataController.dataSource(),\n        editMode = _getEditMode(this),\n        result = new _deferred.Deferred();\n      var resetEditIndices = function resetEditIndices() {\n        if (editMode !== EDIT_MODE_CELL) {\n          _this8._editColumnIndex = -1;\n          _this8._editRowIndex = -1;\n        }\n      };\n      var afterSaveEditData = function afterSaveEditData(error) {\n        (0, _deferred.when)(_this8._afterSaveEditData()).done(function () {\n          result.resolve(error);\n        });\n      };\n      var editData = this._editData.slice(0);\n      if (!this._saveEditDataCore(deferreds, results, changes) && editMode === EDIT_MODE_CELL) {\n        this._focusEditingCell();\n      }\n      if (deferreds.length) {\n        this._saving = true;\n        dataSource && dataSource.beginLoading();\n        _deferred.when.apply(_renderer2.default, deferreds).done(function () {\n          if (_this8._processSaveEditDataResult(results)) {\n            resetEditIndices();\n            if (editMode === EDIT_MODE_POPUP && _this8._editPopup) {\n              _this8._editPopup.hide();\n            }\n            dataSource && dataSource.endLoading();\n            var refreshMode = _this8.option(\"editing.refreshMode\"),\n              isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n            if (!isFullRefresh) {\n              dataController.push(changes);\n            }\n            (0, _deferred.when)(dataController.refresh({\n              selection: isFullRefresh,\n              reload: isFullRefresh,\n              load: \"reshape\" === refreshMode,\n              changesOnly: _this8.option(\"repaintChangesOnly\")\n            })).always(function () {\n              _this8._fireSaveEditDataEvents(editData);\n            }).done(function () {\n              afterSaveEditData();\n            }).fail(function (error) {\n              afterSaveEditData(error);\n            });\n          } else {\n            dataSource && dataSource.endLoading();\n            result.resolve();\n          }\n        }).fail(function (error) {\n          dataSource && dataSource.endLoading();\n          result.resolve(error);\n        });\n        return result.always(function () {\n          _this8._focusEditingCell();\n          _this8._saving = false;\n        }).promise();\n      }\n      if (_isRowEditMode(this)) {\n        if (!this.hasChanges()) {\n          this.cancelEditData();\n        }\n      } else {\n        if (CELL_BASED_MODES.indexOf(editMode) !== -1) {\n          resetEditIndices();\n          dataController.updateItems();\n        } else {\n          this._focusEditingCell();\n        }\n      }\n      afterSaveEditData();\n      return result.promise();\n    },\n    isSaving: function isSaving() {\n      return this._saving;\n    },\n    _updateEditColumn: function _updateEditColumn() {\n      var that = this,\n        isEditColumnVisible = that._isEditColumnVisible(),\n        useIcons = that.option(\"editing.useIcons\"),\n        cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n      that._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: that._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n      that._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function _isEditColumnVisible() {\n      var that = this,\n        editingOptions = that.option(\"editing\");\n      if (editingOptions) {\n        var editMode = _getEditMode(that),\n          isVisibleWithCurrentEditMode = false;\n        switch (editMode) {\n          case EDIT_MODE_ROW:\n            isVisibleWithCurrentEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\n            break;\n          case EDIT_MODE_FORM:\n          case EDIT_MODE_POPUP:\n            isVisibleWithCurrentEditMode = editingOptions.allowUpdating;\n        }\n        return editingOptions.allowDeleting || isVisibleWithCurrentEditMode;\n      }\n    },\n    _updateEditButtons: function _updateEditButtons() {\n      var that = this,\n        headerPanel = that.getView(\"headerPanel\"),\n        hasChanges = that.hasChanges();\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", !hasChanges);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", !hasChanges);\n      }\n    },\n    _applyModified: function _applyModified($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: function _beforeCloseEditCellInBatchMode() {},\n    cancelEditData: function cancelEditData() {\n      var that = this,\n        editMode = _getEditMode(that),\n        rowIndex = this._getVisibleEditRowIndex(),\n        dataController = that._dataController;\n      that._beforeCancelEditData();\n      that.init();\n      if (ROW_BASED_MODES.indexOf(editMode) !== -1 && rowIndex >= 0) {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [rowIndex, rowIndex + 1]\n        });\n      } else {\n        dataController.updateItems({\n          repaintChangesOnly: that.option(\"repaintChangesOnly\")\n        });\n      }\n      if (editMode === EDIT_MODE_POPUP) {\n        that._hideEditPopup();\n      }\n    },\n    _hideEditPopup: function _hideEditPopup() {\n      this._editPopup && this._editPopup.option(\"visible\", false);\n    },\n    hasEditData: function hasEditData() {\n      return this.hasChanges();\n    },\n    closeEditCell: function closeEditCell(isError) {\n      var _this9 = this;\n      var that = this,\n        result = _deferred2.default.when(),\n        oldEditRowIndex = that._getVisibleEditRowIndex();\n      if (!_isRowEditMode(that)) {\n        result = _deferred2.default.Deferred();\n        setTimeout(function () {\n          _deferred.when.apply(void 0, _toConsumableArray(_this9._deferreds)).done(function () {\n            _this9._closeEditCellCore(isError, oldEditRowIndex);\n            result.resolve();\n          }).fail(result.reject);\n        });\n      }\n      return result.promise();\n    },\n    _closeEditCellCore: function _closeEditCellCore(isError, oldEditRowIndex) {\n      var that = this,\n        editMode = _getEditMode(that),\n        dataController = that._dataController;\n      if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\n        that.saveEditData().done(function (error) {\n          if (!that.hasChanges()) {\n            that.closeEditCell(!!error);\n          }\n        });\n      } else {\n        if (oldEditRowIndex >= 0) {\n          var rowIndices = [oldEditRowIndex];\n          that._editRowIndex = -1;\n          that._editColumnIndex = -1;\n          that._beforeCloseEditCellInBatchMode(rowIndices);\n          if (!isError) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndices\n            });\n          }\n        }\n      }\n    },\n    update: function update(changeType) {\n      var that = this,\n        dataController = that._dataController;\n      if (dataController && that._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          that.refresh();\n        }\n        that._pageIndex = dataController.pageIndex();\n      }\n      that._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function _getRowIndicesForCascadeUpdating(row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    _prepareEditDataParams: function _prepareEditDataParams(options, value, text) {\n      var setCellValueResult,\n        that = this,\n        newData = {},\n        oldData = options.data,\n        rowKey = options.key,\n        $cellElement = (0, _renderer2.default)(options.cellElement),\n        editMode = _getEditMode(that),\n        deferred = new _deferred.Deferred();\n      if (void 0 !== rowKey) {\n        if (editMode === EDIT_MODE_BATCH) {\n          that._applyModified($cellElement, options);\n        }\n        options.value = value;\n        setCellValueResult = (0, _deferred.fromPromise)(options.column.setCellValue(newData, value, (0, _extend.extend)(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return that._fireDataErrorOccurred(arg);\n        });\n        if (text && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n        if (options.values) {\n          options.values[options.columnIndex] = value;\n        }\n        that._deferreds.push(setCellValueResult);\n        setCellValueResult.always(function () {\n          var index = that._deferreds.indexOf(setCellValueResult);\n          if (index >= 0) {\n            that._deferreds.splice(index, 1);\n          }\n        });\n      }\n      return deferred;\n    },\n    updateFieldValue: function updateFieldValue(options, value, text, forceUpdateRow) {\n      var _this10 = this;\n      var that = this,\n        rowKey = options.key;\n      if (void 0 === rowKey) {\n        that._dataController.fireError(\"E1043\");\n      }\n      if (options.column.setCellValue) {\n        this._prepareEditDataParams(options, value, text).done(function (params) {\n          _this10._applyEditDataParams(options, params, forceUpdateRow);\n        });\n      }\n    },\n    _focusPreviousEditingCellIfNeed: function _focusPreviousEditingCellIfNeed(options) {\n      var that = this;\n      if (that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex)) {\n        that._focusEditingCell();\n        that._updateEditRow(options.row, true);\n        return true;\n      }\n    },\n    _applyEditDataParams: function _applyEditDataParams(options, params, forceUpdateRow) {\n      var that = this,\n        editMode = _getEditMode(that),\n        isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue,\n        showEditorAlways = options.column.showEditorAlways,\n        isUpdateInCellMode = editMode === EDIT_MODE_CELL && options.row && !options.row.isNewRow,\n        focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex);\n      if (focusPreviousEditingCell) {\n        that._focusEditingCell();\n        that._updateEditRow(options.row, true);\n        return;\n      }\n      that._addEditData(params, options.row);\n      that._updateEditButtons();\n      if (showEditorAlways && !forceUpdateRow) {\n        if (isUpdateInCellMode) {\n          that._editRowIndex = options.rowIndex + that._dataController.getRowIndexOffset();\n          that._editColumnIndex = options.columnIndex;\n          return that.saveEditData();\n        } else {\n          if (editMode === EDIT_MODE_BATCH) {\n            var columns = that._columnsController.getVisibleColumns();\n            forceUpdateRow = isCustomSetCellValue || columns.some(function (column) {\n              return column.calculateCellValue !== column.defaultCalculateCellValue;\n            });\n          }\n        }\n      }\n      if (options.row && (forceUpdateRow || isCustomSetCellValue)) {\n        that._updateEditRow(options.row, forceUpdateRow);\n      }\n    },\n    _updateEditRowCore: function _updateEditRowCore(row, skipCurrentRow) {\n      var that = this,\n        editForm = that._editForm,\n        editMode = _getEditMode(that);\n      if (editMode === EDIT_MODE_POPUP) {\n        if (that.option(\"repaintChangesOnly\")) {\n          row.update && row.update(row);\n        } else {\n          editForm && editForm.repaint();\n        }\n      } else {\n        that._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: that._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n        });\n      }\n    },\n    _updateEditRow: function _updateEditRow(row, forceUpdateRow) {\n      var that = this;\n      if (forceUpdateRow || !_isRowEditMode(that)) {\n        that._updateEditRowCore(row, !forceUpdateRow);\n        if (!forceUpdateRow) {\n          that._focusEditingCell();\n        }\n      } else {\n        setTimeout(function () {\n          var $focusedElement = (0, _renderer2.default)(_dom_adapter2.default.getActiveElement()),\n            columnIndex = that._rowsView.getCellIndex($focusedElement, row.rowIndex),\n            focusedElement = $focusedElement.get(0),\n            selectionRange = (0, _uiGrid_core3.getSelectionRange)(focusedElement);\n          that._updateEditRowCore(row);\n          if (columnIndex >= 0) {\n            var $focusedItem = that._rowsView._getCellElement(row.rowIndex, columnIndex);\n            that._delayedInputFocus($focusedItem, function () {\n              setTimeout(function () {\n                focusedElement = _dom_adapter2.default.getActiveElement();\n                if (selectionRange.selectionStart >= 0) {\n                  (0, _uiGrid_core3.setSelectionRange)(focusedElement, selectionRange);\n                }\n              });\n            });\n          }\n        });\n      }\n    },\n    _addEditData: function _addEditData(options, row) {\n      var that = this,\n        editDataIndex = (0, _uiGrid_core3.getIndexByKey)(options.key, that._editData);\n      if (editDataIndex < 0) {\n        editDataIndex = that._editData.length;\n        that._editData.push(options);\n      }\n      if (that._editData[editDataIndex]) {\n        if (options.data) {\n          that._editData[editDataIndex].data = (0, _uiGrid_core3.createObjectWithChanges)(that._editData[editDataIndex].data, options.data);\n        }\n        if ((!that._editData[editDataIndex].type || !options.data) && options.type) {\n          that._editData[editDataIndex].type = options.type;\n        }\n        if (row) {\n          row.oldData = that._editData[editDataIndex].oldData;\n          row.data = (0, _uiGrid_core3.createObjectWithChanges)(row.data, options.data);\n        }\n      }\n      return editDataIndex;\n    },\n    _getFormEditItemTemplate: function _getFormEditItemTemplate(cellOptions, column) {\n      return column.editCellTemplate || getDefaultEditorTemplate(this);\n    },\n    renderFormEditTemplate: function renderFormEditTemplate(detailCellOptions, item, form, container, isReadOnly) {\n      var that = this,\n        $container = (0, _renderer2.default)(container),\n        column = item.column,\n        editorType = getEditorType(item),\n        rowData = detailCellOptions.row && detailCellOptions.row.data,\n        cellOptions = (0, _extend.extend)({}, detailCellOptions, {\n          data: rowData,\n          cellElement: null,\n          isOnForm: true,\n          item: item,\n          column: (0, _extend.extend)({}, column, {\n            editorType: editorType,\n            editorOptions: item.editorOptions\n          }),\n          id: form.getItemID(item.name || item.dataField),\n          columnIndex: column.index,\n          setValue: !isReadOnly && column.allowEditing && function (value) {\n            that.updateFieldValue(cellOptions, value);\n          }\n        });\n      cellOptions.value = column.calculateCellValue(rowData);\n      var template = that._getFormEditItemTemplate.bind(that)(cellOptions, column);\n      if (that._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest((0, _window.getWindow)().document).length)) {\n        that._rowsView._updateCell($container, cellOptions);\n      }\n    },\n    getFormEditorTemplate: function getFormEditorTemplate(cellOptions, item) {\n      var that = this,\n        column = this.component.columnOption(item.dataField);\n      return function (options, container) {\n        var templateOptions = (0, _extend.extend)({}, cellOptions),\n          $container = (0, _renderer2.default)(container);\n        templateOptions.column = column;\n        templateOptions.row.watch && templateOptions.row.watch(function () {\n          return templateOptions.column.selector(templateOptions.row.data);\n        }, function (newValue) {\n          templateOptions.value = newValue;\n          $container.contents().remove();\n          that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\n        });\n        that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\n      };\n    },\n    getEditFormTemplate: function getEditFormTemplate() {\n      var that = this;\n      return function ($container, detailOptions, renderFormOnly) {\n        var editFormOptions = that.option(\"editing.form\"),\n          items = that.option(\"editing.form.items\"),\n          userCustomizeItem = that.option(\"editing.form.customizeItem\"),\n          editData = that._editData[(0, _uiGrid_core3.getIndexByKey)(detailOptions.key, that._editData)],\n          editFormItemClass = that.addWidgetPrefix(EDIT_FORM_ITEM_CLASS),\n          isCustomEditorType = {};\n        if (!items) {\n          var columns = that.getController(\"columns\").getColumns();\n          items = [];\n          (0, _iterator.each)(columns, function (_, column) {\n            if (!column.isBand && !column.type) {\n              items.push({\n                column: column,\n                name: column.name,\n                dataField: column.dataField\n              });\n            }\n          });\n        } else {\n          forEachFormItems(items, function (item) {\n            var itemId = item && (item.name || item.dataField);\n            if (itemId) {\n              isCustomEditorType[itemId] = !!item.editorType;\n            }\n          });\n        }\n        that._firstFormItem = void 0;\n        that._editForm = that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($container), _form2.default, (0, _extend.extend)({}, editFormOptions, {\n          items: items,\n          formID: \"dx-\" + new _guid2.default(),\n          validationGroup: editData,\n          customizeItem: function customizeItem(item) {\n            var column,\n              itemId = item.name || item.dataField;\n            if (item.column || itemId) {\n              column = item.column || that._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField);\n            }\n            if (column) {\n              item.label = item.label || {};\n              item.label.text = item.label.text || column.caption;\n              item.template = item.template || that.getFormEditorTemplate(detailOptions, item);\n              item.column = column;\n              item.isCustomEditorType = isCustomEditorType[itemId];\n              if (column.formItem) {\n                (0, _extend.extend)(item, column.formItem);\n              }\n              if (void 0 === item.isRequired && column.validationRules) {\n                item.isRequired = column.validationRules.some(function (rule) {\n                  return \"required\" === rule.type;\n                });\n                item.validationRules = [];\n              }\n              var itemVisible = _type2.default.isDefined(item.visible) ? item.visible : true;\n              if (!that._firstFormItem && itemVisible) {\n                that._firstFormItem = item;\n              }\n            }\n            userCustomizeItem && userCustomizeItem.call(this, item);\n            item.cssClass = _type2.default.isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass;\n          }\n        }));\n        if (!renderFormOnly) {\n          var $buttonsContainer = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\n          that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($buttonsContainer), _button2.default, that._getSaveButtonConfig());\n          that._createComponent((0, _renderer2.default)(\"<div>\").appendTo($buttonsContainer), _button2.default, that._getCancelButtonConfig());\n        }\n        that._editForm.on(\"contentReady\", function () {\n          that._editPopup && that._editPopup.repaint();\n        });\n      };\n    },\n    getColumnTemplate: function getColumnTemplate(options) {\n      var template,\n        allowUpdating,\n        editingStartOptions,\n        that = this,\n        column = options.column,\n        rowIndex = options.row && options.row.rowIndex,\n        isRowMode = _isRowEditMode(that),\n        isRowEditing = that.isEditRow(rowIndex),\n        isCellEditing = that.isEditCell(rowIndex, options.columnIndex);\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        allowUpdating = that.allowUpdating(options);\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowMode && isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n            that._isEditingStart(editingStartOptions);\n          }\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = function (value, text) {\n              that.updateFieldValue(options, value, text);\n            };\n          }\n        }\n        template = column.editCellTemplate || getDefaultEditorTemplate(that);\n      } else {\n        if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n          template = that.getEditFormTemplate(options);\n        }\n      }\n      return template;\n    },\n    _createButton: function _createButton($container, button, options) {\n      var iconType,\n        that = this,\n        icon = EDIT_ICON_CLASS[button.name],\n        useIcons = that.option(\"editing.useIcons\"),\n        $button = (0, _renderer2.default)(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n      if (button.template) {\n        that._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          iconType = _icon2.default.getImageSourceType(icon);\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = _icon2.default.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", _message2.default.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n        if (_type2.default.isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n        if (that.option(\"keyboardNavigation.enabled\")) {\n          $button.attr(\"tabindex\", -1);\n        }\n        _events_engine2.default.on($button, (0, _utils.addNamespace)(\"click\", EDITING_NAMESPACE), that.createAction(function (e) {\n          button.onClick.call(button, (0, _extend.extend)({}, e, {\n            row: options.row,\n            column: options.column\n          }));\n          e.event.preventDefault();\n        }));\n        options.rtlEnabled ? $container.prepend($button, \"&nbsp;\") : $container.append($button, \"&nbsp;\");\n      }\n    },\n    getButtonLocalizationNames: function getButtonLocalizationNames() {\n      return {\n        edit: \"dxDataGrid-editingEditRow\",\n        save: \"dxDataGrid-editingSaveRowChanges\",\n        \"delete\": \"dxDataGrid-editingDeleteRow\",\n        undelete: \"dxDataGrid-editingUndeleteRow\",\n        cancel: \"dxDataGrid-editingCancelRowChanges\"\n      };\n    },\n    prepareEditButtons: function prepareEditButtons(headerPanel) {\n      var that = this,\n        editingOptions = that.option(\"editing\") || {},\n        editingTexts = that.option(\"editing.texts\") || {},\n        titleButtonTextByClassNames = {\n          revert: editingTexts.cancelAllChanges,\n          save: editingTexts.saveAllChanges,\n          addRow: editingTexts.addRow\n        },\n        classNameButtonByNames = {\n          revert: \"cancel\",\n          save: \"save\",\n          addRow: \"addrow\"\n        },\n        buttonItems = [];\n      var prepareButtonItem = function prepareButtonItem(name, methodName, sortIndex) {\n        var className = classNameButtonByNames[name],\n          onInitialized = function onInitialized(e) {\n            (0, _renderer2.default)(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + that.addWidgetPrefix(className) + \"-button\"));\n          },\n          hintText = titleButtonTextByClassNames[name],\n          isButtonDisabled = (\"save\" === className || \"cancel\" === className) && !that.hasChanges();\n        return {\n          widget: \"dxButton\",\n          options: {\n            onInitialized: onInitialized,\n            icon: \"edit-button-\" + className,\n            disabled: isButtonDisabled,\n            onClick: function onClick() {\n              setTimeout(function () {\n                that[methodName]();\n              });\n            },\n            text: hintText,\n            hint: hintText\n          },\n          showText: \"inMenu\",\n          name: name + \"Button\",\n          location: \"after\",\n          locateInMenu: \"auto\",\n          sortIndex: sortIndex\n        };\n      };\n      if (editingOptions.allowAdding) {\n        buttonItems.push(prepareButtonItem(\"addRow\", \"addRow\", 20));\n      }\n      if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && _getEditMode(that) === EDIT_MODE_BATCH) {\n        buttonItems.push(prepareButtonItem(\"save\", \"saveEditData\", 21));\n        buttonItems.push(prepareButtonItem(\"revert\", \"cancelEditData\", 22));\n      }\n      return buttonItems;\n    },\n    showHighlighting: function showHighlighting($cell) {\n      var $highlight = $cell.find(\".\" + CELL_HIGHLIGHT_OUTLINE);\n      if (\"TD\" === $cell.get(0).tagName && !$highlight.length) {\n        $cell.wrapInner((0, _renderer2.default)(\"<div>\").addClass(CELL_HIGHLIGHT_OUTLINE + \" \" + POINTER_EVENTS_TARGET_CLASS));\n      }\n    },\n    resetRowAndPageIndices: function resetRowAndPageIndices(alwaysRest) {\n      var that = this;\n      (0, _iterator.each)(that._editData, function (_, editData) {\n        if (editData.pageIndex !== that._pageIndex || alwaysRest) {\n          delete editData.pageIndex;\n          delete editData.rowIndex;\n        }\n      });\n    },\n    _afterInsertRow: function _afterInsertRow() {},\n    _beforeSaveEditData: function _beforeSaveEditData(editData) {\n      if (editData && !_type2.default.isDefined(editData.key) && _type2.default.isDefined(editData.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: function _afterSaveEditData() {},\n    _beforeCancelEditData: function _beforeCancelEditData() {},\n    _allowEditAction: function _allowEditAction(actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n      if (_type2.default.isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n      return allowEditAction;\n    },\n    allowUpdating: function allowUpdating(options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION,\n        needCallback = arguments.length > 1 ? startEditAction === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function allowDeleting(options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    }\n  };\n}());\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        texts: {\n          editRow: _message2.default.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: _message2.default.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: _message2.default.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: _message2.default.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: _message2.default.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: _message2.default.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: _message2.default.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: _message2.default.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: _message2.default.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\"\n      }\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function init() {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function reload(full, repaintChangesOnly) {\n          var d,\n            editingController = this.getController(\"editing\");\n          !repaintChangesOnly && this._editingController.refresh();\n          d = this.callBase.apply(this, arguments);\n          return d && d.done(function () {\n            editingController.resetRowAndPageIndices(true);\n          });\n        },\n        repaintRows: function repaintRows() {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function _updateEditRow(items) {\n          var editingController = this._editingController,\n            editRowIndex = editingController.getEditRowIndex(),\n            editItem = items[editRowIndex];\n          if (editItem) {\n            editItem.isEditing = true;\n            if (editingController.getEditMode() === EDIT_MODE_FORM) {\n              editItem.rowType = \"detail\";\n            }\n          }\n        },\n        _updateItemsCore: function _updateItemsCore(change) {\n          this.callBase(change);\n          this._updateEditRow(this.items());\n        },\n        _applyChangeUpdate: function _applyChangeUpdate(change) {\n          this._updateEditRow(change.items);\n          this.callBase(change);\n        },\n        _applyChangesOnly: function _applyChangesOnly(change) {\n          this._updateEditRow(change.items);\n          this.callBase(change);\n        },\n        _processItems: function _processItems(items, changeType) {\n          items = this._editingController.processItems(items, changeType);\n          return this.callBase(items, changeType);\n        },\n        _processDataItem: function _processDataItem(dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function _processItem(item, options) {\n          item = this.callBase(item, options);\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n          return item;\n        },\n        _correctRowIndices: function _correctRowIndices(getRowIndexCorrection) {\n          this.callBase.apply(this, arguments);\n          this._editingController.correctEditRowIndex(getRowIndexCorrection);\n        },\n        _getChangedColumnIndices: function _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\"),\n            isRowEditMode = editingController.isRowEditMode();\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed || isRowEditMode && oldItem.isEditing !== newItem.isEditing) {\n            return;\n          }\n          if (oldItem.rowType === newItem.rowType && isRowEditMode && editingController.isEditRow(rowIndex) && isLiveUpdate) {\n            return [];\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function _isCellChanged(oldRow, newRow, rowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\"),\n            cell = oldRow.cells && oldRow.cells[columnIndex],\n            isEditing = editingController && editingController.isEditCell(rowIndex, columnIndex);\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n          if (cell && cell.isEditing !== isEditing) {\n            return true;\n          }\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        init: function init() {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellElements: function getCellElements(rowIndex) {\n          var $cellElements = this.callBase(rowIndex),\n            editingController = this._editingController,\n            editForm = editingController.getEditForm(),\n            editFormRowIndex = editingController.getEditFormRowIndex();\n          if (editFormRowIndex === rowIndex && $cellElements && editForm) {\n            return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS);\n          }\n          return $cellElements;\n        },\n        getCellIndex: function getCellIndex($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex),\n              cellIndex = -1;\n            (0, _iterator.each)($cellElements, function (index, cellElement) {\n              if ((0, _renderer2.default)(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _getVisibleColumnIndex: function _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {\n          var column,\n            editFormRowIndex = this._editingController.getEditFormRowIndex();\n          if (editFormRowIndex === rowIndex && _type2.default.isString(columnIdentifier)) {\n            column = this._columnsController.columnOption(columnIdentifier);\n            return this._getEditFormEditorVisibleIndex($cells, column);\n          }\n          return this.callBase.apply(this, arguments);\n        },\n        _getEditFormEditorVisibleIndex: function _getEditFormEditorVisibleIndex($cells, column) {\n          var item,\n            visibleIndex = -1;\n          (0, _iterator.each)($cells, function (index, cellElement) {\n            item = (0, _renderer2.default)(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\n            if (item && item.column && column && item.column.index === column.index) {\n              visibleIndex = index;\n              return false;\n            }\n          });\n          return visibleIndex;\n        },\n        publicMethods: function publicMethods() {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function _getCellTemplate(options) {\n          var that = this,\n            template = that._editingController.getColumnTemplate(options);\n          return template || that.callBase(options);\n        },\n        _isNativeClick: function _isNativeClick() {\n          return (_devices2.default.real().ios || _devices2.default.real().android) && this.option(\"editing.allowUpdating\");\n        },\n        _createTable: function _createTable() {\n          var that = this,\n            $table = that.callBase.apply(that, arguments);\n          if (!_isRowEditMode(that) && that.option(\"editing.allowUpdating\")) {\n            _events_engine2.default.on($table, (0, _utils.addNamespace)(_hold2.default.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", that.createAction(function () {\n              var editingController = that._editingController;\n              if (editingController.isEditing()) {\n                editingController.closeEditCell();\n              }\n            }));\n          }\n          return $table;\n        },\n        _createRow: function _createRow(row) {\n          var editingController,\n            isEditRow,\n            isRowRemoved,\n            isRowInserted,\n            isRowModified,\n            $row = this.callBase(row);\n          if (row) {\n            editingController = this._editingController;\n            isEditRow = editingController.isEditRow(row.rowIndex);\n            isRowRemoved = !!row.removed;\n            isRowInserted = !!row.isNewRow;\n            isRowModified = !!row.modified;\n            if (_getEditMode(this) === EDIT_MODE_BATCH) {\n              isRowRemoved && $row.addClass(ROW_REMOVED);\n            } else {\n              isEditRow && $row.addClass(EDIT_ROW);\n            }\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n            if (isEditRow || isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n            if (isEditRow && \"detail\" === row.rowType) {\n              $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n            }\n          }\n          return $row;\n        },\n        _getColumnIndexByElement: function _getColumnIndexByElement($element) {\n          var $tableElement = $element.closest(\"table\"),\n            $tableElements = this.getTableElements();\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function _getColumnIndexByElementCore($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function _editCellByClick(e, eventName) {\n          var that = this,\n            editingController = that._editingController,\n            $targetElement = (0, _renderer2.default)(e.event.target),\n            columnIndex = that._getColumnIndexByElement($targetElement),\n            row = that._dataController.items()[e.rowIndex],\n            allowUpdating = editingController.allowUpdating({\n              row: row\n            }, eventName) || row && row.isNewRow,\n            column = that._columnsController.getVisibleColumns()[columnIndex],\n            allowEditing = column && (column.allowEditing || editingController.isEditCell(e.rowIndex, columnIndex)),\n            startEditAction = that.option(\"editing.startEditAction\") || \"click\";\n          if (\"click\" === eventName && \"dblClick\" === startEditAction && !editingController.isEditCell(e.rowIndex, columnIndex)) {\n            editingController.closeEditCell();\n          }\n          return eventName === startEditAction && allowUpdating && allowEditing && editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n        },\n        _rowClick: function _rowClick(e) {\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n          if (!this._editCellByClick(e, \"click\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function _rowDblClick(e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function _cellPrepared($cell, parameters) {\n          var columnIndex = parameters.columnIndex,\n            editingController = this._editingController,\n            isCommandCell = !!parameters.column.command,\n            isEditableCell = parameters.setValue,\n            isEditing = parameters.isEditing || editingController.isEditRow(parameters.rowIndex) && parameters.column.allowEditing;\n          if (\"data\" === parameters.rowType && !parameters.column.command && (isEditing || parameters.column.showEditorAlways)) {\n            var alignment = parameters.column.alignment;\n            $cell.addClass(EDITOR_CELL_CLASS).toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n          var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n          if (modifiedValues && void 0 !== modifiedValues[columnIndex] && parameters.column && !isCommandCell && parameters.column.setCellValue) {\n            editingController.showHighlighting($cell);\n            $cell.addClass(CELL_MODIFIED);\n          } else {\n            if (isEditableCell) {\n              editingController.showHighlighting($cell, true);\n            }\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: function _editCellPrepared($cell) {},\n        _formItemPrepared: function _formItemPrepared() {},\n        _isFormItem: function _isFormItem(parameters) {\n          var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType,\n            isPopupEditing = \"data\" === parameters.rowType && \"popup\" === _getEditMode(this);\n          return (isDetailRow || isPopupEditing) && parameters.item;\n        },\n        _updateCell: function _updateCell($cell, parameters) {\n          if (this._isFormItem(parameters)) {\n            this._formItemPrepared(parameters, $cell);\n          } else {\n            this.callBase($cell, parameters);\n          }\n        },\n        _update: function _update(change) {\n          this.callBase(change);\n          if (\"updateSelection\" === change.changeType) {\n            this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED);\n          }\n        },\n        _getCellOptions: function _getCellOptions(options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _renderCellContent: function _renderCellContent($cell, options) {\n          if (\"data\" === options.rowType && _getEditMode(this) === EDIT_MODE_POPUP && false === options.row.visible) {\n            return;\n          }\n          this.callBase.apply(this, arguments);\n        },\n        cellValue: function cellValue(rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function _getToolbarItems() {\n          var items = this.callBase(),\n            editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function optionChanged(args) {\n          switch (args.name) {\n            case \"editing\":\n              if (!(args.fullName && 0 === args.fullName.indexOf(\"editing.popup\"))) {\n                this._invalidate();\n              }\n              this.callBase(args);\n              break;\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function isVisible() {\n          var that = this,\n            editingOptions = that.getController(\"editing\").option(\"editing\");\n          return that.callBase() || editingOptions && (editingOptions.allowAdding || (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}