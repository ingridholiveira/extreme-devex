{"ast":null,"code":"/**\r\n * DevExtreme (ui/form/ui.form.items_runtime_info.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _guid = require(\"../../core/guid\");\nvar _guid2 = _interopRequireDefault(_guid);\nvar _iterator = require(\"../../core/utils/iterator\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar FormItemsRunTimeInfo = function () {\n  function FormItemsRunTimeInfo() {\n    _classCallCheck(this, FormItemsRunTimeInfo);\n    this._map = {};\n  }\n  _createClass(FormItemsRunTimeInfo, [{\n    key: \"_findWidgetInstance\",\n    value: function value(condition) {\n      var result = void 0;\n      (0, _iterator.each)(this._map, function (guid, _ref) {\n        var widgetInstance = _ref.widgetInstance,\n          item = _ref.item;\n        if (condition(item)) {\n          result = widgetInstance;\n          return false;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"_findFieldByCondition\",\n    value: function value(callback, field) {\n      var result = void 0;\n      (0, _iterator.each)(this._map, function (key, value) {\n        if (callback(value)) {\n          result = \"guid\" === field ? key : value[field];\n          return false;\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"clear\",\n    value: function value() {\n      this._map = {};\n    }\n  }, {\n    key: \"removeItemsByItems\",\n    value: function value(itemsRunTimeInfo) {\n      var _this = this;\n      (0, _iterator.each)(itemsRunTimeInfo.getItems(), function (guid) {\n        delete _this._map[guid];\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function value(options) {\n      var key = options.guid || new _guid2.default();\n      this._map[key] = options;\n      return key;\n    }\n  }, {\n    key: \"addLayoutManagerToItemByKey\",\n    value: function value(layoutManager, key) {\n      var item = this._map[key];\n      if (item) {\n        item.layoutManager = layoutManager;\n      }\n    }\n  }, {\n    key: \"addItemsOrExtendFrom\",\n    value: function value(itemsRunTimeInfo) {\n      var _this2 = this;\n      itemsRunTimeInfo.each(function (key, itemRunTimeInfo) {\n        if (_this2._map[key]) {\n          _this2._map[key].widgetInstance = itemRunTimeInfo.widgetInstance;\n          _this2._map[key].$itemContainer = itemRunTimeInfo.$itemContainer;\n        } else {\n          _this2.add({\n            item: itemRunTimeInfo.item,\n            widgetInstance: itemRunTimeInfo.widgetInstance,\n            guid: key,\n            $itemContainer: itemRunTimeInfo.$itemContainer\n          });\n        }\n      });\n    }\n  }, {\n    key: \"findWidgetInstanceByItem\",\n    value: function value(item) {\n      return this._findWidgetInstance(function (storedItem) {\n        return storedItem === item;\n      });\n    }\n  }, {\n    key: \"getGroupOrTabLayoutManagerByPath\",\n    value: function value(path) {\n      return this._findFieldByCondition(function (value) {\n        return value.path === path;\n      }, \"layoutManager\");\n    }\n  }, {\n    key: \"getKeyByPath\",\n    value: function value(path) {\n      return this._findFieldByCondition(function (value) {\n        return value.path === path;\n      }, \"guid\");\n    }\n  }, {\n    key: \"getPathFromItem\",\n    value: function value(targetItem) {\n      return this._findFieldByCondition(function (value) {\n        return value.item === targetItem;\n      }, \"path\");\n    }\n  }, {\n    key: \"findWidgetInstanceByName\",\n    value: function value(name) {\n      return this._findWidgetInstance(function (item) {\n        return name === item.name;\n      });\n    }\n  }, {\n    key: \"findWidgetInstanceByDataField\",\n    value: function value(dataField) {\n      return this._findWidgetInstance(function (item) {\n        return dataField === item.dataField;\n      });\n    }\n  }, {\n    key: \"findItemContainerByItem\",\n    value: function value(item) {\n      for (var key in this._map) {\n        if (this._map[key].item === item) {\n          return this._map[key].$itemContainer;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getItems\",\n    value: function value() {\n      return this._map;\n    }\n  }, {\n    key: \"each\",\n    value: function value(handler) {\n      (0, _iterator.each)(this._map, function (key, itemRunTimeInfo) {\n        handler(key, itemRunTimeInfo);\n      });\n    }\n  }]);\n  return FormItemsRunTimeInfo;\n}();\nexports.default = FormItemsRunTimeInfo;","map":null,"metadata":{},"sourceType":"script"}