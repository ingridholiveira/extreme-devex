{"ast":null,"code":"/**\r\n * DevExtreme (ui/selection/selection.strategy.standard.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar commonUtils = require(\"../../core/utils/common\"),\n  typeUtils = require(\"../../core/utils/type\"),\n  getKeyHash = commonUtils.getKeyHash,\n  dataQuery = require(\"../../data/query\"),\n  deferredUtils = require(\"../../core/utils/deferred\"),\n  SelectionFilterCreator = require(\"../../core/utils/selection_filter\").SelectionFilterCreator,\n  when = deferredUtils.when,\n  Deferred = deferredUtils.Deferred,\n  errors = require(\"../widget/ui.errors\"),\n  SelectionStrategy = require(\"./selection.strategy\");\nmodule.exports = SelectionStrategy.inherit({\n  ctor: function ctor(options) {\n    this.callBase(options);\n    this._initSelectedItemKeyHash();\n  },\n  _initSelectedItemKeyHash: function _initSelectedItemKeyHash() {\n    this._setOption(\"keyHashIndices\", this.options.equalByReference ? null : {});\n  },\n  getSelectedItemKeys: function getSelectedItemKeys() {\n    return this.options.selectedItemKeys.slice(0);\n  },\n  getSelectedItems: function getSelectedItems() {\n    return this.options.selectedItems.slice(0);\n  },\n  _preserveSelectionUpdate: function _preserveSelectionUpdate(items, isDeselect) {\n    var keyIndicesToRemoveMap,\n      keyIndex,\n      i,\n      keyOf = this.options.keyOf;\n    if (!keyOf) {\n      return;\n    }\n    var isBatchDeselect = isDeselect && items.length > 1 && !this.options.equalByReference;\n    if (isBatchDeselect) {\n      keyIndicesToRemoveMap = {};\n    }\n    for (i = 0; i < items.length; i++) {\n      var item = items[i],\n        key = keyOf(item);\n      if (isDeselect) {\n        keyIndex = this.removeSelectedItem(key, keyIndicesToRemoveMap);\n        if (keyIndicesToRemoveMap && keyIndex >= 0) {\n          keyIndicesToRemoveMap[keyIndex] = true;\n        }\n      } else {\n        this.addSelectedItem(key, item);\n      }\n    }\n    if (isBatchDeselect) {\n      this._batchRemoveSelectedItems(keyIndicesToRemoveMap);\n    }\n  },\n  _batchRemoveSelectedItems: function _batchRemoveSelectedItems(keyIndicesToRemoveMap) {\n    var selectedItemKeys = this.options.selectedItemKeys.slice(0);\n    var selectedItems = this.options.selectedItems.slice(0);\n    this.options.selectedItemKeys.length = 0;\n    this.options.selectedItems.length = 0;\n    for (var i = 0; i < selectedItemKeys.length; i++) {\n      if (!keyIndicesToRemoveMap[i]) {\n        this.options.selectedItemKeys.push(selectedItemKeys[i]);\n        this.options.selectedItems.push(selectedItems[i]);\n      }\n    }\n    this._initSelectedItemKeyHash();\n    this.updateSelectedItemKeyHash(this.options.selectedItemKeys);\n  },\n  _loadSelectedItemsCore: function _loadSelectedItemsCore(keys, isDeselect, isSelectAll) {\n    var deferred = new Deferred(),\n      key = this.options.key();\n    if (!keys.length && !isSelectAll) {\n      deferred.resolve([]);\n      return deferred;\n    }\n    var filter = this.options.filter();\n    if (isSelectAll && isDeselect && !filter) {\n      deferred.resolve(this.getSelectedItems());\n      return deferred;\n    }\n    var selectionFilterCreator = new SelectionFilterCreator(keys, isSelectAll),\n      combinedFilter = selectionFilterCreator.getCombinedFilter(key, filter);\n    var deselectedItems = [];\n    if (isDeselect) {\n      deselectedItems = combinedFilter ? dataQuery(this.options.selectedItems).filter(combinedFilter).toArray() : this.options.selectedItems.slice(0);\n    }\n    var filteredItems = deselectedItems.length ? deselectedItems : this.options.plainItems(true).filter(this.options.isSelectableItem).map(this.options.getItemData);\n    var localFilter = selectionFilterCreator.getLocalFilter(this.options.keyOf, this.equalKeys.bind(this), this.options.equalByReference, key);\n    filteredItems = filteredItems.filter(localFilter);\n    if (deselectedItems.length || !isSelectAll && filteredItems.length === keys.length) {\n      deferred.resolve(filteredItems);\n    } else {\n      deferred = this._loadFilteredData(combinedFilter, localFilter);\n    }\n    return deferred;\n  },\n  _replaceSelectionUpdate: function _replaceSelectionUpdate(items) {\n    var internalKeys = [],\n      keyOf = this.options.keyOf;\n    if (!keyOf) {\n      return;\n    }\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i],\n        key = keyOf(item);\n      internalKeys.push(key);\n    }\n    this.setSelectedItems(internalKeys, items);\n  },\n  _warnOnIncorrectKeys: function _warnOnIncorrectKeys(keys) {\n    for (var i = 0; i < keys.length; i++) {\n      if (!this.isItemKeySelected(keys[i])) {\n        errors.log(\"W1002\", keys[i]);\n      }\n    }\n  },\n  _loadSelectedItems: function _loadSelectedItems(keys, isDeselect, isSelectAll) {\n    var that = this,\n      deferred = new Deferred();\n    when(that._lastLoadDeferred).always(function () {\n      that._loadSelectedItemsCore(keys, isDeselect, isSelectAll).done(deferred.resolve).fail(deferred.reject);\n    });\n    that._lastLoadDeferred = deferred;\n    return deferred;\n  },\n  selectedItemKeys: function selectedItemKeys(keys, preserve, isDeselect, isSelectAll) {\n    var that = this,\n      deferred = that._loadSelectedItems(keys, isDeselect, isSelectAll);\n    deferred.done(function (items) {\n      if (preserve) {\n        that._preserveSelectionUpdate(items, isDeselect);\n      } else {\n        that._replaceSelectionUpdate(items);\n      }\n      that.onSelectionChanged();\n    });\n    return deferred;\n  },\n  addSelectedItem: function addSelectedItem(key, itemData) {\n    var keyHash = this._getKeyHash(key);\n    if (this._indexOfSelectedItemKey(keyHash) === -1) {\n      if (!typeUtils.isObject(keyHash) && this.options.keyHashIndices) {\n        this.options.keyHashIndices[keyHash] = [this.options.selectedItemKeys.length];\n      }\n      this.options.selectedItemKeys.push(key);\n      this.options.addedItemKeys.push(key);\n      this.options.addedItems.push(itemData);\n      this.options.selectedItems.push(itemData);\n    }\n  },\n  _getSelectedIndexByKey: function _getSelectedIndexByKey(key, ignoreIndicesMap) {\n    var selectedItemKeys = this.options.selectedItemKeys;\n    for (var index = 0; index < selectedItemKeys.length; index++) {\n      if ((!ignoreIndicesMap || !ignoreIndicesMap[index]) && this.equalKeys(selectedItemKeys[index], key)) {\n        return index;\n      }\n    }\n    return -1;\n  },\n  _getSelectedIndexByHash: function _getSelectedIndexByHash(key, ignoreIndicesMap) {\n    var indices = this.options.keyHashIndices[key];\n    if (indices && indices.length > 1 && ignoreIndicesMap) {\n      indices = indices.filter(function (index) {\n        return !ignoreIndicesMap[index];\n      });\n    }\n    return indices && indices[0] >= 0 ? indices[0] : -1;\n  },\n  _indexOfSelectedItemKey: function _indexOfSelectedItemKey(key, ignoreIndicesMap) {\n    var selectedIndex;\n    if (this.options.equalByReference) {\n      selectedIndex = this.options.selectedItemKeys.indexOf(key);\n    } else {\n      if (typeUtils.isObject(key)) {\n        selectedIndex = this._getSelectedIndexByKey(key, ignoreIndicesMap);\n      } else {\n        selectedIndex = this._getSelectedIndexByHash(key, ignoreIndicesMap);\n      }\n    }\n    return selectedIndex;\n  },\n  _shiftSelectedKeyIndices: function _shiftSelectedKeyIndices(keyIndex) {\n    for (var currentKeyIndex = keyIndex; currentKeyIndex < this.options.selectedItemKeys.length; currentKeyIndex++) {\n      var currentKey = this.options.selectedItemKeys[currentKeyIndex],\n        currentKeyHash = getKeyHash(currentKey),\n        currentKeyIndices = this.options.keyHashIndices[currentKeyHash];\n      if (!currentKeyIndices) {\n        continue;\n      }\n      for (var i = 0; i < currentKeyIndices.length; i++) {\n        if (currentKeyIndices[i] > keyIndex) {\n          currentKeyIndices[i]--;\n        }\n      }\n    }\n  },\n  removeSelectedItem: function removeSelectedItem(key, keyIndicesToRemoveMap) {\n    var keyHash = this._getKeyHash(key),\n      isBatchDeselect = !!keyIndicesToRemoveMap,\n      keyIndex = this._indexOfSelectedItemKey(keyHash, keyIndicesToRemoveMap);\n    if (keyIndex < 0) {\n      return keyIndex;\n    }\n    this.options.removedItemKeys.push(key);\n    this.options.removedItems.push(this.options.selectedItems[keyIndex]);\n    if (isBatchDeselect) {\n      return keyIndex;\n    }\n    this.options.selectedItemKeys.splice(keyIndex, 1);\n    this.options.selectedItems.splice(keyIndex, 1);\n    if (typeUtils.isObject(keyHash) || !this.options.keyHashIndices) {\n      return keyIndex;\n    }\n    var keyIndices = this.options.keyHashIndices[keyHash];\n    if (!keyIndices) {\n      return keyIndex;\n    }\n    keyIndices.shift();\n    if (!keyIndices.length) {\n      delete this.options.keyHashIndices[keyHash];\n    }\n    this._shiftSelectedKeyIndices(keyIndex);\n    return keyIndex;\n  },\n  _updateAddedItemKeys: function _updateAddedItemKeys(keys, items) {\n    for (var i = 0; i < keys.length; i++) {\n      if (!this.isItemKeySelected(keys[i])) {\n        this.options.addedItemKeys.push(keys[i]);\n        this.options.addedItems.push(items[i]);\n      }\n    }\n  },\n  _updateRemovedItemKeys: function _updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems) {\n    for (var i = 0; i < oldSelectedKeys.length; i++) {\n      if (!this.isItemKeySelected(oldSelectedKeys[i])) {\n        this.options.removedItemKeys.push(oldSelectedKeys[i]);\n        this.options.removedItems.push(oldSelectedItems[i]);\n      }\n    }\n  },\n  _getKeyHash: function _getKeyHash(key) {\n    return this.options.equalByReference ? key : getKeyHash(key);\n  },\n  setSelectedItems: function setSelectedItems(keys, items) {\n    this._updateAddedItemKeys(keys, items);\n    var oldSelectedKeys = this.options.selectedItemKeys,\n      oldSelectedItems = this.options.selectedItems;\n    if (!this.options.equalByReference) {\n      this._initSelectedItemKeyHash();\n      this.updateSelectedItemKeyHash(keys);\n    }\n    this._setOption(\"selectedItemKeys\", keys);\n    this._setOption(\"selectedItems\", items);\n    this._updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems);\n  },\n  isItemDataSelected: function isItemDataSelected(itemData) {\n    var key = this.options.keyOf(itemData);\n    return this.isItemKeySelected(key);\n  },\n  isItemKeySelected: function isItemKeySelected(key) {\n    var keyHash = this._getKeyHash(key);\n    var index = this._indexOfSelectedItemKey(keyHash);\n    return index !== -1;\n  },\n  getSelectAllState: function getSelectAllState(visibleOnly) {\n    if (visibleOnly) {\n      return this._getVisibleSelectAllState();\n    } else {\n      return this._getFullSelectAllState();\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}