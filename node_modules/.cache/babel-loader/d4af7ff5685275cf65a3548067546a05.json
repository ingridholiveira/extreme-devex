{"ast":null,"code":"/**\r\n * DevExtreme (ui/selection/selection.strategy.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar dataQuery = require(\"../../data/query\"),\n  commonUtils = require(\"../../core/utils/common\"),\n  typeUtils = require(\"../../core/utils/type\"),\n  getKeyHash = commonUtils.getKeyHash,\n  Class = require(\"../../core/class\"),\n  Deferred = require(\"../../core/utils/deferred\").Deferred;\nmodule.exports = Class.inherit({\n  ctor: function ctor(options) {\n    this.options = options;\n    this._clearItemKeys();\n  },\n  _clearItemKeys: function _clearItemKeys() {\n    this._setOption(\"addedItemKeys\", []);\n    this._setOption(\"removedItemKeys\", []);\n    this._setOption(\"removedItems\", []);\n    this._setOption(\"addedItems\", []);\n  },\n  validate: commonUtils.noop,\n  _setOption: function _setOption(name, value) {\n    this.options[name] = value;\n  },\n  onSelectionChanged: function onSelectionChanged() {\n    var addedItemKeys = this.options.addedItemKeys,\n      removedItemKeys = this.options.removedItemKeys,\n      addedItems = this.options.addedItems,\n      removedItems = this.options.removedItems,\n      selectedItems = this.options.selectedItems,\n      selectedItemKeys = this.options.selectedItemKeys,\n      onSelectionChanged = this.options.onSelectionChanged || commonUtils.noop;\n    this._clearItemKeys();\n    onSelectionChanged({\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      addedItemKeys: addedItemKeys,\n      removedItemKeys: removedItemKeys,\n      addedItems: addedItems,\n      removedItems: removedItems\n    });\n  },\n  equalKeys: function equalKeys(key1, key2) {\n    if (this.options.equalByReference) {\n      if (typeUtils.isObject(key1) && typeUtils.isObject(key2)) {\n        return key1 === key2;\n      }\n    }\n    return commonUtils.equalByValue(key1, key2);\n  },\n  _clearSelection: function _clearSelection(keys, preserve, isDeselect, isSelectAll) {\n    keys = keys || [];\n    keys = Array.isArray(keys) ? keys : [keys];\n    this.validate();\n    return this.selectedItemKeys(keys, preserve, isDeselect, isSelectAll);\n  },\n  _loadFilteredData: function _loadFilteredData(remoteFilter, localFilter, select) {\n    var filterLength = encodeURI(JSON.stringify(remoteFilter)).length,\n      needLoadAllData = this.options.maxFilterLengthInRequest && filterLength > this.options.maxFilterLengthInRequest,\n      deferred = new Deferred(),\n      loadOptions = {\n        filter: needLoadAllData ? void 0 : remoteFilter,\n        select: needLoadAllData ? this.options.dataFields() : select || this.options.dataFields()\n      };\n    if (remoteFilter && 0 === remoteFilter.length) {\n      deferred.resolve([]);\n    } else {\n      this.options.load(loadOptions).done(function (items) {\n        var filteredItems = typeUtils.isPlainObject(items) ? items.data : items;\n        if (localFilter) {\n          filteredItems = filteredItems.filter(localFilter);\n        } else {\n          if (needLoadAllData) {\n            filteredItems = dataQuery(filteredItems).filter(remoteFilter).toArray();\n          }\n        }\n        deferred.resolve(filteredItems);\n      }).fail(deferred.reject.bind(deferred));\n    }\n    return deferred;\n  },\n  updateSelectedItemKeyHash: function updateSelectedItemKeyHash(keys) {\n    for (var i = 0; i < keys.length; i++) {\n      var keyHash = getKeyHash(keys[i]);\n      if (!typeUtils.isObject(keyHash)) {\n        this.options.keyHashIndices[keyHash] = this.options.keyHashIndices[keyHash] || [];\n        var keyIndices = this.options.keyHashIndices[keyHash];\n        keyIndices.push(i);\n      }\n    }\n  },\n  _isAnyItemSelected: function _isAnyItemSelected(items) {\n    for (var i = 0; i < items.length; i++) {\n      if (this.options.isItemSelected(items[i])) {\n        return;\n      }\n    }\n    return false;\n  },\n  _getFullSelectAllState: function _getFullSelectAllState() {\n    var items = this.options.plainItems(),\n      dataFilter = this.options.filter(),\n      selectedItems = this.options.selectedItems;\n    if (dataFilter) {\n      selectedItems = dataQuery(selectedItems).filter(dataFilter).toArray();\n    }\n    var selectedItemsLength = selectedItems.length;\n    if (!selectedItemsLength) {\n      return this._isAnyItemSelected(items);\n    }\n    if (selectedItemsLength >= this.options.totalCount()) {\n      return true;\n    }\n    return;\n  },\n  _getVisibleSelectAllState: function _getVisibleSelectAllState() {\n    var items = this.options.plainItems(),\n      hasSelectedItems = false,\n      hasUnselectedItems = false;\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i],\n        itemData = this.options.getItemData(item),\n        key = this.options.keyOf(itemData);\n      if (this.options.isSelectableItem(item)) {\n        if (this.isItemKeySelected(key)) {\n          hasSelectedItems = true;\n        } else {\n          hasUnselectedItems = true;\n        }\n      }\n    }\n    if (hasSelectedItems) {\n      return !hasUnselectedItems ? true : void 0;\n    } else {\n      return false;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}