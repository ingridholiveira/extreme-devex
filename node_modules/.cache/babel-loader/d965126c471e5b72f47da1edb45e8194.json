{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.strategy.base.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _utils = require(\"../../events/utils\");\nvar _array = require(\"../../core/utils/array\");\nvar _dom = require(\"../../core/utils/dom\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\nvar BLUR_EVENT = \"blur beforedeactivate\";\nvar EMPTY_CHAR = \" \";\nvar BaseMaskStrategy = function () {\n  function BaseMaskStrategy(editor) {\n    _classCallCheck(this, BaseMaskStrategy);\n    this.editor = editor;\n    this.DIRECTION = {\n      FORWARD: \"forward\",\n      BACKWARD: \"backward\"\n    };\n    this.NAME = this._getStrategyName();\n  }\n  _createClass(BaseMaskStrategy, [{\n    key: \"_getStrategyName\",\n    value: function value() {\n      return \"base\";\n    }\n  }, {\n    key: \"editorOption\",\n    value: function value() {\n      var _editor;\n      return (_editor = this.editor).option.apply(_editor, arguments);\n    }\n  }, {\n    key: \"editorInput\",\n    value: function value() {\n      return this.editor._input();\n    }\n  }, {\n    key: \"editorCaret\",\n    value: function value(newCaret) {\n      if (!newCaret) {\n        return this.editor._caret();\n      }\n      this.editor._caret(newCaret);\n    }\n  }, {\n    key: \"getHandler\",\n    value: function value(handlerName) {\n      var handler = this[\"_\" + handlerName + \"Handler\"] || function () {};\n      return handler.bind(this);\n    }\n  }, {\n    key: \"attachEvents\",\n    value: function value() {\n      var _this = this;\n      var $input = this.editorInput();\n      this.getHandleEventNames().forEach(function (eventName) {\n        var subscriptionName = (0, _utils.addNamespace)(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);\n        _events_engine2.default.on($input, subscriptionName, _this.getEventHandler(eventName));\n      });\n      this._attachChangeEventHandlers();\n    }\n  }, {\n    key: \"getHandleEventNames\",\n    value: function value() {\n      return [\"focusIn\", \"focusOut\", \"keyDown\", \"input\", \"paste\", \"cut\", \"drop\"];\n    }\n  }, {\n    key: \"getEventHandler\",\n    value: function value(eventName) {\n      return this[\"_\" + eventName + \"Handler\"].bind(this);\n    }\n  }, {\n    key: \"detachEvents\",\n    value: function value() {\n      _events_engine2.default.off(this.editorInput(), \".\" + MASK_EVENT_NAMESPACE);\n    }\n  }, {\n    key: \"_attachChangeEventHandlers\",\n    value: function value() {\n      if ((0, _array.inArray)(\"change\", this.editorOption(\"valueChangeEvent\").split(\" \")) === -1) {\n        return;\n      }\n      _events_engine2.default.on(this.editorInput(), (0, _utils.addNamespace)(BLUR_EVENT, MASK_EVENT_NAMESPACE), function (e) {\n        this._suppressCaretChanging(this._changeHandler, [e]);\n        this._changeHandler(e);\n      }.bind(this.editor));\n    }\n  }, {\n    key: \"_focusInHandler\",\n    value: function value() {\n      this.editor._showMaskPlaceholder();\n      this.editor._direction(this.DIRECTION.FORWARD);\n      if (!this.editor._isValueEmpty() && this.editorOption(\"isValid\")) {\n        this.editor._adjustCaret();\n      } else {\n        var caret = this.editor._maskRulesChain.first();\n        this._caretTimeout = setTimeout(function () {\n          this._caret({\n            start: caret,\n            end: caret\n          });\n        }.bind(this.editor), 0);\n      }\n    }\n  }, {\n    key: \"_focusOutHandler\",\n    value: function value(event) {\n      this.editor._changeHandler(event);\n      if (\"onFocus\" === this.editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\n        this.editorOption(\"text\", \"\");\n        this.editor._renderDisplayText(\"\");\n      }\n    }\n  }, {\n    key: \"_cutHandler\",\n    value: function value(event) {\n      var caret = this.editorCaret();\n      var selectedText = this.editorInput().val().substring(caret.start, caret.end);\n      this.editor._maskKeyHandler(event, function () {\n        return (0, _dom.clipboardText)(event, selectedText);\n      });\n    }\n  }, {\n    key: \"_dropHandler\",\n    value: function value() {\n      this._clearDragTimer();\n      this._dragTimer = setTimeout(function () {\n        this.option(\"value\", this._convertToValue(this._input().val()));\n      }.bind(this.editor));\n    }\n  }, {\n    key: \"_clearDragTimer\",\n    value: function value() {\n      clearTimeout(this._dragTimer);\n    }\n  }, {\n    key: \"_keyDownHandler\",\n    value: function value() {\n      this._keyPressHandled = false;\n    }\n  }, {\n    key: \"_pasteHandler\",\n    value: function value(event) {\n      var editor = this.editor;\n      this._keyPressHandled = true;\n      var caret = this.editorCaret();\n      editor._maskKeyHandler(event, function () {\n        var pastingText = (0, _dom.clipboardText)(event);\n        var restText = editor._maskRulesChain.text().substring(caret.end);\n        var accepted = editor._handleChain({\n          text: pastingText,\n          start: caret.start,\n          length: pastingText.length\n        });\n        var newCaret = caret.start + accepted;\n        editor._handleChain({\n          text: restText,\n          start: newCaret,\n          length: restText.length\n        });\n        editor._caret({\n          start: newCaret,\n          end: newCaret\n        });\n      });\n    }\n  }, {\n    key: \"runWithoutEventProcessing\",\n    value: function value(action) {\n      var keyPressHandled = this._keyPressHandled;\n      this._keyPressHandled = true;\n      action();\n      this._keyPressHandled = keyPressHandled;\n    }\n  }, {\n    key: \"_backspaceHandler\",\n    value: function value() {}\n  }, {\n    key: \"_delHandler\",\n    value: function value(event) {\n      var editor = this.editor;\n      this._keyPressHandled = true;\n      editor._maskKeyHandler(event, function () {\n        return !editor._hasSelection() && editor._handleKey(EMPTY_CHAR);\n      });\n    }\n  }, {\n    key: \"clean\",\n    value: function value() {\n      this._clearDragTimer();\n      clearTimeout(this._backspaceHandlerTimeout);\n      clearTimeout(this._caretTimeout);\n    }\n  }]);\n  return BaseMaskStrategy;\n}();\nexports.default = BaseMaskStrategy;","map":null,"metadata":{},"sourceType":"script"}