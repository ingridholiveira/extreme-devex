{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/dom.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  config = require(\"../../core/config\"),\n  domAdapter = require(\"../../core/dom_adapter\"),\n  windowUtils = require(\"./window\"),\n  window = windowUtils.getWindow(),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  inArray = require(\"./array\").inArray,\n  typeUtils = require(\"./type\"),\n  isDefined = typeUtils.isDefined,\n  isRenderer = typeUtils.isRenderer,\n  htmlParser = require(\"../../core/utils/html_parser\"),\n  elementStrategy;\nvar resetActiveElement = function resetActiveElement() {\n  var activeElement = domAdapter.getActiveElement(),\n    body = domAdapter.getBody();\n  if (activeElement && activeElement !== body && activeElement.blur) {\n    try {\n      activeElement.blur();\n    } catch (e) {\n      body.blur();\n    }\n  }\n};\nvar clearSelection = function clearSelection() {\n  var selection = window.getSelection();\n  if (!selection) {\n    return;\n  }\n  if (\"Caret\" === selection.type) {\n    return;\n  }\n  if (selection.empty) {\n    selection.empty();\n  } else {\n    if (selection.removeAllRanges) {\n      try {\n        selection.removeAllRanges();\n      } catch (e) {}\n    }\n  }\n};\nvar closestCommonParent = function closestCommonParent(startTarget, endTarget) {\n  var $startTarget = $(startTarget),\n    $endTarget = $(endTarget);\n  if ($startTarget[0] === $endTarget[0]) {\n    return $startTarget[0];\n  }\n  var $startParents = $startTarget.parents(),\n    $endParents = $endTarget.parents(),\n    startingParent = Math.min($startParents.length, $endParents.length);\n  for (var i = -startingParent; i < 0; i++) {\n    if ($startParents.get(i) === $endParents.get(i)) {\n      return $startParents.get(i);\n    }\n  }\n};\nvar triggerVisibilityChangeEvent = function triggerVisibilityChangeEvent(eventName) {\n  var VISIBILITY_CHANGE_SELECTOR = \".dx-visibility-change-handler\";\n  return function (element) {\n    var $element = $(element || \"body\");\n    var changeHandlers = $element.filter(VISIBILITY_CHANGE_SELECTOR).add($element.find(VISIBILITY_CHANGE_SELECTOR));\n    for (var i = 0; i < changeHandlers.length; i++) {\n      eventsEngine.triggerHandler(changeHandlers[i], eventName);\n    }\n  };\n};\nvar uniqueId = function () {\n  var counter = 0;\n  return function (prefix) {\n    return (prefix || \"\") + counter++;\n  };\n}();\nvar dataOptionsAttributeName = \"data-options\";\nvar getElementOptions = function getElementOptions(element) {\n  var optionsString = $(element).attr(dataOptionsAttributeName) || \"\";\n  return config().optionsParser(optionsString);\n};\nvar createComponents = function createComponents(elements, componentTypes) {\n  var result = [],\n    selector = \"[\" + dataOptionsAttributeName + \"]\";\n  var $items = elements.find(selector).add(elements.filter(selector));\n  $items.each(function (index, element) {\n    var $element = $(element),\n      options = getElementOptions(element);\n    for (var componentName in options) {\n      if (!componentTypes || inArray(componentName, componentTypes) > -1) {\n        if ($element[componentName]) {\n          $element[componentName](options[componentName]);\n          result.push($element[componentName](\"instance\"));\n        }\n      }\n    }\n  });\n  return result;\n};\nvar createMarkupFromString = function createMarkupFromString(str) {\n  if (!window.WinJS) {\n    return $(htmlParser.parseHTML(str));\n  }\n  var tempElement = $(\"<div>\");\n  window.WinJS.Utilities.setInnerHTMLUnsafe(tempElement.get(0), str);\n  return tempElement.contents();\n};\nvar extractTemplateMarkup = function extractTemplateMarkup(element) {\n  element = $(element);\n  var templateTag = element.length && element.filter(function () {\n    var $node = $(this);\n    return $node.is(\"script[type]\") && $node.attr(\"type\").indexOf(\"script\") < 0;\n  });\n  if (templateTag.length) {\n    return templateTag.eq(0).html();\n  } else {\n    element = $(\"<div>\").append(element);\n    return element.html();\n  }\n};\nvar normalizeTemplateElement = function normalizeTemplateElement(element) {\n  var $element = isDefined(element) && (element.nodeType || isRenderer(element)) ? $(element) : $(\"<div>\").html(element).contents();\n  if (1 === $element.length) {\n    if ($element.is(\"script\")) {\n      $element = normalizeTemplateElement($element.html().trim());\n    } else {\n      if ($element.is(\"table\")) {\n        $element = $element.children(\"tbody\").contents();\n      }\n    }\n  }\n  return $element;\n};\nvar clipboardText = function clipboardText(event, text) {\n  var clipboard = event.originalEvent && event.originalEvent.clipboardData || window.clipboardData;\n  if (1 === arguments.length) {\n    return clipboard && clipboard.getData(\"Text\");\n  }\n  clipboard && clipboard.setData(\"Text\", text);\n};\nvar contains = function contains(container, element) {\n  if (!element) {\n    return false;\n  }\n  element = domAdapter.isTextNode(element) ? element.parentNode : element;\n  return domAdapter.isDocument(container) ? container.documentElement.contains(element) : container.contains(element);\n};\nvar getPublicElement = function getPublicElement($element) {\n  return elementStrategy($element);\n};\nvar setPublicElementWrapper = function setPublicElementWrapper(value) {\n  elementStrategy = value;\n};\nsetPublicElementWrapper(function (element) {\n  return element && element.get(0);\n});\nvar createTextElementHiddenCopy = function createTextElementHiddenCopy(element, text, options) {\n  var elementStyles = window.getComputedStyle($(element).get(0));\n  var includePaddings = options && options.includePaddings;\n  return $(\"<div>\").text(text).css({\n    fontStyle: elementStyles.fontStyle,\n    fontVariant: elementStyles.fontVariant,\n    fontWeight: elementStyles.fontWeight,\n    fontSize: elementStyles.fontSize,\n    fontFamily: elementStyles.fontFamily,\n    letterSpacing: elementStyles.letterSpacing,\n    border: elementStyles.border,\n    paddingTop: includePaddings ? elementStyles.paddingTop : \"\",\n    paddingRight: includePaddings ? elementStyles.paddingRight : \"\",\n    paddingBottom: includePaddings ? elementStyles.paddingBottom : \"\",\n    paddingLeft: includePaddings ? elementStyles.paddingLeft : \"\",\n    visibility: \"hidden\",\n    whiteSpace: \"nowrap\",\n    position: \"absolute\",\n    \"float\": \"left\"\n  });\n};\nexports.setPublicElementWrapper = setPublicElementWrapper;\nexports.resetActiveElement = resetActiveElement;\nexports.createMarkupFromString = createMarkupFromString;\nexports.triggerShownEvent = triggerVisibilityChangeEvent(\"dxshown\");\nexports.triggerHidingEvent = triggerVisibilityChangeEvent(\"dxhiding\");\nexports.triggerResizeEvent = triggerVisibilityChangeEvent(\"dxresize\");\nexports.getElementOptions = getElementOptions;\nexports.createComponents = createComponents;\nexports.extractTemplateMarkup = extractTemplateMarkup;\nexports.normalizeTemplateElement = normalizeTemplateElement;\nexports.clearSelection = clearSelection;\nexports.uniqueId = uniqueId;\nexports.closestCommonParent = closestCommonParent;\nexports.clipboardText = clipboardText;\nexports.contains = contains;\nexports.getPublicElement = getPublicElement;\nexports.createTextElementHiddenCopy = createTextElementHiddenCopy;","map":null,"metadata":{},"sourceType":"script"}