{"ast":null,"code":"/**\r\n * DevExtreme (ui/scroll_view/ui.scroll_view.native.swipe_down.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  Callbacks = require(\"../../core/utils/callbacks\"),\n  translator = require(\"../../animation/translator\"),\n  eventUtils = require(\"../../events/utils\"),\n  NativeStrategy = require(\"./ui.scrollable.native\"),\n  LoadIndicator = require(\"../load_indicator\"),\n  Deferred = require(\"../../core/utils/deferred\").Deferred;\nvar SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS = \"dx-scrollview-pull-down-loading\",\n  SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = \"dx-scrollview-pull-down-indicator\",\n  SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = \"dx-scrollview-pull-down-refreshing\",\n  PULLDOWN_ICON_CLASS = \"dx-icon-pulldown\",\n  STATE_RELEASED = 0,\n  STATE_READY = 1,\n  STATE_REFRESHING = 2,\n  STATE_TOUCHED = 4,\n  STATE_PULLED = 5;\nvar SwipeDownNativeScrollViewStrategy = NativeStrategy.inherit({\n  _init: function _init(scrollView) {\n    this.callBase(scrollView);\n    this._$topPocket = scrollView._$topPocket;\n    this._$bottomPocket = scrollView._$bottomPocket;\n    this._$pullDown = scrollView._$pullDown;\n    this._$scrollViewContent = scrollView.content();\n    this._initCallbacks();\n    this._location = 0;\n  },\n  _initCallbacks: function _initCallbacks() {\n    this.pullDownCallbacks = Callbacks();\n    this.releaseCallbacks = Callbacks();\n    this.reachBottomCallbacks = Callbacks();\n  },\n  render: function render() {\n    this.callBase();\n    this._renderPullDown();\n    this._releaseState();\n  },\n  _renderPullDown: function _renderPullDown() {\n    var $loadContainer = $(\"<div>\").addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS),\n      $loadIndicator = new LoadIndicator($(\"<div>\")).$element();\n    this._$icon = $(\"<div>\").addClass(PULLDOWN_ICON_CLASS);\n    this._$pullDown.empty().append(this._$icon).append($loadContainer.append($loadIndicator));\n  },\n  _releaseState: function _releaseState() {\n    this._state = STATE_RELEASED;\n    this._releasePullDown();\n    this._updateDimensions();\n  },\n  _releasePullDown: function _releasePullDown() {\n    this._$pullDown.css({\n      opacity: 0\n    });\n  },\n  _updateDimensions: function _updateDimensions() {\n    this.callBase();\n    this._topPocketSize = this._$topPocket.height();\n    this._bottomPocketSize = this._$bottomPocket.height();\n    this._scrollOffset = this._$container.height() - this._$content.height();\n  },\n  _allowedDirections: function _allowedDirections() {\n    var allowedDirections = this.callBase();\n    allowedDirections.vertical = allowedDirections.vertical || this._pullDownEnabled;\n    return allowedDirections;\n  },\n  handleInit: function handleInit(e) {\n    this.callBase(e);\n    if (this._state === STATE_RELEASED && 0 === this._location) {\n      this._startClientY = eventUtils.eventData(e.originalEvent).y;\n      this._state = STATE_TOUCHED;\n    }\n  },\n  handleMove: function handleMove(e) {\n    this.callBase(e);\n    this._deltaY = eventUtils.eventData(e.originalEvent).y - this._startClientY;\n    if (this._state === STATE_TOUCHED) {\n      if (this._pullDownEnabled && this._deltaY > 0) {\n        this._state = STATE_PULLED;\n      } else {\n        this._complete();\n      }\n    }\n    if (this._state === STATE_PULLED) {\n      e.preventDefault();\n      this._movePullDown();\n    }\n  },\n  _movePullDown: function _movePullDown() {\n    var pullDownHeight = this._getPullDownHeight(),\n      top = Math.min(3 * pullDownHeight, this._deltaY + this._getPullDownStartPosition()),\n      angle = 180 * top / pullDownHeight / 3;\n    this._$pullDown.css({\n      opacity: 1\n    }).toggleClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS, top < pullDownHeight);\n    translator.move(this._$pullDown, {\n      top: top\n    });\n    this._$icon.css({\n      transform: \"rotate(\" + angle + \"deg)\"\n    });\n  },\n  _isPullDown: function _isPullDown() {\n    return this._pullDownEnabled && this._state === STATE_PULLED && this._deltaY >= this._getPullDownHeight() - this._getPullDownStartPosition();\n  },\n  _getPullDownHeight: function _getPullDownHeight() {\n    return Math.round(.05 * this._$element.outerHeight());\n  },\n  _getPullDownStartPosition: function _getPullDownStartPosition() {\n    return -Math.round(1.5 * this._$pullDown.outerHeight());\n  },\n  handleEnd: function handleEnd() {\n    if (this._isPullDown()) {\n      this._pullDownRefreshing();\n    }\n    this._complete();\n  },\n  handleStop: function handleStop() {\n    this._complete();\n  },\n  _complete: function _complete() {\n    if (this._state === STATE_TOUCHED || this._state === STATE_PULLED) {\n      this._releaseState();\n    }\n  },\n  handleScroll: function handleScroll(e) {\n    this.callBase(e);\n    if (this._state === STATE_REFRESHING) {\n      return;\n    }\n    var currentLocation = this.location().top,\n      scrollDelta = this._location - currentLocation;\n    this._location = currentLocation;\n    if (scrollDelta > 0 && this._isReachBottom()) {\n      this._reachBottom();\n    } else {\n      this._stateReleased();\n    }\n  },\n  _isReachBottom: function _isReachBottom() {\n    return this._reachBottomEnabled && this._location <= this._scrollOffset + this._bottomPocketSize;\n  },\n  _reachBottom: function _reachBottom() {\n    this.reachBottomCallbacks.fire();\n  },\n  _stateReleased: function _stateReleased() {\n    if (this._state === STATE_RELEASED) {\n      return;\n    }\n    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);\n    this._releaseState();\n  },\n  _pullDownRefreshing: function _pullDownRefreshing() {\n    this._state = STATE_REFRESHING;\n    this._pullDownRefreshHandler();\n  },\n  _pullDownRefreshHandler: function _pullDownRefreshHandler() {\n    this._refreshPullDown();\n    this.pullDownCallbacks.fire();\n  },\n  _refreshPullDown: function _refreshPullDown() {\n    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);\n    translator.move(this._$pullDown, {\n      top: this._getPullDownHeight()\n    });\n  },\n  pullDownEnable: function pullDownEnable(enabled) {\n    this._$topPocket.toggle(enabled);\n    this._pullDownEnabled = enabled;\n  },\n  reachBottomEnable: function reachBottomEnable(enabled) {\n    this._reachBottomEnabled = enabled;\n  },\n  pendingRelease: function pendingRelease() {\n    this._state = STATE_READY;\n  },\n  release: function release() {\n    var deferred = new Deferred();\n    this._updateDimensions();\n    clearTimeout(this._releaseTimeout);\n    this._releaseTimeout = setTimeout(function () {\n      this._stateReleased();\n      this.releaseCallbacks.fire();\n      this._updateAction();\n      deferred.resolve();\n    }.bind(this), 800);\n    return deferred.promise();\n  },\n  dispose: function dispose() {\n    clearTimeout(this._pullDownRefreshTimeout);\n    clearTimeout(this._releaseTimeout);\n    this.callBase();\n  }\n});\nmodule.exports = SwipeDownNativeScrollViewStrategy;","map":null,"metadata":{},"sourceType":"script"}