{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.rule.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../../core/class\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  inArray = require(\"../../core/utils/array\").inArray,\n  typeUtils = require(\"../../core/utils/type\"),\n  noop = require(\"../../core/utils/common\").noop,\n  isFunction = typeUtils.isFunction;\nvar EMPTY_CHAR = \" \";\nvar BaseMaskRule = Class.inherit({\n  ctor: function ctor(config) {\n    this._value = EMPTY_CHAR;\n    extend(this, config);\n  },\n  next: function next(rule) {\n    if (!arguments.length) {\n      return this._next;\n    }\n    this._next = rule;\n  },\n  text: noop,\n  value: noop,\n  rawValue: noop,\n  handle: noop,\n  _prepareHandlingArgs: function _prepareHandlingArgs(args, config) {\n    config = config || {};\n    var handlingProperty = Object.prototype.hasOwnProperty.call(args, \"value\") ? \"value\" : \"text\";\n    args[handlingProperty] = typeUtils.isDefined(config.str) ? config.str : args[handlingProperty];\n    args.start = typeUtils.isDefined(config.start) ? config.start : args.start;\n    args.length = typeUtils.isDefined(config.length) ? config.length : args.length;\n    args.index = args.index + 1;\n    return args;\n  },\n  reset: noop,\n  clear: noop,\n  first: function first(index) {\n    index = index || 0;\n    return this.next().first(index + 1);\n  },\n  isAccepted: function isAccepted() {\n    return false;\n  },\n  adjustedCaret: function adjustedCaret(caret, isForwardDirection, char) {\n    return isForwardDirection ? this._adjustedForward(caret, 0, char) : this._adjustedBackward(caret, 0, char);\n  },\n  _adjustedForward: noop,\n  _adjustedBackward: noop,\n  isValid: noop\n});\nvar EmptyMaskRule = BaseMaskRule.inherit({\n  next: noop,\n  handle: function handle() {\n    return 0;\n  },\n  text: function text() {\n    return \"\";\n  },\n  value: function value() {\n    return \"\";\n  },\n  first: function first() {\n    return 0;\n  },\n  rawValue: function rawValue() {\n    return \"\";\n  },\n  adjustedCaret: function adjustedCaret() {\n    return 0;\n  },\n  isValid: function isValid() {\n    return true;\n  }\n});\nvar MaskRule = BaseMaskRule.inherit({\n  text: function text() {\n    return (this._value !== EMPTY_CHAR ? this._value : this.maskChar) + this.next().text();\n  },\n  value: function value() {\n    return this._value + this.next().value();\n  },\n  rawValue: function rawValue() {\n    return this._value + this.next().rawValue();\n  },\n  handle: function handle(args) {\n    var str = Object.prototype.hasOwnProperty.call(args, \"value\") ? args.value : args.text;\n    if (!str || !str.length || !args.length) {\n      return 0;\n    }\n    if (args.start) {\n      return this.next().handle(this._prepareHandlingArgs(args, {\n        start: args.start - 1\n      }));\n    }\n    var char = str[0];\n    var rest = str.substring(1);\n    this._tryAcceptChar(char, args);\n    return this._accepted() ? this.next().handle(this._prepareHandlingArgs(args, {\n      str: rest,\n      length: args.length - 1\n    })) + 1 : this.handle(this._prepareHandlingArgs(args, {\n      str: rest,\n      length: args.length - 1\n    }));\n  },\n  clear: function clear(args) {\n    this._tryAcceptChar(EMPTY_CHAR, args);\n    this.next().clear(this._prepareHandlingArgs(args));\n  },\n  reset: function reset() {\n    this._accepted(false);\n    this.next().reset();\n  },\n  _tryAcceptChar: function _tryAcceptChar(char, args) {\n    this._accepted(false);\n    if (!this._isAllowed(char, args)) {\n      return;\n    }\n    var acceptedChar = char === EMPTY_CHAR ? this.maskChar : char;\n    args.fullText = args.fullText.substring(0, args.index) + acceptedChar + args.fullText.substring(args.index + 1);\n    this._accepted(true);\n    this._value = char;\n  },\n  _accepted: function _accepted(value) {\n    if (!arguments.length) {\n      return !!this._isAccepted;\n    }\n    this._isAccepted = !!value;\n  },\n  first: function first(index) {\n    return this._value === EMPTY_CHAR ? index || 0 : this.callBase(index);\n  },\n  _isAllowed: function _isAllowed(char, args) {\n    if (char === EMPTY_CHAR) {\n      return true;\n    }\n    return this._isValid(char, args);\n  },\n  _isValid: function _isValid(char, args) {\n    var allowedChars = this.allowedChars;\n    if (allowedChars instanceof RegExp) {\n      return allowedChars.test(char);\n    }\n    if (isFunction(allowedChars)) {\n      return allowedChars(char, args.index, args.fullText);\n    }\n    if (Array.isArray(allowedChars)) {\n      return inArray(char, allowedChars) > -1;\n    }\n    return allowedChars === char;\n  },\n  isAccepted: function isAccepted(caret) {\n    return 0 === caret ? this._accepted() : this.next().isAccepted(caret - 1);\n  },\n  _adjustedForward: function _adjustedForward(caret, index, char) {\n    if (index >= caret) {\n      return index;\n    }\n    return this.next()._adjustedForward(caret, index + 1, char) || index + 1;\n  },\n  _adjustedBackward: function _adjustedBackward(caret, index) {\n    if (index >= caret - 1) {\n      return caret;\n    }\n    return this.next()._adjustedBackward(caret, index + 1) || index + 1;\n  },\n  isValid: function isValid(args) {\n    return this._isValid(this._value, args) && this.next().isValid(this._prepareHandlingArgs(args));\n  }\n});\nvar StubMaskRule = MaskRule.inherit({\n  value: function value() {\n    return this.next().value();\n  },\n  handle: function handle(args) {\n    var hasValueProperty = Object.prototype.hasOwnProperty.call(args, \"value\");\n    var str = hasValueProperty ? args.value : args.text;\n    if (!str.length || !args.length) {\n      return 0;\n    }\n    if (args.start || hasValueProperty) {\n      return this.next().handle(this._prepareHandlingArgs(args, {\n        start: args.start && args.start - 1\n      }));\n    }\n    var char = str[0];\n    var rest = str.substring(1);\n    this._tryAcceptChar(char);\n    var nextArgs = this._isAllowed(char) ? this._prepareHandlingArgs(args, {\n      str: rest,\n      length: args.length - 1\n    }) : args;\n    return this.next().handle(nextArgs) + 1;\n  },\n  clear: function clear(args) {\n    this._accepted(false);\n    this.next().clear(this._prepareHandlingArgs(args));\n  },\n  _tryAcceptChar: function _tryAcceptChar(char) {\n    this._accepted(this._isValid(char));\n  },\n  _isValid: function _isValid(char) {\n    return char === this.maskChar;\n  },\n  first: function first(index) {\n    index = index || 0;\n    return this.next().first(index + 1);\n  },\n  _adjustedForward: function _adjustedForward(caret, index, char) {\n    if (index >= caret && char === this.maskChar) {\n      return index;\n    }\n    if (caret === index + 1 && this._accepted()) {\n      return caret;\n    }\n    return this.next()._adjustedForward(caret, index + 1, char);\n  },\n  _adjustedBackward: function _adjustedBackward(caret, index) {\n    if (index >= caret - 1) {\n      return 0;\n    }\n    return this.next()._adjustedBackward(caret, index + 1);\n  },\n  isValid: function isValid(args) {\n    return this.next().isValid(this._prepareHandlingArgs(args));\n  }\n});\nmodule.exports.MaskRule = MaskRule;\nmodule.exports.StubMaskRule = StubMaskRule;\nmodule.exports.EmptyMaskRule = EmptyMaskRule;","map":null,"metadata":{},"sourceType":"script"}