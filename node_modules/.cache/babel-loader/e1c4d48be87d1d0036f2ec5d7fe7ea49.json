{"ast":null,"code":"/**\r\n * DevExtreme (core/events_strategy.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Callbacks = require(\"./utils/callbacks\"),\n  isFunction = require(\"./utils/type\").isFunction,\n  each = require(\"./utils/iterator\").each,\n  Class = require(\"./class\");\nmodule.exports = Class.inherit({\n  ctor: function ctor(owner) {\n    this._events = {};\n    this._owner = owner;\n  },\n  hasEvent: function hasEvent(eventName) {\n    var callbacks = this._events[eventName];\n    if (callbacks) {\n      return callbacks.has();\n    }\n    return false;\n  },\n  fireEvent: function fireEvent(eventName, eventArgs) {\n    var callbacks = this._events[eventName];\n    if (callbacks) {\n      callbacks.fireWith(this._owner, eventArgs);\n    }\n  },\n  on: function on(eventName, eventHandler) {\n    var addFn,\n      callbacks = this._events[eventName];\n    if (!callbacks) {\n      callbacks = Callbacks();\n      this._events[eventName] = callbacks;\n    }\n    addFn = callbacks.originalAdd || callbacks.add;\n    addFn.call(callbacks, eventHandler);\n  },\n  off: function off(eventName, eventHandler) {\n    var callbacks = this._events[eventName];\n    if (callbacks) {\n      if (isFunction(eventHandler)) {\n        callbacks.remove(eventHandler);\n      } else {\n        callbacks.empty();\n      }\n    }\n  },\n  dispose: function dispose() {\n    each(this._events, function () {\n      this.empty();\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}