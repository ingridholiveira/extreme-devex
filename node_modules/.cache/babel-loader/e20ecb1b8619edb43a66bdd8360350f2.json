{"ast":null,"code":"/**\r\n * DevExtreme (ui/filter_builder/filter_builder.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _class = require(\"../../core/class\");\nvar _class2 = _interopRequireDefault(_class);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _ui = require(\"../widget/ui.widget\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _component_registrator = require(\"../../core/component_registrator\");\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\nvar _extend = require(\"../../core/utils/extend\");\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _utils = require(\"./utils\");\nvar _utils2 = _interopRequireDefault(_utils);\nvar _deferred = require(\"../../core/utils/deferred\");\nvar _deferred2 = _interopRequireDefault(_deferred);\nvar _type = require(\"../../core/utils/type\");\nvar _tree_view = require(\"../tree_view\");\nvar _tree_view2 = _interopRequireDefault(_tree_view);\nvar _popup = require(\"../popup\");\nvar _popup2 = _interopRequireDefault(_popup);\nvar _utils3 = require(\"../overlay/utils\");\nvar _ui3 = require(\"../shared/ui.editor_factory_mixin\");\nvar _ui4 = _interopRequireDefault(_ui3);\nvar _utils4 = require(\"../../events/utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar FILTER_BUILDER_CLASS = \"dx-filterbuilder\",\n  FILTER_BUILDER_GROUP_CLASS = FILTER_BUILDER_CLASS + \"-group\",\n  FILTER_BUILDER_GROUP_ITEM_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-item\",\n  FILTER_BUILDER_GROUP_CONTENT_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-content\",\n  FILTER_BUILDER_GROUP_OPERATIONS_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-operations\",\n  FILTER_BUILDER_GROUP_OPERATION_CLASS = FILTER_BUILDER_GROUP_CLASS + \"-operation\",\n  FILTER_BUILDER_ACTION_CLASS = FILTER_BUILDER_CLASS + \"-action\",\n  FILTER_BUILDER_IMAGE_CLASS = FILTER_BUILDER_ACTION_CLASS + \"-icon\",\n  FILTER_BUILDER_IMAGE_ADD_CLASS = \"dx-icon-plus\",\n  FILTER_BUILDER_IMAGE_REMOVE_CLASS = \"dx-icon-remove\",\n  FILTER_BUILDER_ITEM_TEXT_CLASS = FILTER_BUILDER_CLASS + \"-text\",\n  FILTER_BUILDER_ITEM_TEXT_PART_CLASS = FILTER_BUILDER_ITEM_TEXT_CLASS + \"-part\",\n  FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS = FILTER_BUILDER_ITEM_TEXT_CLASS + \"-separator\",\n  FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS = FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS + \"-empty\",\n  FILTER_BUILDER_ITEM_FIELD_CLASS = FILTER_BUILDER_CLASS + \"-item-field\",\n  FILTER_BUILDER_ITEM_OPERATION_CLASS = FILTER_BUILDER_CLASS + \"-item-operation\",\n  FILTER_BUILDER_ITEM_VALUE_CLASS = FILTER_BUILDER_CLASS + \"-item-value\",\n  FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS = FILTER_BUILDER_CLASS + \"-item-value-text\",\n  FILTER_BUILDER_OVERLAY_CLASS = FILTER_BUILDER_CLASS + \"-overlay\",\n  FILTER_BUILDER_FILTER_OPERATIONS_CLASS = FILTER_BUILDER_CLASS + \"-operations\",\n  FILTER_BUILDER_FIELDS_CLASS = FILTER_BUILDER_CLASS + \"-fields\",\n  FILTER_BUILDER_ADD_CONDITION_CLASS = FILTER_BUILDER_CLASS + \"-add-condition\",\n  ACTIVE_CLASS = \"dx-state-active\",\n  FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS = FILTER_BUILDER_CLASS + \"-menu-custom-operation\",\n  SOURCE = \"filterBuilder\",\n  DISABLED_STATE_CLASS = \"dx-state-disabled\",\n  TAB_KEY = \"tab\",\n  ENTER_KEY = \"enter\",\n  ESCAPE_KEY = \"escape\";\nvar ACTIONS = [{\n    name: \"onEditorPreparing\",\n    config: {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    }\n  }, {\n    name: \"onEditorPrepared\",\n    config: {\n      excludeValidators: [\"disabled\", \"readOnly\"],\n      category: \"rendering\"\n    }\n  }, {\n    name: \"onValueChanged\",\n    config: {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    }\n  }],\n  OPERATORS = {\n    and: \"and\",\n    or: \"or\",\n    notAnd: \"!and\",\n    notOr: \"!or\"\n  };\nvar EditorFactory = _class2.default.inherit(_ui4.default);\nvar renderValueText = function renderValueText($container, value, customOperation) {\n  if (Array.isArray(value)) {\n    var lastItemIndex = value.length - 1;\n    $container.empty();\n    value.forEach(function (t, i) {\n      (0, _renderer2.default)(\"<span>\").addClass(FILTER_BUILDER_ITEM_TEXT_PART_CLASS).text(t).appendTo($container);\n      if (i !== lastItemIndex) {\n        (0, _renderer2.default)(\"<span>\").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS).text(customOperation && customOperation.valueSeparator ? customOperation.valueSeparator : \"|\").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS).appendTo($container);\n      }\n    });\n  } else {\n    if (value) {\n      $container.text(value);\n    } else {\n      $container.text(_message2.default.format(\"dxFilterBuilder-enterValueText\"));\n    }\n  }\n};\nvar FilterBuilder = _ui2.default.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      onEditorPreparing: null,\n      onEditorPrepared: null,\n      onValueChanged: null,\n      fields: [],\n      defaultGroupOperation: \"and\",\n      groupOperations: [\"and\", \"or\", \"notAnd\", \"notOr\"],\n      maxGroupLevel: void 0,\n      value: null,\n      allowHierarchicalFields: false,\n      groupOperationDescriptions: {\n        and: _message2.default.format(\"dxFilterBuilder-and\"),\n        or: _message2.default.format(\"dxFilterBuilder-or\"),\n        notAnd: _message2.default.format(\"dxFilterBuilder-notAnd\"),\n        notOr: _message2.default.format(\"dxFilterBuilder-notOr\")\n      },\n      customOperations: [],\n      filterOperationDescriptions: {\n        between: _message2.default.format(\"dxFilterBuilder-filterOperationBetween\"),\n        equal: _message2.default.format(\"dxFilterBuilder-filterOperationEquals\"),\n        notEqual: _message2.default.format(\"dxFilterBuilder-filterOperationNotEquals\"),\n        lessThan: _message2.default.format(\"dxFilterBuilder-filterOperationLess\"),\n        lessThanOrEqual: _message2.default.format(\"dxFilterBuilder-filterOperationLessOrEquals\"),\n        greaterThan: _message2.default.format(\"dxFilterBuilder-filterOperationGreater\"),\n        greaterThanOrEqual: _message2.default.format(\"dxFilterBuilder-filterOperationGreaterOrEquals\"),\n        startsWith: _message2.default.format(\"dxFilterBuilder-filterOperationStartsWith\"),\n        contains: _message2.default.format(\"dxFilterBuilder-filterOperationContains\"),\n        notContains: _message2.default.format(\"dxFilterBuilder-filterOperationNotContains\"),\n        endsWith: _message2.default.format(\"dxFilterBuilder-filterOperationEndsWith\"),\n        isBlank: _message2.default.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n        isNotBlank: _message2.default.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n      }\n    });\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"onEditorPreparing\":\n      case \"onEditorPrepared\":\n      case \"onValueChanged\":\n        this._initActions();\n        break;\n      case \"customOperations\":\n        this._initCustomOperations();\n        this._invalidate();\n        break;\n      case \"fields\":\n      case \"defaultGroupOperation\":\n      case \"maxGroupLevel\":\n      case \"groupOperations\":\n      case \"allowHierarchicalFields\":\n      case \"groupOperationDescriptions\":\n      case \"filterOperationDescriptions\":\n        this._invalidate();\n        break;\n      case \"value\":\n        if (args.value !== args.previousValue) {\n          var disableInvalidateForValue = this._disableInvalidateForValue;\n          if (!disableInvalidateForValue) {\n            this._initModel();\n            this._invalidate();\n          }\n          this._disableInvalidateForValue = false;\n          this.executeAction(\"onValueChanged\", {\n            value: args.value,\n            previousValue: args.previousValue\n          });\n          this._disableInvalidateForValue = disableInvalidateForValue;\n        }\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  getFilterExpression: function getFilterExpression() {\n    var fields = this._getNormalizedFields(),\n      value = (0, _extend.extend)(true, [], this._model);\n    return _utils2.default.getFilterExpression(_utils2.default.getNormalizedFilter(value), fields, this._customOperations, SOURCE);\n  },\n  _getNormalizedFields: function _getNormalizedFields() {\n    return _utils2.default.getNormalizedFields(this.option(\"fields\"));\n  },\n  _updateFilter: function _updateFilter() {\n    this._disableInvalidateForValue = true;\n    var value = (0, _extend.extend)(true, [], this._model),\n      normalizedValue = _utils2.default.getNormalizedFilter(value),\n      oldValue = _utils2.default.getNormalizedFilter(this._getModel(this.option(\"value\")));\n    if (JSON.stringify(oldValue) !== JSON.stringify(normalizedValue)) {\n      this.option(\"value\", normalizedValue);\n    }\n    this._disableInvalidateForValue = false;\n    this._fireContentReadyAction();\n  },\n  _init: function _init() {\n    this._initCustomOperations();\n    this._initModel();\n    this._initEditorFactory();\n    this._initActions();\n    this.callBase();\n  },\n  _initEditorFactory: function _initEditorFactory() {\n    this._editorFactory = new EditorFactory();\n  },\n  _initCustomOperations: function _initCustomOperations() {\n    this._customOperations = _utils2.default.getMergedOperations(this.option(\"customOperations\"), this.option(\"filterOperationDescriptions.between\"));\n  },\n  _getModel: function _getModel(value) {\n    return _utils2.default.convertToInnerStructure(value, this._customOperations);\n  },\n  _initModel: function _initModel() {\n    this._model = this._getModel(this.option(\"value\"));\n  },\n  _initActions: function _initActions() {\n    var that = this;\n    that._actions = {};\n    ACTIONS.forEach(function (action) {\n      that._actions[action.name] = that._createActionByOption(action.name, action.config);\n    });\n  },\n  executeAction: function executeAction(actionName, options) {\n    var action = this._actions[actionName];\n    return action && action(options);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(FILTER_BUILDER_CLASS);\n    this.callBase();\n    this._createGroupElementByCriteria(this._model).appendTo(this.$element());\n  },\n  _createConditionElement: function _createConditionElement(condition, parent) {\n    return (0, _renderer2.default)(\"<div>\").addClass(FILTER_BUILDER_GROUP_CLASS).append(this._createConditionItem(condition, parent));\n  },\n  _createGroupElementByCriteria: function _createGroupElementByCriteria(criteria, parent) {\n    var groupLevel = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;\n    var $group = this._createGroupElement(criteria, parent, groupLevel),\n      $groupContent = $group.find(\".\" + FILTER_BUILDER_GROUP_CONTENT_CLASS),\n      groupCriteria = _utils2.default.getGroupCriteria(criteria);\n    for (var i = 0; i < groupCriteria.length; i++) {\n      var innerCriteria = groupCriteria[i];\n      if (_utils2.default.isGroup(innerCriteria)) {\n        this._createGroupElementByCriteria(innerCriteria, groupCriteria, groupLevel + 1).appendTo($groupContent);\n      } else {\n        if (_utils2.default.isCondition(innerCriteria)) {\n          this._createConditionElement(innerCriteria, groupCriteria).appendTo($groupContent);\n        }\n      }\n    }\n    return $group;\n  },\n  _createGroupElement: function _createGroupElement(criteria, parent, groupLevel) {\n    var _this = this;\n    var $groupItem = (0, _renderer2.default)(\"<div>\").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS),\n      $groupContent = (0, _renderer2.default)(\"<div>\").addClass(FILTER_BUILDER_GROUP_CONTENT_CLASS),\n      $group = (0, _renderer2.default)(\"<div>\").addClass(FILTER_BUILDER_GROUP_CLASS).append($groupItem).append($groupContent);\n    if (null != parent) {\n      this._createRemoveButton(function () {\n        _utils2.default.removeItem(parent, criteria);\n        $group.remove();\n        _this._updateFilter();\n      }).appendTo($groupItem);\n    }\n    this._createGroupOperationButton(criteria).appendTo($groupItem);\n    this._createAddButton(function () {\n      var newGroup = _utils2.default.createEmptyGroup(_this.option(\"defaultGroupOperation\"));\n      _utils2.default.addItem(newGroup, criteria);\n      _this._createGroupElement(newGroup, criteria, groupLevel + 1).appendTo($groupContent);\n      _this._updateFilter();\n    }, function () {\n      var field = _this.option(\"fields\")[0],\n        newCondition = _utils2.default.createCondition(field, _this._customOperations);\n      _utils2.default.addItem(newCondition, criteria);\n      _this._createConditionElement(newCondition, criteria).appendTo($groupContent);\n      _this._updateFilter();\n    }, groupLevel).appendTo($groupItem);\n    return $group;\n  },\n  _createButton: function _createButton(caption) {\n    return (0, _renderer2.default)(\"<div>\").text(caption);\n  },\n  _createGroupOperationButton: function _createGroupOperationButton(criteria) {\n    var _this2 = this;\n    var groupOperations = this._getGroupOperations(criteria),\n      groupMenuItem = _utils2.default.getGroupMenuItem(criteria, groupOperations),\n      caption = groupMenuItem.text,\n      $operationButton = groupOperations && groupOperations.length < 2 ? this._createButton(caption).addClass(DISABLED_STATE_CLASS) : this._createButtonWithMenu({\n        caption: caption,\n        menu: {\n          items: groupOperations,\n          displayExpr: \"text\",\n          keyExpr: \"value\",\n          onItemClick: function onItemClick(e) {\n            if (groupMenuItem !== e.itemData) {\n              _utils2.default.setGroupValue(criteria, e.itemData.value);\n              $operationButton.html(e.itemData.text);\n              groupMenuItem = e.itemData;\n              _this2._updateFilter();\n            }\n          },\n          onContentReady: function onContentReady(e) {\n            e.component.selectItem(groupMenuItem);\n          },\n          cssClass: FILTER_BUILDER_GROUP_OPERATIONS_CLASS\n        }\n      });\n    return $operationButton.addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_GROUP_OPERATION_CLASS).attr(\"tabindex\", 0);\n  },\n  _createButtonWithMenu: function _createButtonWithMenu(options) {\n    var that = this,\n      removeMenu = function removeMenu() {\n        that.$element().find(\".\" + ACTIVE_CLASS).removeClass(ACTIVE_CLASS);\n        that.$element().find(\".dx-overlay .dx-treeview\").remove();\n        that.$element().find(\".dx-overlay\").remove();\n      },\n      rtlEnabled = this.option(\"rtlEnabled\"),\n      menuOnItemClickWrapper = function menuOnItemClickWrapper(handler) {\n        return function (e) {\n          handler(e);\n          if (\"dxclick\" === e.event.type) {\n            removeMenu();\n          }\n        };\n      },\n      position = rtlEnabled ? \"right\" : \"left\",\n      $button = this._createButton(options.caption);\n    (0, _extend.extend)(options.menu, {\n      focusStateEnabled: true,\n      selectionMode: \"single\",\n      onItemClick: menuOnItemClickWrapper(options.menu.onItemClick),\n      onHiding: function onHiding(e) {\n        $button.removeClass(ACTIVE_CLASS);\n      },\n      position: {\n        my: position + \" top\",\n        at: position + \" bottom\",\n        offset: \"0 1\",\n        of: $button,\n        collision: \"flip\"\n      },\n      animation: null,\n      onHidden: function onHidden() {\n        removeMenu();\n      },\n      cssClass: FILTER_BUILDER_OVERLAY_CLASS + \" \" + options.menu.cssClass,\n      rtlEnabled: rtlEnabled\n    });\n    options.popup = {\n      onShown: function onShown(info) {\n        var treeViewElement = (0, _renderer2.default)(info.component.content()).find(\".dx-treeview\"),\n          treeView = treeViewElement.dxTreeView(\"instance\");\n        _events_engine2.default.on(treeViewElement, \"keyup keydown\", function (e) {\n          var keyName = (0, _utils4.normalizeKeyName)(e);\n          if (\"keydown\" === e.type && keyName === TAB_KEY || \"keyup\" === e.type && (keyName === ESCAPE_KEY || keyName === ENTER_KEY)) {\n            info.component.hide();\n            _events_engine2.default.trigger(options.menu.position.of, \"focus\");\n          }\n        });\n        treeView.focus();\n        treeView.option(\"focusedElement\", null);\n      }\n    };\n    this._subscribeOnClickAndEnterKey($button, function () {\n      removeMenu();\n      that._createPopupWithTreeView(options, that.$element());\n      $button.addClass(ACTIVE_CLASS);\n    });\n    return $button;\n  },\n  _hasValueButton: function _hasValueButton(condition) {\n    var customOperation = _utils2.default.getCustomOperation(this._customOperations, condition[1]);\n    return customOperation ? false !== customOperation.hasValue : null !== condition[2];\n  },\n  _createOperationButtonWithMenu: function _createOperationButtonWithMenu(condition, field) {\n    var _this3 = this;\n    var that = this,\n      availableOperations = _utils2.default.getAvailableOperations(field, this.option(\"filterOperationDescriptions\"), this._customOperations),\n      currentOperation = _utils2.default.getOperationFromAvailable(_utils2.default.getOperationValue(condition), availableOperations),\n      $operationButton = this._createButtonWithMenu({\n        caption: currentOperation.text,\n        menu: {\n          items: availableOperations,\n          displayExpr: \"text\",\n          onItemRendered: function onItemRendered(e) {\n            e.itemData.isCustom && (0, _renderer2.default)(e.itemElement).addClass(FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS);\n          },\n          onContentReady: function onContentReady(e) {\n            e.component.selectItem(currentOperation);\n          },\n          onItemClick: function onItemClick(e) {\n            if (currentOperation !== e.itemData) {\n              currentOperation = e.itemData;\n              _utils2.default.updateConditionByOperation(condition, currentOperation.value, that._customOperations);\n              var $valueButton = $operationButton.siblings().filter(\".\" + FILTER_BUILDER_ITEM_VALUE_CLASS);\n              if (that._hasValueButton(condition)) {\n                if (0 !== $valueButton.length) {\n                  $valueButton.remove();\n                }\n                that._createValueButton(condition, field).appendTo($operationButton.parent());\n              } else {\n                $valueButton.remove();\n              }\n              $operationButton.html(currentOperation.text);\n              _this3._updateFilter();\n            }\n          },\n          cssClass: FILTER_BUILDER_FILTER_OPERATIONS_CLASS\n        }\n      }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_OPERATION_CLASS).attr(\"tabindex\", 0);\n    return $operationButton;\n  },\n  _createOperationAndValueButtons: function _createOperationAndValueButtons(condition, field, $item) {\n    this._createOperationButtonWithMenu(condition, field).appendTo($item);\n    if (this._hasValueButton(condition)) {\n      this._createValueButton(condition, field).appendTo($item);\n    }\n  },\n  _createFieldButtonWithMenu: function _createFieldButtonWithMenu(fields, condition, field) {\n    var _this4 = this;\n    var that = this,\n      allowHierarchicalFields = this.option(\"allowHierarchicalFields\"),\n      items = _utils2.default.getItems(fields, allowHierarchicalFields),\n      item = _utils2.default.getField(field.name || field.dataField, items),\n      getFullCaption = function getFullCaption(item, items) {\n        return allowHierarchicalFields ? _utils2.default.getCaptionWithParents(item, items) : item.caption;\n      };\n    var $fieldButton = this._createButtonWithMenu({\n      caption: getFullCaption(item, items),\n      menu: {\n        items: items,\n        dataStructure: \"plain\",\n        keyExpr: \"id\",\n        parentId: \"parentId\",\n        displayExpr: \"caption\",\n        onItemClick: function onItemClick(e) {\n          if (item !== e.itemData) {\n            item = e.itemData;\n            condition[0] = item.name || item.dataField;\n            condition[2] = \"object\" === item.dataType ? null : \"\";\n            _utils2.default.updateConditionByOperation(condition, _utils2.default.getDefaultOperation(item), that._customOperations);\n            $fieldButton.siblings().filter(\".\" + FILTER_BUILDER_ITEM_TEXT_CLASS).remove();\n            that._createOperationAndValueButtons(condition, item, $fieldButton.parent());\n            var caption = getFullCaption(item, e.component.option(\"items\"));\n            $fieldButton.html(caption);\n            _this4._updateFilter();\n          }\n        },\n        onContentReady: function onContentReady(e) {\n          e.component.selectItem(item);\n        },\n        cssClass: FILTER_BUILDER_FIELDS_CLASS\n      }\n    }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_FIELD_CLASS).attr(\"tabindex\", 0);\n    return $fieldButton;\n  },\n  _createConditionItem: function _createConditionItem(condition, parent) {\n    var _this5 = this;\n    var $item = (0, _renderer2.default)(\"<div>\").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS),\n      fields = this._getNormalizedFields(),\n      field = _utils2.default.getField(condition[0], fields);\n    this._createRemoveButton(function () {\n      _utils2.default.removeItem(parent, condition);\n      $item.remove();\n      _this5._updateFilter();\n    }).appendTo($item);\n    this._createFieldButtonWithMenu(fields, condition, field).appendTo($item);\n    this._createOperationAndValueButtons(condition, field, $item);\n    return $item;\n  },\n  _getGroupOperations: function _getGroupOperations(criteria) {\n    var groupOperations = this.option(\"groupOperations\"),\n      groupOperationDescriptions = this.option(\"groupOperationDescriptions\");\n    if (!groupOperations || !groupOperations.length) {\n      groupOperations = [_utils2.default.getGroupValue(criteria).replace(\"!\", \"not\")];\n    }\n    return groupOperations.map(function (operation) {\n      return {\n        text: groupOperationDescriptions[operation],\n        value: OPERATORS[operation]\n      };\n    });\n  },\n  _createRemoveButton: function _createRemoveButton(handler) {\n    var $removeButton = (0, _renderer2.default)(\"<div>\").addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_REMOVE_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr(\"tabindex\", 0);\n    this._subscribeOnClickAndEnterKey($removeButton, handler);\n    return $removeButton;\n  },\n  _createAddButton: function _createAddButton(addGroupHandler, addConditionHandler, groupLevel) {\n    var $button = void 0,\n      maxGroupLevel = this.option(\"maxGroupLevel\");\n    if ((0, _type.isDefined)(maxGroupLevel) && groupLevel >= maxGroupLevel) {\n      $button = this._createButton();\n      this._subscribeOnClickAndEnterKey($button, addConditionHandler);\n    } else {\n      $button = this._createButtonWithMenu({\n        menu: {\n          items: [{\n            caption: _message2.default.format(\"dxFilterBuilder-addCondition\"),\n            click: addConditionHandler\n          }, {\n            caption: _message2.default.format(\"dxFilterBuilder-addGroup\"),\n            click: addGroupHandler\n          }],\n          displayExpr: \"caption\",\n          onItemClick: function onItemClick(e) {\n            e.itemData.click();\n          },\n          cssClass: FILTER_BUILDER_ADD_CONDITION_CLASS\n        }\n      });\n    }\n    return $button.addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_ADD_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr(\"tabindex\", 0);\n  },\n  _createValueText: function _createValueText(item, field, $container) {\n    var that = this,\n      $text = (0, _renderer2.default)(\"<div>\").html(\"&nbsp;\").addClass(FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS).attr(\"tabindex\", 0).appendTo($container),\n      value = item[2];\n    var customOperation = _utils2.default.getCustomOperation(that._customOperations, item[1]);\n    if (!customOperation && field.lookup) {\n      _utils2.default.getCurrentLookupValueText(field, value, function (result) {\n        renderValueText($text, result);\n      });\n    } else {\n      _deferred2.default.when(_utils2.default.getCurrentValueText(field, value, customOperation)).done(function (result) {\n        renderValueText($text, result, customOperation);\n      });\n    }\n    that._subscribeOnClickAndEnterKey($text, function (e) {\n      if (\"keyup\" === e.type) {\n        e.stopPropagation();\n      }\n      that._createValueEditorWithEvents(item, field, $container);\n    });\n    return $text;\n  },\n  _updateConditionValue: function _updateConditionValue(item, value, callback) {\n    var areValuesDifferent = item[2] !== value;\n    if (areValuesDifferent) {\n      item[2] = value;\n    }\n    callback();\n    this._updateFilter();\n  },\n  _addDocumentKeyUp: function _addDocumentKeyUp($editor, handler) {\n    var document = _dom_adapter2.default.getDocument();\n    var documentKeyUpHandler = function documentKeyUpHandler(e) {\n      if (isComposing || hasCompositionJustEnded) {\n        hasCompositionJustEnded = false;\n        return;\n      }\n      handler(e);\n    };\n    _events_engine2.default.on(document, \"keyup\", documentKeyUpHandler);\n    var isComposing = false;\n    var hasCompositionJustEnded = false;\n    var input = $editor.find(\"input\");\n    _events_engine2.default.on(input, \"compositionstart\", function () {\n      isComposing = true;\n    });\n    _events_engine2.default.on(input, \"compositionend\", function () {\n      isComposing = false;\n      hasCompositionJustEnded = true;\n    });\n    _events_engine2.default.on(input, \"keydown\", function (event) {\n      if (229 !== event.which) {\n        hasCompositionJustEnded = false;\n      }\n    });\n    this._documentKeyUpHandler = documentKeyUpHandler;\n  },\n  _addDocumentClick: function _addDocumentClick($editor, closeEditorFunc) {\n    var _this6 = this;\n    var document = _dom_adapter2.default.getDocument();\n    var documentClickHandler = function documentClickHandler(e) {\n      if (!_this6._isFocusOnEditorParts($editor, e.target)) {\n        _events_engine2.default.trigger($editor.find(\"input\"), \"change\");\n        closeEditorFunc();\n      }\n    };\n    _events_engine2.default.on(document, \"dxpointerdown\", documentClickHandler);\n    this._documentClickHandler = documentClickHandler;\n  },\n  _isFocusOnEditorParts: function _isFocusOnEditorParts($editor, target) {\n    var activeElement = target || _dom_adapter2.default.getActiveElement();\n    return (0, _renderer2.default)(activeElement).closest($editor.children()).length || (0, _renderer2.default)(activeElement).closest(\".dx-dropdowneditor-overlay\").length;\n  },\n  _removeEvents: function _removeEvents() {\n    var document = _dom_adapter2.default.getDocument();\n    (0, _type.isDefined)(this._documentKeyUpHandler) && _events_engine2.default.off(document, \"keyup\", this._documentKeyUpHandler);\n    (0, _type.isDefined)(this._documentClickHandler) && _events_engine2.default.off(document, \"dxpointerdown\", this._documentClickHandler);\n  },\n  _dispose: function _dispose() {\n    this._removeEvents();\n    this.callBase();\n  },\n  _createValueEditorWithEvents: function _createValueEditorWithEvents(item, field, $container) {\n    var _this7 = this;\n    var value = item[2],\n      createValueText = function createValueText() {\n        $container.empty();\n        _this7._removeEvents();\n        return _this7._createValueText(item, field, $container);\n      },\n      closeEditor = function closeEditor() {\n        _this7._updateConditionValue(item, value, function () {\n          createValueText();\n        });\n      };\n    var options = {\n      value: \"\" === value ? null : value,\n      filterOperation: _utils2.default.getOperationValue(item),\n      setValue: function setValue(data) {\n        value = null === data ? \"\" : data;\n      },\n      closeEditor: closeEditor,\n      text: $container.text()\n    };\n    $container.empty();\n    var $editor = this._createValueEditor($container, field, options);\n    _events_engine2.default.trigger($editor.find(\"input\").not(\":hidden\").eq(0), \"focus\");\n    this._removeEvents();\n    this._addDocumentClick($editor, closeEditor);\n    this._addDocumentKeyUp($editor, function (e) {\n      var keyName = (0, _utils4.normalizeKeyName)(e);\n      if (keyName === TAB_KEY) {\n        if (_this7._isFocusOnEditorParts($editor)) {\n          return;\n        }\n        _this7._updateConditionValue(item, value, function () {\n          createValueText();\n          if (e.shiftKey) {\n            _events_engine2.default.trigger($container.prev(), \"focus\");\n          }\n        });\n      }\n      if (keyName === ESCAPE_KEY) {\n        _events_engine2.default.trigger(createValueText(), \"focus\");\n      }\n      if (keyName === ENTER_KEY) {\n        _this7._updateConditionValue(item, value, function () {\n          _events_engine2.default.trigger(createValueText(), \"focus\");\n        });\n      }\n    });\n    this._fireContentReadyAction();\n  },\n  _createValueButton: function _createValueButton(item, field) {\n    var $valueButton = (0, _renderer2.default)(\"<div>\").addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_VALUE_CLASS);\n    this._createValueText(item, field, $valueButton);\n    return $valueButton;\n  },\n  _createValueEditor: function _createValueEditor($container, field, options) {\n    var $editor = (0, _renderer2.default)(\"<div>\").attr(\"tabindex\", 0).appendTo($container),\n      customOperation = _utils2.default.getCustomOperation(this._customOperations, options.filterOperation),\n      editorTemplate = customOperation && customOperation.editorTemplate ? customOperation.editorTemplate : field.editorTemplate;\n    if (editorTemplate) {\n      var template = this._getTemplate(editorTemplate);\n      template.render({\n        model: (0, _extend.extend)({\n          field: field\n        }, options),\n        container: $editor\n      });\n    } else {\n      this._editorFactory.createEditor.call(this, $editor, (0, _extend.extend)({}, field, options, {\n        parentType: SOURCE\n      }));\n    }\n    return $editor;\n  },\n  _createPopupWithTreeView: function _createPopupWithTreeView(options, $container) {\n    var that = this,\n      $popup = (0, _renderer2.default)(\"<div>\").addClass(options.menu.cssClass).appendTo($container);\n    this._createComponent($popup, _popup2.default, {\n      onHiding: options.menu.onHiding,\n      onHidden: options.menu.onHidden,\n      rtlEnabled: options.menu.rtlEnabled,\n      position: options.menu.position,\n      animation: options.menu.animation,\n      contentTemplate: function contentTemplate(contentElement) {\n        var $menuContainer = (0, _renderer2.default)(\"<div>\");\n        that._createComponent($menuContainer, _tree_view2.default, options.menu);\n        return $menuContainer;\n      },\n      maxHeight: function maxHeight() {\n        return (0, _utils3.getElementMaxHeightByWindow)(options.menu.position.of);\n      },\n      visible: true,\n      focusStateEnabled: false,\n      closeOnOutsideClick: true,\n      onShown: options.popup.onShown,\n      shading: false,\n      width: \"auto\",\n      height: \"auto\",\n      showTitle: false\n    });\n  },\n  _subscribeOnClickAndEnterKey: function _subscribeOnClickAndEnterKey($button, handler) {\n    _events_engine2.default.on($button, \"dxclick\", handler);\n    _events_engine2.default.on($button, \"keyup\", function (e) {\n      if ((0, _utils4.normalizeKeyName)(e) === ENTER_KEY) {\n        handler(e);\n      }\n    });\n  }\n});\n(0, _component_registrator2.default)(\"dxFilterBuilder\", FilterBuilder);\nmodule.exports = FilterBuilder;\nmodule.exports.renderValueText = renderValueText;","map":null,"metadata":{},"sourceType":"script"}