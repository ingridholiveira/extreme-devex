{"ast":null,"code":"/**\r\n * DevExtreme (ui/context_menu/ui.menu_base.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (void 0 === getter) {\n        return;\n      }\n      return getter.call(receiver);\n    }\n  }\n};\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _common = require(\"../../core/utils/common\");\nvar _type = require(\"../../core/utils/type\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _utils = require(\"../widget/utils.ink_ripple\");\nvar _ui = require(\"../hierarchical_collection/ui.hierarchical_collection_widget\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _uiMenu_baseEdit = require(\"./ui.menu_base.edit.strategy\");\nvar _uiMenu_baseEdit2 = _interopRequireDefault(_uiMenu_baseEdit);\nvar _devices = require(\"../../core/devices\");\nvar _devices2 = _interopRequireDefault(_devices);\nvar _item = require(\"../collection/item\");\nvar _item2 = _interopRequireDefault(_item);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar DX_MENU_CLASS = \"dx-menu\";\nvar DX_MENU_NO_ICONS_CLASS = DX_MENU_CLASS + \"-no-icons\";\nvar DX_MENU_BASE_CLASS = \"dx-menu-base\";\nvar ITEM_CLASS = DX_MENU_CLASS + \"-item\";\nvar DX_ITEM_CONTENT_CLASS = ITEM_CLASS + \"-content\";\nvar DX_MENU_SELECTED_ITEM_CLASS = ITEM_CLASS + \"-selected\";\nvar DX_MENU_ITEM_WRAPPER_CLASS = ITEM_CLASS + \"-wrapper\";\nvar DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + \"-items-container\";\nvar DX_MENU_ITEM_EXPANDED_CLASS = ITEM_CLASS + \"-expanded\";\nvar DX_MENU_SEPARATOR_CLASS = DX_MENU_CLASS + \"-separator\";\nvar DX_MENU_ITEM_LAST_GROUP_ITEM = DX_MENU_CLASS + \"-last-group-item\";\nvar DX_ITEM_HAS_TEXT = ITEM_CLASS + \"-has-text\";\nvar DX_ITEM_HAS_ICON = ITEM_CLASS + \"-has-icon\";\nvar DX_ITEM_HAS_SUBMENU = ITEM_CLASS + \"-has-submenu\";\nvar DX_MENU_ITEM_POPOUT_CLASS = ITEM_CLASS + \"-popout\";\nvar DX_MENU_ITEM_POPOUT_CONTAINER_CLASS = DX_MENU_ITEM_POPOUT_CLASS + \"-container\";\nvar DX_MENU_ITEM_CAPTION_CLASS = ITEM_CLASS + \"-text\";\nvar SINGLE_SELECTION_MODE = \"single\";\nvar DEFAULT_DELAY = {\n  show: 50,\n  hide: 300\n};\nvar MenuBase = function (_HierarchicalCollecti) {\n  _inherits(MenuBase, _HierarchicalCollecti);\n  function MenuBase() {\n    _classCallCheck(this, MenuBase);\n    return _possibleConstructorReturn(this, (MenuBase.__proto__ || Object.getPrototypeOf(MenuBase)).apply(this, arguments));\n  }\n  _createClass(MenuBase, [{\n    key: \"_getDefaultOptions\",\n    value: function value() {\n      return (0, _extend.extend)(_get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_getDefaultOptions\", this).call(this), {\n        items: [],\n        cssClass: \"\",\n        activeStateEnabled: true,\n        showSubmenuMode: {\n          name: \"onHover\",\n          delay: {\n            show: 50,\n            hide: 300\n          }\n        },\n        animation: {\n          show: {\n            type: \"fade\",\n            from: 0,\n            to: 1,\n            duration: 100\n          },\n          hide: {\n            type: \"fade\",\n            from: 1,\n            to: 0,\n            duration: 100\n          }\n        },\n        selectByClick: false,\n        focusOnSelectedItem: false,\n        keyExpr: null,\n        _itemAttributes: {\n          role: \"menuitem\"\n        },\n        useInkRipple: false\n      });\n    }\n  }, {\n    key: \"_itemDataKey\",\n    value: function value() {\n      return \"dxMenuItemDataKey\";\n    }\n  }, {\n    key: \"_itemClass\",\n    value: function value() {\n      return ITEM_CLASS;\n    }\n  }, {\n    key: \"_setAriaSelected\",\n    value: function value() {}\n  }, {\n    key: \"_selectedItemClass\",\n    value: function value() {\n      return DX_MENU_SELECTED_ITEM_CLASS;\n    }\n  }, {\n    key: \"_widgetClass\",\n    value: function value() {\n      return DX_MENU_BASE_CLASS;\n    }\n  }, {\n    key: \"_focusTarget\",\n    value: function value() {\n      return this._itemContainer();\n    }\n  }, {\n    key: \"_clean\",\n    value: function value() {\n      this.option(\"focusedElement\", null);\n      _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_clean\", this).call(this);\n    }\n  }, {\n    key: \"_supportedKeys\",\n    value: function value() {\n      var _this2 = this;\n      var selectItem = function selectItem() {\n        var $item = (0, _renderer2.default)(_this2.option(\"focusedElement\"));\n        if (!$item.length || !_this2._isSelectionEnabled()) {\n          return;\n        }\n        _this2.selectItem($item[0]);\n      };\n      return (0, _extend.extend)(_get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_supportedKeys\", this).call(this), {\n        space: selectItem,\n        pageUp: _common.noop,\n        pageDown: _common.noop\n      });\n    }\n  }, {\n    key: \"_isSelectionEnabled\",\n    value: function value() {\n      return this.option(\"selectionMode\") === SINGLE_SELECTION_MODE;\n    }\n  }, {\n    key: \"_init\",\n    value: function value() {\n      this._activeStateUnit = \".\" + ITEM_CLASS;\n      _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_init\", this).call(this);\n      this._renderSelectedItem();\n      this._initActions();\n    }\n  }, {\n    key: \"_getTextContainer\",\n    value: function value(itemData) {\n      var itemText = itemData.text;\n      var $itemContainer = (0, _renderer2.default)(\"<span>\").addClass(DX_MENU_ITEM_CAPTION_CLASS);\n      var itemContent = (0, _type.isPlainObject)(itemData) ? itemText : String(itemData);\n      return itemText && $itemContainer.text(itemContent);\n    }\n  }, {\n    key: \"_getPopoutContainer\",\n    value: function value(itemData) {\n      var items = itemData.items;\n      var $popOutContainer = void 0;\n      if (items && items.length) {\n        var $popOutImage = (0, _renderer2.default)(\"<div>\").addClass(DX_MENU_ITEM_POPOUT_CLASS);\n        $popOutContainer = (0, _renderer2.default)(\"<span>\").addClass(DX_MENU_ITEM_POPOUT_CONTAINER_CLASS).append($popOutImage);\n      }\n      return $popOutContainer;\n    }\n  }, {\n    key: \"_getDataAdapterOptions\",\n    value: function value() {\n      return {\n        rootValue: 0,\n        multipleSelection: false,\n        recursiveSelection: false,\n        recursiveExpansion: false,\n        searchValue: \"\"\n      };\n    }\n  }, {\n    key: \"_selectByItem\",\n    value: function value(selectedItem) {\n      if (!selectedItem) {\n        return;\n      }\n      var nodeToSelect = this._dataAdapter.getNodeByItem(selectedItem);\n      this._dataAdapter.toggleSelection(nodeToSelect.internalFields.key, true);\n    }\n  }, {\n    key: \"_renderSelectedItem\",\n    value: function value() {\n      var selectedKeys = this._dataAdapter.getSelectedNodesKeys();\n      var selectedKey = selectedKeys.length && selectedKeys[0];\n      var selectedItem = this.option(\"selectedItem\");\n      if (!selectedKey) {\n        this._selectByItem(selectedItem);\n        return;\n      }\n      var node = this._dataAdapter.getNodeByKey(selectedKey);\n      if (false === node.selectable) {\n        return;\n      }\n      if (!selectedItem) {\n        this.option(\"selectedItem\", node.internalFields.item);\n        return;\n      }\n      if (selectedItem !== node.internalFields.item) {\n        this._dataAdapter.toggleSelection(selectedKey, false);\n        this._selectByItem(selectedItem);\n      }\n    }\n  }, {\n    key: \"_initActions\",\n    value: function value() {}\n  }, {\n    key: \"_initMarkup\",\n    value: function value() {\n      _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_initMarkup\", this).call(this);\n      this._addCustomCssClass(this.$element());\n      this.option(\"useInkRipple\") && this._renderInkRipple();\n    }\n  }, {\n    key: \"_renderInkRipple\",\n    value: function value() {\n      this._inkRipple = (0, _utils.render)();\n    }\n  }, {\n    key: \"_toggleActiveState\",\n    value: function value($element, _value, e) {\n      _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_toggleActiveState\", this).apply(this, arguments);\n      if (!this._inkRipple) {\n        return;\n      }\n      var config = {\n        element: $element,\n        event: e\n      };\n      if (_value) {\n        this._inkRipple.showWave(config);\n      } else {\n        this._inkRipple.hideWave(config);\n      }\n    }\n  }, {\n    key: \"_getShowSubmenuMode\",\n    value: function value() {\n      var defaultValue = \"onClick\";\n      var optionValue = this.option(\"showSubmenuMode\");\n      optionValue = (0, _type.isObject)(optionValue) ? optionValue.name : optionValue;\n      return this._isDesktopDevice() ? optionValue : defaultValue;\n    }\n  }, {\n    key: \"_initSelectedItems\",\n    value: function value() {}\n  }, {\n    key: \"_isDesktopDevice\",\n    value: function value() {\n      return \"desktop\" === _devices2.default.real().deviceType;\n    }\n  }, {\n    key: \"_initEditStrategy\",\n    value: function value() {\n      var Strategy = _uiMenu_baseEdit2.default;\n      this._editStrategy = new Strategy(this);\n    }\n  }, {\n    key: \"_addCustomCssClass\",\n    value: function value($element) {\n      $element.addClass(this.option(\"cssClass\"));\n    }\n  }, {\n    key: \"_itemWrapperSelector\",\n    value: function value() {\n      return \".\" + DX_MENU_ITEM_WRAPPER_CLASS;\n    }\n  }, {\n    key: \"_hoverStartHandler\",\n    value: function value(e) {\n      var $itemElement = this._getItemElementByEventArgs(e);\n      if (!$itemElement || this._isItemDisabled($itemElement)) {\n        return;\n      }\n      e.stopPropagation();\n      if (\"onHover\" === this._getShowSubmenuMode()) {\n        clearTimeout(this._showSubmenusTimeout);\n        this._showSubmenusTimeout = setTimeout(this._showSubmenu.bind(this, $itemElement), this._getSubmenuDelay(\"show\"));\n      }\n    }\n  }, {\n    key: \"_getAvailableItems\",\n    value: function value($itemElements) {\n      return _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_getAvailableItems\", this).call(this, $itemElements).filter(function () {\n        return \"hidden\" !== (0, _renderer2.default)(this).css(\"visibility\");\n      });\n    }\n  }, {\n    key: \"_isItemDisabled\",\n    value: function value($item) {\n      return this._disabledGetter($item.data(this._itemDataKey()));\n    }\n  }, {\n    key: \"_showSubmenu\",\n    value: function value($itemElement) {\n      this._addExpandedClass($itemElement);\n    }\n  }, {\n    key: \"_addExpandedClass\",\n    value: function value(itemElement) {\n      (0, _renderer2.default)(itemElement).addClass(DX_MENU_ITEM_EXPANDED_CLASS);\n    }\n  }, {\n    key: \"_getSubmenuDelay\",\n    value: function value(action) {\n      var _option = this.option(\"showSubmenuMode\"),\n        delay = _option.delay;\n      if (!(0, _type.isDefined)(delay)) {\n        return DEFAULT_DELAY[action];\n      }\n      return (0, _type.isObject)(delay) ? delay[action] : delay;\n    }\n  }, {\n    key: \"_getItemElementByEventArgs\",\n    value: function value(eventArgs) {\n      var $target = (0, _renderer2.default)(eventArgs.target);\n      if ($target.hasClass(this._itemClass()) || $target.get(0) === eventArgs.currentTarget) {\n        return $target;\n      }\n      while (!$target.hasClass(this._itemClass())) {\n        $target = $target.parent();\n        if ($target.hasClass(\"dx-submenu\")) {\n          return null;\n        }\n      }\n      return $target;\n    }\n  }, {\n    key: \"_hoverEndHandler\",\n    value: function value() {\n      clearTimeout(this._showSubmenusTimeout);\n    }\n  }, {\n    key: \"_hasSubmenu\",\n    value: function value(node) {\n      return node.internalFields.childrenKeys.length;\n    }\n  }, {\n    key: \"_renderContentImpl\",\n    value: function value() {\n      this._renderItems(this._dataAdapter.getRootNodes());\n    }\n  }, {\n    key: \"_renderItems\",\n    value: function value(nodes, submenuContainer) {\n      var _this3 = this;\n      if (nodes.length) {\n        this.hasIcons = false;\n        var $nodeContainer = this._renderContainer(this.$element(), submenuContainer);\n        var firstVisibleIndex = -1;\n        var nextGroupFirstIndex = -1;\n        (0, _iterator.each)(nodes, function (index, node) {\n          var isVisibleNode = false !== node.visible;\n          if (isVisibleNode && firstVisibleIndex < 0) {\n            firstVisibleIndex = index;\n          }\n          var isBeginGroup = firstVisibleIndex < index && (node.beginGroup || index === nextGroupFirstIndex);\n          if (isBeginGroup) {\n            nextGroupFirstIndex = isVisibleNode ? index : index + 1;\n          }\n          if (index === nextGroupFirstIndex && firstVisibleIndex < index) {\n            _this3._renderSeparator($nodeContainer);\n          }\n          _this3._renderItem(index, node, $nodeContainer);\n        });\n        if (!this.hasIcons) {\n          $nodeContainer.addClass(DX_MENU_NO_ICONS_CLASS);\n        }\n      }\n    }\n  }, {\n    key: \"_renderContainer\",\n    value: function value($wrapper) {\n      return (0, _renderer2.default)(\"<ul>\").appendTo($wrapper).addClass(DX_MENU_ITEMS_CONTAINER_CLASS);\n    }\n  }, {\n    key: \"_createDOMElement\",\n    value: function value($nodeContainer) {\n      var $node = (0, _renderer2.default)(\"<li>\").appendTo($nodeContainer).addClass(DX_MENU_ITEM_WRAPPER_CLASS);\n      return $node;\n    }\n  }, {\n    key: \"_renderItem\",\n    value: function value(index, node, $nodeContainer, $nodeElement) {\n      var items = this.option(\"items\");\n      var $itemFrame = void 0;\n      if (false === node.internalFields.item.visible) {\n        return;\n      }\n      var $node = $nodeElement || this._createDOMElement($nodeContainer);\n      if (items[index + 1] && items[index + 1].beginGroup) {\n        $node.addClass(DX_MENU_ITEM_LAST_GROUP_ITEM);\n      }\n      $itemFrame = _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_renderItem\", this).call(this, index, node.internalFields.item, $node);\n      if (node.internalFields.item === this.option(\"selectedItem\")) {\n        $itemFrame.addClass(DX_MENU_SELECTED_ITEM_CLASS);\n      }\n      $itemFrame.attr(\"tabIndex\", -1);\n      if (this._hasSubmenu(node)) {\n        this.setAria(\"haspopup\", \"true\", $itemFrame);\n      }\n    }\n  }, {\n    key: \"_renderItemFrame\",\n    value: function value(index, itemData, $itemContainer) {\n      var $itemFrame = $itemContainer.children(\".\" + ITEM_CLASS);\n      return $itemFrame.length ? $itemFrame : _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_renderItemFrame\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_refreshItem\",\n    value: function value($item, item) {\n      var node = this._dataAdapter.getNodeByItem(item);\n      var index = $item.data(this._itemIndexKey());\n      var $nodeContainer = $item.closest(\"ul\");\n      var $nodeElement = $item.closest(\"li\");\n      this._renderItem(index, node, $nodeContainer, $nodeElement);\n    }\n  }, {\n    key: \"_addContentClasses\",\n    value: function value(itemData, $itemFrame) {\n      var hasText = itemData.text ? !!itemData.text.length : false;\n      var hasIcon = !!itemData.icon;\n      var hasSubmenu = itemData.items ? !!itemData.items.length : false;\n      $itemFrame.toggleClass(DX_ITEM_HAS_TEXT, hasText);\n      $itemFrame.toggleClass(DX_ITEM_HAS_ICON, hasIcon);\n      if (!this.hasIcons) {\n        this.hasIcons = hasIcon;\n      }\n      $itemFrame.toggleClass(DX_ITEM_HAS_SUBMENU, hasSubmenu);\n    }\n  }, {\n    key: \"_getItemContent\",\n    value: function value($itemFrame) {\n      var $itemContent = _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_getItemContent\", this).call(this, $itemFrame);\n      if (!$itemContent.length) {\n        $itemContent = $itemFrame.children(\".\" + DX_ITEM_CONTENT_CLASS);\n      }\n      return $itemContent;\n    }\n  }, {\n    key: \"_postprocessRenderItem\",\n    value: function value(args) {\n      var $itemElement = (0, _renderer2.default)(args.itemElement);\n      var selectedIndex = this._dataAdapter.getSelectedNodesKeys();\n      if (!selectedIndex.length || !this._selectedGetter(args.itemData) || !this._isItemSelectable(args.itemData)) {\n        this._setAriaSelected($itemElement, \"false\");\n        return;\n      }\n      var node = this._dataAdapter.getNodeByItem(args.itemData);\n      if (node.internalFields.key === selectedIndex[0]) {\n        $itemElement.addClass(this._selectedItemClass());\n        this._setAriaSelected($itemElement, \"true\");\n      } else {\n        this._setAriaSelected($itemElement, \"false\");\n      }\n    }\n  }, {\n    key: \"_isItemSelectable\",\n    value: function value(item) {\n      return false !== item.selectable;\n    }\n  }, {\n    key: \"_renderSeparator\",\n    value: function value($itemsContainer) {\n      (0, _renderer2.default)(\"<li>\").appendTo($itemsContainer).addClass(DX_MENU_SEPARATOR_CLASS);\n    }\n  }, {\n    key: \"_itemClickHandler\",\n    value: function value(e) {\n      if (e._skipHandling) {\n        return;\n      }\n      var itemClickActionHandler = this._createAction(this._updateSubmenuVisibilityOnClick.bind(this));\n      this._itemDXEventHandler(e, \"onItemClick\", {}, {\n        afterExecute: itemClickActionHandler.bind(this)\n      });\n      e._skipHandling = true;\n    }\n  }, {\n    key: \"_updateSubmenuVisibilityOnClick\",\n    value: function value(actionArgs) {\n      this._updateSelectedItemOnClick(actionArgs);\n      if (\"onClick\" === this._getShowSubmenuMode()) {\n        this._addExpandedClass(actionArgs.args[0].itemElement);\n      }\n    }\n  }, {\n    key: \"_updateSelectedItemOnClick\",\n    value: function value(actionArgs) {\n      var args = actionArgs.args ? actionArgs.args[0] : actionArgs;\n      if (!this._isItemSelectionAllowed(args.itemData)) {\n        return;\n      }\n      var selectedItemKey = this._dataAdapter.getSelectedNodesKeys();\n      var selectedNode = selectedItemKey.length && this._dataAdapter.getNodeByKey(selectedItemKey[0]);\n      if (selectedNode) {\n        this._toggleItemSelection(selectedNode, false);\n      }\n      if (!selectedNode || selectedNode.internalFields.item !== args.itemData) {\n        this.selectItem(args.itemData);\n      } else {\n        this._fireSelectionChangeEvent(null, this.option(\"selectedItem\"));\n        this._setOptionSilent(\"selectedItem\", null);\n      }\n    }\n  }, {\n    key: \"_isItemSelectionAllowed\",\n    value: function value(item) {\n      var isSelectionByClickEnabled = this._isSelectionEnabled() && this.option(\"selectByClick\");\n      return !this._isContainerEmpty() && isSelectionByClickEnabled && this._isItemSelectable(item) && !this._itemsGetter(item);\n    }\n  }, {\n    key: \"_isContainerEmpty\",\n    value: function value() {\n      return this._itemContainer().is(\":empty\");\n    }\n  }, {\n    key: \"_syncSelectionOptions\",\n    value: function value() {\n      return (0, _common.asyncNoop)();\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function value(args) {\n      switch (args.name) {\n        case \"showSubmenuMode\":\n          break;\n        case \"selectedItem\":\n          var node = this._dataAdapter.getNodeByItem(args.value);\n          var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];\n          if (node && node.internalFields.key !== selectedKey) {\n            if (false === node.selectable) {\n              break;\n            }\n            if (selectedKey) {\n              this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false);\n            }\n            this._toggleItemSelection(node, true);\n            this._updateSelectedItems();\n          }\n          break;\n        case \"cssClass\":\n        case \"position\":\n        case \"selectByClick\":\n        case \"animation\":\n        case \"useInkRipple\":\n          this._invalidate();\n          break;\n        default:\n          _get(MenuBase.prototype.__proto__ || Object.getPrototypeOf(MenuBase.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }, {\n    key: \"_toggleItemSelection\",\n    value: function value(node, _value2) {\n      var itemElement = this._getElementByItem(node.internalFields.item);\n      itemElement && (0, _renderer2.default)(itemElement).toggleClass(DX_MENU_SELECTED_ITEM_CLASS);\n      this._dataAdapter.toggleSelection(node.internalFields.key, _value2);\n    }\n  }, {\n    key: \"_getElementByItem\",\n    value: function value(itemData) {\n      var _this4 = this;\n      var result = void 0;\n      (0, _iterator.each)(this._itemElements(), function (_, itemElement) {\n        if ((0, _renderer2.default)(itemElement).data(_this4._itemDataKey()) !== itemData) {\n          return true;\n        }\n        result = itemElement;\n        return false;\n      });\n      return result;\n    }\n  }, {\n    key: \"_updateSelectedItems\",\n    value: function value(oldSelection, newSelection) {\n      if (oldSelection || newSelection) {\n        this._fireSelectionChangeEvent(newSelection, oldSelection);\n      }\n    }\n  }, {\n    key: \"_fireSelectionChangeEvent\",\n    value: function value(addedSelection, removedSelection) {\n      this._createActionByOption(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      })({\n        addedItems: [addedSelection],\n        removedItems: [removedSelection]\n      });\n    }\n  }, {\n    key: \"selectItem\",\n    value: function value(itemElement) {\n      var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;\n      var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];\n      var selectedItem = this.option(\"selectedItem\");\n      var node = this._dataAdapter.getNodeByItem(itemData);\n      if (node.internalFields.key !== selectedKey) {\n        if (selectedKey) {\n          this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false);\n        }\n        this._toggleItemSelection(node, true);\n        this._updateSelectedItems(selectedItem, itemData);\n        this._setOptionSilent(\"selectedItem\", itemData);\n      }\n    }\n  }, {\n    key: \"unselectItem\",\n    value: function value(itemElement) {\n      var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;\n      var node = this._dataAdapter.getNodeByItem(itemData);\n      var selectedItem = this.option(\"selectedItem\");\n      if (node.internalFields.selected) {\n        this._toggleItemSelection(node, false);\n        this._updateSelectedItems(selectedItem, null);\n        this._setOptionSilent(\"selectedItem\", null);\n      }\n    }\n  }]);\n  return MenuBase;\n}(_ui2.default);\nMenuBase.ItemClass = _item2.default;\nmodule.exports = MenuBase;","map":null,"metadata":{},"sourceType":"script"}