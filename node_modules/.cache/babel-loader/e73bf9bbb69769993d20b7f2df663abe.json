{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.search.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _type = require(\"../../core/utils/type\");\nvar _data = require(\"../../core/utils/data\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _query = require(\"../../data/query\");\nvar _query2 = _interopRequireDefault(_query);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar SEARCH_PANEL_CLASS = \"search-panel\",\n  SEARCH_TEXT_CLASS = \"search-text\",\n  FILTERING_TIMEOUT = 700;\nfunction allowSearch(column) {\n  return (0, _type.isDefined)(column.allowSearch) ? column.allowSearch : column.allowFiltering;\n}\nfunction parseValue(column, text) {\n  var lookup = column.lookup;\n  if (lookup) {\n    return column.parseValue.call(lookup, text);\n  } else {\n    return column.parseValue ? column.parseValue(text) : text;\n  }\n}\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      searchPanel: {\n        visible: false,\n        width: 160,\n        placeholder: _message2.default.format(\"dxDataGrid-searchPanelPlaceholder\"),\n        highlightSearchText: true,\n        highlightCaseSensitive: false,\n        text: \"\",\n        searchVisibleColumnsOnly: false\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      data: function () {\n        var calculateSearchFilter = function calculateSearchFilter(that, text) {\n          var i,\n            column,\n            filterValue,\n            lookup,\n            columns = that._columnsController.getColumns(),\n            searchVisibleColumnsOnly = that.option(\"searchPanel.searchVisibleColumnsOnly\"),\n            filters = [];\n          if (!text) {\n            return null;\n          }\n          function onQueryDone(items) {\n            var i,\n              value,\n              valueGetter = (0, _data.compileGetter)(lookup.valueExpr);\n            for (i = 0; i < items.length; i++) {\n              value = valueGetter(items[i]);\n              filters.push(column.createFilterExpression(value, null, \"search\"));\n            }\n          }\n          for (i = 0; i < columns.length; i++) {\n            column = columns[i];\n            if (searchVisibleColumnsOnly && !column.visible) {\n              continue;\n            }\n            if (allowSearch(column) && column.calculateFilterExpression) {\n              lookup = column.lookup;\n              filterValue = parseValue(column, text);\n              if (lookup && lookup.items) {\n                (0, _query2.default)(lookup.items).filter(column.createFilterExpression.call({\n                  dataField: lookup.displayExpr,\n                  dataType: lookup.dataType,\n                  calculateFilterExpression: column.calculateFilterExpression\n                }, filterValue, null, \"search\")).enumerate().done(onQueryDone);\n              } else {\n                if (void 0 !== filterValue) {\n                  filters.push(column.createFilterExpression(filterValue, null, \"search\"));\n                }\n              }\n            }\n          }\n          return (0, _uiGrid_core.combineFilters)(filters, \"or\");\n        };\n        return {\n          publicMethods: function publicMethods() {\n            return this.callBase().concat([\"searchByText\"]);\n          },\n          _calculateAdditionalFilter: function _calculateAdditionalFilter() {\n            var that = this,\n              filter = that.callBase(),\n              searchFilter = calculateSearchFilter(that, that.option(\"searchPanel.text\"));\n            return (0, _uiGrid_core.combineFilters)([filter, searchFilter]);\n          },\n          searchByText: function searchByText(text) {\n            this.option(\"searchPanel.text\", text);\n          },\n          optionChanged: function optionChanged(args) {\n            var that = this;\n            switch (args.fullName) {\n              case \"searchPanel.text\":\n              case \"searchPanel\":\n                that._applyFilter();\n                args.handled = true;\n                break;\n              default:\n                that.callBase(args);\n            }\n          }\n        };\n      }()\n    },\n    views: {\n      headerPanel: function () {\n        var getSearchPanelOptions = function getSearchPanelOptions(that) {\n          return that.option(\"searchPanel\");\n        };\n        return {\n          _getToolbarItems: function _getToolbarItems() {\n            var items = this.callBase();\n            return this._prepareSearchItem(items);\n          },\n          _prepareSearchItem: function _prepareSearchItem(items) {\n            var that = this,\n              dataController = that.getController(\"data\"),\n              searchPanelOptions = getSearchPanelOptions(that);\n            if (searchPanelOptions && searchPanelOptions.visible) {\n              var toolbarItem = {\n                template: function template(data, index, container) {\n                  var $search = (0, _renderer2.default)(\"<div>\").addClass(that.addWidgetPrefix(SEARCH_PANEL_CLASS)).appendTo(container);\n                  that.getController(\"editorFactory\").createEditor($search, {\n                    width: searchPanelOptions.width,\n                    placeholder: searchPanelOptions.placeholder,\n                    parentType: \"searchPanel\",\n                    value: that.option(\"searchPanel.text\"),\n                    updateValueTimeout: FILTERING_TIMEOUT,\n                    setValue: function setValue(value) {\n                      dataController.searchByText(value);\n                    },\n                    editorOptions: {\n                      inputAttr: {\n                        \"aria-label\": _message2.default.format(\"dxDataGrid-ariaSearchInGrid\")\n                      }\n                    }\n                  });\n                  that.resize();\n                },\n                name: \"searchPanel\",\n                location: \"after\",\n                locateInMenu: \"never\",\n                sortIndex: 40\n              };\n              items.push(toolbarItem);\n            }\n            return items;\n          },\n          getSearchTextEditor: function getSearchTextEditor() {\n            var $element = this.element(),\n              $searchPanel = $element.find(\".\" + this.addWidgetPrefix(SEARCH_PANEL_CLASS)).filter(function () {\n                return (0, _renderer2.default)(this).closest(\".dx-datagrid-header-panel\").is($element);\n              });\n            if ($searchPanel.length) {\n              return $searchPanel.dxTextBox(\"instance\");\n            }\n            return null;\n          },\n          isVisible: function isVisible() {\n            var searchPanelOptions = getSearchPanelOptions(this);\n            return this.callBase() || searchPanelOptions && searchPanelOptions.visible;\n          },\n          optionChanged: function optionChanged(args) {\n            if (\"searchPanel\" === args.name) {\n              if (\"searchPanel.text\" === args.fullName) {\n                var editor = this.getSearchTextEditor();\n                if (editor) {\n                  editor.option(\"value\", args.value);\n                }\n              } else {\n                this._invalidate();\n              }\n              args.handled = true;\n            } else {\n              this.callBase(args);\n            }\n          }\n        };\n      }(),\n      rowsView: {\n        init: function init() {\n          this.callBase.apply(this, arguments);\n          this._searchParams = [];\n        },\n        _getFormattedSearchText: function _getFormattedSearchText(column, searchText) {\n          var value = parseValue(column, searchText),\n            formatOptions = (0, _uiGrid_core.getFormatOptionsByColumn)(column, \"search\");\n          return (0, _uiGrid_core.formatValue)(value, formatOptions);\n        },\n        _getStringNormalizer: function _getStringNormalizer() {\n          var isCaseSensitive = this.option(\"searchPanel.highlightCaseSensitive\");\n          return function (str) {\n            return isCaseSensitive ? str : str.toLowerCase();\n          };\n        },\n        _findHighlightingTextNodes: function _findHighlightingTextNodes(column, cellElement, searchText) {\n          var $items,\n            columnIndex,\n            that = this,\n            $parent = cellElement.parent(),\n            stringNormalizer = this._getStringNormalizer(),\n            normalizedSearchText = stringNormalizer(searchText);\n          if (!$parent.length) {\n            $parent = (0, _renderer2.default)(\"<div>\").append(cellElement);\n          } else {\n            if (column) {\n              if (column.groupIndex >= 0 && !column.showWhenGrouped) {\n                $items = cellElement;\n              } else {\n                columnIndex = that._columnsController.getVisibleIndex(column.index);\n                $items = $parent.children(\"td\").eq(columnIndex).find(\"*\");\n              }\n            }\n          }\n          $items = $items && $items.length ? $items : $parent.find(\"*\");\n          $items = $items.filter(function (_, element) {\n            var $contents = (0, _renderer2.default)(element).contents();\n            for (var i = 0; i < $contents.length; i++) {\n              var node = $contents.get(i);\n              if (3 === node.nodeType) {\n                return stringNormalizer(node.textContent || node.nodeValue).indexOf(normalizedSearchText) > -1;\n              }\n              return false;\n            }\n          });\n          return $items;\n        },\n        _highlightSearchTextCore: function _highlightSearchTextCore($textNode, searchText) {\n          var that = this,\n            $searchTextSpan = (0, _renderer2.default)(\"<span>\").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS)),\n            text = $textNode.text(),\n            firstContentElement = $textNode[0],\n            stringNormalizer = this._getStringNormalizer(),\n            index = stringNormalizer(text).indexOf(stringNormalizer(searchText));\n          if (index >= 0) {\n            if (firstContentElement.textContent) {\n              firstContentElement.textContent = text.substr(0, index);\n            } else {\n              firstContentElement.nodeValue = text.substr(0, index);\n            }\n            $textNode.after($searchTextSpan.text(text.substr(index, searchText.length)));\n            $textNode = (0, _renderer2.default)(_dom_adapter2.default.createTextNode(text.substr(index + searchText.length))).insertAfter($searchTextSpan);\n            return that._highlightSearchTextCore($textNode, searchText);\n          }\n        },\n        _highlightSearchText: function _highlightSearchText(cellElement, isEquals, column) {\n          var that = this,\n            stringNormalizer = this._getStringNormalizer(),\n            searchText = that.option(\"searchPanel.text\");\n          if (isEquals && column) {\n            searchText = searchText && that._getFormattedSearchText(column, searchText);\n          }\n          if (searchText && that.option(\"searchPanel.highlightSearchText\")) {\n            var textNodes = that._findHighlightingTextNodes(column, cellElement, searchText);\n            (0, _iterator.each)(textNodes, function (_, element) {\n              (0, _iterator.each)((0, _renderer2.default)(element).contents(), function (_, textNode) {\n                if (isEquals) {\n                  if (stringNormalizer((0, _renderer2.default)(textNode).text()) === stringNormalizer(searchText)) {\n                    (0, _renderer2.default)(this).replaceWith((0, _renderer2.default)(\"<span>\").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS)).text((0, _renderer2.default)(textNode).text()));\n                  }\n                } else {\n                  that._highlightSearchTextCore((0, _renderer2.default)(textNode), searchText);\n                }\n              });\n            });\n          }\n        },\n        _renderCore: function _renderCore() {\n          this.callBase.apply(this, arguments);\n          if (this.option(\"rowTemplate\")) {\n            if (this.option(\"templatesRenderAsynchronously\")) {\n              clearTimeout(this._highlightTimer);\n              this._highlightTimer = setTimeout(function () {\n                this._highlightSearchText(this._getTableElement());\n              }.bind(this));\n            } else {\n              this._highlightSearchText(this._getTableElement());\n            }\n          }\n        },\n        _updateCell: function _updateCell($cell, parameters) {\n          var column = parameters.column,\n            dataType = column.lookup && column.lookup.dataType || column.dataType,\n            isEquals = \"string\" !== dataType;\n          if (allowSearch(column)) {\n            if (this.option(\"templatesRenderAsynchronously\")) {\n              if (!this._searchParams.length) {\n                clearTimeout(this._highlightTimer);\n                this._highlightTimer = setTimeout(function () {\n                  this._searchParams.forEach(function (params) {\n                    this._highlightSearchText.apply(this, params);\n                  }.bind(this));\n                  this._searchParams = [];\n                }.bind(this));\n              }\n              this._searchParams.push([$cell, isEquals, column]);\n            } else {\n              this._highlightSearchText($cell, isEquals, column);\n            }\n          }\n          this.callBase($cell, parameters);\n        },\n        dispose: function dispose() {\n          clearTimeout(this._highlightTimer);\n          this.callBase();\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}