{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  domAdapter = require(\"../../core/dom_adapter\"),\n  eventsEngine = require(\"../../events/core/events_engine\"),\n  commonUtils = require(\"../../core/utils/common\"),\n  mathUtils = require(\"../../core/utils/math\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  inArray = require(\"../../core/utils/array\").inArray,\n  devices = require(\"../../core/devices\"),\n  browser = require(\"../../core/utils/browser\"),\n  TextEditor = require(\"../text_box/ui.text_editor\"),\n  eventUtils = require(\"../../events/utils\"),\n  SpinButtons = require(\"./number_box.spins\").default,\n  messageLocalization = require(\"../../localization/message\"),\n  Deferred = require(\"../../core/utils/deferred\").Deferred;\nvar math = Math;\nvar WIDGET_CLASS = \"dx-numberbox\";\nvar FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\nvar FORCE_VALUECHANGE_EVENT_NAMESPACE = \"NumberBoxForceValueChange\";\nvar NumberBoxBase = TextEditor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend(this.callBase(), {\n      upArrow: function upArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this._spinUpChangeHandler(e);\n      },\n      downArrow: function downArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this._spinDownChangeHandler(e);\n      },\n      enter: function enter() {}\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: 0,\n      min: void 0,\n      max: void 0,\n      step: 1,\n      showSpinButtons: false,\n      useLargeSpinButtons: true,\n      mode: \"text\",\n      invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\n      buttons: void 0\n    });\n  },\n  _getDefaultButtons: function _getDefaultButtons() {\n    return this.callBase().concat([{\n      name: \"spins\",\n      Ctor: SpinButtons\n    }]);\n  },\n  _isSupportInputMode: function _isSupportInputMode() {\n    var version = parseFloat(browser.version);\n    return browser.chrome && version >= 66 || browser.safari && version >= 12 || browser.msie && version >= 75;\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return devices.real().generic && !devices.isSimulator();\n      },\n      options: {\n        useLargeSpinButtons: false\n      }\n    }, {\n      device: function () {\n        return \"desktop\" !== devices.real().deviceType && !this._isSupportInputMode();\n      }.bind(this),\n      options: {\n        mode: \"number\"\n      }\n    }]);\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSubmitElement();\n    this.$element().addClass(WIDGET_CLASS);\n    this.callBase();\n  },\n  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {\n    $input.attr(\"inputmode\", \"decimal\");\n    this.callBase($input, customAttributes);\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\n    this.setAria(\"role\", \"spinbutton\");\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n    this._setSubmitValue(this.option(\"value\"));\n  },\n  _setSubmitValue: function _setSubmitValue(value) {\n    this._getSubmitElement().val(commonUtils.applyServerDecimalSeparator(value));\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._$submitElement;\n  },\n  _keyPressHandler: function _keyPressHandler(e) {\n    this.callBase(e);\n    var char = eventUtils.getChar(e),\n      validCharRegExp = /[\\d.,eE\\-+]|Subtract/,\n      isInputCharValid = validCharRegExp.test(char);\n    if (!isInputCharValid) {\n      var keyName = eventUtils.normalizeKeyName(e);\n      if (e.metaKey || e.ctrlKey || keyName && inArray(keyName, FIREFOX_CONTROL_KEYS) >= 0) {\n        return;\n      }\n      e.preventDefault();\n      return false;\n    }\n    this._keyPressed = true;\n  },\n  _onMouseWheel: function _onMouseWheel(dxEvent) {\n    dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);\n  },\n  _renderValue: function _renderValue() {\n    var inputValue = this._input().val();\n    if (!inputValue.length || Number(inputValue) !== this.option(\"value\")) {\n      this._forceValueRender();\n      this._toggleEmptinessEventHandler();\n    }\n    this.setAria(\"valuenow\", commonUtils.ensureDefined(this.option(\"value\"), \"\"));\n    this.option(\"text\", this._input().val());\n    this._updateButtons();\n    return new Deferred().resolve();\n  },\n  _forceValueRender: function _forceValueRender() {\n    var value = this.option(\"value\"),\n      number = Number(value),\n      formattedValue = isNaN(number) ? \"\" : this._applyDisplayValueFormatter(value);\n    this._renderDisplayText(formattedValue);\n  },\n  _applyDisplayValueFormatter: function _applyDisplayValueFormatter(value) {\n    return this.option(\"displayValueFormatter\")(value);\n  },\n  _renderProps: function _renderProps() {\n    this.callBase();\n    this._input().prop({\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      step: this.option(\"step\")\n    });\n    this.setAria({\n      valuemin: commonUtils.ensureDefined(this.option(\"min\"), \"\"),\n      valuemax: commonUtils.ensureDefined(this.option(\"max\"), \"\")\n    });\n  },\n  _spinButtonsPointerDownHandler: function _spinButtonsPointerDownHandler() {\n    var $input = this._input();\n    if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\n      eventsEngine.trigger($input, \"focus\");\n    }\n  },\n  _spinUpChangeHandler: function _spinUpChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(1, e.event || e);\n    }\n  },\n  _spinDownChangeHandler: function _spinDownChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(-1, e.event || e);\n    }\n  },\n  _spinValueChange: function _spinValueChange(sign, dxEvent) {\n    var step = parseFloat(this.option(\"step\"));\n    if (0 === step) {\n      return;\n    }\n    var value = parseFloat(this._normalizeInputValue()) || 0;\n    value = this._correctRounding(value, step * sign);\n    var min = this.option(\"min\"),\n      max = this.option(\"max\");\n    if (void 0 !== min) {\n      value = Math.max(min, value);\n    }\n    if (void 0 !== max) {\n      value = Math.min(max, value);\n    }\n    this._saveValueChangeEvent(dxEvent);\n    this.option(\"value\", value);\n  },\n  _correctRounding: function _correctRounding(value, step) {\n    var regex = /[,.](.*)/;\n    var isFloatValue = regex.test(value),\n      isFloatStep = regex.test(step);\n    if (isFloatValue || isFloatStep) {\n      var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0,\n        stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0,\n        accuracy = math.max(valueAccuracy, stepAccuracy);\n      value = this._round(value + step, accuracy);\n      return value;\n    }\n    return value + step;\n  },\n  _round: function _round(value, precision) {\n    precision = precision || 0;\n    var multiplier = Math.pow(10, precision);\n    value *= multiplier;\n    value = Math.round(value) / multiplier;\n    return value;\n  },\n  _renderValueChangeEvent: function _renderValueChangeEvent() {\n    this.callBase();\n    var forceValueChangeEvent = eventUtils.addNamespace(\"focusout\", FORCE_VALUECHANGE_EVENT_NAMESPACE);\n    eventsEngine.off(this.element(), forceValueChangeEvent);\n    eventsEngine.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this));\n  },\n  _forceRefreshInputValue: function _forceRefreshInputValue() {\n    if (\"number\" === this.option(\"mode\")) {\n      return;\n    }\n    var $input = this._input(),\n      formattedValue = this._applyDisplayValueFormatter(this.option(\"value\"));\n    $input.val(null);\n    $input.val(formattedValue);\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    var $input = this._input(),\n      inputValue = this._normalizeText(),\n      value = this._parseValue(inputValue),\n      valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\n    if (this._isValueValid() && !this._validateValue(value)) {\n      $input.val(this._applyDisplayValueFormatter(value));\n      return;\n    }\n    if (valueHasDigits) {\n      this.callBase(e, isNaN(value) ? null : value);\n    }\n    this._applyValueBoundaries(inputValue, value);\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n  },\n  _applyValueBoundaries: function _applyValueBoundaries(inputValue, parsedValue) {\n    var isValueIncomplete = this._isValueIncomplete(inputValue),\n      isValueCorrect = this._isValueInRange(inputValue);\n    if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\n      if (Number(inputValue) !== parsedValue) {\n        this._input().val(this._applyDisplayValueFormatter(parsedValue));\n      }\n    }\n  },\n  _replaceCommaWithPoint: function _replaceCommaWithPoint(value) {\n    return value.replace(\",\", \".\");\n  },\n  _inputIsInvalid: function _inputIsInvalid() {\n    var isNumberMode = \"number\" === this.option(\"mode\");\n    var validityState = this._input().get(0).validity;\n    return isNumberMode && validityState && validityState.badInput;\n  },\n  _renderDisplayText: function _renderDisplayText(text) {\n    if (this._inputIsInvalid()) {\n      return;\n    }\n    this.callBase(text);\n  },\n  _isValueIncomplete: function _isValueIncomplete(value) {\n    var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\n    return incompleteRegex.test(value);\n  },\n  _isValueInRange: function _isValueInRange(value) {\n    return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"));\n  },\n  _isNumber: function _isNumber(value) {\n    return null !== this._parseValue(value);\n  },\n  _validateValue: function _validateValue(value) {\n    var inputValue = this._normalizeText(),\n      isValueValid = this._isValueValid(),\n      isValid = true,\n      isNumber = this._isNumber(inputValue);\n    if (isNaN(Number(value))) {\n      isValid = false;\n    }\n    if (!value && isValueValid) {\n      isValid = true;\n    } else {\n      if (!isNumber && !isValueValid) {\n        isValid = false;\n      }\n    }\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"invalidValueMessage\")\n      }\n    });\n    return isValid;\n  },\n  _normalizeInputValue: function _normalizeInputValue() {\n    return this._parseValue(this._normalizeText());\n  },\n  _normalizeText: function _normalizeText() {\n    var value = this._input().val().trim();\n    return this._replaceCommaWithPoint(value);\n  },\n  _parseValue: function _parseValue(value) {\n    var number = parseFloat(value);\n    if (isNaN(number)) {\n      return null;\n    }\n    return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"));\n  },\n  reset: function reset() {\n    if (null === this.option(\"value\")) {\n      this.option(\"text\", \"\");\n      this._renderValue();\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        this._validateValue(args.value);\n        this._setSubmitValue(args.value);\n        this.callBase(args);\n        this._resumeValueChangeAction();\n        break;\n      case \"step\":\n        this._renderProps();\n        break;\n      case \"min\":\n      case \"max\":\n        this._renderProps();\n        this.option(\"value\", this._parseValue(this.option(\"value\")));\n        break;\n      case \"showSpinButtons\":\n      case \"useLargeSpinButtons\":\n        this._updateButtons([\"spins\"]);\n        break;\n      case \"invalidValueMessage\":\n        break;\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = NumberBoxBase;","map":null,"metadata":{},"sourceType":"script"}