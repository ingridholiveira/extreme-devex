{"ast":null,"code":"/**\r\n * DevExtreme (exporter/excel/excel.file.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _type = require(\"../../core/utils/type\");\nvar _excel = require(\"./excel.tag_helper\");\nvar _excel2 = _interopRequireDefault(_excel);\nvar _excel3 = require(\"./excel.cell_format_helper\");\nvar _excel4 = _interopRequireDefault(_excel3);\nvar _excel5 = require(\"./excel.fill_helper\");\nvar _excel6 = _interopRequireDefault(_excel5);\nvar _excel7 = require(\"./excel.font_helper\");\nvar _excel8 = _interopRequireDefault(_excel7);\nvar _excel9 = require(\"./excel.number_format_helper\");\nvar _excel10 = _interopRequireDefault(_excel9);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar ExcelFile = function () {\n  function ExcelFile() {\n    _classCallCheck(this, ExcelFile);\n    this._cellFormatTags = [];\n    this._fillTags = [];\n    this._fontTags = [];\n    this._numberFormatTags = [];\n    this._fillTags.push(_excel6.default.tryCreateTag({\n      patternFill: {\n        patternType: \"none\"\n      }\n    }));\n  }\n  _createClass(ExcelFile, [{\n    key: \"registerCellFormat\",\n    value: function value(cellFormat) {\n      var result = void 0;\n      var cellFormatTag = _excel4.default.tryCreateTag(cellFormat, {\n        registerFill: this.registerFill.bind(this),\n        registerFont: this.registerFont.bind(this),\n        registerNumberFormat: this.registerNumberFormat.bind(this)\n      });\n      if ((0, _type.isDefined)(cellFormatTag)) {\n        for (var i = 0; i < this._cellFormatTags.length; i++) {\n          if (_excel4.default.areEqual(this._cellFormatTags[i], cellFormatTag)) {\n            result = i;\n            break;\n          }\n        }\n        if (void 0 === result) {\n          result = this._cellFormatTags.push(cellFormatTag) - 1;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"generateCellFormatsXml\",\n    value: function value() {\n      var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(function (tag) {\n        return _excel4.default.toXml(tag);\n      });\n      return _excel2.default.toXml(\"cellXfs\", {\n        count: cellFormatTagsAsXmlStringsArray.length\n      }, cellFormatTagsAsXmlStringsArray.join(\"\"));\n    }\n  }, {\n    key: \"registerFill\",\n    value: function value(fill) {\n      var result = void 0;\n      var fillTag = _excel6.default.tryCreateTag(fill);\n      if ((0, _type.isDefined)(fillTag)) {\n        for (var i = 0; i < this._fillTags.length; i++) {\n          if (_excel6.default.areEqual(this._fillTags[i], fillTag)) {\n            result = i;\n            break;\n          }\n        }\n        if (void 0 === result) {\n          if (this._fillTags.length < 2) {\n            this._fillTags.push(_excel6.default.tryCreateTag({\n              patternFill: {\n                patternType: \"Gray125\"\n              }\n            }));\n          }\n          result = this._fillTags.push(fillTag) - 1;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"generateFillsXml\",\n    value: function value() {\n      var tagsAsXmlStringsArray = this._fillTags.map(function (tag) {\n        return _excel6.default.toXml(tag);\n      });\n      return _excel2.default.toXml(\"fills\", {\n        count: tagsAsXmlStringsArray.length\n      }, tagsAsXmlStringsArray.join(\"\"));\n    }\n  }, {\n    key: \"registerFont\",\n    value: function value(font) {\n      var result = void 0;\n      var fontTag = _excel8.default.tryCreateTag(font);\n      if ((0, _type.isDefined)(fontTag)) {\n        for (var i = 0; i < this._fontTags.length; i++) {\n          if (_excel8.default.areEqual(this._fontTags[i], fontTag)) {\n            result = i;\n            break;\n          }\n        }\n        if (void 0 === result) {\n          result = this._fontTags.push(fontTag) - 1;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"generateFontsXml\",\n    value: function value() {\n      var xmlStringsArray = this._fontTags.map(function (tag) {\n        return _excel8.default.toXml(tag);\n      });\n      return _excel2.default.toXml(\"fonts\", {\n        count: xmlStringsArray.length\n      }, xmlStringsArray.join(\"\"));\n    }\n  }, {\n    key: \"_convertNumberFormatIndexToId\",\n    value: function value(index) {\n      var CUSTOM_FORMAT_ID_START_VALUE = 165;\n      return CUSTOM_FORMAT_ID_START_VALUE + index;\n    }\n  }, {\n    key: \"registerNumberFormat\",\n    value: function value(numberFormat) {\n      var result = void 0;\n      var tag = _excel10.default.tryCreateTag(numberFormat);\n      if ((0, _type.isDefined)(tag)) {\n        for (var i = 0; i < this._numberFormatTags.length; i++) {\n          if (_excel10.default.areEqual(this._numberFormatTags[i], tag)) {\n            result = this._numberFormatTags[i][_excel10.default.ID_PROPERTY_NAME];\n            break;\n          }\n        }\n        if (void 0 === result) {\n          tag[_excel10.default.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\n          result = tag[_excel10.default.ID_PROPERTY_NAME];\n          this._numberFormatTags.push(tag);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"generateNumberFormatsXml\",\n    value: function value() {\n      if (this._numberFormatTags.length > 0) {\n        var xmlStringsArray = this._numberFormatTags.map(function (tag) {\n          return _excel10.default.toXml(tag);\n        });\n        return _excel2.default.toXml(\"numFmts\", {\n          count: xmlStringsArray.length\n        }, xmlStringsArray.join(\"\"));\n      } else {\n        return \"\";\n      }\n    }\n  }], [{\n    key: \"copyCellFormat\",\n    value: function value(source) {\n      return _excel4.default.copy(source);\n    }\n  }]);\n  return ExcelFile;\n}();\nexports.default = ExcelFile;\nmodule.exports = ExcelFile;","map":null,"metadata":{},"sourceType":"script"}