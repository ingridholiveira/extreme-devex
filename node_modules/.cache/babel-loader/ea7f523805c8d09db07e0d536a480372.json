{"ast":null,"code":"/**\r\n * DevExtreme (ui/validator.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _element_data = require(\"../core/element_data\");\nvar _element_data2 = _interopRequireDefault(_element_data);\nvar _callbacks = require(\"../core/utils/callbacks\");\nvar _callbacks2 = _interopRequireDefault(_callbacks);\nvar _ui = require(\"./widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _dom_component = require(\"../core/dom_component\");\nvar _dom_component2 = _interopRequireDefault(_dom_component);\nvar _extend = require(\"../core/utils/extend\");\nvar _iterator = require(\"../core/utils/iterator\");\nvar _validation_mixin = require(\"./validation/validation_mixin\");\nvar _validation_mixin2 = _interopRequireDefault(_validation_mixin);\nvar _validation_engine = require(\"./validation_engine\");\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\nvar _default_adapter = require(\"./validation/default_adapter\");\nvar _default_adapter2 = _interopRequireDefault(_default_adapter);\nvar _component_registrator = require(\"../core/component_registrator\");\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\nvar _deferred = require(\"../core/utils/deferred\");\nvar _guid = require(\"../core/guid\");\nvar _guid2 = _interopRequireDefault(_guid);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar VALIDATOR_CLASS = \"dx-validator\",\n  VALIDATION_STATUS_VALID = \"valid\",\n  VALIDATION_STATUS_INVALID = \"invalid\",\n  VALIDATION_STATUS_PENDING = \"pending\";\nvar Validator = _dom_component2.default.inherit({\n  _initOptions: function _initOptions(options) {\n    this.callBase.apply(this, arguments);\n    this._initValidationOptions(options);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      validationRules: []\n    });\n  },\n  _init: function _init() {\n    this.callBase();\n    this._initGroupRegistration();\n    this.focused = (0, _callbacks2.default)();\n    this._initAdapter();\n    this._validationInfo = {\n      result: null,\n      deferred: null\n    };\n  },\n  _initGroupRegistration: function _initGroupRegistration() {\n    var group = this._findGroup();\n    if (!this._groupWasInit) {\n      this.on(\"disposing\", function (args) {\n        _validation_engine2.default.removeRegisteredValidator(args.component._validationGroup, args.component);\n      });\n    }\n    if (!this._groupWasInit || this._validationGroup !== group) {\n      _validation_engine2.default.removeRegisteredValidator(this._validationGroup, this);\n      this._groupWasInit = true;\n      this._validationGroup = group;\n      _validation_engine2.default.registerValidatorInGroup(group, this);\n    }\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    (0, _extend.extend)(this._optionsByReference, {\n      validationGroup: true\n    });\n  },\n  _initAdapter: function _initAdapter() {\n    var _this = this;\n    var element = this.$element()[0],\n      dxStandardEditor = _element_data2.default.data(element, \"dx-validation-target\");\n    var adapter = this.option(\"adapter\");\n    if (!adapter) {\n      if (dxStandardEditor) {\n        adapter = new _default_adapter2.default(dxStandardEditor, this);\n        adapter.validationRequestsCallbacks.add(function (args) {\n          _this.validate(args);\n        });\n        this.option(\"adapter\", adapter);\n        return;\n      }\n      throw _ui2.default.Error(\"E0120\");\n    }\n    var callbacks = adapter.validationRequestsCallbacks;\n    if (callbacks) {\n      if (Array.isArray(callbacks)) {\n        callbacks.push(function (args) {\n          _this.validate(args);\n        });\n      } else {\n        _ui2.default.log(\"W0014\", \"validationRequestsCallbacks\", \"jQuery.Callbacks\", \"17.2\", \"Use the array instead\");\n        callbacks.add(function (args) {\n          _this.validate(args);\n        });\n      }\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(VALIDATOR_CLASS);\n    this.callBase();\n  },\n  _visibilityChanged: function _visibilityChanged(visible) {\n    if (visible) {\n      this._initGroupRegistration();\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"validationGroup\":\n        this._initGroupRegistration();\n        return;\n      case \"validationRules\":\n        this._resetValidationRules();\n        void 0 !== this.option(\"isValid\") && this.validate();\n        return;\n      case \"adapter\":\n        this._initAdapter();\n        break;\n      case \"isValid\":\n      case \"validationStatus\":\n        this._synchronizeValidationOptions(args);\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _getValidationRules: function _getValidationRules() {\n    var _this2 = this;\n    if (!this._validationRules) {\n      this._validationRules = (0, _iterator.map)(this.option(\"validationRules\"), function (rule, index) {\n        return (0, _extend.extend)({}, rule, {\n          validator: _this2,\n          index: index\n        });\n      });\n    }\n    return this._validationRules;\n  },\n  _resetValidationRules: function _resetValidationRules() {\n    delete this._validationRules;\n  },\n  validate: function validate(args) {\n    var _this3 = this;\n    var adapter = this.option(\"adapter\"),\n      name = this.option(\"name\"),\n      bypass = adapter.bypass && adapter.bypass(),\n      value = args && void 0 !== args.value ? args.value : adapter.getValue(),\n      currentError = adapter.getCurrentValidationError && adapter.getCurrentValidationError(),\n      rules = this._getValidationRules();\n    var currentResult = this._validationInfo && this._validationInfo.result;\n    if (currentResult && currentResult.status === VALIDATION_STATUS_PENDING && currentResult.value === value) {\n      return currentResult;\n    }\n    var result = void 0;\n    if (bypass) {\n      result = {\n        isValid: true,\n        status: VALIDATION_STATUS_VALID\n      };\n    } else {\n      if (currentError && currentError.editorSpecific) {\n        currentError.validator = this;\n        result = {\n          isValid: false,\n          status: VALIDATION_STATUS_INVALID,\n          brokenRule: currentError,\n          brokenRules: [currentError]\n        };\n      } else {\n        result = _validation_engine2.default.validate(value, rules, name);\n      }\n    }\n    result.id = new _guid2.default().toString();\n    this._applyValidationResult(result, adapter);\n    result.complete && result.complete.then(function (res) {\n      if (res.id === _this3._validationInfo.result.id) {\n        _this3._applyValidationResult(res, adapter);\n      }\n    });\n    return this._validationInfo.result;\n  },\n  reset: function reset() {\n    var adapter = this.option(\"adapter\"),\n      result = {\n        isValid: true,\n        brokenRule: null,\n        brokenRules: null,\n        pendingRules: null,\n        status: VALIDATION_STATUS_VALID,\n        complete: null\n      };\n    adapter.reset();\n    this._resetValidationRules();\n    this._applyValidationResult(result, adapter);\n  },\n  _updateValidationResult: function _updateValidationResult(result) {\n    if (!this._validationInfo.result || this._validationInfo.result.id !== result.id) {\n      this._validationInfo.result = (0, _extend.extend)({}, result);\n    } else {\n      for (var prop in result) {\n        if (\"id\" !== prop && \"complete\" !== prop) {\n          this._validationInfo.result[prop] = result[prop];\n        }\n      }\n    }\n  },\n  _applyValidationResult: function _applyValidationResult(result, adapter) {\n    var validatedAction = this._createActionByOption(\"onValidated\");\n    result.validator = this;\n    this._updateValidationResult(result);\n    adapter.applyValidationResults && adapter.applyValidationResults(this._validationInfo.result);\n    this.option({\n      validationStatus: this._validationInfo.result.status\n    });\n    if (this._validationInfo.result.status === VALIDATION_STATUS_PENDING) {\n      if (!this._validationInfo.deferred) {\n        this._validationInfo.deferred = new _deferred.Deferred();\n        this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n      }\n      this.fireEvent(\"validating\", [this._validationInfo.result]);\n      return;\n    }\n    if (this._validationInfo.result.status !== VALIDATION_STATUS_PENDING) {\n      validatedAction(result);\n      if (this._validationInfo.deferred) {\n        this._validationInfo.deferred.resolve(result);\n        this._validationInfo.deferred = null;\n      }\n    }\n  },\n  focus: function focus() {\n    var adapter = this.option(\"adapter\");\n    adapter && adapter.focus && adapter.focus();\n  }\n}).include(_validation_mixin2.default);\n(0, _component_registrator2.default)(\"dxValidator\", Validator);\nmodule.exports = Validator;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}