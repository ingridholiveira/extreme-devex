{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.base.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _dom_adapter = require(\"../../core/dom_adapter\");\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _dom = require(\"../../core/utils/dom\");\nvar _dom2 = _interopRequireDefault(_dom);\nvar _selectors = require(\"../widget/selectors\");\nvar _type = require(\"../../core/utils/type\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _array = require(\"../../core/utils/array\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _themes = require(\"../themes\");\nvar _themes2 = _interopRequireDefault(_themes);\nvar _editor = require(\"../editor/editor\");\nvar _editor2 = _interopRequireDefault(_editor);\nvar _utils = require(\"../../events/utils\");\nvar _utils2 = _interopRequireDefault(_utils);\nvar _pointer = require(\"../../events/pointer\");\nvar _pointer2 = _interopRequireDefault(_pointer);\nvar _uiText_editor = require(\"./ui.text_editor.clear\");\nvar _uiText_editor2 = _interopRequireDefault(_uiText_editor);\nvar _index = require(\"./texteditor_button_collection/index\");\nvar _index2 = _interopRequireDefault(_index);\nvar _config = require(\"../../core/config\");\nvar _config2 = _interopRequireDefault(_config);\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _deferred = require(\"../../core/utils/deferred\");\nvar _load_indicator = require(\"../load_indicator\");\nvar _load_indicator2 = _interopRequireDefault(_load_indicator);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar TEXTEDITOR_CLASS = \"dx-texteditor\",\n  TEXTEDITOR_INPUT_CONTAINER_CLASS = \"dx-texteditor-input-container\",\n  TEXTEDITOR_INPUT_CLASS = \"dx-texteditor-input\",\n  TEXTEDITOR_INPUT_SELECTOR = \".\" + TEXTEDITOR_INPUT_CLASS,\n  TEXTEDITOR_CONTAINER_CLASS = \"dx-texteditor-container\",\n  TEXTEDITOR_BUTTONS_CONTAINER_CLASS = \"dx-texteditor-buttons-container\",\n  TEXTEDITOR_PLACEHOLDER_CLASS = \"dx-placeholder\",\n  TEXTEDITOR_EMPTY_INPUT_CLASS = \"dx-texteditor-empty\",\n  TEXTEDITOR_STYLING_MODE_PREFIX = \"dx-editor-\",\n  ALLOWED_STYLE_CLASSES = [TEXTEDITOR_STYLING_MODE_PREFIX + \"outlined\", TEXTEDITOR_STYLING_MODE_PREFIX + \"filled\", TEXTEDITOR_STYLING_MODE_PREFIX + \"underlined\"],\n  STATE_INVISIBLE_CLASS = \"dx-state-invisible\",\n  TEXTEDITOR_PENDING_INDICATOR_CLASS = \"dx-pending-indicator\",\n  TEXTEDITOR_VALIDATION_PENDING_CLASS = \"dx-validation-pending\",\n  TEXTEDITOR_VALID_CLASS = \"dx-valid\";\nvar EVENTS_LIST = [\"KeyDown\", \"KeyPress\", \"KeyUp\", \"Change\", \"Cut\", \"Copy\", \"Paste\", \"Input\"];\nvar CONTROL_KEYS = [\"tab\", \"enter\", \"shift\", \"control\", \"alt\", \"escape\", \"pageUp\", \"pageDown\", \"end\", \"home\", \"leftArrow\", \"upArrow\", \"rightArrow\", \"downArrow\"];\nfunction checkButtonsOptionType(buttons) {\n  if ((0, _type.isDefined)(buttons) && !Array.isArray(buttons)) {\n    throw _ui2.default.Error(\"E1053\");\n  }\n}\nvar TextEditorBase = _editor2.default.inherit({\n  ctor: function ctor(_, options) {\n    if (options) {\n      checkButtonsOptionType(options.buttons);\n    }\n    this._buttonCollection = new _index2.default(this, this._getDefaultButtons());\n    this._$beforeButtonsContainer = null;\n    this._$afterButtonsContainer = null;\n    this.callBase.apply(this, arguments);\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      buttons: void 0,\n      value: \"\",\n      spellcheck: false,\n      showClearButton: false,\n      valueChangeEvent: \"change\",\n      placeholder: \"\",\n      inputAttr: {},\n      onFocusIn: null,\n      onFocusOut: null,\n      onKeyDown: null,\n      onKeyPress: null,\n      onKeyUp: null,\n      onChange: null,\n      onInput: null,\n      onCut: null,\n      onCopy: null,\n      onPaste: null,\n      onEnterKey: null,\n      mode: \"text\",\n      hoverStateEnabled: true,\n      focusStateEnabled: true,\n      text: void 0,\n      displayValueFormatter: function displayValueFormatter(value) {\n        return (0, _type.isDefined)(value) && false !== value ? value : \"\";\n      },\n      stylingMode: (0, _config2.default)().editorStylingMode || \"outlined\"\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    var themeName = _themes2.default.current();\n    return this.callBase().concat([{\n      device: function device() {\n        return _themes2.default.isMaterial(themeName);\n      },\n      options: {\n        stylingMode: (0, _config2.default)().editorStylingMode || \"underlined\"\n      }\n    }]);\n  },\n  _getDefaultButtons: function _getDefaultButtons() {\n    return [{\n      name: \"clear\",\n      Ctor: _uiText_editor2.default\n    }];\n  },\n  _isClearButtonVisible: function _isClearButtonVisible() {\n    return this.option(\"showClearButton\") && !this.option(\"readOnly\");\n  },\n  _input: function _input() {\n    return this.$element().find(TEXTEDITOR_INPUT_SELECTOR).first();\n  },\n  _isFocused: function _isFocused() {\n    return (0, _selectors.focused)(this._input()) || this.callBase();\n  },\n  _inputWrapper: function _inputWrapper() {\n    return this.$element();\n  },\n  _buttonsContainer: function _buttonsContainer() {\n    return this._inputWrapper().find(\".\" + TEXTEDITOR_BUTTONS_CONTAINER_CLASS).eq(0);\n  },\n  _isControlKey: function _isControlKey(key) {\n    return CONTROL_KEYS.indexOf(key) !== -1;\n  },\n  _renderStylingMode: function _renderStylingMode() {\n    var _this = this;\n    var optionName = \"stylingMode\";\n    var optionValue = this.option(optionName);\n    ALLOWED_STYLE_CLASSES.forEach(function (className) {\n      return _this.$element().removeClass(className);\n    });\n    var stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + optionValue;\n    if (ALLOWED_STYLE_CLASSES.indexOf(stylingModeClass) === -1) {\n      var defaultOptionValue = this._getDefaultOptions()[optionName];\n      var platformOptionValue = this._convertRulesToOptions(this._defaultOptionsRules())[optionName];\n      stylingModeClass = TEXTEDITOR_STYLING_MODE_PREFIX + (platformOptionValue || defaultOptionValue);\n    }\n    this.$element().addClass(stylingModeClass);\n    this._updateButtonsStyling(optionValue);\n  },\n  _initMarkup: function _initMarkup() {\n    this.$element().addClass(TEXTEDITOR_CLASS);\n    this._renderInput();\n    this._renderStylingMode();\n    this._renderInputType();\n    this._renderPlaceholder();\n    this._renderProps();\n    this.callBase();\n    this._renderValue();\n  },\n  _render: function _render() {\n    this._renderPlaceholder();\n    this._refreshValueChangeEvent();\n    this._renderEvents();\n    this._renderEnterKeyAction();\n    this._renderEmptinessEvent();\n    this.callBase();\n  },\n  _renderInput: function _renderInput() {\n    this._$textEditorContainer = (0, _renderer2.default)(\"<div>\").addClass(TEXTEDITOR_CONTAINER_CLASS).appendTo(this.$element());\n    this._$textEditorInputContainer = (0, _renderer2.default)(\"<div>\").addClass(TEXTEDITOR_INPUT_CONTAINER_CLASS).appendTo(this._$textEditorContainer);\n    this._$textEditorInputContainer.append(this._createInput());\n    this._renderButtonContainers();\n  },\n  _getInputContainer: function _getInputContainer() {\n    return this._$textEditorInputContainer;\n  },\n  _renderPendingIndicator: function _renderPendingIndicator() {\n    this.$element().addClass(TEXTEDITOR_VALIDATION_PENDING_CLASS);\n    var $inputContainer = this._getInputContainer(),\n      $indicatorElement = (0, _renderer2.default)(\"<div>\").addClass(TEXTEDITOR_PENDING_INDICATOR_CLASS).appendTo($inputContainer);\n    this._pendingIndicator = this._createComponent($indicatorElement, _load_indicator2.default);\n  },\n  _disposePendingIndicator: function _disposePendingIndicator() {\n    if (!this._pendingIndicator) {\n      return;\n    }\n    this._pendingIndicator.dispose();\n    this._pendingIndicator.$element().remove();\n    this._pendingIndicator = null;\n    this.$element().removeClass(TEXTEDITOR_VALIDATION_PENDING_CLASS);\n  },\n  _renderValidationState: function _renderValidationState() {\n    this.callBase();\n    var isPending = \"pending\" === this.option(\"validationStatus\"),\n      $element = this.$element();\n    if (isPending) {\n      !this._pendingIndicator && this._renderPendingIndicator();\n      this._showValidMark = false;\n    } else {\n      if (\"invalid\" === this.option(\"validationStatus\")) {\n        this._showValidMark = false;\n      }\n      if (!this._showValidMark) {\n        this._showValidMark = \"valid\" === this.option(\"validationStatus\") && !!this._pendingIndicator;\n      }\n      this._disposePendingIndicator();\n    }\n    $element.toggleClass(TEXTEDITOR_VALID_CLASS, this._showValidMark);\n  },\n  _renderButtonContainers: function _renderButtonContainers() {\n    var buttons = this.option(\"buttons\");\n    this._$beforeButtonsContainer = this._buttonCollection.renderBeforeButtons(buttons, this._$textEditorContainer);\n    this._$afterButtonsContainer = this._buttonCollection.renderAfterButtons(buttons, this._$textEditorContainer);\n  },\n  _clean: function _clean() {\n    this._buttonCollection.clean();\n    this._disposePendingIndicator();\n    this._$beforeButtonsContainer = null;\n    this._$afterButtonsContainer = null;\n    this._$textEditorContainer = null;\n    this.callBase();\n  },\n  _createInput: function _createInput() {\n    var $input = (0, _renderer2.default)(\"<input>\");\n    this._applyInputAttributes($input, this.option(\"inputAttr\"));\n    return $input;\n  },\n  _setSubmitElementName: function _setSubmitElementName(name) {\n    var inputAttrName = this.option(\"inputAttr.name\");\n    return this.callBase(name || inputAttrName || \"\");\n  },\n  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {\n    $input.attr(\"autocomplete\", \"off\").attr(customAttributes).addClass(TEXTEDITOR_INPUT_CLASS).css(\"minHeight\", this.option(\"height\") ? \"0\" : \"\");\n  },\n  _updateButtons: function _updateButtons(names) {\n    this._buttonCollection.updateButtons(names);\n  },\n  _updateButtonsStyling: function _updateButtonsStyling(editorStylingMode) {\n    var that = this;\n    (0, _iterator.each)(this.option(\"buttons\"), function (_, buttonOptions) {\n      if (buttonOptions.options && !buttonOptions.options.stylingMode) {\n        var buttonInstance = that.getButton(buttonOptions.name);\n        buttonInstance.option && buttonInstance.option(\"stylingMode\", \"underlined\" === editorStylingMode ? \"text\" : \"contained\");\n      }\n    });\n  },\n  _renderValue: function _renderValue() {\n    var renderInputPromise = this._renderInputValue();\n    return renderInputPromise.promise();\n  },\n  _renderInputValue: function _renderInputValue(value) {\n    value = value || this.option(\"value\");\n    var text = this.option(\"text\"),\n      displayValue = this.option(\"displayValue\"),\n      displayValueFormatter = this.option(\"displayValueFormatter\");\n    if (void 0 !== displayValue && null !== value) {\n      text = displayValueFormatter(displayValue);\n    } else {\n      if (!(0, _type.isDefined)(text)) {\n        text = displayValueFormatter(value);\n      }\n    }\n    this.option(\"text\", text);\n    if (this._input().val() !== ((0, _type.isDefined)(text) ? text : \"\")) {\n      this._renderDisplayText(text);\n    } else {\n      this._toggleEmptinessEventHandler();\n    }\n    return new _deferred.Deferred().resolve();\n  },\n  _renderDisplayText: function _renderDisplayText(text) {\n    this._input().val(text);\n    this._toggleEmptinessEventHandler();\n  },\n  _isValueValid: function _isValueValid() {\n    if (this._input().length) {\n      var validity = this._input().get(0).validity;\n      if (validity) {\n        return validity.valid;\n      }\n    }\n    return true;\n  },\n  _toggleEmptiness: function _toggleEmptiness(isEmpty) {\n    this.$element().toggleClass(TEXTEDITOR_EMPTY_INPUT_CLASS, isEmpty);\n    this._togglePlaceholder(isEmpty);\n  },\n  _togglePlaceholder: function _togglePlaceholder(isEmpty) {\n    if (!this._$placeholder) {\n      return;\n    }\n    this._$placeholder.toggleClass(STATE_INVISIBLE_CLASS, !isEmpty);\n  },\n  _renderProps: function _renderProps() {\n    this._toggleReadOnlyState();\n    this._toggleSpellcheckState();\n    this._toggleTabIndex();\n  },\n  _toggleDisabledState: function _toggleDisabledState(value) {\n    this.callBase.apply(this, arguments);\n    var $input = this._input();\n    if (value) {\n      $input.attr(\"disabled\", true);\n    } else {\n      $input.removeAttr(\"disabled\");\n    }\n  },\n  _toggleTabIndex: function _toggleTabIndex() {\n    var $input = this._input(),\n      disabled = this.option(\"disabled\"),\n      focusStateEnabled = this.option(\"focusStateEnabled\");\n    if (disabled || !focusStateEnabled) {\n      $input.attr(\"tabIndex\", -1);\n    } else {\n      $input.removeAttr(\"tabIndex\");\n    }\n  },\n  _toggleReadOnlyState: function _toggleReadOnlyState() {\n    this._input().prop(\"readOnly\", this._readOnlyPropValue());\n    this.callBase();\n  },\n  _readOnlyPropValue: function _readOnlyPropValue() {\n    return this.option(\"readOnly\");\n  },\n  _toggleSpellcheckState: function _toggleSpellcheckState() {\n    this._input().prop(\"spellcheck\", this.option(\"spellcheck\"));\n  },\n  _renderPlaceholder: function _renderPlaceholder() {\n    this._renderPlaceholderMarkup();\n    this._attachPlaceholderEvents();\n  },\n  _renderPlaceholderMarkup: function _renderPlaceholderMarkup() {\n    if (this._$placeholder) {\n      this._$placeholder.remove();\n      this._$placeholder = null;\n    }\n    var $input = this._input(),\n      placeholderText = this.option(\"placeholder\"),\n      $placeholder = this._$placeholder = (0, _renderer2.default)(\"<div>\").attr(\"data-dx_placeholder\", placeholderText);\n    $placeholder.insertAfter($input);\n    $placeholder.addClass(TEXTEDITOR_PLACEHOLDER_CLASS);\n  },\n  _attachPlaceholderEvents: function _attachPlaceholderEvents() {\n    var that = this,\n      startEvent = _utils2.default.addNamespace(_pointer2.default.up, that.NAME);\n    _events_engine2.default.on(that._$placeholder, startEvent, function () {\n      _events_engine2.default.trigger(that._input(), \"focus\");\n    });\n    that._toggleEmptinessEventHandler();\n  },\n  _placeholder: function _placeholder() {\n    return this._$placeholder || (0, _renderer2.default)();\n  },\n  _clearValueHandler: function _clearValueHandler(e) {\n    var $input = this._input();\n    e.stopPropagation();\n    this._saveValueChangeEvent(e);\n    this.reset();\n    !this._isFocused() && _events_engine2.default.trigger($input, \"focus\");\n    _events_engine2.default.trigger($input, \"input\");\n  },\n  _renderEvents: function _renderEvents() {\n    var that = this,\n      $input = that._input();\n    (0, _iterator.each)(EVENTS_LIST, function (_, event) {\n      if (that.hasActionSubscription(\"on\" + event)) {\n        var action = that._createActionByOption(\"on\" + event, {\n          excludeValidators: [\"readOnly\"]\n        });\n        _events_engine2.default.on($input, _utils2.default.addNamespace(event.toLowerCase(), that.NAME), function (e) {\n          if (that._disposed) {\n            return;\n          }\n          action({\n            event: e\n          });\n        });\n      }\n    });\n  },\n  _refreshEvents: function _refreshEvents() {\n    var that = this,\n      $input = this._input();\n    (0, _iterator.each)(EVENTS_LIST, function (_, event) {\n      _events_engine2.default.off($input, _utils2.default.addNamespace(event.toLowerCase(), that.NAME));\n    });\n    this._renderEvents();\n  },\n  _keyPressHandler: function _keyPressHandler() {\n    this.option(\"text\", this._input().val());\n  },\n  _renderValueChangeEvent: function _renderValueChangeEvent() {\n    var keyPressEvent = _utils2.default.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\"),\n      valueChangeEvent = _utils2.default.addNamespace(this.option(\"valueChangeEvent\"), this.NAME + \"ValueChange\");\n    _events_engine2.default.on(this._input(), keyPressEvent, this._keyPressHandler.bind(this));\n    _events_engine2.default.on(this._input(), valueChangeEvent, this._valueChangeEventHandler.bind(this));\n  },\n  _cleanValueChangeEvent: function _cleanValueChangeEvent() {\n    var eventNamespace = this.NAME + \"ValueChange\",\n      keyPressEvent = _utils2.default.addNamespace(this._renderValueEventName(), this.NAME + \"TextChange\");\n    _events_engine2.default.off(this._input(), \".\" + eventNamespace);\n    _events_engine2.default.off(this._input(), keyPressEvent);\n  },\n  _refreshValueChangeEvent: function _refreshValueChangeEvent() {\n    this._cleanValueChangeEvent();\n    this._renderValueChangeEvent();\n  },\n  _renderValueEventName: function _renderValueEventName() {\n    return \"input change keypress\";\n  },\n  _focusTarget: function _focusTarget() {\n    return this._input();\n  },\n  _focusEventTarget: function _focusEventTarget() {\n    return this.element();\n  },\n  _preventNestedFocusEvent: function _preventNestedFocusEvent(event) {\n    if (event.isDefaultPrevented()) {\n      return true;\n    }\n    var result = this._isNestedTarget(event.relatedTarget);\n    if (\"focusin\" === event.type) {\n      result = result && this._isNestedTarget(event.target);\n    }\n    result && event.preventDefault();\n    return result;\n  },\n  _isNestedTarget: function _isNestedTarget(target) {\n    return !!this.$element().find(target).length;\n  },\n  _focusClassTarget: function _focusClassTarget() {\n    return this.$element();\n  },\n  _focusInHandler: function _focusInHandler(event) {\n    this._preventNestedFocusEvent(event);\n    this.callBase.apply(this, arguments);\n  },\n  _focusOutHandler: function _focusOutHandler(event) {\n    this._preventNestedFocusEvent(event);\n    this.callBase.apply(this, arguments);\n  },\n  _toggleFocusClass: function _toggleFocusClass(isFocused, $element) {\n    this.callBase(isFocused, this._focusClassTarget($element));\n  },\n  _hasFocusClass: function _hasFocusClass(element) {\n    return this.callBase((0, _renderer2.default)(element || this.$element()));\n  },\n  _renderEmptinessEvent: function _renderEmptinessEvent() {\n    var $input = this._input();\n    _events_engine2.default.on($input, \"input blur\", this._toggleEmptinessEventHandler.bind(this));\n  },\n  _toggleEmptinessEventHandler: function _toggleEmptinessEventHandler() {\n    var text = this._input().val(),\n      isEmpty = (\"\" === text || null === text) && this._isValueValid();\n    this._toggleEmptiness(isEmpty);\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e, formattedValue) {\n    this._saveValueChangeEvent(e);\n    this.option(\"value\", arguments.length > 1 ? formattedValue : this._input().val());\n    this._saveValueChangeEvent(void 0);\n  },\n  _renderEnterKeyAction: function _renderEnterKeyAction() {\n    this._enterKeyAction = this._createActionByOption(\"onEnterKey\", {\n      excludeValidators: [\"readOnly\"]\n    });\n    _events_engine2.default.off(this._input(), \"keyup.onEnterKey.dxTextEditor\");\n    _events_engine2.default.on(this._input(), \"keyup.onEnterKey.dxTextEditor\", this._enterKeyHandlerUp.bind(this));\n  },\n  _enterKeyHandlerUp: function _enterKeyHandlerUp(e) {\n    if (this._disposed) {\n      return;\n    }\n    if (\"enter\" === _utils2.default.normalizeKeyName(e)) {\n      this._enterKeyAction({\n        event: e\n      });\n    }\n  },\n  _updateValue: function _updateValue() {\n    this.option(\"text\", void 0);\n    this._renderValue();\n  },\n  _dispose: function _dispose() {\n    this._enterKeyAction = void 0;\n    this.callBase();\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._input();\n  },\n  _optionChanged: function _optionChanged(args) {\n    var name = args.name;\n    if ((0, _array.inArray)(name.replace(\"on\", \"\"), EVENTS_LIST) > -1) {\n      this._refreshEvents();\n      return;\n    }\n    switch (name) {\n      case \"valueChangeEvent\":\n        this._refreshValueChangeEvent();\n        this._refreshFocusEvent();\n        this._refreshEvents();\n        break;\n      case \"onValueChanged\":\n        this._createValueChangeAction();\n        break;\n      case \"focusStateEnabled\":\n        this.callBase(args);\n        this._toggleTabIndex();\n        break;\n      case \"spellcheck\":\n        this._toggleSpellcheckState();\n        break;\n      case \"mode\":\n        this._renderInputType();\n        break;\n      case \"onEnterKey\":\n        this._renderEnterKeyAction();\n        break;\n      case \"placeholder\":\n        this._renderPlaceholder();\n        break;\n      case \"readOnly\":\n      case \"disabled\":\n        this._updateButtons();\n        this.callBase(args);\n        break;\n      case \"showClearButton\":\n        this._updateButtons([\"clear\"]);\n        break;\n      case \"text\":\n        break;\n      case \"value\":\n        this._updateValue();\n        this.callBase(args);\n        break;\n      case \"inputAttr\":\n        this._applyInputAttributes(this._input(), args.value);\n        break;\n      case \"stylingMode\":\n        this._renderStylingMode();\n        break;\n      case \"buttons\":\n        if (args.fullName === args.name) {\n          checkButtonsOptionType(args.value);\n        }\n        this._$beforeButtonsContainer && this._$beforeButtonsContainer.remove();\n        this._$afterButtonsContainer && this._$afterButtonsContainer.remove();\n        this._buttonCollection.clean();\n        this._renderButtonContainers();\n        break;\n      case \"displayValueFormatter\":\n        this._invalidate();\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _renderInputType: function _renderInputType() {\n    this._setInputType(this.option(\"mode\"));\n  },\n  _setInputType: function _setInputType(type) {\n    var input = this._input();\n    if (\"search\" === type) {\n      type = \"text\";\n    }\n    try {\n      input.prop(\"type\", type);\n    } catch (e) {\n      input.prop(\"type\", \"text\");\n    }\n  },\n  getButton: function getButton(name) {\n    return this._buttonCollection.getButton(name);\n  },\n  focus: function focus() {\n    _events_engine2.default.trigger(this._input(), \"focus\");\n  },\n  blur: function blur() {\n    if (this._input().is(_dom_adapter2.default.getActiveElement())) {\n      _dom2.default.resetActiveElement();\n    }\n  },\n  reset: function reset() {\n    var defaultOptions = this._getDefaultOptions();\n    if (this.option(\"value\") === defaultOptions.value) {\n      this.option(\"text\", \"\");\n      this._renderValue();\n    } else {\n      this.option(\"value\", defaultOptions.value);\n    }\n  },\n  on: function on(eventName, eventHandler) {\n    var result = this.callBase(eventName, eventHandler),\n      event = eventName.charAt(0).toUpperCase() + eventName.substr(1);\n    if (EVENTS_LIST.indexOf(event) >= 0) {\n      this._refreshEvents();\n    }\n    return result;\n  }\n});\nmodule.exports = TextEditorBase;","map":null,"metadata":{},"sourceType":"script"}