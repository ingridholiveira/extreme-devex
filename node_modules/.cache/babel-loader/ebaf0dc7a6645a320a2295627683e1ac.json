{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar eventsEngine = require(\"../../events/core/events_engine\"),\n  extend = require(\"../../core/utils/extend\").extend,\n  isNumeric = require(\"../../core/utils/type\").isNumeric,\n  browser = require(\"../../core/utils/browser\"),\n  devices = require(\"../../core/devices\"),\n  fitIntoRange = require(\"../../core/utils/math\").fitIntoRange,\n  inRange = require(\"../../core/utils/math\").inRange,\n  escapeRegExp = require(\"../../core/utils/common\").escapeRegExp,\n  number = require(\"../../localization/number\"),\n  maskCaret = require(\"./number_box.caret\"),\n  getLDMLFormat = require(\"../../localization/ldml/number\").getFormat,\n  NumberBoxBase = require(\"./number_box.base\"),\n  eventUtils = require(\"../../events/utils\"),\n  typeUtils = require(\"../../core/utils/type\");\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\",\n  MOVE_FORWARD = 1,\n  MOVE_BACKWARD = -1,\n  MINUS = \"-\",\n  MINUS_KEY = \"minus\",\n  NUMPUD_MINUS_KEY_IE = \"Subtract\",\n  INPUT_EVENT = \"input\";\nvar CARET_TIMEOUT_DURATION = browser.msie ? 300 : 0;\nvar ensureDefined = function ensureDefined(value, defaultValue) {\n  return void 0 === value ? defaultValue : value;\n};\nvar NumberBoxMask = NumberBoxBase.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      useMaskBehavior: true,\n      format: null\n    });\n  },\n  _isDeleteKey: function _isDeleteKey(key) {\n    return \"del\" === key;\n  },\n  _supportedKeys: function _supportedKeys() {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n    var that = this;\n    return extend(this.callBase(), {\n      minus: that._revertSign.bind(that),\n      del: that._removeHandler.bind(that),\n      backspace: that._removeHandler.bind(that),\n      leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\n      rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\n      home: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_FORWARD),\n      enter: that._updateFormattedValue.bind(that),\n      end: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_BACKWARD)\n    });\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this.clearCaretTimeout();\n      this._caretTimeout = setTimeout(function () {\n        this._caretTimeout = null;\n        var caret = this._caret();\n        if (caret.start === caret.end && this._useMaskBehavior()) {\n          var text = this._getInputVal(),\n            decimalSeparator = number.getDecimalSeparator(),\n            decimalSeparatorIndex = text.indexOf(decimalSeparator);\n          if (decimalSeparatorIndex >= 0) {\n            this._caret({\n              start: decimalSeparatorIndex,\n              end: decimalSeparatorIndex\n            });\n          } else {\n            this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e);\n          }\n        }\n      }.bind(this), CARET_TIMEOUT_DURATION);\n    }\n    this.callBase(e);\n  },\n  _focusOutHandler: function _focusOutHandler(e) {\n    var shouldHandleEvent = !this._preventNestedFocusEvent(e);\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = true;\n      if (this._useMaskBehavior()) {\n        this._updateFormattedValue();\n      }\n    }\n    this.callBase(e);\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = false;\n    }\n  },\n  _hasValueBeenChanged: function _hasValueBeenChanged(inputValue) {\n    var format = this._getFormatPattern(),\n      value = this.option(\"value\"),\n      formatted = this._format(value, format) || \"\";\n    return formatted !== inputValue;\n  },\n  _updateFormattedValue: function _updateFormattedValue() {\n    var inputValue = this._getInputVal();\n    if (this._hasValueBeenChanged(inputValue)) {\n      this._parsedValue = this._tryParse(inputValue, this._caret());\n      this._adjustParsedValue();\n      this._setTextByParsedValue();\n      if (this._parsedValue !== this.option(\"value\")) {\n        eventsEngine.trigger(this._input(), \"change\");\n      }\n    }\n  },\n  _arrowHandler: function _arrowHandler(step, e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    var text = this._getInputVal(),\n      format = this._getFormatPattern(),\n      nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\n    if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\n      nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\n      e.preventDefault();\n      this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format));\n    }\n  },\n  _moveCaretToBoundary: function _moveCaretToBoundary(direction) {\n    var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern()),\n      newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\n    this._caret(newCaret);\n  },\n  _moveCaretToBoundaryEventHandler: function _moveCaretToBoundaryEventHandler(direction, e) {\n    if (!this._useMaskBehavior() || e && e.shiftKey) {\n      return;\n    }\n    this._moveCaretToBoundary(direction);\n    e && e.preventDefault();\n  },\n  _shouldMoveCaret: function _shouldMoveCaret(text, caret) {\n    var decimalSeparator = number.getDecimalSeparator(),\n      isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator,\n      isZeroNext = \"0\" === text.charAt(caret.end),\n      moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey) && isDecimalSeparatorNext,\n      zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\n    return moveToFloat || zeroToZeroReplace;\n  },\n  _getInputVal: function _getInputVal() {\n    return number.convertDigits(this._input().val(), true);\n  },\n  _keyboardHandler: function _keyboardHandler(e) {\n    this.clearCaretTimeout();\n    this._lastKey = number.convertDigits(eventUtils.getChar(e), true);\n    this._lastKeyName = eventUtils.normalizeKeyName(e);\n    if (!this._shouldHandleKey(e.originalEvent)) {\n      return this.callBase(e);\n    }\n    var normalizedText = this._getInputVal(),\n      caret = this._caret();\n    var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey,\n      newValue = this._tryParse(normalizedText, caret, enteredChar);\n    if (void 0 === newValue) {\n      if (this._lastKeyName !== MINUS_KEY) {\n        e.originalEvent.preventDefault();\n      }\n      if (this._shouldMoveCaret(normalizedText, caret)) {\n        this._moveCaret(1);\n      }\n    } else {\n      this._parsedValue = newValue;\n    }\n    return this.callBase(e);\n  },\n  _keyPressHandler: function _keyPressHandler(e) {\n    if (!this._useMaskBehavior()) {\n      this.callBase(e);\n    }\n  },\n  _removeHandler: function _removeHandler(e) {\n    var caret = this._caret(),\n      text = this._getInputVal(),\n      start = caret.start,\n      end = caret.end;\n    this._lastKey = eventUtils.getChar(e);\n    this._lastKeyName = eventUtils.normalizeKeyName(e);\n    var isDeleteKey = this._isDeleteKey(this._lastKeyName);\n    var isBackspaceKey = !isDeleteKey;\n    if (start === end) {\n      var caretPosition = start;\n      var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\n      if (canDelete) {\n        isDeleteKey && end++;\n        isBackspaceKey && start--;\n      } else {\n        e.preventDefault();\n        return;\n      }\n    }\n    var char = text.slice(start, end);\n    if (this._isStub(char)) {\n      this._moveCaret(isDeleteKey ? 1 : -1);\n      if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\n        this._revertSign(e);\n        this._setTextByParsedValue();\n      }\n      e.preventDefault();\n      return;\n    }\n    var decimalSeparator = number.getDecimalSeparator();\n    if (char === decimalSeparator) {\n      var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n      if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\n        this._moveCaret(isDeleteKey ? 1 : -1);\n        e.preventDefault();\n      }\n      return;\n    }\n    if (end - start < text.length) {\n      var editedText = this._replaceSelectedText(text, {\n          start: start,\n          end: end\n        }, \"\"),\n        noDigits = editedText.search(/[0-9]/) < 0;\n      if (noDigits && this._isValueInRange(0)) {\n        this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\n        return;\n      }\n    }\n    var valueAfterRemoving = this._tryParse(text, {\n      start: start,\n      end: end\n    }, \"\");\n    if (void 0 === valueAfterRemoving) {\n      e.preventDefault();\n    } else {\n      this._parsedValue = valueAfterRemoving;\n    }\n  },\n  _isPercentFormat: function _isPercentFormat() {\n    var format = this._getFormatPattern(),\n      noEscapedFormat = format.replace(/'[^']+'/g, \"\");\n    return noEscapedFormat.indexOf(\"%\") !== -1;\n  },\n  _parse: function _parse(text, format) {\n    var formatOption = this.option(\"format\"),\n      isCustomParser = typeUtils.isFunction(formatOption.parser),\n      parser = isCustomParser ? formatOption.parser : number.parse;\n    return parser(text, format);\n  },\n  _format: function _format(value, format) {\n    var formatOption = this.option(\"format\"),\n      isCustomFormatter = typeUtils.isFunction(formatOption.formatter),\n      formatter = isCustomFormatter ? formatOption.formatter : number.format;\n    return formatter(value, format);\n  },\n  _getFormatPattern: function _getFormatPattern() {\n    var format = this.option(\"format\"),\n      isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\n    if (isLDMLPattern) {\n      return format;\n    } else {\n      return getLDMLFormat(function (value) {\n        var text = this._format(value, format);\n        return number.convertDigits(text, true);\n      }.bind(this));\n    }\n  },\n  _getFormatForSign: function _getFormatForSign(text) {\n    var format = this._getFormatPattern(),\n      signParts = format.split(\";\"),\n      sign = number.getSign(text, format);\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\n    return sign < 0 ? signParts[1] : signParts[0];\n  },\n  _removeStubs: function _removeStubs(text, excludeComma) {\n    var format = this._getFormatForSign(text),\n      thousandsSeparator = number.getThousandsSeparator(),\n      stubs = format.replace(/[#0.,]/g, \"\"),\n      regExp = new RegExp(\"[-\" + escapeRegExp((excludeComma ? \"\" : thousandsSeparator) + stubs) + \"]\", \"g\");\n    return text.replace(regExp, \"\");\n  },\n  _truncateToPrecision: function _truncateToPrecision(value, maxPrecision) {\n    if (typeUtils.isDefined(value)) {\n      var strValue = value.toString(),\n        decimalSeparatorIndex = strValue.indexOf(\".\");\n      if (strValue && decimalSeparatorIndex > -1) {\n        var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\n        return isNaN(parsedValue) ? value : parsedValue;\n      }\n    }\n    return value;\n  },\n  _tryParse: function _tryParse(text, selection, char) {\n    var editedText = this._replaceSelectedText(text, selection, char),\n      format = this._getFormatPattern(),\n      isTextSelected = selection.start !== selection.end,\n      parsed = this._parse(editedText, format),\n      maxPrecision = this._getPrecisionLimits(format, editedText).max,\n      isValueChanged = parsed !== this._parsedValue,\n      decimalSeparator = number.getDecimalSeparator();\n    var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision,\n      isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\n    if (isDecimalPointRestricted || isUselessCharRestricted) {\n      return;\n    }\n    if (\"\" === this._removeStubs(editedText)) {\n      parsed = 0 * this._parsedValue;\n    }\n    if (isNaN(parsed)) {\n      return;\n    }\n    var value = null === parsed ? this._parsedValue : parsed;\n    parsed = this._truncateToPrecision(value, maxPrecision);\n    return this._isPercentFormat() ? parsed && parsed / 100 : parsed;\n  },\n  _isValueIncomplete: function _isValueIncomplete(text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n    var caret = this._caret(),\n      point = number.getDecimalSeparator(),\n      pointIndex = text.indexOf(point),\n      isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start,\n      textParts = this._removeStubs(text, true).split(point);\n    if (!isCaretOnFloat || 2 !== textParts.length) {\n      return false;\n    }\n    var floatLength = textParts[1].length,\n      precision = this._getPrecisionLimits(this._getFormatPattern(), text),\n      isPrecisionInRange = inRange(floatLength, precision.min, precision.max),\n      endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\n    return isPrecisionInRange && (endsWithZero || !floatLength);\n  },\n  _isValueInRange: function _isValueInRange(value) {\n    var min = ensureDefined(this.option(\"min\"), -(1 / 0)),\n      max = ensureDefined(this.option(\"max\"), 1 / 0);\n    return inRange(value, min, max);\n  },\n  _setInputText: function _setInputText(text) {\n    var normalizedText = number.convertDigits(text, true),\n      newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\n    this._input().val(text);\n    this._toggleEmptinessEventHandler();\n    this._formattedValue = text;\n    if (!this._focusOutOccurs) {\n      this._caret(newCaret);\n    }\n  },\n  _useMaskBehavior: function _useMaskBehavior() {\n    return !!this.option(\"format\") && this.option(\"useMaskBehavior\");\n  },\n  _renderInputType: function _renderInputType() {\n    var isNumberType = \"number\" === this.option(\"mode\"),\n      isDesktop = \"desktop\" === devices.real().deviceType;\n    if (this._useMaskBehavior() && isNumberType) {\n      this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\");\n    } else {\n      this.callBase();\n    }\n  },\n  _isChar: function _isChar(str) {\n    return \"string\" === typeof str && 1 === str.length;\n  },\n  _moveCaret: function _moveCaret(offset) {\n    if (!offset) {\n      return;\n    }\n    var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset),\n      adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\n    this._caret(adjustedCaret);\n  },\n  _shouldHandleKey: function _shouldHandleKey(e) {\n    var keyName = eventUtils.normalizeKeyName(e),\n      isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(keyName),\n      isMinusKey = keyName === MINUS_KEY,\n      useMaskBehavior = this._useMaskBehavior();\n    return useMaskBehavior && !isSpecialChar && !isMinusKey;\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n    this._renderFormatter();\n  },\n  _renderFormatter: function _renderFormatter() {\n    this._clearCache();\n    this._detachFormatterEvents();\n    if (this._useMaskBehavior()) {\n      this._attachFormatterEvents();\n    }\n  },\n  _detachFormatterEvents: function _detachFormatterEvents() {\n    eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE);\n  },\n  _isInputFromPaste: function _isInputFromPaste(e) {\n    var inputType = e.originalEvent && e.originalEvent.inputType;\n    if (typeUtils.isDefined(inputType)) {\n      return \"insertFromPaste\" === inputType;\n    } else {\n      return this._isValuePasted;\n    }\n  },\n  _attachFormatterEvents: function _attachFormatterEvents() {\n    var $input = this._input();\n    eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function (e) {\n      this._formatValue(e);\n      this._isValuePasted = false;\n    }.bind(this));\n    if (browser.msie && browser.version < 12) {\n      eventsEngine.on($input, eventUtils.addNamespace(\"paste\", NUMBER_FORMATTER_NAMESPACE), function () {\n        this._isValuePasted = true;\n      }.bind(this));\n    }\n    eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function () {\n      if (!this._caretTimeout) {\n        this._caretTimeout = setTimeout(function () {\n          this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()));\n        }.bind(this), CARET_TIMEOUT_DURATION);\n      }\n    }.bind(this));\n    eventsEngine.on($input, \"dxdblclick\", function () {\n      this.clearCaretTimeout();\n    }.bind(this));\n  },\n  clearCaretTimeout: function clearCaretTimeout() {\n    clearTimeout(this._caretTimeout);\n    this._caretTimeout = null;\n  },\n  _forceRefreshInputValue: function _forceRefreshInputValue() {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n  },\n  _isNonStubAfter: function _isNonStubAfter(index, text) {\n    text = (text || this._getInputVal()).slice(index);\n    return text && !this._isStub(text, true);\n  },\n  _isStub: function _isStub(str, isString) {\n    var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator()),\n      regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\",\n      stubRegExp = new RegExp(regExpString, \"g\");\n    return stubRegExp.test(str) && (isString || this._isChar(str));\n  },\n  _parseValue: function _parseValue(text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n    return this._parsedValue;\n  },\n  _getPrecisionLimits: function _getPrecisionLimits(text) {\n    var currentFormat = this._getFormatForSign(text),\n      floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\"),\n      minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length,\n      maxPrecision = floatPart.length;\n    return {\n      min: minPrecision,\n      max: maxPrecision\n    };\n  },\n  _revertSign: function _revertSign(e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    var caret = this._caret();\n    if (caret.start !== caret.end) {\n      if (eventUtils.normalizeKeyName(e) === MINUS_KEY) {\n        this._applyRevertedSign(e, caret, true);\n        return;\n      } else {\n        this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()));\n      }\n    }\n    this._applyRevertedSign(e, caret);\n  },\n  _applyRevertedSign: function _applyRevertedSign(e, caret, preserveSelectedText) {\n    var newValue = -1 * ensureDefined(this._parsedValue, null);\n    if (this._isValueInRange(newValue)) {\n      this._parsedValue = newValue;\n      if (preserveSelectedText) {\n        var format = this._getFormatPattern(),\n          previousText = this._getInputVal();\n        this._setTextByParsedValue();\n        e.preventDefault();\n        var currentText = this._getInputVal(),\n          offset = maskCaret.getCaretOffset(previousText, currentText, format);\n        caret = maskCaret.getCaretWithOffset(caret, offset);\n        var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\n        if (browser.msie) {\n          clearTimeout(this._caretTimeout);\n          this._caretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries));\n        } else {\n          this._caret(caretInBoundaries);\n        }\n      }\n      if (e.key === NUMPUD_MINUS_KEY_IE) {\n        eventsEngine.trigger(this._input(), INPUT_EVENT);\n      }\n    }\n  },\n  _removeMinusFromText: function _removeMinusFromText(text, caret) {\n    var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\n    return isMinusPressed ? this._replaceSelectedText(text, {\n      start: caret.start - 1,\n      end: caret.start\n    }, \"\") : text;\n  },\n  _setTextByParsedValue: function _setTextByParsedValue() {\n    var format = this._getFormatPattern(),\n      parsed = this._parseValue(),\n      formatted = this._format(parsed, format) || \"\";\n    this._setInputText(formatted);\n  },\n  _formatValue: function _formatValue(e) {\n    var normalizedText = this._getInputVal(),\n      caret = this._caret(),\n      textWithoutMinus = this._removeMinusFromText(normalizedText, caret),\n      wasMinusRemoved = textWithoutMinus !== normalizedText;\n    normalizedText = textWithoutMinus;\n    if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\n      this._formattedValue = normalizedText;\n      if (wasMinusRemoved) {\n        this._setTextByParsedValue();\n      }\n      return;\n    }\n    var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\n    if (textWasChanged) {\n      var value = this._tryParse(normalizedText, caret, \"\");\n      if (typeUtils.isDefined(value)) {\n        this._parsedValue = value;\n      }\n    }\n    this._setTextByParsedValue();\n  },\n  _renderDisplayText: function _renderDisplayText() {\n    if (this._useMaskBehavior()) {\n      this._toggleEmptinessEventHandler();\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (this._useMaskBehavior()) {\n      this._parsedValue = this.option(\"value\");\n      this._setTextByParsedValue();\n    }\n    return this.callBase();\n  },\n  _adjustParsedValue: function _adjustParsedValue() {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n    var clearedText = this._removeStubs(this._getInputVal()),\n      parsedValue = clearedText ? this._parseValue() : null;\n    if (!isNumeric(parsedValue)) {\n      this._parsedValue = parsedValue;\n      return;\n    }\n    this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"));\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(e);\n    }\n    var caret = this._caret();\n    this._saveValueChangeEvent(e);\n    this._lastKey = null;\n    this._lastKeyName = null;\n    this._adjustParsedValue();\n    this.option(\"value\", this._parsedValue);\n    if (caret) {\n      this._caret(caret);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"format\":\n      case \"useMaskBehavior\":\n        this._renderFormatter();\n        this._renderValue();\n        break;\n      case \"min\":\n      case \"max\":\n        this._adjustParsedValue();\n        this.callBase(args);\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _optionValuesEqual: function _optionValuesEqual(name, oldValue, newValue) {\n    if (\"value\" === name && 0 === oldValue && 0 === newValue) {\n      return 1 / oldValue === 1 / newValue;\n    }\n    return this.callBase.apply(this, arguments);\n  },\n  _clearCache: function _clearCache() {\n    delete this._formattedValue;\n    delete this._lastKey;\n    delete this._lastKeyName;\n    delete this._parsedValue;\n    delete this._focusOutOccurs;\n    clearTimeout(this._caretTimeout);\n    delete this._caretTimeout;\n  },\n  _clean: function _clean() {\n    this._clearCache();\n    this.callBase();\n  }\n});\nmodule.exports = NumberBoxMask;","map":null,"metadata":{},"sourceType":"script"}