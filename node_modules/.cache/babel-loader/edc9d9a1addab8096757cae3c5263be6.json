{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.state_storing.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _common = require(\"../../core/utils/common\");\nvar _type = require(\"../../core/utils/type\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _uiGrid_core = require(\"./ui.grid_core.state_storing_core\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _deferred = require(\"../../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar processLoadState = function processLoadState(that) {\n  var columnsController = that.getController(\"columns\"),\n    selectionController = that.getController(\"selection\"),\n    exportController = that.getController(\"export\"),\n    dataController = that.getController(\"data\"),\n    pagerView = that.getView(\"pagerView\");\n  if (columnsController) {\n    columnsController.columnsChanged.add(function () {\n      that.updateState({\n        columns: columnsController.getUserState()\n      });\n    });\n  }\n  if (selectionController) {\n    selectionController.selectionChanged.add(function (e) {\n      that.updateState({\n        selectedRowKeys: e.selectedRowKeys,\n        selectionFilter: e.selectionFilter\n      });\n    });\n  }\n  if (dataController) {\n    that._initialPageSize = that.option(\"paging.pageSize\");\n    dataController.changed.add(function () {\n      var state = (0, _extend.extend)({\n        allowedPageSizes: pagerView ? pagerView.getPageSizes() : void 0,\n        filterPanel: {\n          filterEnabled: that.option(\"filterPanel.filterEnabled\")\n        },\n        filterValue: that.option(\"filterValue\"),\n        focusedRowKey: that.option(\"focusedRowEnabled\") ? that.option(\"focusedRowKey\") : void 0\n      }, dataController.getUserState());\n      that.updateState(state);\n    });\n  }\n  if (exportController) {\n    exportController.selectionOnlyChanged.add(function () {\n      that.updateState({\n        exportSelectionOnly: exportController.selectionOnly()\n      });\n    });\n  }\n};\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      stateStoring: {\n        enabled: false,\n        storageKey: null,\n        type: \"localStorage\",\n        customLoad: null,\n        customSave: null,\n        savingTimeout: 2e3\n      }\n    };\n  },\n  controllers: {\n    stateStoring: _uiGrid_core2.default.StateStoringController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        init: function init() {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          dataController.stateLoaded.add(function () {\n            if (dataController.isLoaded() && !dataController.getDataSource()) {\n              that.setLoading(false);\n              that.renderNoDataText();\n              var columnHeadersView = that.component.getView(\"columnHeadersView\");\n              columnHeadersView && columnHeadersView.render();\n              that.component._fireContentReadyAction();\n            }\n          });\n        }\n      }\n    },\n    controllers: {\n      stateStoring: {\n        init: function init() {\n          this.callBase.apply(this, arguments);\n          processLoadState(this);\n        },\n        isLoading: function isLoading() {\n          return this.callBase() || this.getController(\"data\").isStateLoading();\n        },\n        state: function state(_state) {\n          var result = this.callBase.apply(this, arguments);\n          if (void 0 !== _state) {\n            this.applyState((0, _extend.extend)({}, _state));\n          }\n          return result;\n        },\n        updateState: function updateState(state) {\n          if (this.isEnabled()) {\n            var oldState = this.state(),\n              newState = (0, _extend.extend)({}, oldState, state),\n              oldStateHash = (0, _common.getKeyHash)(oldState),\n              newStateHash = (0, _common.getKeyHash)(newState);\n            if (!(0, _common.equalByValue)(oldStateHash, newStateHash)) {\n              (0, _extend.extend)(this._state, state);\n              this.save();\n            }\n          } else {\n            (0, _extend.extend)(this._state, state);\n          }\n        },\n        applyState: function applyState(state) {\n          var that = this,\n            allowedPageSizes = state.allowedPageSizes,\n            searchText = state.searchText,\n            selectedRowKeys = state.selectedRowKeys,\n            selectionFilter = state.selectionFilter,\n            exportController = that.getController(\"export\"),\n            columnsController = that.getController(\"columns\"),\n            dataController = that.getController(\"data\"),\n            filterSyncController = that.getController(\"filterSync\"),\n            scrollingMode = that.option(\"scrolling.mode\"),\n            isVirtualScrollingMode = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode,\n            showPageSizeSelector = true === that.option(\"pager.visible\") && that.option(\"pager.showPageSizeSelector\");\n          that.component.beginUpdate();\n          if (columnsController) {\n            columnsController.setUserState(state.columns);\n          }\n          if (exportController) {\n            exportController.selectionOnly(state.exportSelectionOnly);\n          }\n          if (selectedRowKeys) {\n            that.option(\"selectedRowKeys\", selectedRowKeys);\n          }\n          that.option(\"selectionFilter\", selectionFilter);\n          if (allowedPageSizes && \"auto\" === that.option(\"pager.allowedPageSizes\")) {\n            that.option(\"pager\").allowedPageSizes = allowedPageSizes;\n          }\n          if (that.option(\"focusedRowEnabled\")) {\n            that.option(\"focusedRowKey\", state.focusedRowKey);\n          }\n          that.component.endUpdate();\n          that.option(\"searchPanel.text\", searchText || \"\");\n          that.option(\"filterValue\", state.filterValue || (filterSyncController ? filterSyncController.getFilterValueFromColumns(state.columns) : null));\n          that.option(\"filterPanel.filterEnabled\", state.filterPanel ? state.filterPanel.filterEnabled : true);\n          that.option(\"paging.pageSize\", (!isVirtualScrollingMode || showPageSizeSelector) && (0, _type.isDefined)(state.pageSize) ? state.pageSize : that._initialPageSize);\n          that.option(\"paging.pageIndex\", state.pageIndex || 0);\n          dataController && dataController.reset();\n        }\n      },\n      columns: {\n        getVisibleColumns: function getVisibleColumns() {\n          var visibleColumns = this.callBase.apply(this, arguments),\n            stateStoringController = this.getController(\"stateStoring\");\n          return stateStoringController.isEnabled() && !stateStoringController.isLoaded() ? [] : visibleColumns;\n        }\n      },\n      data: {\n        callbackNames: function callbackNames() {\n          return this.callBase().concat([\"stateLoaded\"]);\n        },\n        _refreshDataSource: function _refreshDataSource() {\n          var that = this,\n            callBase = that.callBase,\n            stateStoringController = that.getController(\"stateStoring\");\n          if (stateStoringController.isEnabled() && !stateStoringController.isLoaded()) {\n            clearTimeout(that._restoreStateTimeoutID);\n            var deferred = new _deferred.Deferred();\n            that._restoreStateTimeoutID = setTimeout(function () {\n              stateStoringController.load().always(function () {\n                that._restoreStateTimeoutID = null;\n                callBase.call(that);\n                that.stateLoaded.fire();\n                deferred.resolve();\n              });\n            });\n            return deferred.promise();\n          } else {\n            if (!that.isStateLoading()) {\n              callBase.call(that);\n            }\n          }\n        },\n        isLoading: function isLoading() {\n          var that = this,\n            stateStoringController = that.getController(\"stateStoring\");\n          return this.callBase() || stateStoringController.isLoading();\n        },\n        isStateLoading: function isStateLoading() {\n          return (0, _type.isDefined)(this._restoreStateTimeoutID);\n        },\n        isLoaded: function isLoaded() {\n          return this.callBase() && !this.isStateLoading();\n        },\n        dispose: function dispose() {\n          clearTimeout(this._restoreStateTimeoutID);\n          this.callBase();\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}