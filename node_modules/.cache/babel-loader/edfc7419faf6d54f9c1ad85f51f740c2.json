{"ast":null,"code":"/**\r\n * DevExtreme (ui/dialog.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _component = require(\"../core/component\");\nvar _component2 = _interopRequireDefault(_component);\nvar _action = require(\"../core/action\");\nvar _action2 = _interopRequireDefault(_action);\nvar _devices = require(\"../core/devices\");\nvar _devices2 = _interopRequireDefault(_devices);\nvar _config = require(\"../core/config\");\nvar _config2 = _interopRequireDefault(_config);\nvar _dom = require(\"../core/utils/dom\");\nvar _deferred = require(\"../core/utils/deferred\");\nvar _type = require(\"../core/utils/type\");\nvar _iterator = require(\"../core/utils/iterator\");\nvar _extend = require(\"../core/utils/extend\");\nvar _window = require(\"../core/utils/window\");\nvar _events_engine = require(\"../events/core/events_engine\");\nvar _view_port = require(\"../core/utils/view_port\");\nvar _message = require(\"../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _ui = require(\"./widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _popup = require(\"./popup\");\nvar _popup2 = _interopRequireDefault(_popup);\nvar _common = require(\"../core/utils/common\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar window = (0, _window.getWindow)();\nvar DEFAULT_BUTTON = {\n  text: \"OK\",\n  onClick: function onClick() {\n    return true;\n  }\n};\nvar DX_DIALOG_CLASSNAME = \"dx-dialog\";\nvar DX_DIALOG_WRAPPER_CLASSNAME = DX_DIALOG_CLASSNAME + \"-wrapper\";\nvar DX_DIALOG_ROOT_CLASSNAME = DX_DIALOG_CLASSNAME + \"-root\";\nvar DX_DIALOG_CONTENT_CLASSNAME = DX_DIALOG_CLASSNAME + \"-content\";\nvar DX_DIALOG_MESSAGE_CLASSNAME = DX_DIALOG_CLASSNAME + \"-message\";\nvar DX_DIALOG_BUTTONS_CLASSNAME = DX_DIALOG_CLASSNAME + \"-buttons\";\nvar DX_DIALOG_BUTTON_CLASSNAME = DX_DIALOG_CLASSNAME + \"-button\";\nvar DX_BUTTON_CLASSNAME = \"dx-button\";\nvar FakeDialogComponent = _component2.default.inherit({\n  ctor: function ctor(element, options) {\n    this.callBase(options);\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: {\n        platform: \"ios\"\n      },\n      options: {\n        width: 276\n      }\n    }, {\n      device: {\n        platform: \"android\"\n      },\n      options: {\n        lWidth: \"60%\",\n        pWidth: \"80%\"\n      }\n    }]);\n  }\n});\nexports.FakeDialogComponent = FakeDialogComponent;\nexports.title = \"\";\nexports.custom = function (options) {\n  var deferred = new _deferred.Deferred();\n  var defaultOptions = new FakeDialogComponent().option();\n  options = (0, _extend.extend)(defaultOptions, options);\n  var $element = (0, _renderer2.default)(\"<div>\").addClass(DX_DIALOG_CLASSNAME).appendTo((0, _view_port.value)());\n  var isMessageDefined = (\"message\" in options);\n  var isMessageHtmlDefined = (\"messageHtml\" in options);\n  if (isMessageDefined) {\n    _ui2.default.log(\"W1013\");\n  }\n  var messageHtml = String(isMessageHtmlDefined ? options.messageHtml : options.message);\n  var $message = (0, _renderer2.default)(\"<div>\").addClass(DX_DIALOG_MESSAGE_CLASSNAME).html(messageHtml);\n  var popupToolbarItems = [];\n  var toolbarItemsOption = options.toolbarItems;\n  if (toolbarItemsOption) {\n    _ui2.default.log(\"W0001\", \"DevExpress.ui.dialog\", \"toolbarItems\", \"16.2\", \"Use the 'buttons' option instead\");\n  } else {\n    toolbarItemsOption = options.buttons;\n  }\n  (0, _iterator.each)(toolbarItemsOption || [DEFAULT_BUTTON], function () {\n    var action = new _action2.default(this.onClick, {\n      context: popupInstance\n    });\n    popupToolbarItems.push({\n      toolbar: \"bottom\",\n      location: _devices2.default.current().android ? \"after\" : \"center\",\n      widget: \"dxButton\",\n      options: (0, _extend.extend)({}, this, {\n        onClick: function onClick() {\n          var result = action.execute.apply(action, arguments);\n          hide(result);\n        }\n      })\n    });\n  });\n  var popupInstance = new _popup2.default($element, (0, _extend.extend)({\n    title: options.title || exports.title,\n    showTitle: (0, _common.ensureDefined)(options.showTitle, true),\n    dragEnabled: (0, _common.ensureDefined)(options.dragEnabled, true),\n    height: \"auto\",\n    width: function width() {\n      var isPortrait = (0, _renderer2.default)(window).height() > (0, _renderer2.default)(window).width(),\n        key = (isPortrait ? \"p\" : \"l\") + \"Width\",\n        widthOption = Object.prototype.hasOwnProperty.call(options, key) ? options[key] : options.width;\n      return (0, _type.isFunction)(widthOption) ? widthOption() : widthOption;\n    },\n    showCloseButton: options.showCloseButton || false,\n    ignoreChildEvents: false,\n    onContentReady: function onContentReady(args) {\n      args.component.$content().addClass(DX_DIALOG_CONTENT_CLASSNAME).append($message);\n    },\n    onShowing: function onShowing(e) {\n      e.component.bottomToolbar().addClass(DX_DIALOG_BUTTONS_CLASSNAME).find(\".\" + DX_BUTTON_CLASSNAME).addClass(DX_DIALOG_BUTTON_CLASSNAME);\n      (0, _dom.resetActiveElement)();\n    },\n    onShown: function onShown(e) {\n      var $firstButton = e.component.bottomToolbar().find(\".\" + DX_BUTTON_CLASSNAME).first();\n      (0, _events_engine.trigger)($firstButton, \"focus\");\n    },\n    onHiding: function onHiding() {\n      deferred.reject();\n    },\n    toolbarItems: popupToolbarItems,\n    animation: {\n      show: {\n        type: \"pop\",\n        duration: 400\n      },\n      hide: {\n        type: \"pop\",\n        duration: 400,\n        to: {\n          opacity: 0,\n          scale: 0\n        },\n        from: {\n          opacity: 1,\n          scale: 1\n        }\n      }\n    },\n    rtlEnabled: (0, _config2.default)().rtlEnabled,\n    boundaryOffset: {\n      h: 10,\n      v: 0\n    }\n  }, options.popupOptions));\n  popupInstance._wrapper().addClass(DX_DIALOG_WRAPPER_CLASSNAME);\n  if (options.position) {\n    popupInstance.option(\"position\", options.position);\n  }\n  popupInstance._wrapper().addClass(DX_DIALOG_ROOT_CLASSNAME);\n  function show() {\n    popupInstance.show();\n    return deferred.promise();\n  }\n  function hide(value) {\n    deferred.resolve(value);\n    popupInstance.hide().done(function () {\n      popupInstance.$element().remove();\n    });\n  }\n  return {\n    show: show,\n    hide: hide\n  };\n};\nexports.alert = function (messageHtml, title, showTitle) {\n  var options = (0, _type.isPlainObject)(messageHtml) ? messageHtml : {\n    title: title,\n    messageHtml: messageHtml,\n    showTitle: showTitle,\n    dragEnabled: showTitle\n  };\n  return exports.custom(options).show();\n};\nexports.confirm = function (messageHtml, title, showTitle) {\n  var options = (0, _type.isPlainObject)(messageHtml) ? messageHtml : {\n    title: title,\n    messageHtml: messageHtml,\n    showTitle: showTitle,\n    buttons: [{\n      text: _message2.default.format(\"Yes\"),\n      onClick: function onClick() {\n        return true;\n      }\n    }, {\n      text: _message2.default.format(\"No\"),\n      onClick: function onClick() {\n        return false;\n      }\n    }],\n    dragEnabled: showTitle\n  };\n  return exports.custom(options).show();\n};","map":null,"metadata":{},"sourceType":"script"}