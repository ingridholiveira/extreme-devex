{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _window = require(\"../../core/utils/window\");\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _common = require(\"../../core/utils/common\");\nvar _style = require(\"../../core/utils/style\");\nvar _style2 = _interopRequireDefault(_style);\nvar _type = require(\"../../core/utils/type\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _string = require(\"../../core/utils/string\");\nvar _position = require(\"../../core/utils/position\");\nvar _data = require(\"../../core/utils/data\");\nvar _uiGrid_core = require(\"./ui.grid_core.utils\");\nvar _uiGrid_core2 = require(\"./ui.grid_core.columns_view\");\nvar _uiGrid_core3 = _interopRequireDefault(_uiGrid_core2);\nvar _ui = require(\"../scroll_view/ui.scrollable\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _remove_event = require(\"../../core/remove_event\");\nvar _remove_event2 = _interopRequireDefault(_remove_event);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _browser = require(\"../../core/utils/browser\");\nvar _browser2 = _interopRequireDefault(_browser);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar ROWS_VIEW_CLASS = \"rowsview\",\n  CONTENT_CLASS = \"content\",\n  NOWRAP_CLASS = \"nowrap\",\n  GROUP_ROW_CLASS = \"dx-group-row\",\n  GROUP_CELL_CLASS = \"dx-group-cell\",\n  DATA_ROW_CLASS = \"dx-data-row\",\n  FREE_SPACE_CLASS = \"dx-freespace-row\",\n  ROW_LINES_CLASS = \"dx-row-lines\",\n  COLUMN_LINES_CLASS = \"dx-column-lines\",\n  ROW_ALTERNATION_CLASS = \"dx-row-alt\",\n  LAST_ROW_BORDER = \"dx-last-row-border\",\n  EMPTY_CLASS = \"dx-empty\",\n  ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\",\n  LOADPANEL_HIDE_TIMEOUT = 200;\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      hoverStateEnabled: false,\n      scrolling: {\n        useNative: \"auto\"\n      },\n      loadPanel: {\n        enabled: \"auto\",\n        text: _message2.default.format(\"Loading\"),\n        width: 200,\n        height: 90,\n        showIndicator: true,\n        indicatorSrc: \"\",\n        showPane: true\n      },\n      rowTemplate: null,\n      columnAutoWidth: false,\n      noDataText: _message2.default.format(\"dxDataGrid-noDataText\"),\n      wordWrapEnabled: false,\n      showColumnLines: true,\n      showRowLines: false,\n      rowAlternationEnabled: false,\n      activeStateEnabled: false,\n      twoWayBindingEnabled: true\n    };\n  },\n  views: {\n    rowsView: _uiGrid_core3.default.ColumnsView.inherit(function () {\n      var defaultCellTemplate = function defaultCellTemplate($container, options) {\n        var isDataTextEmpty = (0, _string.isEmpty)(options.text) && \"data\" === options.rowType,\n          text = options.text,\n          container = $container.get(0);\n        if (isDataTextEmpty) {\n          (0, _uiGrid_core.setEmptyText)($container);\n        } else {\n          if (options.column.encodeHtml) {\n            container.textContent = text;\n          } else {\n            container.innerHTML = text;\n          }\n        }\n      };\n      var getScrollableBottomPadding = function getScrollableBottomPadding(that) {\n        var scrollable = that.getScrollable();\n        return scrollable ? Math.ceil(parseFloat(scrollable.$content().css(\"paddingBottom\"))) : 0;\n      };\n      return {\n        _getDefaultTemplate: function _getDefaultTemplate(column) {\n          switch (column.command) {\n            case \"empty\":\n              return function (container) {\n                container.html(\"&nbsp;\");\n              };\n            default:\n              return defaultCellTemplate;\n          }\n        },\n        _getDefaultGroupTemplate: function _getDefaultGroupTemplate(column) {\n          var that = this,\n            summaryTexts = that.option(\"summary.texts\");\n          return function ($container, options) {\n            var data = options.data,\n              text = options.column.caption + \": \" + options.text,\n              container = $container.get(0);\n            if (options.summaryItems && options.summaryItems.length) {\n              text += \" \" + (0, _uiGrid_core.getGroupRowSummaryText)(options.summaryItems, summaryTexts);\n            }\n            if (data) {\n              if (options.groupContinuedMessage && options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\";\n              } else {\n                if (options.groupContinuesMessage) {\n                  text += \" (\" + options.groupContinuesMessage + \")\";\n                } else {\n                  if (options.groupContinuedMessage) {\n                    text += \" (\" + options.groupContinuedMessage + \")\";\n                  }\n                }\n              }\n            }\n            $container.addClass(GROUP_CELL_CLASS);\n            if (column.encodeHtml) {\n              container.textContent = text;\n            } else {\n              container.innerHTML = text;\n            }\n          };\n        },\n        _update: function _update() {},\n        _getCellTemplate: function _getCellTemplate(options) {\n          var template,\n            that = this,\n            column = options.column;\n          if (\"group\" === options.rowType && (0, _type.isDefined)(column.groupIndex) && !column.showWhenGrouped && !column.command) {\n            template = column.groupCellTemplate || {\n              allowRenderToDetachedContainer: true,\n              render: that._getDefaultGroupTemplate(column)\n            };\n          } else {\n            if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\n              template = column.cellTemplate;\n            } else {\n              template = {\n                allowRenderToDetachedContainer: true,\n                render: that._getDefaultTemplate(column)\n              };\n            }\n          }\n          return template;\n        },\n        _createRow: function _createRow(row) {\n          var isGroup,\n            isDataRow,\n            isRowExpanded,\n            $row = this.callBase(row);\n          if (row) {\n            isGroup = \"group\" === row.rowType;\n            isDataRow = \"data\" === row.rowType;\n            isDataRow && $row.addClass(DATA_ROW_CLASS);\n            isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n            this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\n            if (false === row.visible) {\n              $row.hide();\n            }\n            if (isGroup) {\n              $row.addClass(GROUP_ROW_CLASS);\n              isRowExpanded = row.isExpanded;\n              this.setAria(\"role\", \"row\", $row);\n              this.setAria(\"expanded\", (0, _type.isDefined)(isRowExpanded) && isRowExpanded.toString(), $row);\n            }\n          }\n          return $row;\n        },\n        _rowPrepared: function _rowPrepared($row, rowOptions, row) {\n          var _this = this;\n          if (\"data\" === rowOptions.rowType) {\n            if (this.option(\"rowAlternationEnabled\")) {\n              var getRowAlt = function getRowAlt() {\n                return row.dataIndex % 2 === 1;\n              };\n              getRowAlt() && $row.addClass(ROW_ALTERNATION_CLASS);\n              rowOptions.watch && rowOptions.watch(getRowAlt, function (value) {\n                $row.toggleClass(ROW_ALTERNATION_CLASS, value);\n              });\n            }\n            this._setAriaRowIndex(rowOptions, $row);\n            rowOptions.watch && rowOptions.watch(function () {\n              return rowOptions.rowIndex;\n            }, function () {\n              return _this._setAriaRowIndex(rowOptions, $row);\n            });\n          }\n          this.callBase.apply(this, arguments);\n        },\n        _setAriaRowIndex: function _setAriaRowIndex(row, $row) {\n          var component = this.component,\n            isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && \"virtual\" !== component.option(\"scrolling.rowRenderingMode\"),\n            rowIndex = row.rowIndex + 1;\n          if (isPagerMode) {\n            rowIndex = component.pageIndex() * component.pageSize() + rowIndex;\n          } else {\n            rowIndex += this._dataController.getRowIndexOffset();\n          }\n          this.setAria(\"rowindex\", rowIndex, $row);\n        },\n        _afterRowPrepared: function _afterRowPrepared(e) {\n          var _this2 = this;\n          var arg = e.args[0],\n            dataController = this._dataController,\n            row = dataController.getVisibleRows()[arg.rowIndex],\n            watch = this.option(\"integrationOptions.watchMethod\");\n          if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\n            return;\n          }\n          var dispose = watch(function () {\n            return dataController.generateDataValues(arg.data, arg.columns);\n          }, function () {\n            dataController.repaintRows([row.rowIndex], _this2.option(\"repaintChangesOnly\"));\n          }, {\n            deep: true,\n            skipImmediate: true\n          });\n          _events_engine2.default.on(arg.rowElement, _remove_event2.default, dispose);\n        },\n        _renderScrollable: function _renderScrollable(force) {\n          var that = this,\n            $element = that.element();\n          if (!$element.children().length) {\n            $element.append(\"<div>\");\n          }\n          if (force || !that._loadPanel) {\n            that._renderLoadPanel($element, $element.parent(), that._dataController.isLocalStore());\n          }\n          if ((force || !that.getScrollable()) && that._dataController.isLoaded()) {\n            var columns = that.getColumns(),\n              allColumnsHasWidth = true;\n            for (var i = 0; i < columns.length; i++) {\n              if (!columns[i].width && !columns[i].minWidth) {\n                allColumnsHasWidth = false;\n                break;\n              }\n            }\n            if (that.option(\"columnAutoWidth\") || that._hasHeight || allColumnsHasWidth || that._columnsController._isColumnFixing()) {\n              that._renderScrollableCore($element);\n            }\n          }\n        },\n        _handleScroll: function _handleScroll(e) {\n          var that = this;\n          that._isScrollByEvent = !!e.event;\n          that._scrollTop = e.scrollOffset.top;\n          that._scrollLeft = e.scrollOffset.left;\n          that.scrollChanged.fire(e.scrollOffset, that.name);\n        },\n        _renderScrollableCore: function _renderScrollableCore($element) {\n          var that = this,\n            dxScrollableOptions = that._createScrollableOptions(),\n            scrollHandler = that._handleScroll.bind(that);\n          dxScrollableOptions.onScroll = scrollHandler;\n          dxScrollableOptions.onStop = scrollHandler;\n          that._scrollable = that._createComponent($element, _ui2.default, dxScrollableOptions);\n          that._scrollableContainer = that._scrollable && that._scrollable._$container;\n        },\n        _renderLoadPanel: _uiGrid_core.renderLoadPanel,\n        _renderContent: function _renderContent(contentElement, tableElement) {\n          contentElement.replaceWith((0, _renderer2.default)(\"<div>\").addClass(this.addWidgetPrefix(CONTENT_CLASS)).append(tableElement));\n          return this._findContentElement();\n        },\n        _updateContent: function _updateContent(newTableElement, change) {\n          var that = this,\n            tableElement = that._getTableElement(),\n            contentElement = that._findContentElement(),\n            changeType = change && change.changeType,\n            executors = [],\n            highlightChanges = this.option(\"highlightChanges\"),\n            rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\n          switch (changeType) {\n            case \"update\":\n              (0, _iterator.each)(change.rowIndices, function (index, rowIndex) {\n                var $newRowElement = that._getRowElements(newTableElement).eq(index),\n                  changeType = change.changeTypes && change.changeTypes[index],\n                  item = change.items && change.items[index];\n                executors.push(function () {\n                  var $rowsElement = that._getRowElements(),\n                    $rowElement = $rowsElement.eq(rowIndex);\n                  switch (changeType) {\n                    case \"update\":\n                      if (item) {\n                        var columnIndices = change.columnIndices && change.columnIndices[index];\n                        if ((0, _type.isDefined)(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\n                          $rowElement.toggle(item.visible);\n                        } else {\n                          if (columnIndices) {\n                            that._updateCells($rowElement, $newRowElement, columnIndices);\n                          } else {\n                            $rowElement.replaceWith($newRowElement);\n                          }\n                        }\n                      }\n                      break;\n                    case \"insert\":\n                      if (!$rowsElement.length) {\n                        $newRowElement.prependTo(tableElement.children(\"tbody\"));\n                      } else {\n                        if ($rowElement.length) {\n                          $newRowElement.insertBefore($rowElement);\n                        } else {\n                          $newRowElement.insertAfter($rowsElement.last());\n                        }\n                      }\n                      if (highlightChanges && change.isLiveUpdate) {\n                        $newRowElement.addClass(rowInsertedClass);\n                      }\n                      break;\n                    case \"remove\":\n                      $rowElement.remove();\n                  }\n                });\n              });\n              (0, _iterator.each)(executors, function () {\n                this();\n              });\n              newTableElement.remove();\n              break;\n            default:\n              that._setTableElement(newTableElement);\n              contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\n              that._renderContent(contentElement, newTableElement);\n          }\n        },\n        _createEmptyRow: function _createEmptyRow(className, isFixed, height) {\n          var i,\n            $cell,\n            that = this,\n            $row = that._createRow(),\n            columns = isFixed ? this.getFixedColumns() : this.getColumns();\n          $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, that.option(\"showColumnLines\"));\n          for (i = 0; i < columns.length; i++) {\n            $cell = that._createCell({\n              column: columns[i],\n              rowType: \"freeSpace\",\n              columnIndex: i,\n              columns: columns\n            });\n            (0, _type.isNumeric)(height) && $cell.css(\"height\", height);\n            $row.append($cell);\n          }\n          that.setAria(\"role\", \"presentation\", $row);\n          return $row;\n        },\n        _appendEmptyRow: function _appendEmptyRow($table, $emptyRow, location) {\n          var $tBodies = this._getBodies($table),\n            $container = $tBodies.length && !$emptyRow.is(\"tbody\") ? $tBodies : $table;\n          if (\"top\" === location) {\n            $container.first().prepend($emptyRow);\n          } else {\n            $container.last().append($emptyRow);\n          }\n        },\n        _renderFreeSpaceRow: function _renderFreeSpaceRow($tableElement) {\n          var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\n          $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\n          this._appendEmptyRow($tableElement, $freeSpaceRowElement);\n        },\n        _checkRowKeys: function _checkRowKeys(options) {\n          var that = this,\n            rows = that._getRows(options),\n            keyExpr = that._dataController.store() && that._dataController.store().key();\n          keyExpr && rows.some(function (row) {\n            if (\"data\" === row.rowType && void 0 === row.key) {\n              that._dataController.fireError(\"E1046\", keyExpr);\n              return true;\n            }\n          });\n        },\n        _needUpdateRowHeight: function _needUpdateRowHeight(itemsCount) {\n          return itemsCount > 0 && !this._rowHeight;\n        },\n        _getRowsHeight: function _getRowsHeight($tableElement) {\n          var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\n          return $rowElements.toArray().reduce(function (sum, row) {\n            return sum + row.getBoundingClientRect().height;\n          }, 0);\n        },\n        _updateRowHeight: function _updateRowHeight() {\n          var rowsHeight,\n            that = this,\n            $tableElement = that._getTableElement(),\n            itemsCount = that._dataController.items().length;\n          if ($tableElement && that._needUpdateRowHeight(itemsCount)) {\n            rowsHeight = that._getRowsHeight($tableElement);\n            that._rowHeight = rowsHeight / itemsCount;\n          }\n        },\n        _findContentElement: function _findContentElement() {\n          var $content = this.element(),\n            scrollable = this.getScrollable();\n          if ($content) {\n            if (scrollable) {\n              $content = scrollable.$content();\n            }\n            return $content.children().first();\n          }\n        },\n        _getRowElements: function _getRowElements(tableElement) {\n          var $rows = this.callBase(tableElement);\n          return $rows && $rows.not(\".\" + FREE_SPACE_CLASS);\n        },\n        _getFreeSpaceRowElements: function _getFreeSpaceRowElements($table) {\n          var tableElements = $table || this.getTableElements();\n          return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS);\n        },\n        _getNoDataText: function _getNoDataText() {\n          return this.option(\"noDataText\");\n        },\n        _rowClick: function _rowClick(e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowClick\", (0, _extend.extend)({\n            evaluate: function evaluate(expr) {\n              var getter = (0, _data.compileGetter)(expr);\n              return getter(item.data);\n            }\n          }, e, item));\n        },\n        _rowDblClick: function _rowDblClick(e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowDblClick\", (0, _extend.extend)({}, e, item));\n        },\n        _getColumnsCountBeforeGroups: function _getColumnsCountBeforeGroups(columns) {\n          for (var i = 0; i < columns.length; i++) {\n            if (\"groupExpand\" === columns[i].type) {\n              return i;\n            }\n          }\n          return 0;\n        },\n        _getGroupCellOptions: function _getGroupCellOptions(options) {\n          var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns),\n            columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\n          return {\n            columnIndex: columnIndex,\n            colspan: options.columns.length - columnIndex - 1\n          };\n        },\n        _renderCells: function _renderCells($row, options) {\n          if (\"group\" === options.row.rowType) {\n            this._renderGroupedCells($row, options);\n          } else {\n            if (options.row.values) {\n              this.callBase($row, options);\n            }\n          }\n        },\n        _renderGroupedCells: function _renderGroupedCells($row, options) {\n          var i,\n            expandColumn,\n            isExpanded,\n            groupColumn,\n            groupColumnAlignment,\n            row = options.row,\n            columns = options.columns,\n            rowIndex = row.rowIndex,\n            groupCellOptions = this._getGroupCellOptions(options);\n          for (i = 0; i <= groupCellOptions.columnIndex; i++) {\n            if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\n              isExpanded = !!row.isExpanded;\n              expandColumn = columns[i];\n            } else {\n              isExpanded = null;\n              expandColumn = {\n                command: \"expand\",\n                cssClass: columns[i].cssClass\n              };\n            }\n            this._renderCell($row, {\n              value: isExpanded,\n              row: row,\n              rowIndex: rowIndex,\n              column: expandColumn,\n              columnIndex: i\n            });\n          }\n          groupColumnAlignment = (0, _position.getDefaultAlignment)(this.option(\"rtlEnabled\"));\n          groupColumn = (0, _extend.extend)({}, columns[groupCellOptions.columnIndex], {\n            command: null,\n            cssClass: null,\n            width: null,\n            showWhenGrouped: false,\n            alignment: groupColumnAlignment\n          });\n          if (groupCellOptions.colspan > 1) {\n            groupColumn.colspan = groupCellOptions.colspan;\n          }\n          this._renderCell($row, {\n            value: row.values[row.groupIndex],\n            row: row,\n            rowIndex: rowIndex,\n            column: groupColumn,\n            columnIndex: groupCellOptions.columnIndex\n          });\n        },\n        _renderRows: function _renderRows($table, options) {\n          var that = this,\n            scrollingMode = that.option(\"scrolling.mode\");\n          that.callBase($table, (0, _extend.extend)({\n            scrollingMode: scrollingMode\n          }, options));\n          that._checkRowKeys(options.change);\n          that._renderFreeSpaceRow($table);\n          if (!that._hasHeight) {\n            that.updateFreeSpaceRowHeight($table);\n          }\n        },\n        _renderRow: function _renderRow($table, options) {\n          var that = this,\n            row = options.row,\n            rowTemplate = that.option(\"rowTemplate\");\n          if ((\"data\" === row.rowType || \"group\" === row.rowType) && !(0, _type.isDefined)(row.groupIndex) && rowTemplate) {\n            that.renderTemplate($table, rowTemplate, (0, _extend.extend)({\n              columns: options.columns\n            }, row), true);\n          } else {\n            that.callBase($table, options);\n          }\n        },\n        _renderTable: function _renderTable(options) {\n          var that = this,\n            $table = that.callBase(options),\n            resizeCompletedHandler = function resizeCompletedHandler() {\n              var scrollableInstance = that.getScrollable();\n              if (scrollableInstance && that.element().closest((0, _window.getWindow)().document).length) {\n                that.resizeCompleted.remove(resizeCompletedHandler);\n                scrollableInstance._visibilityChanged(true);\n              }\n            };\n          if (!(0, _type.isDefined)(that._getTableElement())) {\n            that._setTableElement($table);\n            that._renderScrollable(true);\n            that.resizeCompleted.add(resizeCompletedHandler);\n          } else {\n            that._renderScrollable();\n          }\n          return $table;\n        },\n        _createTable: function _createTable() {\n          var $table = this.callBase.apply(this, arguments);\n          if (this.option(\"rowTemplate\")) {\n            $table.appendTo(this.component.$element());\n          }\n          return $table;\n        },\n        _renderCore: function _renderCore(change) {\n          var $table,\n            that = this,\n            $element = that.element();\n          $element.addClass(that.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\"));\n          $element.toggleClass(EMPTY_CLASS, 0 === that._dataController.items().length);\n          that.setAria(\"role\", \"presentation\", $element);\n          $table = that._renderTable({\n            change: change\n          });\n          that._updateContent($table, change);\n          that.callBase(change);\n          that._lastColumnWidths = null;\n        },\n        _getRows: function _getRows(change) {\n          return change && change.items || this._dataController.items();\n        },\n        _getCellOptions: function _getCellOptions(options) {\n          var parameters,\n            groupingTextsOptions,\n            scrollingMode,\n            that = this,\n            column = options.column,\n            row = options.row,\n            data = row.data,\n            summaryCells = row && row.summaryCells,\n            value = options.value,\n            displayValue = (0, _uiGrid_core.getDisplayValue)(column, value, data, row.rowType);\n          parameters = this.callBase(options);\n          parameters.value = value;\n          parameters.oldValue = options.oldValue;\n          parameters.displayValue = displayValue;\n          parameters.row = row;\n          parameters.key = row.key;\n          parameters.data = data;\n          parameters.rowType = row.rowType;\n          parameters.values = row.values;\n          parameters.text = !column.command ? (0, _uiGrid_core.formatValue)(displayValue, column) : \"\";\n          parameters.rowIndex = row.rowIndex;\n          parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\n          parameters.resized = column.resizedCallbacks;\n          if ((0, _type.isDefined)(column.groupIndex) && !column.command) {\n            groupingTextsOptions = that.option(\"grouping.texts\");\n            scrollingMode = that.option(\"scrolling.mode\");\n            if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n              parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\n              parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;\n            }\n          }\n          return parameters;\n        },\n        _setRowsOpacityCore: function _setRowsOpacityCore($rows, visibleColumns, columnIndex, value) {\n          var columnsController = this._columnsController,\n            columns = columnsController.getColumns(),\n            column = columns && columns[columnIndex],\n            columnID = column && column.isBand && column.index;\n          (0, _iterator.each)($rows, function (rowIndex, row) {\n            if (!(0, _renderer2.default)(row).hasClass(GROUP_ROW_CLASS)) {\n              for (var i = 0; i < visibleColumns.length; i++) {\n                if ((0, _type.isNumeric)(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\n                  $rows.eq(rowIndex).children().eq(i).css({\n                    opacity: value\n                  });\n                  if (!(0, _type.isNumeric)(columnID)) {\n                    break;\n                  }\n                }\n              }\n            }\n          });\n        },\n        _getDevicePixelRatio: function _getDevicePixelRatio() {\n          return (0, _window.getWindow)().devicePixelRatio;\n        },\n        renderNoDataText: _uiGrid_core.renderNoDataText,\n        getCellOptions: function getCellOptions(rowIndex, columnIdentifier) {\n          var cellOptions,\n            column,\n            rowOptions = this._dataController.items()[rowIndex];\n          if (rowOptions) {\n            if ((0, _type.isString)(columnIdentifier)) {\n              column = this._columnsController.columnOption(columnIdentifier);\n            } else {\n              column = this._columnsController.getVisibleColumns()[columnIdentifier];\n            }\n            if (column) {\n              cellOptions = this._getCellOptions({\n                value: column.calculateCellValue(rowOptions.data),\n                rowIndex: rowOptions.rowIndex,\n                row: rowOptions,\n                column: column\n              });\n            }\n          }\n          return cellOptions;\n        },\n        getRow: function getRow(index) {\n          if (index >= 0) {\n            var rows = this._getRowElements();\n            if (rows.length > index) {\n              return (0, _renderer2.default)(rows[index]);\n            }\n          }\n        },\n        updateFreeSpaceRowHeight: function updateFreeSpaceRowHeight($table) {\n          var freeSpaceRowCount,\n            scrollingMode,\n            that = this,\n            dataController = that._dataController,\n            itemCount = dataController.items().length,\n            contentElement = that._findContentElement(),\n            freeSpaceRowElements = that._getFreeSpaceRowElements($table);\n          if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\n            var isFreeSpaceRowVisible = false;\n            if (itemCount > 0) {\n              if (!that._hasHeight) {\n                freeSpaceRowCount = dataController.pageSize() - itemCount;\n                scrollingMode = that.option(\"scrolling.mode\");\n                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n                  _style2.default.setHeight(freeSpaceRowElements, freeSpaceRowCount * that._rowHeight);\n                  isFreeSpaceRowVisible = true;\n                }\n                if (!isFreeSpaceRowVisible && $table) {\n                  _style2.default.setHeight(freeSpaceRowElements, 0);\n                } else {\n                  freeSpaceRowElements.toggle(isFreeSpaceRowVisible);\n                }\n                that._updateLastRowBorder(isFreeSpaceRowVisible);\n              } else {\n                freeSpaceRowElements.hide();\n                (0, _common.deferUpdate)(function () {\n                  var scrollablePadding = getScrollableBottomPadding(that),\n                    scrollbarWidth = that.getScrollbarWidth(true),\n                    elementHeightWithoutScrollbar = that.element().height() - scrollbarWidth - scrollablePadding,\n                    contentHeight = contentElement.outerHeight(),\n                    showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0,\n                    rowsHeight = that._getRowsHeight(contentElement.children().first()),\n                    $tableElement = $table || that.getTableElements(),\n                    borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\"))),\n                    heightCorrection = _browser2.default.webkit && that._getDevicePixelRatio() >= 2 ? 1 : 0,\n                    resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\n                  if (showFreeSpaceRow) {\n                    (0, _common.deferRender)(function () {\n                      freeSpaceRowElements.css(\"height\", resultHeight);\n                      isFreeSpaceRowVisible = true;\n                      freeSpaceRowElements.show();\n                    });\n                  }\n                  (0, _common.deferRender)(function () {\n                    that._updateLastRowBorder(isFreeSpaceRowVisible);\n                  });\n                });\n              }\n            } else {\n              freeSpaceRowElements.css(\"height\", 0);\n              freeSpaceRowElements.show();\n              that._updateLastRowBorder(true);\n            }\n          }\n        },\n        _columnOptionChanged: function _columnOptionChanged(e) {\n          var optionNames = e.optionNames;\n          if (e.changeTypes.grouping) {\n            return;\n          }\n          if (optionNames.width || optionNames.visibleWidth) {\n            this.callBase(e);\n            this._fireColumnResizedCallbacks();\n          }\n        },\n        getScrollable: function getScrollable() {\n          return this._scrollable;\n        },\n        init: function init() {\n          var that = this,\n            dataController = that.getController(\"data\");\n          that.callBase();\n          that._editorFactoryController = that.getController(\"editorFactory\");\n          that._rowHeight = 0;\n          that._scrollTop = 0;\n          that._scrollLeft = -1;\n          that._hasHeight = false;\n          dataController.loadingChanged.add(function (isLoading, messageText) {\n            that.setLoading(isLoading, messageText);\n          });\n          dataController.dataSourceChanged.add(function () {\n            if (that._scrollLeft >= 0) {\n              that._handleScroll({\n                scrollOffset: {\n                  top: that._scrollTop,\n                  left: that._scrollLeft\n                }\n              });\n            }\n          });\n        },\n        _handleDataChanged: function _handleDataChanged(change) {\n          var that = this;\n          switch (change.changeType) {\n            case \"refresh\":\n            case \"prepend\":\n            case \"append\":\n            case \"update\":\n              that.render(null, change);\n              break;\n            default:\n              that._update(change);\n          }\n        },\n        publicMethods: function publicMethods() {\n          return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"];\n        },\n        contentWidth: function contentWidth() {\n          return this.element().width() - this.getScrollbarWidth();\n        },\n        getScrollbarWidth: function getScrollbarWidth(isHorizontal) {\n          var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0),\n            scrollbarWidth = 0;\n          if (scrollableContainer) {\n            if (!isHorizontal) {\n              scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;\n            } else {\n              scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\n              scrollbarWidth += getScrollableBottomPadding(this);\n            }\n          }\n          return scrollbarWidth > 0 ? scrollbarWidth : 0;\n        },\n        _fireColumnResizedCallbacks: function _fireColumnResizedCallbacks() {\n          var i,\n            that = this,\n            lastColumnWidths = that._lastColumnWidths || [],\n            columnWidths = [],\n            columns = that.getColumns();\n          for (i = 0; i < columns.length; i++) {\n            columnWidths[i] = columns[i].visibleWidth;\n            if (columns[i].resizedCallbacks && !(0, _type.isDefined)(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\n              columns[i].resizedCallbacks.fire(columnWidths[i]);\n            }\n          }\n          that._lastColumnWidths = columnWidths;\n        },\n        _updateLastRowBorder: function _updateLastRowBorder(isFreeSpaceRowVisible) {\n          if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\n            this.element().addClass(LAST_ROW_BORDER);\n          } else {\n            this.element().removeClass(LAST_ROW_BORDER);\n          }\n        },\n        _updateScrollable: function _updateScrollable() {\n          var dxScrollable = _ui2.default.getInstance(this.element());\n          if (dxScrollable) {\n            dxScrollable.update();\n            this._updateHorizontalScrollPosition();\n          }\n        },\n        _updateHorizontalScrollPosition: function _updateHorizontalScrollPosition() {\n          var scrollable = this.getScrollable(),\n            scrollLeft = scrollable && scrollable.scrollOffset().left;\n          if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\n            scrollable.scrollTo({\n              x: this._scrollLeft\n            });\n          }\n        },\n        _resizeCore: function _resizeCore() {\n          var that = this;\n          that._fireColumnResizedCallbacks();\n          that._updateRowHeight();\n          (0, _common.deferRender)(function () {\n            that._renderScrollable();\n            that.renderNoDataText();\n            that.updateFreeSpaceRowHeight();\n            (0, _common.deferUpdate)(function () {\n              that._updateScrollable();\n            });\n          });\n        },\n        scrollTo: function scrollTo(location) {\n          var $element = this.element(),\n            dxScrollable = $element && _ui2.default.getInstance($element);\n          if (dxScrollable) {\n            dxScrollable.scrollTo(location);\n          }\n        },\n        height: function height(_height, hasHeight) {\n          var that = this,\n            $element = this.element();\n          if (0 === arguments.length) {\n            return $element ? $element.outerHeight(true) : 0;\n          }\n          that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\n          if ((0, _type.isDefined)(_height) && $element) {\n            _style2.default.setHeight($element, _height);\n          }\n        },\n        setLoading: function setLoading(isLoading, messageText) {\n          var visibilityOptions,\n            that = this,\n            loadPanel = that._loadPanel,\n            dataController = that._dataController,\n            loadPanelOptions = that.option(\"loadPanel\") || {},\n            animation = dataController.isLoaded() ? loadPanelOptions.animation : null,\n            $element = that.element();\n          if (!(0, _window.hasWindow)()) {\n            return;\n          }\n          if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\n            that._renderLoadPanel($element, $element.parent());\n            loadPanel = that._loadPanel;\n          }\n          if (loadPanel) {\n            visibilityOptions = {\n              message: messageText || loadPanelOptions.text,\n              animation: animation,\n              visible: isLoading\n            };\n            clearTimeout(that._hideLoadingTimeoutID);\n            if (loadPanel.option(\"visible\") && !isLoading) {\n              that._hideLoadingTimeoutID = setTimeout(function () {\n                loadPanel.option(visibilityOptions);\n              }, LOADPANEL_HIDE_TIMEOUT);\n            } else {\n              loadPanel.option(visibilityOptions);\n            }\n          }\n        },\n        setRowsOpacity: function setRowsOpacity(columnIndex, value) {\n          var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\n          this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value);\n        },\n        _getCellElementsCore: function _getCellElementsCore(rowIndex) {\n          var groupCellIndex,\n            $cells = this.callBase(rowIndex);\n          if ($cells) {\n            groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\n            if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\n              return $cells.slice(0, groupCellIndex + 1);\n            }\n          }\n          return $cells;\n        },\n        getTopVisibleItemIndex: function getTopVisibleItemIndex(isFloor) {\n          var rowElements,\n            rowElement,\n            that = this,\n            itemIndex = 0,\n            prevOffsetTop = 0,\n            offsetTop = 0,\n            scrollPosition = that._scrollTop,\n            $contentElement = that._findContentElement(),\n            contentElementOffsetTop = $contentElement && $contentElement.offset().top,\n            items = that._dataController.items(),\n            tableElement = that._getTableElement();\n          if (items.length && tableElement) {\n            rowElements = that._getRowElements(tableElement).filter(\":visible\");\n            for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n              prevOffsetTop = offsetTop;\n              rowElement = rowElements.eq(itemIndex);\n              if (rowElement.length) {\n                offsetTop = rowElement.offset().top - contentElementOffsetTop;\n                if (offsetTop > scrollPosition) {\n                  if (itemIndex) {\n                    if (isFloor || 2 * scrollPosition < Math.round(offsetTop + prevOffsetTop)) {\n                      itemIndex--;\n                    }\n                  }\n                  break;\n                }\n              }\n            }\n            if (itemIndex && itemIndex === items.length) {\n              itemIndex--;\n            }\n          }\n          return itemIndex;\n        },\n        getTopVisibleRowData: function getTopVisibleRowData() {\n          var itemIndex = this.getTopVisibleItemIndex(),\n            items = this._dataController.items();\n          if (items[itemIndex]) {\n            return items[itemIndex].data;\n          }\n        },\n        optionChanged: function optionChanged(args) {\n          var that = this;\n          that.callBase(args);\n          switch (args.name) {\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n            case \"showRowLines\":\n            case \"rowAlternationEnabled\":\n            case \"rowTemplate\":\n            case \"twoWayBindingEnabled\":\n              that._invalidate(true, true);\n              args.handled = true;\n              break;\n            case \"scrolling\":\n              that._rowHeight = null;\n              that._tableElement = null;\n              args.handled = true;\n              break;\n            case \"rtlEnabled\":\n              that._rowHeight = null;\n              that._tableElement = null;\n              break;\n            case \"loadPanel\":\n              that._tableElement = null;\n              that._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\n              args.handled = true;\n              break;\n            case \"noDataText\":\n              that.renderNoDataText();\n              args.handled = true;\n          }\n        },\n        dispose: function dispose() {\n          clearTimeout(this._hideLoadingTimeoutID);\n          this._scrollable && this._scrollable.dispose();\n        },\n        setScrollerSpacing: function setScrollerSpacing() {}\n      };\n    }())\n  }\n};","map":null,"metadata":{},"sourceType":"script"}