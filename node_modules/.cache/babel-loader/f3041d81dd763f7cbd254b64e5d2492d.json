{"ast":null,"code":"/**\r\n * DevExtreme (animation/fx.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _typeof = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar $ = require(\"../core/renderer\"),\n  window = require(\"../core/utils/window\").getWindow(),\n  eventsEngine = require(\"../events/core/events_engine\"),\n  errors = require(\"../core/errors\"),\n  getPublicElement = require(\"../core/utils/dom\").getPublicElement,\n  extend = require(\"../core/utils/extend\").extend,\n  typeUtils = require(\"../core/utils/type\"),\n  iteratorUtils = require(\"../core/utils/iterator\"),\n  translator = require(\"./translator\"),\n  easing = require(\"./easing\"),\n  animationFrame = require(\"./frame\"),\n  support = require(\"../core/utils/support\"),\n  positionUtils = require(\"./position\"),\n  removeEvent = require(\"../core/remove_event\"),\n  eventUtils = require(\"../events/utils\"),\n  deferredUtils = require(\"../core/utils/deferred\"),\n  when = deferredUtils.when,\n  Deferred = deferredUtils.Deferred,\n  removeEventName = eventUtils.addNamespace(removeEvent, \"dxFX\"),\n  isFunction = typeUtils.isFunction,\n  isPlainObject = typeUtils.isPlainObject,\n  noop = require(\"../core/utils/common\").noop;\nvar RELATIVE_VALUE_REGEX = /^([+-])=(.*)/i,\n  ANIM_DATA_KEY = \"dxAnimData\",\n  ANIM_QUEUE_KEY = \"dxAnimQueue\",\n  TRANSFORM_PROP = \"transform\";\nvar TransitionAnimationStrategy = {\n  initAnimation: function initAnimation($element, config) {\n    $element.css({\n      transitionProperty: \"none\"\n    });\n    if (\"string\" === typeof config.from) {\n      $element.addClass(config.from);\n    } else {\n      setProps($element, config.from);\n    }\n    var that = this,\n      deferred = new Deferred(),\n      cleanupWhen = config.cleanupWhen;\n    config.transitionAnimation = {\n      deferred: deferred,\n      finish: function finish() {\n        that._finishTransition($element);\n        if (cleanupWhen) {\n          when(deferred, cleanupWhen).always(function () {\n            that._cleanup($element, config);\n          });\n        } else {\n          that._cleanup($element, config);\n        }\n        deferred.resolveWith($element, [config, $element]);\n      }\n    };\n    this._completeAnimationCallback($element, config).done(function () {\n      config.transitionAnimation.finish();\n    }).fail(function () {\n      deferred.rejectWith($element, [config, $element]);\n    });\n    if (!config.duration) {\n      config.transitionAnimation.finish();\n    }\n    $element.css(\"transform\");\n  },\n  animate: function animate($element, config) {\n    this._startAnimation($element, config);\n    return config.transitionAnimation.deferred.promise();\n  },\n  _completeAnimationCallback: function _completeAnimationCallback($element, config) {\n    var simulatedEndEventTimer,\n      waitForJSCompleteTimer,\n      that = this,\n      startTime = Date.now() + config.delay,\n      deferred = new Deferred(),\n      transitionEndFired = new Deferred(),\n      simulatedTransitionEndFired = new Deferred(),\n      transitionEndEventName = support.transitionEndEventName() + \".dxFX\";\n    config.transitionAnimation.cleanup = function () {\n      clearTimeout(simulatedEndEventTimer);\n      clearTimeout(waitForJSCompleteTimer);\n      eventsEngine.off($element, transitionEndEventName);\n      eventsEngine.off($element, removeEventName);\n    };\n    eventsEngine.one($element, transitionEndEventName, function () {\n      if (Date.now() - startTime >= config.duration) {\n        transitionEndFired.reject();\n      }\n    });\n    eventsEngine.off($element, removeEventName);\n    eventsEngine.on($element, removeEventName, function () {\n      that.stop($element, config);\n      deferred.reject();\n    });\n    waitForJSCompleteTimer = setTimeout(function () {\n      simulatedEndEventTimer = setTimeout(function () {\n        simulatedTransitionEndFired.reject();\n      }, config.duration + config.delay + fx._simulatedTransitionEndDelay);\n      when(transitionEndFired, simulatedTransitionEndFired).fail(function () {\n        deferred.resolve();\n      }.bind(this));\n    });\n    return deferred.promise();\n  },\n  _startAnimation: function _startAnimation($element, config) {\n    $element.css({\n      transitionProperty: \"all\",\n      transitionDelay: config.delay + \"ms\",\n      transitionDuration: config.duration + \"ms\",\n      transitionTimingFunction: config.easing\n    });\n    if (\"string\" === typeof config.to) {\n      $element[0].className += \" \" + config.to;\n    } else {\n      if (config.to) {\n        setProps($element, config.to);\n      }\n    }\n  },\n  _finishTransition: function _finishTransition($element) {\n    $element.css(\"transition\", \"none\");\n  },\n  _cleanup: function _cleanup($element, config) {\n    config.transitionAnimation.cleanup();\n    if (\"string\" === typeof config.from) {\n      $element.removeClass(config.from);\n      $element.removeClass(config.to);\n    }\n  },\n  stop: function stop($element, config, jumpToEnd) {\n    if (!config) {\n      return;\n    }\n    if (jumpToEnd) {\n      config.transitionAnimation.finish();\n    } else {\n      if (isPlainObject(config.to)) {\n        iteratorUtils.each(config.to, function (key) {\n          $element.css(key, $element.css(key));\n        });\n      }\n      this._finishTransition($element);\n      this._cleanup($element, config);\n    }\n  }\n};\nvar FrameAnimationStrategy = {\n  initAnimation: function initAnimation($element, config) {\n    setProps($element, config.from);\n  },\n  animate: function animate($element, config) {\n    var deferred = new Deferred(),\n      that = this;\n    if (!config) {\n      return deferred.reject().promise();\n    }\n    iteratorUtils.each(config.to, function (prop) {\n      if (void 0 === config.from[prop]) {\n        config.from[prop] = that._normalizeValue($element.css(prop));\n      }\n    });\n    if (config.to[TRANSFORM_PROP]) {\n      config.from[TRANSFORM_PROP] = that._parseTransform(config.from[TRANSFORM_PROP]);\n      config.to[TRANSFORM_PROP] = that._parseTransform(config.to[TRANSFORM_PROP]);\n    }\n    config.frameAnimation = {\n      to: config.to,\n      from: config.from,\n      currentValue: config.from,\n      easing: easing.convertTransitionTimingFuncToEasing(config.easing),\n      duration: config.duration,\n      startTime: new Date().valueOf(),\n      finish: function finish() {\n        this.currentValue = this.to;\n        this.draw();\n        animationFrame.cancelAnimationFrame(config.frameAnimation.animationFrameId);\n        deferred.resolve();\n      },\n      draw: function draw() {\n        if (config.draw) {\n          config.draw(this.currentValue);\n          return;\n        }\n        var currentValue = extend({}, this.currentValue);\n        if (currentValue[TRANSFORM_PROP]) {\n          currentValue[TRANSFORM_PROP] = iteratorUtils.map(currentValue[TRANSFORM_PROP], function (value, prop) {\n            if (\"translate\" === prop) {\n              return translator.getTranslateCss(value);\n            } else {\n              if (\"scale\" === prop) {\n                return \"scale(\" + value + \")\";\n              } else {\n                if (\"rotate\" === prop.substr(0, prop.length - 1)) {\n                  return prop + \"(\" + value + \"deg)\";\n                }\n              }\n            }\n          }).join(\" \");\n        }\n        $element.css(currentValue);\n      }\n    };\n    if (config.delay) {\n      config.frameAnimation.startTime += config.delay;\n      config.frameAnimation.delayTimeout = setTimeout(function () {\n        that._startAnimation($element, config);\n      }, config.delay);\n    } else {\n      that._startAnimation($element, config);\n    }\n    return deferred.promise();\n  },\n  _startAnimation: function _startAnimation($element, config) {\n    eventsEngine.off($element, removeEventName);\n    eventsEngine.on($element, removeEventName, function () {\n      if (config.frameAnimation) {\n        animationFrame.cancelAnimationFrame(config.frameAnimation.animationFrameId);\n      }\n    });\n    this._animationStep($element, config);\n  },\n  _parseTransform: function _parseTransform(transformString) {\n    var result = {};\n    iteratorUtils.each(transformString.match(/(\\w|\\d)+\\([^)]*\\)\\s*/g), function (i, part) {\n      var translateData = translator.parseTranslate(part),\n        scaleData = part.match(/scale\\((.+?)\\)/),\n        rotateData = part.match(/(rotate.)\\((.+)deg\\)/);\n      if (translateData) {\n        result.translate = translateData;\n      }\n      if (scaleData && scaleData[1]) {\n        result.scale = parseFloat(scaleData[1]);\n      }\n      if (rotateData && rotateData[1]) {\n        result[rotateData[1]] = parseFloat(rotateData[2]);\n      }\n    });\n    return result;\n  },\n  stop: function stop($element, config, jumpToEnd) {\n    var frameAnimation = config && config.frameAnimation;\n    if (!frameAnimation) {\n      return;\n    }\n    animationFrame.cancelAnimationFrame(frameAnimation.animationFrameId);\n    clearTimeout(frameAnimation.delayTimeout);\n    if (jumpToEnd) {\n      frameAnimation.finish();\n    }\n    delete config.frameAnimation;\n  },\n  _animationStep: function _animationStep($element, config) {\n    var frameAnimation = config && config.frameAnimation;\n    if (!frameAnimation) {\n      return;\n    }\n    var now = new Date().valueOf();\n    if (now >= frameAnimation.startTime + frameAnimation.duration) {\n      frameAnimation.finish();\n      return;\n    }\n    frameAnimation.currentValue = this._calcStepValue(frameAnimation, now - frameAnimation.startTime);\n    frameAnimation.draw();\n    var that = this;\n    frameAnimation.animationFrameId = animationFrame.requestAnimationFrame(function () {\n      that._animationStep($element, config);\n    });\n  },\n  _calcStepValue: function _calcStepValue(frameAnimation, currentDuration) {\n    var calcValueRecursively = function calcValueRecursively(from, to) {\n      var result = Array.isArray(to) ? [] : {};\n      var calcEasedValue = function calcEasedValue(propName) {\n        var x = currentDuration / frameAnimation.duration,\n          t = currentDuration,\n          b = 1 * from[propName],\n          c = to[propName] - from[propName],\n          d = frameAnimation.duration;\n        return easing.getEasing(frameAnimation.easing)(x, t, b, c, d);\n      };\n      iteratorUtils.each(to, function (propName, endPropValue) {\n        if (\"string\" === typeof endPropValue && false === parseFloat(endPropValue, 10)) {\n          return true;\n        }\n        result[propName] = \"object\" === (\"undefined\" === typeof endPropValue ? \"undefined\" : _typeof(endPropValue)) ? calcValueRecursively(from[propName], endPropValue) : calcEasedValue(propName);\n      });\n      return result;\n    };\n    return calcValueRecursively(frameAnimation.from, frameAnimation.to);\n  },\n  _normalizeValue: function _normalizeValue(value) {\n    var numericValue = parseFloat(value, 10);\n    if (false === numericValue) {\n      return value;\n    }\n    return numericValue;\n  }\n};\nvar FallbackToNoAnimationStrategy = {\n  initAnimation: function initAnimation() {},\n  animate: function animate() {\n    return new Deferred().resolve().promise();\n  },\n  stop: noop,\n  isSynchronous: true\n};\nvar getAnimationStrategy = function getAnimationStrategy(config) {\n  config = config || {};\n  var animationStrategies = {\n    transition: support.transition() ? TransitionAnimationStrategy : FrameAnimationStrategy,\n    frame: FrameAnimationStrategy,\n    noAnimation: FallbackToNoAnimationStrategy\n  };\n  var strategy = config.strategy || \"transition\";\n  if (\"css\" === config.type && !support.transition()) {\n    strategy = \"noAnimation\";\n  }\n  return animationStrategies[strategy];\n};\nvar baseConfigValidator = function baseConfigValidator(config, animationType, validate, typeMessage) {\n  iteratorUtils.each([\"from\", \"to\"], function () {\n    if (!validate(config[this])) {\n      throw errors.Error(\"E0010\", animationType, this, typeMessage);\n    }\n  });\n};\nvar isObjectConfigValidator = function isObjectConfigValidator(config, animationType) {\n  return baseConfigValidator(config, animationType, function (target) {\n    return isPlainObject(target);\n  }, \"a plain object\");\n};\nvar isStringConfigValidator = function isStringConfigValidator(config, animationType) {\n  return baseConfigValidator(config, animationType, function (target) {\n    return \"string\" === typeof target;\n  }, \"a string\");\n};\nvar CustomAnimationConfigurator = {\n  setup: function setup() {}\n};\nvar CssAnimationConfigurator = {\n  validateConfig: function validateConfig(config) {\n    isStringConfigValidator(config, \"css\");\n  },\n  setup: function setup() {}\n};\nvar positionAliases = {\n  top: {\n    my: \"bottom center\",\n    at: \"top center\"\n  },\n  bottom: {\n    my: \"top center\",\n    at: \"bottom center\"\n  },\n  right: {\n    my: \"left center\",\n    at: \"right center\"\n  },\n  left: {\n    my: \"right center\",\n    at: \"left center\"\n  }\n};\nvar SlideAnimationConfigurator = {\n  validateConfig: function validateConfig(config) {\n    isObjectConfigValidator(config, \"slide\");\n  },\n  setup: function setup($element, config) {\n    var location = translator.locate($element);\n    if (\"slide\" !== config.type) {\n      var positioningConfig = \"slideIn\" === config.type ? config.from : config.to;\n      positioningConfig.position = extend({\n        of: window\n      }, positionAliases[config.direction]);\n      setupPosition($element, positioningConfig);\n    }\n    this._setUpConfig(location, config.from);\n    this._setUpConfig(location, config.to);\n    translator.clearCache($element);\n  },\n  _setUpConfig: function _setUpConfig(location, config) {\n    config.left = \"left\" in config ? config.left : \"+=0\";\n    config.top = \"top\" in config ? config.top : \"+=0\";\n    this._initNewPosition(location, config);\n  },\n  _initNewPosition: function _initNewPosition(location, config) {\n    var position = {\n      left: config.left,\n      top: config.top\n    };\n    delete config.left;\n    delete config.top;\n    var relativeValue = this._getRelativeValue(position.left);\n    if (void 0 !== relativeValue) {\n      position.left = relativeValue + location.left;\n    } else {\n      config.left = 0;\n    }\n    relativeValue = this._getRelativeValue(position.top);\n    if (void 0 !== relativeValue) {\n      position.top = relativeValue + location.top;\n    } else {\n      config.top = 0;\n    }\n    config[TRANSFORM_PROP] = translator.getTranslateCss({\n      x: position.left,\n      y: position.top\n    });\n  },\n  _getRelativeValue: function _getRelativeValue(value) {\n    var relativeValue;\n    if (\"string\" === typeof value && (relativeValue = RELATIVE_VALUE_REGEX.exec(value))) {\n      return parseInt(relativeValue[1] + \"1\") * relativeValue[2];\n    }\n  }\n};\nvar FadeAnimationConfigurator = {\n  setup: function setup($element, config) {\n    var toOpacity,\n      from = config.from,\n      fromOpacity = isPlainObject(from) ? config.skipElementInitialStyles ? 0 : $element.css(\"opacity\") : String(from);\n    switch (config.type) {\n      case \"fadeIn\":\n        toOpacity = 1;\n        break;\n      case \"fadeOut\":\n        toOpacity = 0;\n        break;\n      default:\n        toOpacity = String(config.to);\n    }\n    config.from = {\n      visibility: \"visible\",\n      opacity: fromOpacity\n    };\n    config.to = {\n      opacity: toOpacity\n    };\n  }\n};\nvar PopAnimationConfigurator = {\n  validateConfig: function validateConfig(config) {\n    isObjectConfigValidator(config, \"pop\");\n  },\n  setup: function setup($element, config) {\n    var from = config.from,\n      to = config.to,\n      fromOpacity = \"opacity\" in from ? from.opacity : $element.css(\"opacity\"),\n      toOpacity = \"opacity\" in to ? to.opacity : 1,\n      fromScale = \"scale\" in from ? from.scale : 0,\n      toScale = \"scale\" in to ? to.scale : 1;\n    config.from = {\n      opacity: fromOpacity\n    };\n    var translate = translator.getTranslate($element);\n    config.from[TRANSFORM_PROP] = this._getCssTransform(translate, fromScale);\n    config.to = {\n      opacity: toOpacity\n    };\n    config.to[TRANSFORM_PROP] = this._getCssTransform(translate, toScale);\n  },\n  _getCssTransform: function _getCssTransform(translate, scale) {\n    return translator.getTranslateCss(translate) + \"scale(\" + scale + \")\";\n  }\n};\nvar animationConfigurators = {\n  custom: CustomAnimationConfigurator,\n  slide: SlideAnimationConfigurator,\n  slideIn: SlideAnimationConfigurator,\n  slideOut: SlideAnimationConfigurator,\n  fade: FadeAnimationConfigurator,\n  fadeIn: FadeAnimationConfigurator,\n  fadeOut: FadeAnimationConfigurator,\n  pop: PopAnimationConfigurator,\n  css: CssAnimationConfigurator\n};\nvar getAnimationConfigurator = function getAnimationConfigurator(config) {\n  var result = animationConfigurators[config.type];\n  if (!result) {\n    throw errors.Error(\"E0011\", config.type);\n  }\n  return result;\n};\nvar defaultJSConfig = {\n    type: \"custom\",\n    from: {},\n    to: {},\n    duration: 400,\n    start: noop,\n    complete: noop,\n    easing: \"ease\",\n    delay: 0\n  },\n  defaultCssConfig = {\n    duration: 400,\n    easing: \"ease\",\n    delay: 0\n  };\nvar setupAnimationOnElement = function setupAnimationOnElement() {\n  var animation = this,\n    $element = animation.element,\n    config = animation.config;\n  setupPosition($element, config.from);\n  setupPosition($element, config.to);\n  animation.configurator.setup($element, config);\n  $element.data(ANIM_DATA_KEY, animation);\n  if (fx.off) {\n    config.duration = 0;\n    config.delay = 0;\n  }\n  animation.strategy.initAnimation($element, config);\n  if (config.start) {\n    var element = getPublicElement($element);\n    config.start.apply(this, [element, config]);\n  }\n};\nvar onElementAnimationComplete = function onElementAnimationComplete(animation) {\n  var $element = animation.element,\n    config = animation.config;\n  $element.removeData(ANIM_DATA_KEY);\n  if (config.complete) {\n    var element = getPublicElement($element);\n    config.complete.apply(this, [element, config]);\n  }\n  animation.deferred.resolveWith(this, [$element, config]);\n};\nvar startAnimationOnElement = function startAnimationOnElement() {\n  var animation = this,\n    $element = animation.element,\n    config = animation.config;\n  animation.isStarted = true;\n  return animation.strategy.animate($element, config).done(function () {\n    onElementAnimationComplete(animation);\n  }).fail(function () {\n    animation.deferred.rejectWith(this, [$element, config]);\n  });\n};\nvar stopAnimationOnElement = function stopAnimationOnElement(jumpToEnd) {\n  var animation = this,\n    $element = animation.element,\n    config = animation.config;\n  clearTimeout(animation.startTimeout);\n  if (!animation.isStarted) {\n    animation.start();\n  }\n  animation.strategy.stop($element, config, jumpToEnd);\n};\nvar scopedRemoveEvent = eventUtils.addNamespace(removeEvent, \"dxFXStartAnimation\");\nvar subscribeToRemoveEvent = function subscribeToRemoveEvent(animation) {\n  eventsEngine.off(animation.element, scopedRemoveEvent);\n  eventsEngine.on(animation.element, scopedRemoveEvent, function () {\n    fx.stop(animation.element);\n  });\n  animation.deferred.always(function () {\n    eventsEngine.off(animation.element, scopedRemoveEvent);\n  });\n};\nvar createAnimation = function createAnimation(element, initialConfig) {\n  var defaultConfig = \"css\" === initialConfig.type ? defaultCssConfig : defaultJSConfig,\n    config = extend(true, {}, defaultConfig, initialConfig),\n    configurator = getAnimationConfigurator(config),\n    strategy = getAnimationStrategy(config),\n    animation = {\n      element: $(element),\n      config: config,\n      configurator: configurator,\n      strategy: strategy,\n      isSynchronous: strategy.isSynchronous,\n      setup: setupAnimationOnElement,\n      start: startAnimationOnElement,\n      stop: stopAnimationOnElement,\n      deferred: new Deferred()\n    };\n  if (isFunction(configurator.validateConfig)) {\n    configurator.validateConfig(config);\n  }\n  subscribeToRemoveEvent(animation);\n  return animation;\n};\nvar animate = function animate(element, config) {\n  var $element = $(element);\n  if (!$element.length) {\n    return new Deferred().resolve().promise();\n  }\n  var animation = createAnimation($element, config);\n  pushInAnimationQueue($element, animation);\n  return animation.deferred.promise();\n};\nvar pushInAnimationQueue = function pushInAnimationQueue($element, animation) {\n  var queueData = getAnimQueueData($element);\n  writeAnimQueueData($element, queueData);\n  queueData.push(animation);\n  if (!isAnimating($element)) {\n    shiftFromAnimationQueue($element, queueData);\n  }\n};\nvar getAnimQueueData = function getAnimQueueData($element) {\n  return $element.data(ANIM_QUEUE_KEY) || [];\n};\nvar writeAnimQueueData = function writeAnimQueueData($element, queueData) {\n  $element.data(ANIM_QUEUE_KEY, queueData);\n};\nvar destroyAnimQueueData = function destroyAnimQueueData($element) {\n  $element.removeData(ANIM_QUEUE_KEY);\n};\nvar isAnimating = function isAnimating($element) {\n  return !!$element.data(ANIM_DATA_KEY);\n};\nvar shiftFromAnimationQueue = function shiftFromAnimationQueue($element, queueData) {\n  queueData = getAnimQueueData($element);\n  if (!queueData.length) {\n    return;\n  }\n  var animation = queueData.shift();\n  if (0 === queueData.length) {\n    destroyAnimQueueData($element);\n  }\n  executeAnimation(animation).done(function () {\n    if (!isAnimating($element)) {\n      shiftFromAnimationQueue($element);\n    }\n  });\n};\nvar executeAnimation = function executeAnimation(animation) {\n  animation.setup();\n  if (fx.off || animation.isSynchronous) {\n    animation.start();\n  } else {\n    animation.startTimeout = setTimeout(function () {\n      animation.start();\n    });\n  }\n  return animation.deferred.promise();\n};\nvar setupPosition = function setupPosition($element, config) {\n  if (!config || !config.position) {\n    return;\n  }\n  var win = $(window),\n    left = 0,\n    top = 0,\n    position = positionUtils.calculate($element, config.position),\n    offset = $element.offset(),\n    currentPosition = $element.position();\n  if (currentPosition.top > offset.top) {\n    top = win.scrollTop();\n  }\n  if (currentPosition.left > offset.left) {\n    left = win.scrollLeft();\n  }\n  extend(config, {\n    left: position.h.location - offset.left + currentPosition.left - left,\n    top: position.v.location - offset.top + currentPosition.top - top\n  });\n  delete config.position;\n};\nvar setProps = function setProps($element, props) {\n  iteratorUtils.each(props, function (key, value) {\n    try {\n      $element.css(key, typeUtils.isFunction(value) ? value() : value);\n    } catch (e) {}\n  });\n};\nvar stop = function stop(element, jumpToEnd) {\n  var $element = $(element),\n    queueData = getAnimQueueData($element);\n  iteratorUtils.each(queueData, function (_, animation) {\n    animation.config.delay = 0;\n    animation.config.duration = 0;\n    animation.isSynchronous = true;\n  });\n  if (!isAnimating($element)) {\n    shiftFromAnimationQueue($element, queueData);\n  }\n  var animation = $element.data(ANIM_DATA_KEY);\n  if (animation) {\n    animation.stop(jumpToEnd);\n  }\n  $element.removeData(ANIM_DATA_KEY);\n  destroyAnimQueueData($element);\n};\nvar fx = {\n  off: false,\n  animationTypes: animationConfigurators,\n  animate: animate,\n  createAnimation: createAnimation,\n  isAnimating: isAnimating,\n  stop: stop,\n  _simulatedTransitionEndDelay: 100\n};\nmodule.exports = fx;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}