{"ast":null,"code":"/**\r\n * DevExtreme (events/pointer/mouse_and_touch.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar extend = require(\"../../core/utils/extend\").extend,\n  BaseStrategy = require(\"./base\"),\n  MouseStrategy = require(\"./mouse\"),\n  TouchStrategy = require(\"./touch\"),\n  eventUtils = require(\"../utils\");\nvar eventMap = {\n  dxpointerdown: \"touchstart mousedown\",\n  dxpointermove: \"touchmove mousemove\",\n  dxpointerup: \"touchend mouseup\",\n  dxpointercancel: \"touchcancel\",\n  dxpointerover: \"mouseover\",\n  dxpointerout: \"mouseout\",\n  dxpointerenter: \"mouseenter\",\n  dxpointerleave: \"mouseleave\"\n};\nvar activated = false;\nvar activateStrategy = function activateStrategy() {\n  if (activated) {\n    return;\n  }\n  MouseStrategy.activate();\n  activated = true;\n};\nvar MouseAndTouchStrategy = BaseStrategy.inherit({\n  EVENT_LOCK_TIMEOUT: 100,\n  ctor: function ctor() {\n    this.callBase.apply(this, arguments);\n    activateStrategy();\n  },\n  _handler: function _handler(e) {\n    var isMouseEvent = eventUtils.isMouseEvent(e);\n    if (!isMouseEvent) {\n      this._skipNextEvents = true;\n    }\n    if (isMouseEvent && this._mouseLocked) {\n      return;\n    }\n    if (isMouseEvent && this._skipNextEvents) {\n      this._skipNextEvents = false;\n      this._mouseLocked = true;\n      clearTimeout(this._unlockMouseTimer);\n      var that = this;\n      this._unlockMouseTimer = setTimeout(function () {\n        that._mouseLocked = false;\n      }, this.EVENT_LOCK_TIMEOUT);\n      return;\n    }\n    return this.callBase(e);\n  },\n  _fireEvent: function _fireEvent(args) {\n    var isMouseEvent = eventUtils.isMouseEvent(args.originalEvent),\n      normalizer = isMouseEvent ? MouseStrategy.normalize : TouchStrategy.normalize;\n    return this.callBase(extend(normalizer(args.originalEvent), args));\n  },\n  dispose: function dispose() {\n    this.callBase();\n    this._skipNextEvents = false;\n    this._mouseLocked = false;\n    clearTimeout(this._unlockMouseTimer);\n  }\n});\nMouseAndTouchStrategy.map = eventMap;\nMouseAndTouchStrategy.resetObserver = MouseStrategy.resetObserver;\nmodule.exports = MouseAndTouchStrategy;","map":null,"metadata":{},"sourceType":"script"}