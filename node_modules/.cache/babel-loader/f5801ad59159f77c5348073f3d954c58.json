{"ast":null,"code":"/**\r\n * DevExtreme (ui/menu/ui.menu.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  };\n}();\nvar _get = function get(object, property, receiver) {\n  if (null === object) {\n    object = Function.prototype;\n  }\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n  if (void 0 === desc) {\n    var parent = Object.getPrototypeOf(object);\n    if (null === parent) {\n      return;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else {\n    if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (void 0 === getter) {\n        return;\n      }\n      return getter.call(receiver);\n    }\n  }\n};\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _component_registrator = require(\"../../core/component_registrator\");\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\nvar _common = require(\"../../core/utils/common\");\nvar _dom = require(\"../../core/utils/dom\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _type = require(\"../../core/utils/type\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _utils = require(\"../overlay/utils\");\nvar _utils2 = require(\"../../events/utils\");\nvar _pointer = require(\"../../events/pointer\");\nvar _pointer2 = _interopRequireDefault(_pointer);\nvar _hover = require(\"../../events/hover\");\nvar _hover2 = _interopRequireDefault(_hover);\nvar _ui = require(\"../context_menu/ui.menu_base\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _overlay = require(\"../overlay\");\nvar _overlay2 = _interopRequireDefault(_overlay);\nvar _ui3 = require(\"./ui.submenu\");\nvar _ui4 = _interopRequireDefault(_ui3);\nvar _button = require(\"../button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _tree_view = require(\"../tree_view\");\nvar _tree_view2 = _interopRequireDefault(_tree_view);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (\"object\" === typeof call || \"function\" === typeof call) ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (\"function\" !== typeof superClass && null !== superClass) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) {\n    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n}\nvar DX_MENU_CLASS = \"dx-menu\";\nvar DX_MENU_VERTICAL_CLASS = DX_MENU_CLASS + \"-vertical\";\nvar DX_MENU_HORIZONTAL_CLASS = DX_MENU_CLASS + \"-horizontal\";\nvar DX_MENU_ITEM_CLASS = DX_MENU_CLASS + \"-item\";\nvar DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + \"-items-container\";\nvar DX_MENU_ITEM_EXPANDED_CLASS = DX_MENU_ITEM_CLASS + \"-expanded\";\nvar DX_CONTEXT_MENU_CLASS = \"dx-context-menu\";\nvar DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS = DX_CONTEXT_MENU_CLASS + \"-container-border\";\nvar DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS = \"dx-context-menu-content-delimiter\";\nvar DX_SUBMENU_CLASS = \"dx-submenu\";\nvar DX_STATE_DISABLED_CLASS = \"dx-state-disabled\";\nvar DX_STATE_HOVER_CLASS = \"dx-state-hover\";\nvar DX_STATE_ACTIVE_CLASS = \"dx-state-active\";\nvar DX_ADAPTIVE_MODE_CLASS = DX_MENU_CLASS + \"-adaptive-mode\";\nvar DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS = DX_MENU_CLASS + \"-hamburger-button\";\nvar DX_ADAPTIVE_MODE_OVERLAY_WRAPPER_CLASS = DX_ADAPTIVE_MODE_CLASS + \"-overlay-wrapper\";\nvar FOCUS_UP = \"up\";\nvar FOCUS_DOWN = \"down\";\nvar FOCUS_LEFT = \"left\";\nvar FOCUS_RIGHT = \"right\";\nvar SHOW_SUBMENU_OPERATION = \"showSubmenu\";\nvar NEXTITEM_OPERATION = \"nextItem\";\nvar PREVITEM_OPERATION = \"prevItem\";\nvar DEFAULT_DELAY = {\n  show: 50,\n  hide: 300\n};\nvar ACTIONS = [\"onSubmenuShowing\", \"onSubmenuShown\", \"onSubmenuHiding\", \"onSubmenuHidden\", \"onItemContextMenu\", \"onItemClick\", \"onSelectionChanged\"];\nvar Menu = function (_MenuBase) {\n  _inherits(Menu, _MenuBase);\n  function Menu() {\n    _classCallCheck(this, Menu);\n    return _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).apply(this, arguments));\n  }\n  _createClass(Menu, [{\n    key: \"_getDefaultOptions\",\n    value: function value() {\n      return (0, _extend.extend)(_get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_getDefaultOptions\", this).call(this), {\n        orientation: \"horizontal\",\n        submenuDirection: \"auto\",\n        showFirstSubmenuMode: {\n          name: \"onClick\",\n          delay: {\n            show: 50,\n            hide: 300\n          }\n        },\n        hideSubmenuOnMouseLeave: false,\n        onSubmenuShowing: null,\n        onSubmenuShown: null,\n        onSubmenuHiding: null,\n        onSubmenuHidden: null,\n        adaptivityEnabled: false\n      });\n    }\n  }, {\n    key: \"_setOptionsByReference\",\n    value: function value() {\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_setOptionsByReference\", this).call(this);\n      (0, _extend.extend)(this._optionsByReference, {\n        animation: true,\n        selectedItem: true\n      });\n    }\n  }, {\n    key: \"_itemElements\",\n    value: function value() {\n      var rootMenuElements = _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_itemElements\", this).call(this);\n      var submenuElements = this._submenuItemElements();\n      return rootMenuElements.add(submenuElements);\n    }\n  }, {\n    key: \"_submenuItemElements\",\n    value: function value() {\n      var elements = [];\n      var itemSelector = \".\" + DX_MENU_ITEM_CLASS;\n      var currentSubmenu = this._submenus.length && this._submenus[0];\n      if (currentSubmenu && currentSubmenu.itemsContainer()) {\n        elements = currentSubmenu.itemsContainer().find(itemSelector);\n      }\n      return elements;\n    }\n  }, {\n    key: \"_focusTarget\",\n    value: function value() {\n      return this.$element();\n    }\n  }, {\n    key: \"_isMenuHorizontal\",\n    value: function value() {\n      return \"horizontal\" === this.option(\"orientation\");\n    }\n  }, {\n    key: \"_moveFocus\",\n    value: function value(location) {\n      var $items = this._getAvailableItems();\n      var isMenuHorizontal = this._isMenuHorizontal();\n      var $activeItem = this._getActiveItem(true);\n      var argument = void 0;\n      var operation = void 0;\n      var navigationAction = void 0;\n      var $newTarget = void 0;\n      switch (location) {\n        case FOCUS_UP:\n          operation = isMenuHorizontal ? SHOW_SUBMENU_OPERATION : this._getItemsNavigationOperation(PREVITEM_OPERATION);\n          argument = isMenuHorizontal ? $activeItem : $items;\n          navigationAction = this._getKeyboardNavigationAction(operation, argument);\n          $newTarget = navigationAction();\n          break;\n        case FOCUS_DOWN:\n          operation = isMenuHorizontal ? SHOW_SUBMENU_OPERATION : this._getItemsNavigationOperation(NEXTITEM_OPERATION);\n          argument = isMenuHorizontal ? $activeItem : $items;\n          navigationAction = this._getKeyboardNavigationAction(operation, argument);\n          $newTarget = navigationAction();\n          break;\n        case FOCUS_RIGHT:\n          operation = isMenuHorizontal ? this._getItemsNavigationOperation(NEXTITEM_OPERATION) : SHOW_SUBMENU_OPERATION;\n          argument = isMenuHorizontal ? $items : $activeItem;\n          navigationAction = this._getKeyboardNavigationAction(operation, argument);\n          $newTarget = navigationAction();\n          break;\n        case FOCUS_LEFT:\n          operation = isMenuHorizontal ? this._getItemsNavigationOperation(PREVITEM_OPERATION) : SHOW_SUBMENU_OPERATION;\n          argument = isMenuHorizontal ? $items : $activeItem;\n          navigationAction = this._getKeyboardNavigationAction(operation, argument);\n          $newTarget = navigationAction();\n          break;\n        default:\n          return _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_moveFocus\", this).call(this, location);\n      }\n      if ($newTarget && 0 !== $newTarget.length) {\n        this.option(\"focusedElement\", (0, _dom.getPublicElement)($newTarget));\n      }\n    }\n  }, {\n    key: \"_getItemsNavigationOperation\",\n    value: function value(operation) {\n      var navOperation = operation;\n      if (this.option(\"rtlEnabled\")) {\n        navOperation = operation === PREVITEM_OPERATION ? NEXTITEM_OPERATION : PREVITEM_OPERATION;\n      }\n      return navOperation;\n    }\n  }, {\n    key: \"_getKeyboardNavigationAction\",\n    value: function value(operation, argument) {\n      var action = _common.noop;\n      switch (operation) {\n        case SHOW_SUBMENU_OPERATION:\n          if (!argument.hasClass(DX_STATE_DISABLED_CLASS)) {\n            action = this._showSubmenu.bind(this, argument);\n          }\n          break;\n        case NEXTITEM_OPERATION:\n          action = this._nextItem.bind(this, argument);\n          break;\n        case PREVITEM_OPERATION:\n          action = this._prevItem.bind(this, argument);\n      }\n      return action;\n    }\n  }, {\n    key: \"_clean\",\n    value: function value() {\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_clean\", this).call(this);\n      this.option(\"templatesRenderAsynchronously\") && clearTimeout(this._resizeEventTimer);\n    }\n  }, {\n    key: \"_visibilityChanged\",\n    value: function value(visible) {\n      if (visible) {\n        if (!this._menuItemsWidth) {\n          this._updateItemsWidthCache();\n        }\n        this._dimensionChanged();\n      }\n    }\n  }, {\n    key: \"_isAdaptivityEnabled\",\n    value: function value() {\n      return this.option(\"adaptivityEnabled\") && \"horizontal\" === this.option(\"orientation\");\n    }\n  }, {\n    key: \"_updateItemsWidthCache\",\n    value: function value() {\n      var $menuItems = this.$element().find(\"ul\").first().children(\"li\").children(\".\" + DX_MENU_ITEM_CLASS);\n      this._menuItemsWidth = this._getSummaryItemsWidth($menuItems, true);\n    }\n  }, {\n    key: \"_dimensionChanged\",\n    value: function value() {\n      if (!this._isAdaptivityEnabled()) {\n        return;\n      }\n      var containerWidth = this.$element().outerWidth();\n      this._toggleAdaptiveMode(this._menuItemsWidth > containerWidth);\n    }\n  }, {\n    key: \"_init\",\n    value: function value() {\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_init\", this).call(this);\n      this._submenus = [];\n    }\n  }, {\n    key: \"_initActions\",\n    value: function value() {\n      var _this2 = this;\n      this._actions = {};\n      (0, _iterator.each)(ACTIONS, function (index, action) {\n        _this2._actions[action] = _this2._createActionByOption(action);\n      });\n    }\n  }, {\n    key: \"_initMarkup\",\n    value: function value() {\n      this._visibleSubmenu = null;\n      this.$element().addClass(DX_MENU_CLASS);\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_initMarkup\", this).call(this);\n      this.setAria(\"role\", \"menubar\");\n    }\n  }, {\n    key: \"_render\",\n    value: function value() {\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_render\", this).call(this);\n      this._initAdaptivity();\n    }\n  }, {\n    key: \"_renderHamburgerButton\",\n    value: function value() {\n      this._hamburger = new _button2.default((0, _renderer2.default)(\"<div>\").addClass(DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS), {\n        icon: \"menu\",\n        activeStateEnabled: false,\n        onClick: this._toggleTreeView.bind(this)\n      });\n      return this._hamburger.$element();\n    }\n  }, {\n    key: \"_toggleTreeView\",\n    value: function value(state) {\n      if ((0, _type.isPlainObject)(state)) {\n        state = !this._overlay.option(\"visible\");\n      }\n      this._overlay.option(\"visible\", state);\n      this._toggleHamburgerActiveState(state);\n    }\n  }, {\n    key: \"_toggleHamburgerActiveState\",\n    value: function value(state) {\n      this._hamburger && this._hamburger.$element().toggleClass(DX_STATE_ACTIVE_CLASS, state);\n    }\n  }, {\n    key: \"_toggleAdaptiveMode\",\n    value: function value(state) {\n      var $menuItemsContainer = this.$element().find(\".\" + DX_MENU_HORIZONTAL_CLASS);\n      var $adaptiveElements = this.$element().find(\".\" + DX_ADAPTIVE_MODE_CLASS);\n      if (state) {\n        this._hideVisibleSubmenu();\n      } else {\n        this._treeView && this._treeView.collapseAll();\n        this._overlay && this._toggleTreeView(state);\n      }\n      $menuItemsContainer.toggle(!state);\n      $adaptiveElements.toggle(state);\n    }\n  }, {\n    key: \"_removeAdaptivity\",\n    value: function value() {\n      if (!this._$adaptiveContainer) {\n        return;\n      }\n      this._toggleAdaptiveMode(false);\n      this._$adaptiveContainer.remove();\n      this._$adaptiveContainer = null;\n      this._treeView = null;\n      this._hamburger = null;\n      this._overlay = null;\n    }\n  }, {\n    key: \"_treeviewItemClickHandler\",\n    value: function value(e) {\n      this._actions.onItemClick(e);\n      if (!e.node.children.length) {\n        this._toggleTreeView(false);\n      }\n    }\n  }, {\n    key: \"_getAdaptiveOverlayOptions\",\n    value: function value() {\n      var _this3 = this;\n      var rtl = this.option(\"rtlEnabled\");\n      var position = rtl ? \"right\" : \"left\";\n      return {\n        maxHeight: function maxHeight() {\n          return (0, _utils.getElementMaxHeightByWindow)(_this3.$element());\n        },\n        deferRendering: false,\n        shading: false,\n        animation: false,\n        closeOnTargetScroll: true,\n        onHidden: function onHidden() {\n          _this3._toggleHamburgerActiveState(false);\n        },\n        height: \"auto\",\n        closeOnOutsideClick: function closeOnOutsideClick(e) {\n          return !(0, _renderer2.default)(e.target).closest(\".\" + DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS).length;\n        },\n        position: {\n          collision: \"flipfit\",\n          at: \"bottom \" + position,\n          my: \"top \" + position,\n          of: this._hamburger.$element()\n        }\n      };\n    }\n  }, {\n    key: \"_getTreeViewOptions\",\n    value: function value() {\n      var _this4 = this;\n      var menuOptions = {};\n      var optionsToTransfer = [\"rtlEnabled\", \"width\", \"accessKey\", \"activeStateEnabled\", \"animation\", \"dataSource\", \"disabled\", \"displayExpr\", \"displayExpr\", \"focusStateEnabled\", \"hint\", \"hoverStateEnabled\", \"itemsExpr\", \"items\", \"itemTemplate\", \"selectedExpr\", \"selectionMode\", \"tabIndex\", \"visible\"];\n      var actionsToTransfer = [\"onItemContextMenu\", \"onSelectionChanged\"];\n      (0, _iterator.each)(optionsToTransfer, function (_, option) {\n        menuOptions[option] = _this4.option(option);\n      });\n      (0, _iterator.each)(actionsToTransfer, function (_, actionName) {\n        menuOptions[actionName] = function (e) {\n          _this4._actions[actionName](e);\n        };\n      });\n      return (0, _extend.extend)(menuOptions, {\n        dataSource: this.getDataSource(),\n        animationEnabled: !!this.option(\"animation\"),\n        onItemClick: this._treeviewItemClickHandler.bind(this),\n        onItemExpanded: function onItemExpanded(e) {\n          _this4._overlay.repaint();\n          _this4._actions.onSubmenuShown(e);\n        },\n        onItemCollapsed: function onItemCollapsed(e) {\n          _this4._overlay.repaint();\n          _this4._actions.onSubmenuHidden(e);\n        },\n        selectNodesRecursive: false,\n        selectByClick: this.option(\"selectByClick\"),\n        expandEvent: \"click\"\n      });\n    }\n  }, {\n    key: \"_initAdaptivity\",\n    value: function value() {\n      if (!this._isAdaptivityEnabled()) {\n        return;\n      }\n      this._$adaptiveContainer = (0, _renderer2.default)(\"<div>\").addClass(DX_ADAPTIVE_MODE_CLASS);\n      var $hamburger = this._renderHamburgerButton();\n      this._treeView = this._createComponent((0, _renderer2.default)(\"<div>\"), _tree_view2.default, this._getTreeViewOptions());\n      this._overlay = this._createComponent((0, _renderer2.default)(\"<div>\"), _overlay2.default, this._getAdaptiveOverlayOptions());\n      this._overlay.$content().append(this._treeView.$element()).addClass(DX_ADAPTIVE_MODE_CLASS).addClass(this.option(\"cssClass\"));\n      this._overlay._wrapper().addClass(DX_ADAPTIVE_MODE_OVERLAY_WRAPPER_CLASS);\n      this._$adaptiveContainer.append($hamburger);\n      this._$adaptiveContainer.append(this._overlay.$element());\n      this.$element().append(this._$adaptiveContainer);\n      this._updateItemsWidthCache();\n      this._dimensionChanged();\n    }\n  }, {\n    key: \"_getDelay\",\n    value: function value(delayType) {\n      var delay = this.option(\"showFirstSubmenuMode\").delay;\n      if (!(0, _type.isDefined)(delay)) {\n        return DEFAULT_DELAY[delayType];\n      } else {\n        return (0, _type.isObject)(delay) ? delay[delayType] : delay;\n      }\n    }\n  }, {\n    key: \"_keyboardHandler\",\n    value: function value(e) {\n      return this._visibleSubmenu ? true : _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_keyboardHandler\", this).call(this, e);\n    }\n  }, {\n    key: \"_renderContainer\",\n    value: function value() {\n      var $wrapper = (0, _renderer2.default)(\"<div>\");\n      $wrapper.appendTo(this.$element()).addClass(this._isMenuHorizontal() ? DX_MENU_HORIZONTAL_CLASS : DX_MENU_VERTICAL_CLASS);\n      return _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_renderContainer\", this).call(this, $wrapper);\n    }\n  }, {\n    key: \"_renderSubmenuItems\",\n    value: function value(node, $itemFrame) {\n      var submenu = this._createSubmenu(node, $itemFrame);\n      this._submenus.push(submenu);\n      this._renderBorderElement($itemFrame);\n      return submenu;\n    }\n  }, {\n    key: \"_createSubmenu\",\n    value: function value(node, $rootItem) {\n      var $submenuContainer = (0, _renderer2.default)(\"<div>\").addClass(DX_CONTEXT_MENU_CLASS).appendTo($rootItem);\n      var childKeyboardProcessor = this._keyboardProcessor && this._keyboardProcessor.attachChildProcessor(),\n        items = this._getChildNodes(node),\n        result = this._createComponent($submenuContainer, _ui4.default, (0, _extend.extend)(this._getSubmenuOptions(), {\n          _keyboardProcessor: childKeyboardProcessor,\n          _dataAdapter: this._dataAdapter,\n          _parentKey: node.internalFields.key,\n          items: items,\n          onHoverStart: this._clearTimeouts.bind(this),\n          position: this.getSubmenuPosition($rootItem)\n        }));\n      this._attachSubmenuHandlers($rootItem, result);\n      return result;\n    }\n  }, {\n    key: \"_getSubmenuOptions\",\n    value: function value() {\n      var _this5 = this;\n      var $submenuTarget = (0, _renderer2.default)(\"<div>\");\n      var isMenuHorizontal = this._isMenuHorizontal();\n      return {\n        itemTemplate: this.option(\"itemTemplate\"),\n        target: $submenuTarget,\n        orientation: this.option(\"orientation\"),\n        selectionMode: this.option(\"selectionMode\"),\n        cssClass: this.option(\"cssClass\"),\n        selectByClick: this.option(\"selectByClick\"),\n        hoverStateEnabled: this.option(\"hoverStateEnabled\"),\n        activeStateEnabled: this.option(\"activeStateEnabled\"),\n        focusStateEnabled: this.option(\"focusStateEnabled\"),\n        animation: this.option(\"animation\"),\n        showSubmenuMode: this.option(\"showSubmenuMode\"),\n        displayExpr: this.option(\"displayExpr\"),\n        disabledExpr: this.option(\"disabledExpr\"),\n        selectedExpr: this.option(\"selectedExpr\"),\n        itemsExpr: this.option(\"itemsExpr\"),\n        onFocusedItemChanged: function onFocusedItemChanged(e) {\n          if (!e.component.option(\"visible\")) {\n            return;\n          }\n          _this5.option(\"focusedElement\", e.component.option(\"focusedElement\"));\n        },\n        onSelectionChanged: this._nestedItemOnSelectionChangedHandler.bind(this),\n        onItemClick: this._nestedItemOnItemClickHandler.bind(this),\n        onItemRendered: this.option(\"onItemRendered\"),\n        onLeftFirstItem: isMenuHorizontal ? null : this._moveMainMenuFocus.bind(this, PREVITEM_OPERATION),\n        onLeftLastItem: isMenuHorizontal ? null : this._moveMainMenuFocus.bind(this, NEXTITEM_OPERATION),\n        onCloseRootSubmenu: this._moveMainMenuFocus.bind(this, isMenuHorizontal ? PREVITEM_OPERATION : null),\n        onExpandLastSubmenu: isMenuHorizontal ? this._moveMainMenuFocus.bind(this, NEXTITEM_OPERATION) : null\n      };\n    }\n  }, {\n    key: \"_getShowFirstSubmenuMode\",\n    value: function value() {\n      if (!this._isDesktopDevice()) {\n        return \"onClick\";\n      }\n      var optionValue = this.option(\"showFirstSubmenuMode\");\n      return (0, _type.isObject)(optionValue) ? optionValue.name : optionValue;\n    }\n  }, {\n    key: \"_moveMainMenuFocus\",\n    value: function value(direction) {\n      var $items = this._getAvailableItems();\n      var itemCount = $items.length;\n      var $currentItem = $items.filter(\".\" + DX_MENU_ITEM_EXPANDED_CLASS).eq(0);\n      var itemIndex = $items.index($currentItem);\n      this._hideSubmenu(this._visibleSubmenu);\n      itemIndex += direction === PREVITEM_OPERATION ? -1 : 1;\n      if (itemIndex >= itemCount) {\n        itemIndex = 0;\n      } else {\n        if (itemIndex < 0) {\n          itemIndex = itemCount - 1;\n        }\n      }\n      var $newItem = $items.eq(itemIndex);\n      this.option(\"focusedElement\", (0, _dom.getPublicElement)($newItem));\n    }\n  }, {\n    key: \"_nestedItemOnSelectionChangedHandler\",\n    value: function value(args) {\n      var selectedItem = args.addedItems.length && args.addedItems[0];\n      var submenu = _ui4.default.getInstance(args.element);\n      var onSelectionChanged = this._actions.onSelectionChanged;\n      onSelectionChanged(args);\n      selectedItem && this._clearSelectionInSubmenus(selectedItem[0], submenu);\n      this._clearRootSelection();\n      this._setOptionSilent(\"selectedItem\", selectedItem);\n    }\n  }, {\n    key: \"_clearSelectionInSubmenus\",\n    value: function value(item, targetSubmenu) {\n      var _this6 = this;\n      var cleanAllSubmenus = !arguments.length;\n      (0, _iterator.each)(this._submenus, function (index, submenu) {\n        var $submenu = submenu._itemContainer();\n        var isOtherItem = !$submenu.is(targetSubmenu && targetSubmenu._itemContainer());\n        var $selectedItem = $submenu.find(\".\" + _this6._selectedItemClass());\n        if (isOtherItem && $selectedItem.length || cleanAllSubmenus) {\n          $selectedItem.removeClass(_this6._selectedItemClass());\n          var selectedItemData = _this6._getItemData($selectedItem);\n          if (selectedItemData) {\n            selectedItemData.selected = false;\n          }\n          submenu._clearSelectedItems();\n        }\n      });\n    }\n  }, {\n    key: \"_clearRootSelection\",\n    value: function value() {\n      var $prevSelectedItem = this.$element().find(\".\" + DX_MENU_ITEMS_CONTAINER_CLASS).first().children().children().filter(\".\" + this._selectedItemClass());\n      if ($prevSelectedItem.length) {\n        var prevSelectedItemData = void 0;\n        prevSelectedItemData = this._getItemData($prevSelectedItem);\n        prevSelectedItemData.selected = false;\n        $prevSelectedItem.removeClass(this._selectedItemClass());\n      }\n    }\n  }, {\n    key: \"_nestedItemOnItemClickHandler\",\n    value: function value(e) {\n      this._actions.onItemClick(e);\n    }\n  }, {\n    key: \"_attachSubmenuHandlers\",\n    value: function value($rootItem, submenu) {\n      var _this7 = this;\n      var $submenuOverlayContent = submenu.getOverlayContent();\n      var submenus = $submenuOverlayContent.find(\".\" + DX_SUBMENU_CLASS);\n      var submenuMouseLeaveName = (0, _utils2.addNamespace)(_hover2.default.end, this.NAME + \"_submenu\");\n      submenu.option({\n        onShowing: this._submenuOnShowingHandler.bind(this, $rootItem, submenu),\n        onShown: this._submenuOnShownHandler.bind(this, $rootItem, submenu),\n        onHiding: this._submenuOnHidingHandler.bind(this, $rootItem, submenu),\n        onHidden: this._submenuOnHiddenHandler.bind(this, $rootItem, submenu)\n      });\n      (0, _iterator.each)(submenus, function (index, submenu) {\n        _events_engine2.default.off(submenu, submenuMouseLeaveName);\n        _events_engine2.default.on(submenu, submenuMouseLeaveName, null, _this7._submenuMouseLeaveHandler.bind(_this7, $rootItem));\n      });\n    }\n  }, {\n    key: \"_submenuOnShowingHandler\",\n    value: function value($rootItem, submenu) {\n      var $border = $rootItem.children(\".\" + DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS);\n      this._actions.onSubmenuShowing({\n        rootItem: (0, _dom.getPublicElement)($rootItem),\n        submenu: submenu\n      });\n      $border.show();\n      $rootItem.addClass(DX_MENU_ITEM_EXPANDED_CLASS);\n    }\n  }, {\n    key: \"_submenuOnShownHandler\",\n    value: function value($rootItem, submenu) {\n      this._actions.onSubmenuShown({\n        rootItem: (0, _dom.getPublicElement)($rootItem),\n        submenu: submenu\n      });\n    }\n  }, {\n    key: \"_submenuOnHidingHandler\",\n    value: function value($rootItem, submenu, eventArgs) {\n      var $border = $rootItem.children(\".\" + DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS);\n      var args = eventArgs;\n      args.rootItem = (0, _dom.getPublicElement)($rootItem);\n      args.submenu = submenu;\n      this._actions.onSubmenuHiding(args);\n      eventArgs = args;\n      if (!eventArgs.cancel) {\n        if (this._visibleSubmenu === submenu) {\n          this._visibleSubmenu = null;\n        }\n        $border.hide();\n        $rootItem.removeClass(DX_MENU_ITEM_EXPANDED_CLASS);\n      }\n    }\n  }, {\n    key: \"_submenuOnHiddenHandler\",\n    value: function value($rootItem, submenu) {\n      this._actions.onSubmenuHidden({\n        rootItem: (0, _dom.getPublicElement)($rootItem),\n        submenu: submenu\n      });\n    }\n  }, {\n    key: \"_submenuMouseLeaveHandler\",\n    value: function value($rootItem, eventArgs) {\n      var target = (0, _renderer2.default)(eventArgs.relatedTarget).parents(\".\" + DX_CONTEXT_MENU_CLASS)[0];\n      var contextMenu = this._getSubmenuByRootElement($rootItem).getOverlayContent()[0];\n      if (this.option(\"hideSubmenuOnMouseLeave\") && target !== contextMenu) {\n        this._clearTimeouts();\n        setTimeout(this._hideSubmenuAfterTimeout.bind(this), this._getDelay(\"hide\"));\n      }\n    }\n  }, {\n    key: \"_hideSubmenuAfterTimeout\",\n    value: function value() {\n      if (!this._visibleSubmenu) {\n        return;\n      }\n      var isRootItemHovered = (0, _renderer2.default)(this._visibleSubmenu.$element().context).hasClass(DX_STATE_HOVER_CLASS);\n      var isSubmenuItemHovered = this._visibleSubmenu.getOverlayContent().find(\".\" + DX_STATE_HOVER_CLASS).length;\n      var hoveredElementFromSubMenu = this._visibleSubmenu.getOverlayContent().get(0).querySelector(\":hover\");\n      if (!hoveredElementFromSubMenu && !isSubmenuItemHovered && !isRootItemHovered) {\n        this._visibleSubmenu.hide();\n      }\n    }\n  }, {\n    key: \"_getSubmenuByRootElement\",\n    value: function value($rootItem) {\n      if (!$rootItem) {\n        return false;\n      }\n      var $submenu = $rootItem.children(\".\" + DX_CONTEXT_MENU_CLASS);\n      return $submenu.length && _ui4.default.getInstance($submenu);\n    }\n  }, {\n    key: \"getSubmenuPosition\",\n    value: function value($rootItem) {\n      var isHorizontalMenu = this._isMenuHorizontal();\n      var submenuDirection = this.option(\"submenuDirection\").toLowerCase();\n      var rtlEnabled = this.option(\"rtlEnabled\");\n      var submenuPosition = {\n        collision: \"flip\",\n        of: $rootItem\n      };\n      switch (submenuDirection) {\n        case \"leftortop\":\n          submenuPosition.at = \"left top\";\n          submenuPosition.my = isHorizontalMenu ? \"left bottom\" : \"right top\";\n          break;\n        case \"rightorbottom\":\n          submenuPosition.at = isHorizontalMenu ? \"left bottom\" : \"right top\";\n          submenuPosition.my = \"left top\";\n          break;\n        default:\n          if (isHorizontalMenu) {\n            submenuPosition.at = rtlEnabled ? \"right bottom\" : \"left bottom\";\n            submenuPosition.my = rtlEnabled ? \"right top\" : \"left top\";\n          } else {\n            submenuPosition.at = rtlEnabled ? \"left top\" : \"right top\";\n            submenuPosition.my = rtlEnabled ? \"right top\" : \"left top\";\n          }\n      }\n      return submenuPosition;\n    }\n  }, {\n    key: \"_renderBorderElement\",\n    value: function value($item) {\n      (0, _renderer2.default)(\"<div>\").appendTo($item).addClass(DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS).hide();\n    }\n  }, {\n    key: \"_itemPointerDownHandler\",\n    value: function value(e) {\n      var $target = (0, _renderer2.default)(e.target);\n      var $closestItem = $target.closest(this._itemElements());\n      if ($closestItem.hasClass(\"dx-menu-item-has-submenu\")) {\n        this.option(\"focusedElement\", null);\n        return;\n      }\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_itemPointerDownHandler\", this).call(this, e);\n    }\n  }, {\n    key: \"_hoverStartHandler\",\n    value: function value(e) {\n      var mouseMoveEventName = (0, _utils2.addNamespace)(_pointer2.default.move, this.NAME);\n      var $item = this._getItemElementByEventArgs(e);\n      var node = this._dataAdapter.getNodeByItem(this._getItemData($item));\n      var isSelectionActive = (0, _type.isDefined)(e.buttons) && 1 === e.buttons || !(0, _type.isDefined)(e.buttons) && 1 === e.which;\n      if (this._isItemDisabled($item)) {\n        return;\n      }\n      _events_engine2.default.off($item, mouseMoveEventName);\n      if (!this._hasChildren(node)) {\n        this._showSubmenuTimer = setTimeout(this._hideSubmenuAfterTimeout.bind(this), this._getDelay(\"hide\"));\n        return;\n      }\n      if (\"onHover\" === this._getShowFirstSubmenuMode() && !isSelectionActive) {\n        var submenu = this._getSubmenuByElement($item);\n        this._clearTimeouts();\n        if (!submenu.isOverlayVisible()) {\n          _events_engine2.default.on($item, mouseMoveEventName, this._itemMouseMoveHandler.bind(this));\n          this._showSubmenuTimer = this._getDelay(\"hide\");\n        }\n      }\n    }\n  }, {\n    key: \"_hoverEndHandler\",\n    value: function value(eventArg) {\n      var _this8 = this;\n      var $item = this._getItemElementByEventArgs(eventArg);\n      var relatedTarget = (0, _renderer2.default)(eventArg.relatedTarget);\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_hoverEndHandler\", this).call(this, eventArg);\n      this._clearTimeouts();\n      if (this._isItemDisabled($item)) {\n        return;\n      }\n      if (relatedTarget.hasClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS)) {\n        return;\n      }\n      if (this.option(\"hideSubmenuOnMouseLeave\") && !relatedTarget.hasClass(DX_MENU_ITEMS_CONTAINER_CLASS)) {\n        this._hideSubmenuTimer = setTimeout(function () {\n          _this8._hideSubmenuAfterTimeout();\n        }, this._getDelay(\"hide\"));\n      }\n    }\n  }, {\n    key: \"_hideVisibleSubmenu\",\n    value: function value() {\n      if (!this._visibleSubmenu) {\n        return false;\n      }\n      this._hideSubmenu(this._visibleSubmenu);\n      return true;\n    }\n  }, {\n    key: \"_showSubmenu\",\n    value: function value($itemElement) {\n      var submenu = this._getSubmenuByElement($itemElement);\n      if (this._visibleSubmenu !== submenu) {\n        this._hideVisibleSubmenu();\n      }\n      if (submenu) {\n        submenu.show();\n        this.option(\"focusedElement\", submenu.option(\"focusedElement\"));\n      }\n      this._visibleSubmenu = submenu;\n      this._hoveredRootItem = $itemElement;\n    }\n  }, {\n    key: \"_hideSubmenu\",\n    value: function value(submenu) {\n      submenu && submenu.hide();\n      if (this._visibleSubmenu === submenu) {\n        this._visibleSubmenu = null;\n      }\n      this._hoveredRootItem = null;\n    }\n  }, {\n    key: \"_itemMouseMoveHandler\",\n    value: function value(e) {\n      var _this9 = this;\n      if (e.pointers && e.pointers.length) {\n        return;\n      }\n      var $item = (0, _renderer2.default)(e.currentTarget);\n      if (!(0, _type.isDefined)(this._showSubmenuTimer)) {\n        return;\n      }\n      this._clearTimeouts();\n      this._showSubmenuTimer = setTimeout(function () {\n        var submenu = _this9._getSubmenuByElement($item);\n        if (submenu && !submenu.isOverlayVisible()) {\n          _this9._showSubmenu($item);\n        }\n      }, this._getDelay(\"show\"));\n    }\n  }, {\n    key: \"_clearTimeouts\",\n    value: function value() {\n      clearTimeout(this._hideSubmenuTimer);\n      clearTimeout(this._showSubmenuTimer);\n    }\n  }, {\n    key: \"_getSubmenuByElement\",\n    value: function value($itemElement, itemData) {\n      var submenu = this._getSubmenuByRootElement($itemElement);\n      if (submenu) {\n        return submenu;\n      } else {\n        itemData = itemData || this._getItemData($itemElement);\n        var node = this._dataAdapter.getNodeByItem(itemData);\n        return this._hasChildren(node) && this._renderSubmenuItems(node, $itemElement);\n      }\n    }\n  }, {\n    key: \"_updateSubmenuVisibilityOnClick\",\n    value: function value(actionArgs) {\n      var args = actionArgs.args.length && actionArgs.args[0];\n      if (!args || this._disabledGetter(args.itemData)) {\n        return;\n      }\n      var $itemElement = (0, _renderer2.default)(args.itemElement);\n      var currentSubmenu = this._getSubmenuByElement($itemElement, args.itemData);\n      this._updateSelectedItemOnClick(actionArgs);\n      if (this._visibleSubmenu) {\n        if (this._visibleSubmenu === currentSubmenu) {\n          if (\"onClick\" === this.option(\"showFirstSubmenuMode\")) {\n            this._hideSubmenu(this._visibleSubmenu);\n          }\n          return;\n        } else {\n          this._hideSubmenu(this._visibleSubmenu);\n        }\n      }\n      if (!currentSubmenu) {\n        return;\n      }\n      if (!currentSubmenu.isOverlayVisible()) {\n        this._showSubmenu($itemElement);\n        return;\n      }\n    }\n  }, {\n    key: \"_optionChanged\",\n    value: function value(args) {\n      switch (args.name) {\n        case \"orientation\":\n        case \"submenuDirection\":\n          this._invalidate();\n          break;\n        case \"showFirstSubmenuMode\":\n        case \"hideSubmenuOnMouseLeave\":\n          break;\n        case \"showSubmenuMode\":\n          this._changeSubmenusOption(args.name, args.value);\n          break;\n        case \"onSubmenuShowing\":\n        case \"onSubmenuShown\":\n        case \"onSubmenuHiding\":\n        case \"onSubmenuHidden\":\n          this._initActions();\n          break;\n        case \"adaptivityEnabled\":\n          args.value ? this._initAdaptivity() : this._removeAdaptivity();\n          break;\n        case \"width\":\n          if (this._isAdaptivityEnabled()) {\n            this._treeView.option(args.name, args.value);\n            this._overlay.option(args.name, args.value);\n          }\n          _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_optionChanged\", this).call(this, args);\n          this._dimensionChanged();\n          break;\n        case \"animation\":\n          if (this._isAdaptivityEnabled()) {\n            this._treeView.option(\"animationEnabled\", !!args.value);\n          }\n          _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_optionChanged\", this).call(this, args);\n          break;\n        default:\n          if (this._isAdaptivityEnabled()) {\n            this._treeView.option(args.name, args.value);\n          }\n          _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"_optionChanged\", this).call(this, args);\n      }\n    }\n  }, {\n    key: \"_changeSubmenusOption\",\n    value: function value(name, _value) {\n      (0, _iterator.each)(this._submenus, function (index, submenu) {\n        submenu.option(name, _value);\n      });\n    }\n  }, {\n    key: \"selectItem\",\n    value: function value(itemElement) {\n      this._hideSubmenu(this._visibleSubmenu);\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"selectItem\", this).call(this, itemElement);\n    }\n  }, {\n    key: \"unselectItem\",\n    value: function value(itemElement) {\n      this._hideSubmenu(this._visibleSubmenu);\n      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), \"selectItem\", this).call(this, itemElement);\n    }\n  }]);\n  return Menu;\n}(_ui2.default);\n(0, _component_registrator2.default)(\"dxMenu\", Menu);\nmodule.exports = Menu;","map":null,"metadata":{},"sourceType":"script"}