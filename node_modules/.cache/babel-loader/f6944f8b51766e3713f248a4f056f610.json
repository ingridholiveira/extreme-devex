{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\nvar _common = require(\"../../core/utils/common\");\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _type = require(\"../../core/utils/type\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _selectors = require(\"../widget/selectors\");\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _button = require(\"../button\");\nvar _button2 = _interopRequireDefault(_button);\nvar _pointer = require(\"../../events/pointer\");\nvar _pointer2 = _interopRequireDefault(_pointer);\nvar _validation_engine = require(\"../validation_engine\");\nvar _validation_engine2 = _interopRequireDefault(_validation_engine);\nvar _validator = require(\"../validator\");\nvar _validator2 = _interopRequireDefault(_validator);\nvar _tooltip = require(\"../tooltip\");\nvar _tooltip2 = _interopRequireDefault(_tooltip);\nvar _overlay = require(\"../overlay\");\nvar _overlay2 = _interopRequireDefault(_overlay);\nvar _themes = require(\"../themes\");\nvar _themes2 = _interopRequireDefault(_themes);\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _deferred = require(\"../../core/utils/deferred\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar INVALIDATE_CLASS = \"invalid\",\n  REVERT_TOOLTIP_CLASS = \"revert-tooltip\",\n  ROWS_VIEW_CLASS = \"rowsview\",\n  INVALID_MESSAGE_CLASS = \"dx-invalid-message\",\n  WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\",\n  INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\",\n  REVERT_BUTTON_CLASS = \"dx-revert-button\",\n  CELL_HIGHLIGHT_OUTLINE = \"dx-highlight-outline\",\n  VALIDATOR_CLASS = \"validator\",\n  INSERT_INDEX = \"__DX_INSERT_INDEX__\",\n  PADDING_BETWEEN_TOOLTIPS = 2,\n  EDIT_MODE_ROW = \"row\",\n  EDIT_MODE_FORM = \"form\",\n  EDIT_MODE_BATCH = \"batch\",\n  EDIT_MODE_CELL = \"cell\",\n  EDIT_MODE_POPUP = \"popup\",\n  GROUP_CELL_CLASS = \"dx-group-cell\",\n  FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM],\n  COMMAND_TRANSPARENT = \"transparent\";\nvar ValidatingController = _uiGrid_core2.default.Controller.inherit(function () {\n  return {\n    init: function init() {\n      this._editingController = this.getController(\"editing\");\n      this.createAction(\"onRowValidating\");\n    },\n    _rowValidating: function _rowValidating(editData, validate) {\n      var deferred = new _deferred.Deferred(),\n        brokenRules = validate ? validate.brokenRules || validate.brokenRule && [validate.brokenRule] : [],\n        isValid = validate ? validate.isValid : editData.isValid,\n        parameters = {\n          brokenRules: brokenRules,\n          isValid: isValid,\n          key: editData.key,\n          newData: editData.data,\n          oldData: editData.oldData,\n          promise: null,\n          errorText: this.getHiddenValidatorsErrorText(brokenRules)\n        };\n      this.executeAction(\"onRowValidating\", parameters);\n      (0, _deferred.when)(parameters.promise).always(function () {\n        editData.isValid = parameters.isValid;\n        editData.errorText = parameters.errorText;\n        deferred.resolve(parameters);\n      });\n      return deferred.promise();\n    },\n    getHiddenValidatorsErrorText: function getHiddenValidatorsErrorText(brokenRules) {\n      var brokenRulesMessages = [];\n      (0, _iterator.each)(brokenRules, function (_, brokenRule) {\n        if (!brokenRule.validator.$element().parent().length) {\n          brokenRulesMessages.push(brokenRule.message);\n        }\n      });\n      return brokenRulesMessages.join(\", \");\n    },\n    validate: function validate(isFull) {\n      var _this = this;\n      var isValid = true;\n      var editingController = this._editingController,\n        deferred = new _deferred.Deferred(),\n        completeList = [];\n      isFull = isFull || editingController.getEditMode() === EDIT_MODE_ROW;\n      if (this._isValidationInProgress) {\n        return deferred.resolve(false).promise();\n      }\n      this._isValidationInProgress = true;\n      if (isFull) {\n        (0, _iterator.each)(editingController._editData, function (index, editData) {\n          var validationResult = void 0;\n          if (editData.type && \"remove\" !== editData.type) {\n            validationResult = _this.validateGroup(editData);\n            completeList.push(validationResult);\n            validationResult.done(function (validationResult) {\n              if (!validationResult.isValid) {\n                (0, _iterator.each)(validationResult.brokenRules, function () {\n                  var value = this.validator.option(\"adapter\").getValue();\n                  if (void 0 === value) {\n                    value = null;\n                  }\n                  if (this.column) {\n                    editingController.updateFieldValue({\n                      key: editData.key,\n                      column: this.column\n                    }, value, null, true);\n                  }\n                });\n              }\n              isValid = isValid && validationResult.isValid;\n            });\n          }\n        });\n      } else {\n        if (this._currentCellValidator) {\n          var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\n          completeList.push(validationResult);\n          validationResult.done(function (validationResult) {\n            isValid = validationResult.isValid;\n          });\n        }\n      }\n      this._isValidationInProgress = false;\n      _deferred.when.apply(void 0, completeList).done(function () {\n        deferred.resolve(isValid);\n      });\n      return deferred.promise();\n    },\n    validateGroup: function validateGroup(editData) {\n      var _this2 = this;\n      var result = new _deferred.Deferred(),\n        validateGroup = _validation_engine2.default.getGroupConfig(editData);\n      var validationResults = void 0;\n      if (validateGroup && validateGroup.validators.length) {\n        validationResults = _validation_engine2.default.validateGroup(editData);\n      }\n      (0, _deferred.when)(validationResults && validationResults.complete || validationResults).done(function (validationResults) {\n        (0, _deferred.when)(_this2._rowValidating(editData, validationResults)).done(result.resolve);\n      });\n      return result.promise();\n    },\n    updateEditData: function updateEditData(editData) {\n      var editMode = this._editingController.getEditMode();\n      if (FORM_BASED_MODES.indexOf(editMode) === -1) {\n        this.setDisableApplyValidationResults(true);\n        if (_validation_engine2.default.getGroupConfig(editData)) {\n          var validationResult = _validation_engine2.default.validateGroup(editData);\n          (0, _deferred.when)(validationResult.complete || validationResult).done(function (validationResult) {\n            editData.isValid = validationResult.isValid;\n          });\n        } else {\n          editData.isValid = true;\n        }\n        this.setDisableApplyValidationResults(false);\n      } else {\n        editData.isValid = true;\n      }\n    },\n    setValidator: function setValidator(validator) {\n      this._currentCellValidator = validator;\n    },\n    getValidator: function getValidator() {\n      return this._currentCellValidator;\n    },\n    createValidator: function createValidator(parameters, $container) {\n      var editData,\n        editIndex,\n        visibleColumns,\n        columnsController,\n        that = this,\n        editingController = that._editingController,\n        column = parameters.column,\n        defaultValidationResult = function defaultValidationResult(options) {\n          if (options.brokenRule) {\n            options.brokenRule.columnIndex = column.index;\n            options.brokenRule.column = column;\n          }\n          if ($container && !that.getDisableApplyValidationResults()) {\n            if (!options.isValid) {\n              var $focus = $container.find(\":focus\");\n              editingController.showHighlighting($container, true);\n              if (!(0, _selectors.focused)($focus)) {\n                _events_engine2.default.trigger($focus, \"focus\");\n                _events_engine2.default.trigger($focus, _pointer2.default.down);\n              }\n            }\n            $container.toggleClass(that.addWidgetPrefix(INVALIDATE_CLASS), !options.isValid);\n          }\n        },\n        getValue = function getValue() {\n          var value = column.calculateCellValue(editData.data || {});\n          return void 0 !== value ? value : parameters.value;\n        },\n        showEditorAlways = column.showEditorAlways;\n      if (!column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length || (0, _type.isDefined)(column.command)) {\n        return;\n      }\n      editIndex = editingController.getIndexByKey(parameters.key, editingController._editData);\n      if (editIndex < 0) {\n        if (!showEditorAlways) {\n          columnsController = that.getController(\"columns\");\n          visibleColumns = columnsController && columnsController.getVisibleColumns() || [];\n          showEditorAlways = visibleColumns.some(function (column) {\n            return column.showEditorAlways;\n          });\n        }\n        if (showEditorAlways) {\n          editIndex = editingController._addEditData({\n            key: parameters.key,\n            oldData: parameters.data\n          });\n        }\n      }\n      if (editIndex >= 0) {\n        if ($container && !$container.length) {\n          _ui2.default.log(\"E1050\");\n          return;\n        }\n        editData = editingController._editData[editIndex];\n        var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\n        $container && $container.addClass(that.addWidgetPrefix(VALIDATOR_CLASS));\n        var validator = new _validator2.default($container || (0, _renderer2.default)(\"<div>\"), {\n          name: column.caption,\n          validationRules: (0, _extend.extend)(true, [], column.validationRules),\n          validationGroup: editData,\n          adapter: useDefaultValidator ? null : {\n            getValue: getValue,\n            applyValidationResults: defaultValidationResult\n          },\n          dataGetter: function dataGetter() {\n            return (0, _uiGrid_core3.createObjectWithChanges)(editData.oldData, editData.data);\n          }\n        });\n        if (useDefaultValidator) {\n          var adapter = validator.option(\"adapter\");\n          if (adapter) {\n            adapter.getValue = getValue;\n          }\n        }\n        return validator;\n      }\n    },\n    setDisableApplyValidationResults: function setDisableApplyValidationResults(flag) {\n      this._disableApplyValidationResults = flag;\n    },\n    getDisableApplyValidationResults: function getDisableApplyValidationResults() {\n      return this._disableApplyValidationResults;\n    }\n  };\n}());\nmodule.exports = {\n  defaultOptions: function defaultOptions() {\n    return {\n      editing: {\n        texts: {\n          validationCancelChanges: _message2.default.format(\"dxDataGrid-validationCancelChanges\")\n        }\n      }\n    };\n  },\n  controllers: {\n    validating: ValidatingController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        _addEditData: function _addEditData(options, row) {\n          var editData,\n            that = this,\n            validatingController = that.getController(\"validating\"),\n            editDataIndex = that.callBase(options, row);\n          if (editDataIndex >= 0) {\n            editData = that._editData[editDataIndex];\n            validatingController.updateEditData(editData);\n          }\n          return editDataIndex;\n        },\n        _updateRowAndPageIndices: function _updateRowAndPageIndices() {\n          var that = this,\n            startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex(),\n            rowIndex = startInsertIndex;\n          (0, _iterator.each)(that._editData, function (_, editData) {\n            if (!editData.isValid && editData.pageIndex !== that._pageIndex) {\n              editData.pageIndex = that._pageIndex;\n              if (\"insert\" === editData.type) {\n                editData.rowIndex = startInsertIndex;\n              } else {\n                editData.rowIndex = rowIndex;\n              }\n              rowIndex++;\n            }\n          });\n        },\n        _needInsertItem: function _needInsertItem(editData) {\n          var result = this.callBase.apply(this, arguments);\n          if (result && !editData.isValid) {\n            result = editData.key.pageIndex === this._pageIndex;\n          }\n          return result;\n        },\n        processItems: function processItems(items, changeType) {\n          var i,\n            itemsCount,\n            that = this,\n            editData = that._editData,\n            dataController = that.getController(\"data\"),\n            getIndexByEditData = function getIndexByEditData(editData, items) {\n              var index = -1,\n                isInsert = \"insert\" === editData.type,\n                key = editData.key;\n              (0, _iterator.each)(items, function (i, item) {\n                if ((0, _common.equalByValue)(key, isInsert ? item : dataController.keyOf(item))) {\n                  index = i;\n                  return false;\n                }\n              });\n              return index;\n            },\n            addInValidItem = function addInValidItem(editData) {\n              var rowIndex,\n                data = {\n                  key: editData.key\n                },\n                index = getIndexByEditData(editData, items);\n              if (index >= 0) {\n                return;\n              }\n              editData.rowIndex = editData.rowIndex > itemsCount ? editData.rowIndex % itemsCount : editData.rowIndex;\n              rowIndex = editData.rowIndex;\n              data[INSERT_INDEX] = 1;\n              items.splice(rowIndex, 0, data);\n            };\n          items = that.callBase(items, changeType);\n          itemsCount = items.length;\n          if (that.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\n            for (i = 0; i < editData.length; i++) {\n              if (editData[i].type && editData[i].pageIndex === that._pageIndex && editData[i].key.pageIndex !== that._pageIndex) {\n                addInValidItem(editData[i]);\n              }\n            }\n          }\n          return items;\n        },\n        processDataItem: function processDataItem(item) {\n          var editIndex,\n            editData,\n            that = this,\n            isInserted = item.data[INSERT_INDEX],\n            key = isInserted ? item.data.key : item.key,\n            editMode = that.getEditMode();\n          if (editMode === EDIT_MODE_BATCH && isInserted && key) {\n            editIndex = (0, _uiGrid_core3.getIndexByKey)(key, that._editData);\n            if (editIndex >= 0) {\n              editData = that._editData[editIndex];\n              if (\"insert\" !== editData.type) {\n                item.data = (0, _extend.extend)(true, {}, editData.oldData, editData.data);\n                item.key = key;\n              }\n            }\n          }\n          that.callBase.apply(that, arguments);\n        },\n        _createInvisibleColumnValidators: function _createInvisibleColumnValidators(editData) {\n          var validatingController = this.getController(\"validating\"),\n            invisibleColumns = (0, _common.grep)(this.getController(\"columns\").getInvisibleColumns(), function (column) {\n              return !column.isBand;\n            }),\n            invisibleColumnValidators = [];\n          if (FORM_BASED_MODES.indexOf(this.getEditMode()) === -1) {\n            (0, _iterator.each)(invisibleColumns, function (_, column) {\n              editData.forEach(function (options) {\n                var data;\n                if (\"insert\" === options.type) {\n                  data = options.data;\n                } else {\n                  if (\"update\" === options.type) {\n                    data = (0, _uiGrid_core3.createObjectWithChanges)(options.oldData, options.data);\n                  }\n                }\n                if (data) {\n                  var validator = validatingController.createValidator({\n                    column: column,\n                    key: options.key,\n                    value: column.calculateCellValue(data)\n                  });\n                  if (validator) {\n                    invisibleColumnValidators.push(validator);\n                  }\n                }\n              });\n            });\n          }\n          return function () {\n            invisibleColumnValidators.forEach(function (validator) {\n              validator._dispose();\n            });\n          };\n        },\n        _beforeSaveEditData: function _beforeSaveEditData(editData, editIndex) {\n          var _this3 = this;\n          var isValid = void 0,\n            result = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n          if (editData) {\n            isValid = \"remove\" === editData.type || editData.isValid;\n            result = result || !isValid;\n          } else {\n            var disposeValidators = this._createInvisibleColumnValidators(this._editData);\n            result = new _deferred.Deferred();\n            validatingController.validate(true).done(function (isFullValid) {\n              disposeValidators();\n              _this3._updateRowAndPageIndices();\n              switch (_this3.getEditMode()) {\n                case EDIT_MODE_CELL:\n                  if (!isFullValid) {\n                    _this3._focusEditingCell();\n                  }\n                  break;\n                case EDIT_MODE_BATCH:\n                  if (!isFullValid) {\n                    _this3._editRowIndex = -1;\n                    _this3._editColumnIndex = -1;\n                    _this3.getController(\"data\").updateItems();\n                  }\n              }\n              result.resolve(!isFullValid);\n            });\n          }\n          return result.promise ? result.promise() : result;\n        },\n        _beforeEditCell: function _beforeEditCell(rowIndex, columnIndex, item) {\n          var result = this.callBase(rowIndex, columnIndex, item),\n            $cell = this._rowsView._getCellElement(rowIndex, columnIndex),\n            validator = $cell && $cell.data(\"dxValidator\"),\n            value = validator && validator.option(\"adapter\").getValue();\n          if (this.getEditMode(this) === EDIT_MODE_CELL && (!validator || void 0 !== value && validator.validate().isValid)) {\n            return result;\n          }\n        },\n        _afterSaveEditData: function _afterSaveEditData() {\n          var $firstErrorRow,\n            that = this;\n          (0, _iterator.each)(that._editData, function (_, editData) {\n            var $errorRow = that._showErrorRow(editData);\n            $firstErrorRow = $firstErrorRow || $errorRow;\n          });\n          if ($firstErrorRow) {\n            var scrollable = this._rowsView.getScrollable();\n            if (scrollable) {\n              scrollable.update();\n              scrollable.scrollToElement($firstErrorRow);\n            }\n          }\n        },\n        _showErrorRow: function _showErrorRow(editData) {\n          var $popupContent,\n            errorHandling = this.getController(\"errorHandling\"),\n            items = this.getController(\"data\").items(),\n            rowIndex = this.getIndexByKey(editData.key, items);\n          if (!editData.isValid && editData.errorText && rowIndex >= 0) {\n            $popupContent = this.getPopupContent();\n            return errorHandling && errorHandling.renderErrorRow(editData.errorText, rowIndex, $popupContent);\n          }\n        },\n        updateFieldValue: function updateFieldValue(e) {\n          var that = this,\n            editMode = that.getEditMode();\n          that.callBase.apply(that, arguments);\n          if (editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_BATCH && e.column.showEditorAlways) {\n            var currentValidator = that.getController(\"validating\").getValidator();\n            currentValidator && currentValidator.validate();\n          }\n        },\n        showHighlighting: function showHighlighting($cell, skipValidation) {\n          var _this4 = this;\n          var isValid = true,\n            callBase = this.callBase,\n            validator = void 0;\n          if (!skipValidation) {\n            validator = $cell.data(\"dxValidator\");\n            if (validator) {\n              var validationResult = validator.validate();\n              (0, _deferred.when)(validationResult.complete || validationResult).done(function (validationResult) {\n                isValid = validationResult.isValid;\n                if (isValid) {\n                  callBase.call(_this4, $cell);\n                }\n              });\n              return;\n            }\n          }\n          if (isValid) {\n            callBase.call(this, $cell);\n          }\n        },\n        getEditDataByKey: function getEditDataByKey(key) {\n          return this._editData[(0, _uiGrid_core3.getIndexByKey)(key, this._editData)];\n        }\n      },\n      editorFactory: function () {\n        var getWidthOfVisibleCells = function getWidthOfVisibleCells(that, element) {\n          var rowIndex = (0, _renderer2.default)(element).closest(\"tr\").index(),\n            $cellElements = (0, _renderer2.default)(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\n          return that._rowsView._getWidths($cellElements).reduce(function (w1, w2) {\n            return w1 + w2;\n          }, 0);\n        };\n        var getBoundaryNonFixedColumnsInfo = function getBoundaryNonFixedColumnsInfo(fixedColumns) {\n          var firstNonFixedColumnIndex = void 0,\n            lastNonFixedColumnIndex = void 0;\n          fixedColumns.some(function (column, index) {\n            if (column.command === COMMAND_TRANSPARENT) {\n              firstNonFixedColumnIndex = 0 === index ? -1 : index;\n              lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\n              return true;\n            }\n          });\n          return {\n            startColumnIndex: firstNonFixedColumnIndex,\n            endColumnIndex: lastNonFixedColumnIndex\n          };\n        };\n        return {\n          _showRevertButton: function _showRevertButton($container, $targetElement) {\n            var _this5 = this;\n            if (!$targetElement || !$targetElement.length) {\n              return;\n            }\n            var $tooltipElement = (0, _renderer2.default)(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\n            var tooltipOptions = {\n              animation: null,\n              visible: true,\n              target: $targetElement,\n              container: $container,\n              closeOnOutsideClick: false,\n              closeOnTargetScroll: false,\n              contentTemplate: function contentTemplate() {\n                var $buttonElement = (0, _renderer2.default)(\"<div>\").addClass(REVERT_BUTTON_CLASS);\n                var buttonOptions = {\n                  icon: \"revert\",\n                  hint: _this5.option(\"editing.texts.validationCancelChanges\"),\n                  onClick: function onClick() {\n                    _this5._editingController.cancelEditData();\n                  }\n                };\n                return new _button2.default($buttonElement, buttonOptions).$element();\n              },\n              position: {\n                my: \"left top\",\n                at: \"right top\",\n                of: $targetElement,\n                offset: \"1 0\",\n                collision: \"flip\",\n                boundary: this._rowsView.element()\n              },\n              onPositioned: this._positionedHandler.bind(this)\n            };\n            return new _tooltip2.default($tooltipElement, tooltipOptions);\n          },\n          _hideFixedGroupCell: function _hideFixedGroupCell($cell, overlayOptions) {\n            var nextRowOptions,\n              $nextFixedRowElement,\n              $groupCellElement,\n              isFixedColumns = this._rowsView.isFixedColumns(),\n              isFormEditMode = this._editingController.isFormEditMode();\n            if (isFixedColumns && !isFormEditMode) {\n              nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\n              if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\n                $nextFixedRowElement = (0, _renderer2.default)(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\n                $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\n                if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\n                  $groupCellElement.css(\"visibility\", \"hidden\");\n                  overlayOptions.onDisposing = function () {\n                    $groupCellElement.css(\"visibility\", \"\");\n                  };\n                }\n              }\n            }\n          },\n          _positionedHandler: function _positionedHandler(e, isOverlayVisible) {\n            if (!e.component.__skipPositionProcessing) {\n              var isRevertButton = (0, _renderer2.default)(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)),\n                needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight(),\n                normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\n              e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\n              if (normalizedPosition) {\n                e.component.option(normalizedPosition);\n              } else {\n                if (needRepaint) {\n                  e.component.repaint();\n                }\n              }\n            }\n          },\n          _showValidationMessage: function _showValidationMessage($cell, message, alignment, revertTooltip) {\n            var _this6 = this;\n            var $highlightContainer = $cell.find(\".\" + CELL_HIGHLIGHT_OUTLINE),\n              isMaterial = _themes2.default.isMaterial(),\n              overlayTarget = $highlightContainer.length && !isMaterial ? $highlightContainer : $cell,\n              editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\"),\n              isOverlayVisible = editorPopup && editorPopup.option(\"visible\"),\n              myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment,\n              atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\n            var $overlayElement = (0, _renderer2.default)(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS)).text(message).appendTo($cell);\n            var overlayOptions = {\n              target: overlayTarget,\n              container: $cell,\n              shading: false,\n              width: \"auto\",\n              height: \"auto\",\n              visible: true,\n              animation: false,\n              propagateOutsideClick: true,\n              closeOnOutsideClick: false,\n              closeOnTargetScroll: false,\n              position: {\n                collision: \"flip\",\n                boundary: this._rowsView.element(),\n                boundaryOffset: \"0 0\",\n                my: myPosition,\n                at: atPosition\n              },\n              onPositioned: function onPositioned(e) {\n                _this6._positionedHandler(e, isOverlayVisible);\n                _this6._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell);\n              }\n            };\n            this._hideFixedGroupCell($cell, overlayOptions);\n            new _overlay2.default($overlayElement, overlayOptions);\n          },\n          _normalizeValidationMessagePositionAndMaxWidth: function _normalizeValidationMessagePositionAndMaxWidth(options, isRevertButton, isOverlayVisible) {\n            var fixedColumns = this._columnsController.getFixedColumns();\n            if (!fixedColumns || !fixedColumns.length) {\n              return;\n            }\n            var position = void 0,\n              visibleTableWidth = !isRevertButton && getWidthOfVisibleCells(this, options.element),\n              $overlayContentElement = isRevertButton ? options.component.overlayContent() : options.component.$content(),\n              validationMessageWidth = $overlayContentElement.outerWidth(true),\n              needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth,\n              columnIndex = this._rowsView.getCellIndex((0, _renderer2.default)(options.element).closest(\"td\")),\n              boundaryNonFixedColumnsInfo = getBoundaryNonFixedColumnsInfo(fixedColumns);\n            if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\n              position = {\n                collision: \"none flip\",\n                my: \"top left\",\n                at: isOverlayVisible ? \"top right\" : \"bottom left\"\n              };\n            } else {\n              if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\n                position = {\n                  collision: \"none flip\",\n                  my: \"top right\",\n                  at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\n                };\n                if (isRevertButton) {\n                  position.offset = \"-1 0\";\n                }\n              }\n            }\n            return position && {\n              position: position,\n              maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\n            };\n          },\n          _shiftValidationMessageIfNeed: function _shiftValidationMessageIfNeed($content, $revertContent, $cell) {\n            if (!$revertContent) {\n              return;\n            }\n            var contentOffset = $content.offset(),\n              revertContentOffset = $revertContent.offset();\n            if (contentOffset.top === revertContentOffset.top && contentOffset.left + $content.width() > revertContentOffset.left) {\n              var left = $revertContent.width() + PADDING_BETWEEN_TOOLTIPS;\n              $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left);\n            }\n          },\n          _getTooltipsSelector: function _getTooltipsSelector() {\n            var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS),\n              revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n            return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass;\n          },\n          init: function init() {\n            this.callBase();\n            this._editingController = this.getController(\"editing\");\n            this._columnsController = this.getController(\"columns\");\n            this._rowsView = this.getView(\"rowsView\");\n          },\n          loseFocus: function loseFocus(skipValidator) {\n            if (!skipValidator) {\n              this.getController(\"validating\").setValidator(null);\n            }\n            this.callBase();\n          },\n          focus: function focus($element, hideBorder) {\n            var validationResult,\n              revertTooltip,\n              that = this,\n              $focus = $element && $element.closest(that._getFocusCellSelector()),\n              validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + that.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\")),\n              rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\"),\n              editData = rowOptions ? that.getController(\"editing\").getEditDataByKey(rowOptions.key) : null,\n              $tooltips = $focus && $focus.closest(\".\" + that.addWidgetPrefix(ROWS_VIEW_CLASS)).find(that._getTooltipsSelector()),\n              $cell = $focus && $focus.is(\"td\") ? $focus : null,\n              showValidationMessage = false,\n              column = $cell && that.getController(\"columns\").getVisibleColumns()[$cell.index()];\n            if (!arguments.length) {\n              return that.callBase();\n            }\n            $tooltips && $tooltips.remove();\n            if (validator) {\n              that.getController(\"validating\").setValidator(validator);\n              if (void 0 !== validator.option(\"adapter\").getValue()) {\n                validationResult = validator.validate();\n                if (!validationResult.isValid) {\n                  hideBorder = true;\n                  showValidationMessage = true;\n                }\n              }\n            }\n            if (validationResult && !validationResult.isValid || editData && \"update\" === editData.type && !that._editingController.isSaving()) {\n              if (that._editingController.getEditMode() === EDIT_MODE_CELL) {\n                revertTooltip = that._showRevertButton($focus, $cell ? $focus.find(\".\" + CELL_HIGHLIGHT_OUTLINE).first() : $focus);\n              }\n            }\n            if (showValidationMessage && $cell && column && validationResult.brokenRule.message) {\n              that._showValidationMessage($focus, validationResult.brokenRule.message, column.alignment || \"left\", revertTooltip);\n            }\n            !hideBorder && that._rowsView.element() && that._rowsView.updateFreeSpaceRowHeight();\n            return that.callBase($element, hideBorder);\n          }\n        };\n      }()\n    },\n    views: {\n      rowsView: {\n        updateFreeSpaceRowHeight: function updateFreeSpaceRowHeight($table) {\n          var $rowElements,\n            $freeSpaceRowElement,\n            $freeSpaceRowElements,\n            that = this,\n            $element = that.element(),\n            $tooltipContent = $element && $element.find(\".\" + that.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\n          that.callBase($table);\n          if ($tooltipContent && $tooltipContent.length) {\n            $rowElements = that._getRowElements();\n            $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\n            $freeSpaceRowElement = $freeSpaceRowElements.first();\n            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || $tooltipContent.outerHeight() > $freeSpaceRowElement.outerHeight())) {\n              $freeSpaceRowElements.show();\n              $freeSpaceRowElements.height($tooltipContent.outerHeight());\n              return true;\n            }\n          }\n        },\n        _formItemPrepared: function _formItemPrepared(cellOptions, $container) {\n          var _this7 = this;\n          this.callBase.apply(this, arguments);\n          (0, _common.deferUpdate)(function () {\n            var $editor = $container.find(\".dx-widget\").first(),\n              isEditorDisposed = $editor.length && !$editor.children().length;\n            if (!isEditorDisposed) {\n              _this7.getController(\"validating\").createValidator(cellOptions, $editor);\n            }\n          });\n        },\n        _cellPrepared: function _cellPrepared($cell, parameters) {\n          if (!this.getController(\"editing\").isFormEditMode()) {\n            this.getController(\"validating\").createValidator(parameters, $cell);\n          }\n          this.callBase.apply(this, arguments);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}