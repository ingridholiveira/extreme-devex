{"ast":null,"code":"/**\r\n * DevExtreme (ui/filter_builder/utils.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _deferred = require(\"../../core/utils/deferred\");\nvar _errors = require(\"../../data/errors\");\nvar _type = require(\"../../core/utils/type\");\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _filtering = require(\"../shared/filtering\");\nvar _filtering2 = _interopRequireDefault(_filtering);\nvar _format_helper = require(\"../../format_helper\");\nvar _format_helper2 = _interopRequireDefault(_format_helper);\nvar _extend = require(\"../../core/utils/extend\");\nvar _inflector = require(\"../../core/utils/inflector\");\nvar _inflector2 = _interopRequireDefault(_inflector);\nvar _between = require(\"./between\");\nvar _between2 = _interopRequireDefault(_between);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _data_source = require(\"../../data/data_source/data_source\");\nvar _ui3 = require(\"./ui.filter_operations_dictionary\");\nvar _ui4 = _interopRequireDefault(_ui3);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar DEFAULT_DATA_TYPE = \"string\",\n  EMPTY_MENU_ICON = \"icon-none\",\n  AND_GROUP_OPERATION = \"and\",\n  EQUAL_OPERATION = \"=\",\n  NOT_EQUAL_OPERATION = \"<>\",\n  DATATYPE_OPERATIONS = {\n    number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"isblank\", \"isnotblank\"],\n    string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\", \"isblank\", \"isnotblank\"],\n    date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"isblank\", \"isnotblank\"],\n    datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"isblank\", \"isnotblank\"],\n    \"boolean\": [\"=\", \"<>\", \"isblank\", \"isnotblank\"],\n    object: [\"isblank\", \"isnotblank\"]\n  },\n  DEFAULT_FORMAT = {\n    date: \"shortDate\",\n    datetime: \"shortDateShortTime\"\n  },\n  LOOKUP_OPERATIONS = [\"=\", \"<>\", \"isblank\", \"isnotblank\"],\n  AVAILABLE_FIELD_PROPERTIES = [\"caption\", \"customizeText\", \"dataField\", \"dataType\", \"editorTemplate\", \"falseText\", \"editorOptions\", \"filterOperations\", \"format\", \"lookup\", \"trueText\", \"calculateFilterExpression\", \"name\"];\nfunction getFormattedValueText(field, value) {\n  var fieldFormat = field.format || DEFAULT_FORMAT[field.dataType];\n  return _format_helper2.default.format(value, fieldFormat);\n}\nfunction isNegationGroup(group) {\n  return group && group.length > 1 && \"!\" === group[0] && !isCondition(group);\n}\nfunction getGroupCriteria(group) {\n  return isNegationGroup(group) ? group[1] : group;\n}\nfunction setGroupCriteria(group, criteria) {\n  if (isNegationGroup(group)) {\n    group[1] = criteria;\n  } else {\n    group = criteria;\n  }\n  return group;\n}\nfunction convertGroupToNewStructure(group, value) {\n  var isNegationValue = function isNegationValue(value) {\n      return value.indexOf(\"!\") !== -1;\n    },\n    convertGroupToNegationGroup = function convertGroupToNegationGroup(group) {\n      var criteria = group.slice(0);\n      group.length = 0;\n      group.push(\"!\", criteria);\n    },\n    convertNegationGroupToGroup = function convertNegationGroupToGroup(group) {\n      var criteria = getGroupCriteria(group);\n      group.length = 0;\n      [].push.apply(group, criteria);\n    };\n  if (isNegationValue(value)) {\n    if (!isNegationGroup(group)) {\n      convertGroupToNegationGroup(group);\n    }\n  } else {\n    if (isNegationGroup(group)) {\n      convertNegationGroupToGroup(group);\n    }\n  }\n}\nfunction setGroupValue(group, value) {\n  convertGroupToNewStructure(group, value);\n  var i,\n    criteria = getGroupCriteria(group),\n    getNormalizedGroupValue = function getNormalizedGroupValue(value) {\n      return value.indexOf(\"!\") === -1 ? value : value.substring(1);\n    },\n    changeCriteriaValue = function changeCriteriaValue(criteria, value) {\n      for (i = 0; i < criteria.length; i++) {\n        if (!Array.isArray(criteria[i])) {\n          criteria[i] = value;\n        }\n      }\n    };\n  value = getNormalizedGroupValue(value);\n  changeCriteriaValue(criteria, value);\n  return group;\n}\nfunction getGroupMenuItem(group, availableGroups) {\n  var groupValue = getGroupValue(group);\n  return availableGroups.filter(function (item) {\n    return item.value === groupValue;\n  })[0];\n}\nfunction getCriteriaOperation(criteria) {\n  if (isCondition(criteria)) {\n    return AND_GROUP_OPERATION;\n  }\n  var value = \"\";\n  for (var i = 0; i < criteria.length; i++) {\n    var item = criteria[i];\n    if (!Array.isArray(item)) {\n      if (value && value !== item) {\n        throw new _errors.errors.Error(\"E4019\");\n      }\n      if (\"!\" !== item) {\n        value = item;\n      }\n    }\n  }\n  return value;\n}\nfunction getGroupValue(group) {\n  var criteria = getGroupCriteria(group),\n    value = getCriteriaOperation(criteria);\n  if (!value) {\n    value = AND_GROUP_OPERATION;\n  }\n  if (criteria !== group) {\n    value = \"!\" + value;\n  }\n  return value;\n}\nfunction getDefaultFilterOperations(field) {\n  return field.lookup && LOOKUP_OPERATIONS || DATATYPE_OPERATIONS[field.dataType || DEFAULT_DATA_TYPE];\n}\nfunction containItems(entity) {\n  return Array.isArray(entity) && entity.length;\n}\nfunction getFilterOperations(field) {\n  var result = containItems(field.filterOperations) ? field.filterOperations : getDefaultFilterOperations(field);\n  return (0, _extend.extend)([], result);\n}\nfunction getCaptionByOperation(operation, filterOperationDescriptions) {\n  var operationName = _ui4.default.getNameByFilterOperation(operation);\n  return filterOperationDescriptions && filterOperationDescriptions[operationName] ? filterOperationDescriptions[operationName] : operationName;\n}\nfunction getOperationFromAvailable(operation, availableOperations) {\n  for (var i = 0; i < availableOperations.length; i++) {\n    if (availableOperations[i].value === operation) {\n      return availableOperations[i];\n    }\n  }\n  throw new _ui2.default.Error(\"E1048\", operation);\n}\nfunction getCustomOperation(customOperations, name) {\n  var filteredOperations = customOperations.filter(function (item) {\n    return item.name === name;\n  });\n  return filteredOperations.length ? filteredOperations[0] : null;\n}\nfunction getAvailableOperations(field, filterOperationDescriptions, customOperations) {\n  var filterOperations = getFilterOperations(field);\n  customOperations.forEach(function (customOperation) {\n    if (!field.filterOperations && filterOperations.indexOf(customOperation.name) === -1) {\n      var dataTypes = customOperation && customOperation.dataTypes;\n      if (dataTypes && dataTypes.indexOf(field.dataType || DEFAULT_DATA_TYPE) >= 0) {\n        filterOperations.push(customOperation.name);\n      }\n    }\n  });\n  return filterOperations.map(function (operation) {\n    var customOperation = getCustomOperation(customOperations, operation);\n    if (customOperation) {\n      return {\n        icon: customOperation.icon || EMPTY_MENU_ICON,\n        text: customOperation.caption || _inflector2.default.captionize(customOperation.name),\n        value: customOperation.name,\n        isCustom: true\n      };\n    } else {\n      return {\n        icon: _ui4.default.getIconByFilterOperation(operation) || EMPTY_MENU_ICON,\n        text: getCaptionByOperation(operation, filterOperationDescriptions),\n        value: operation\n      };\n    }\n  });\n}\nfunction getDefaultOperation(field) {\n  return field.defaultFilterOperation || getFilterOperations(field)[0];\n}\nfunction createCondition(field, customOperations) {\n  var condition = [field.dataField, \"\", \"\"],\n    filterOperation = getDefaultOperation(field);\n  updateConditionByOperation(condition, filterOperation, customOperations);\n  return condition;\n}\nfunction removeItem(group, item) {\n  var criteria = getGroupCriteria(group),\n    index = criteria.indexOf(item);\n  criteria.splice(index, 1);\n  if (1 !== criteria.length) {\n    criteria.splice(index, 1);\n  }\n  return group;\n}\nfunction createEmptyGroup(value) {\n  return value.indexOf(\"not\") !== -1 ? [\"!\", [value.substring(3).toLowerCase()]] : [value];\n}\nfunction isEmptyGroup(group) {\n  var criteria = getGroupCriteria(group);\n  if (isCondition(criteria)) {\n    return false;\n  }\n  var hasConditions = criteria.some(function (item) {\n    return isCondition(item);\n  });\n  return !hasConditions;\n}\nfunction addItem(item, group) {\n  var criteria = getGroupCriteria(group),\n    groupValue = getGroupValue(criteria);\n  1 === criteria.length ? criteria.unshift(item) : criteria.push(item, groupValue);\n  return group;\n}\nfunction getField(dataField, fields) {\n  for (var i = 0; i < fields.length; i++) {\n    if (fields[i].name === dataField) {\n      return fields[i];\n    }\n    if (fields[i].dataField.toLowerCase() === dataField.toLowerCase()) {\n      return fields[i];\n    }\n  }\n  var extendedFields = getItems(fields, true).filter(function (item) {\n    return item.dataField.toLowerCase() === dataField.toLowerCase();\n  });\n  if (extendedFields.length > 0) {\n    return extendedFields[0];\n  }\n  throw new _ui2.default.Error(\"E1047\", dataField);\n}\nfunction isGroup(criteria) {\n  if (!Array.isArray(criteria)) {\n    return false;\n  }\n  return criteria.length < 2 || Array.isArray(criteria[0]) || Array.isArray(criteria[1]);\n}\nfunction isCondition(criteria) {\n  if (!Array.isArray(criteria)) {\n    return false;\n  }\n  return criteria.length > 1 && !Array.isArray(criteria[0]) && !Array.isArray(criteria[1]);\n}\nfunction convertToInnerGroup(group, customOperations) {\n  var groupOperation = getCriteriaOperation(group).toLowerCase() || AND_GROUP_OPERATION,\n    innerGroup = [];\n  for (var i = 0; i < group.length; i++) {\n    if (isGroup(group[i])) {\n      innerGroup.push(convertToInnerStructure(group[i], customOperations));\n      innerGroup.push(groupOperation);\n    } else {\n      if (isCondition(group[i])) {\n        innerGroup.push(convertToInnerCondition(group[i], customOperations));\n        innerGroup.push(groupOperation);\n      }\n    }\n  }\n  if (0 === innerGroup.length) {\n    innerGroup.push(groupOperation);\n  }\n  return innerGroup;\n}\nfunction conditionHasCustomOperation(condition, customOperations) {\n  var customOperation = getCustomOperation(customOperations, condition[1]);\n  return customOperation && customOperation.name === condition[1];\n}\nfunction convertToInnerCondition(condition, customOperations) {\n  if (conditionHasCustomOperation(condition, customOperations)) {\n    return condition;\n  }\n  if (condition.length < 3) {\n    condition[2] = condition[1];\n    condition[1] = EQUAL_OPERATION;\n  }\n  return condition;\n}\nfunction convertToInnerStructure(value, customOperations) {\n  if (!value) {\n    return [AND_GROUP_OPERATION];\n  }\n  value = (0, _extend.extend)(true, [], value);\n  if (isCondition(value)) {\n    return [convertToInnerCondition(value, customOperations), AND_GROUP_OPERATION];\n  }\n  if (isNegationGroup(value)) {\n    return [\"!\", isCondition(value[1]) ? [convertToInnerCondition(value[1], customOperations), AND_GROUP_OPERATION] : isNegationGroup(value[1]) ? [convertToInnerStructure(value[1], customOperations), AND_GROUP_OPERATION] : convertToInnerGroup(value[1], customOperations)];\n  }\n  return convertToInnerGroup(value, customOperations);\n}\nfunction getNormalizedFields(fields) {\n  return fields.reduce(function (result, field) {\n    if ((0, _type.isDefined)(field.dataField)) {\n      var normalizedField = {};\n      for (var key in field) {\n        if (field[key] && AVAILABLE_FIELD_PROPERTIES.indexOf(key) > -1) {\n          normalizedField[key] = field[key];\n        }\n      }\n      normalizedField.defaultCalculateFilterExpression = _filtering2.default.defaultCalculateFilterExpression;\n      if (!(0, _type.isDefined)(normalizedField.dataType)) {\n        normalizedField.dataType = DEFAULT_DATA_TYPE;\n      }\n      result.push(normalizedField);\n    }\n    return result;\n  }, []);\n}\nfunction getConditionFilterExpression(condition, fields, customOperations, target) {\n  var field = getField(condition[0], fields),\n    filterExpression = convertToInnerCondition(condition, customOperations),\n    customOperation = customOperations.length && getCustomOperation(customOperations, filterExpression[1]);\n  if (customOperation && customOperation.calculateFilterExpression) {\n    return customOperation.calculateFilterExpression.apply(customOperation, [filterExpression[2], field, target]);\n  } else {\n    if (field.createFilterExpression) {\n      return field.createFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);\n    } else {\n      if (field.calculateFilterExpression) {\n        return field.calculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);\n      } else {\n        return field.defaultCalculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);\n      }\n    }\n  }\n}\nfunction getFilterExpression(value, fields, customOperations, target) {\n  if (!(0, _type.isDefined)(value)) {\n    return null;\n  }\n  if (isNegationGroup(value)) {\n    var filterExpression = getFilterExpression(value[1], fields, customOperations, target);\n    return [\"!\", filterExpression];\n  }\n  var criteria = getGroupCriteria(value);\n  if (isCondition(criteria)) {\n    return getConditionFilterExpression(criteria, fields, customOperations, target) || null;\n  } else {\n    var _filterExpression = void 0,\n      groupValue = getGroupValue(criteria),\n      result = [];\n    for (var i = 0; i < criteria.length; i++) {\n      if (isGroup(criteria[i])) {\n        _filterExpression = getFilterExpression(criteria[i], fields, customOperations, target);\n        if (_filterExpression) {\n          i && result.push(groupValue);\n          result.push(_filterExpression);\n        }\n      } else {\n        if (isCondition(criteria[i])) {\n          _filterExpression = getConditionFilterExpression(criteria[i], fields, customOperations, target);\n          if (_filterExpression) {\n            i && result.push(groupValue);\n            result.push(_filterExpression);\n          }\n        }\n      }\n    }\n    return result.length ? result : null;\n  }\n}\nfunction getNormalizedFilter(group) {\n  var i,\n    criteria = getGroupCriteria(group);\n  if (0 === criteria.length) {\n    return null;\n  }\n  var itemsForRemove = [];\n  for (i = 0; i < criteria.length; i++) {\n    if (isGroup(criteria[i])) {\n      var normalizedGroupValue = getNormalizedFilter(criteria[i]);\n      if (normalizedGroupValue) {\n        criteria[i] = normalizedGroupValue;\n      } else {\n        itemsForRemove.push(criteria[i]);\n      }\n    } else {\n      if (isCondition(criteria[i])) {\n        if (!isValidCondition(criteria[i])) {\n          itemsForRemove.push(criteria[i]);\n        }\n      }\n    }\n  }\n  for (i = 0; i < itemsForRemove.length; i++) {\n    removeItem(criteria, itemsForRemove[i]);\n  }\n  if (1 === criteria.length) {\n    return null;\n  }\n  criteria.splice(criteria.length - 1, 1);\n  if (1 === criteria.length) {\n    group = setGroupCriteria(group, criteria[0]);\n  }\n  if (0 === group.length) {\n    return null;\n  }\n  return group;\n}\nfunction getCurrentLookupValueText(field, value, handler) {\n  if (\"\" === value) {\n    handler(\"\");\n    return;\n  }\n  var lookup = field.lookup;\n  if (lookup.items) {\n    handler(lookup.calculateCellValue(value) || \"\");\n  } else {\n    var dataSource = new _data_source.DataSource(lookup.dataSource);\n    dataSource.loadSingle(lookup.valueExpr, value).done(function (result) {\n      result ? handler(lookup.displayExpr ? result[lookup.displayExpr] : result) : handler(\"\");\n    }).fail(function () {\n      handler(\"\");\n    });\n  }\n}\nfunction getPrimitiveValueText(field, value, customOperation, target) {\n  var valueText;\n  if (true === value) {\n    valueText = field.trueText || _message2.default.format(\"dxDataGrid-trueText\");\n  } else {\n    if (false === value) {\n      valueText = field.falseText || _message2.default.format(\"dxDataGrid-falseText\");\n    } else {\n      valueText = getFormattedValueText(field, value);\n    }\n  }\n  if (field.customizeText) {\n    valueText = field.customizeText.call(field, {\n      value: value,\n      valueText: valueText,\n      target: target\n    });\n  }\n  if (customOperation && customOperation.customizeText) {\n    valueText = customOperation.customizeText.call(customOperation, {\n      value: value,\n      valueText: valueText,\n      field: field,\n      target: target\n    });\n  }\n  return valueText;\n}\nfunction getArrayValueText(field, value, customOperation, target) {\n  return value.map(function (v) {\n    return getPrimitiveValueText(field, v, customOperation, target);\n  });\n}\nfunction checkDefaultValue(value) {\n  return \"\" === value || null === value;\n}\nfunction getCurrentValueText(field, value, customOperation) {\n  var target = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"filterBuilder\";\n  if (checkDefaultValue(value)) {\n    return \"\";\n  }\n  if (Array.isArray(value)) {\n    var result = new _deferred.Deferred();\n    _deferred.when.apply(this, getArrayValueText(field, value, customOperation, target)).done(function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var text = args.some(function (item) {\n        return !checkDefaultValue(item);\n      }) ? args.map(function (item) {\n        return !checkDefaultValue(item) ? item : \"?\";\n      }) : \"\";\n      result.resolve(text);\n    });\n    return result;\n  } else {\n    return getPrimitiveValueText(field, value, customOperation, target);\n  }\n}\nfunction itemExists(plainItems, parentId) {\n  return plainItems.some(function (item) {\n    return item.dataField === parentId;\n  });\n}\nfunction pushItemAndCheckParent(originalItems, plainItems, item) {\n  var dataField = item.dataField;\n  if (hasParent(dataField)) {\n    item.parentId = getParentIdFromItemDataField(dataField);\n    if (!itemExists(plainItems, item.parentId) && !itemExists(originalItems, item.parentId)) {\n      pushItemAndCheckParent(originalItems, plainItems, {\n        id: item.parentId,\n        dataType: \"object\",\n        dataField: item.parentId,\n        caption: generateCaptionByDataField(item.parentId, true),\n        filterOperations: [\"isblank\", \"isnotblank\"]\n      });\n    }\n  }\n  plainItems.push(item);\n}\nfunction generateCaptionByDataField(dataField, allowHierarchicalFields) {\n  var caption = \"\";\n  if (allowHierarchicalFields) {\n    dataField = dataField.substring(dataField.lastIndexOf(\".\") + 1);\n  } else {\n    if (hasParent(dataField)) {\n      dataField.split(\".\").forEach(function (field, index, arr) {\n        caption += _inflector2.default.captionize(field);\n        if (index !== arr.length - 1) {\n          caption += \".\";\n        }\n      });\n      return caption;\n    }\n  }\n  return _inflector2.default.captionize(dataField);\n}\nfunction getItems(fields, allowHierarchicalFields) {\n  var items = [];\n  for (var i = 0; i < fields.length; i++) {\n    var item = (0, _extend.extend)(true, {\n      caption: generateCaptionByDataField(fields[i].dataField, allowHierarchicalFields)\n    }, fields[i]);\n    item.id = item.name || item.dataField;\n    if (allowHierarchicalFields) {\n      pushItemAndCheckParent(fields, items, item);\n    } else {\n      items.push(item);\n    }\n  }\n  return items;\n}\nfunction hasParent(dataField) {\n  return dataField.lastIndexOf(\".\") !== -1;\n}\nfunction getParentIdFromItemDataField(dataField) {\n  return dataField.substring(0, dataField.lastIndexOf(\".\"));\n}\nfunction getCaptionWithParents(item, plainItems) {\n  if (hasParent(item.dataField)) {\n    var parentId = getParentIdFromItemDataField(item.dataField);\n    for (var i = 0; i < plainItems.length; i++) {\n      if (plainItems[i].dataField === parentId) {\n        return getCaptionWithParents(plainItems[i], plainItems) + \".\" + item.caption;\n      }\n    }\n  }\n  return item.caption;\n}\nfunction updateConditionByOperation(condition, operation, customOperations) {\n  var customOperation = getCustomOperation(customOperations, operation);\n  if (customOperation) {\n    if (false === customOperation.hasValue) {\n      condition[1] = operation;\n      condition.length = 2;\n    } else {\n      condition[1] = operation;\n      condition[2] = \"\";\n    }\n    return condition;\n  }\n  if (\"isblank\" === operation) {\n    condition[1] = EQUAL_OPERATION;\n    condition[2] = null;\n  } else {\n    if (\"isnotblank\" === operation) {\n      condition[1] = NOT_EQUAL_OPERATION;\n      condition[2] = null;\n    } else {\n      customOperation = getCustomOperation(customOperations, condition[1]);\n      if (customOperation || 2 === condition.length || null === condition[2]) {\n        condition[2] = \"\";\n      }\n      condition[1] = operation;\n    }\n  }\n  return condition;\n}\nfunction getOperationValue(condition) {\n  var caption;\n  if (null === condition[2]) {\n    if (condition[1] === EQUAL_OPERATION) {\n      caption = \"isblank\";\n    } else {\n      caption = \"isnotblank\";\n    }\n  } else {\n    caption = condition[1];\n  }\n  return caption;\n}\nfunction isValidCondition(condition) {\n  return \"\" !== condition[2];\n}\nfunction getMergedOperations(customOperations, betweenCaption) {\n  var result = (0, _extend.extend)(true, [], customOperations),\n    betweenIndex = -1;\n  result.some(function (customOperation, index) {\n    if (\"between\" === customOperation.name) {\n      betweenIndex = index;\n      return true;\n    }\n  });\n  if (betweenIndex !== -1) {\n    result[betweenIndex] = (0, _extend.extend)(_between2.default.getConfig(betweenCaption), result[betweenIndex]);\n  } else {\n    result.unshift(_between2.default.getConfig(betweenCaption));\n  }\n  return result;\n}\nfunction isMatchedCondition(filter, addedFilterDataField) {\n  return filter[0] === addedFilterDataField;\n}\nfunction removeFieldConditionsFromFilter(filter, dataField) {\n  if (!filter || 0 === filter.length) {\n    return null;\n  }\n  if (isCondition(filter)) {\n    var hasMatchedCondition = isMatchedCondition(filter, dataField);\n    return !hasMatchedCondition ? filter : null;\n  } else {\n    return syncConditionIntoGroup(filter, [dataField], false);\n  }\n}\nfunction syncConditionIntoGroup(filter, addedFilter, canPush) {\n  var result = [];\n  filter.forEach(function (item) {\n    if (isCondition(item)) {\n      if (isMatchedCondition(item, addedFilter[0])) {\n        if (canPush) {\n          result.push(addedFilter);\n          canPush = false;\n        } else {\n          result.splice(result.length - 1, 1);\n        }\n      } else {\n        result.push(item);\n      }\n    } else {\n      (result.length || isGroup(item)) && result.push(item);\n    }\n  });\n  if (0 === result.length) {\n    return null;\n  }\n  if (canPush) {\n    result.push(AND_GROUP_OPERATION);\n    result.push(addedFilter);\n  }\n  return 1 === result.length ? result[0] : result;\n}\nfunction syncFilters(filter, addedFilter) {\n  if (null === filter || 0 === filter.length) {\n    return addedFilter;\n  }\n  if (isCondition(filter)) {\n    if (isMatchedCondition(filter, addedFilter[0])) {\n      return addedFilter;\n    } else {\n      return [filter, AND_GROUP_OPERATION, addedFilter];\n    }\n  }\n  var groupValue = getGroupValue(filter);\n  if (groupValue !== AND_GROUP_OPERATION) {\n    return [addedFilter, \"and\", filter];\n  }\n  return syncConditionIntoGroup(filter, addedFilter, true);\n}\nfunction getMatchedConditions(filter, dataField) {\n  if (null === filter || 0 === filter.length) {\n    return [];\n  }\n  if (isCondition(filter)) {\n    if (isMatchedCondition(filter, dataField)) {\n      return [filter];\n    } else {\n      return [];\n    }\n  }\n  var groupValue = getGroupValue(filter);\n  if (groupValue !== AND_GROUP_OPERATION) {\n    return [];\n  }\n  var result = filter.filter(function (item) {\n    return isCondition(item) && isMatchedCondition(item, dataField);\n  });\n  return result;\n}\nfunction filterHasField(filter, dataField) {\n  if (null === filter || 0 === filter.length) {\n    return false;\n  }\n  if (isCondition(filter)) {\n    return filter[0] === dataField;\n  }\n  return filter.some(function (item) {\n    return (isCondition(item) || isGroup(item)) && filterHasField(item, dataField);\n  });\n}\nexports.isValidCondition = isValidCondition;\nexports.isEmptyGroup = isEmptyGroup;\nexports.getOperationFromAvailable = getOperationFromAvailable;\nexports.updateConditionByOperation = updateConditionByOperation;\nexports.getCaptionWithParents = getCaptionWithParents;\nexports.getItems = getItems;\nexports.setGroupValue = setGroupValue;\nexports.getGroupMenuItem = getGroupMenuItem;\nexports.getGroupValue = getGroupValue;\nexports.getAvailableOperations = getAvailableOperations;\nexports.removeItem = removeItem;\nexports.createCondition = createCondition;\nexports.createEmptyGroup = createEmptyGroup;\nexports.addItem = addItem;\nexports.getField = getField;\nexports.isGroup = isGroup;\nexports.isCondition = isCondition;\nexports.getNormalizedFields = getNormalizedFields;\nexports.getNormalizedFilter = getNormalizedFilter;\nexports.getGroupCriteria = getGroupCriteria;\nexports.convertToInnerStructure = convertToInnerStructure;\nexports.getDefaultOperation = getDefaultOperation;\nexports.getCurrentValueText = getCurrentValueText;\nexports.getCurrentLookupValueText = getCurrentLookupValueText;\nexports.getFilterOperations = getFilterOperations;\nexports.getCaptionByOperation = getCaptionByOperation;\nexports.getOperationValue = getOperationValue;\nexports.getFilterExpression = getFilterExpression;\nexports.getCustomOperation = getCustomOperation;\nexports.getMergedOperations = getMergedOperations;\nexports.syncFilters = syncFilters;\nexports.getMatchedConditions = getMatchedConditions;\nexports.filterHasField = filterHasField;\nexports.removeFieldConditionsFromFilter = removeFieldConditionsFromFilter;","map":null,"metadata":{},"sourceType":"script"}