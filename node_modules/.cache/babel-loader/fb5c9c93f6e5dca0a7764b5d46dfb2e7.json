{"ast":null,"code":"/**\r\n * DevExtreme (ui/form/ui.form.layout_manager.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _typeof = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _renderer = require(\"../../core/renderer\");\nvar _renderer2 = _interopRequireDefault(_renderer);\nvar _events_engine = require(\"../../events/core/events_engine\");\nvar _events_engine2 = _interopRequireDefault(_events_engine);\nvar _guid = require(\"../../core/guid\");\nvar _guid2 = _interopRequireDefault(_guid);\nvar _uiForm = require(\"./ui.form.items_runtime_info\");\nvar _uiForm2 = _interopRequireDefault(_uiForm);\nvar _component_registrator = require(\"../../core/component_registrator\");\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\nvar _type = require(\"../../core/utils/type\");\nvar _type2 = _interopRequireDefault(_type);\nvar _dom = require(\"../../core/utils/dom\");\nvar _dom2 = _interopRequireDefault(_dom);\nvar _variable_wrapper = require(\"../../core/utils/variable_wrapper\");\nvar _window = require(\"../../core/utils/window\");\nvar _window2 = _interopRequireDefault(_window);\nvar _string = require(\"../../core/utils/string\");\nvar _string2 = _interopRequireDefault(_string);\nvar _iterator = require(\"../../core/utils/iterator\");\nvar _extend = require(\"../../core/utils/extend\");\nvar _array = require(\"../../core/utils/array\");\nvar _data = require(\"../../core/utils/data\");\nvar _data2 = _interopRequireDefault(_data);\nvar _remove_event = require(\"../../core/remove_event\");\nvar _remove_event2 = _interopRequireDefault(_remove_event);\nvar _click = require(\"../../events/click\");\nvar _click2 = _interopRequireDefault(_click);\nvar _ui = require(\"../widget/ui.errors\");\nvar _ui2 = _interopRequireDefault(_ui);\nvar _message = require(\"../../localization/message\");\nvar _message2 = _interopRequireDefault(_message);\nvar _style = require(\"../../core/utils/style\");\nvar _style2 = _interopRequireDefault(_style);\nvar _inflector = require(\"../../core/utils/inflector\");\nvar _inflector2 = _interopRequireDefault(_inflector);\nvar _ui3 = require(\"../widget/ui.widget\");\nvar _ui4 = _interopRequireDefault(_ui3);\nvar _validator = require(\"../validator\");\nvar _validator2 = _interopRequireDefault(_validator);\nvar _responsive_box = require(\"../responsive_box\");\nvar _responsive_box2 = _interopRequireDefault(_responsive_box);\nvar _themes = require(\"../themes\");\nvar _themes2 = _interopRequireDefault(_themes);\nrequire(\"../text_box\");\nrequire(\"../number_box\");\nrequire(\"../check_box\");\nrequire(\"../date_box\");\nrequire(\"../button\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar FORM_EDITOR_BY_DEFAULT = \"dxTextBox\";\nvar FIELD_ITEM_CLASS = \"dx-field-item\";\nvar FIELD_EMPTY_ITEM_CLASS = \"dx-field-empty-item\";\nvar FIELD_BUTTON_ITEM_CLASS = \"dx-field-button-item\";\nvar FIELD_ITEM_REQUIRED_CLASS = \"dx-field-item-required\";\nvar FIELD_ITEM_OPTIONAL_CLASS = \"dx-field-item-optional\";\nvar FIELD_ITEM_REQUIRED_MARK_CLASS = \"dx-field-item-required-mark\";\nvar FIELD_ITEM_OPTIONAL_MARK_CLASS = \"dx-field-item-optional-mark\";\nvar FIELD_ITEM_LABEL_CLASS = \"dx-field-item-label\";\nvar FIELD_ITEM_LABEL_ALIGN_CLASS = \"dx-field-item-label-align\";\nvar FIELD_ITEM_LABEL_CONTENT_CLASS = \"dx-field-item-label-content\";\nvar FIELD_ITEM_LABEL_TEXT_CLASS = \"dx-field-item-label-text\";\nvar FIELD_ITEM_LABEL_LOCATION_CLASS = \"dx-field-item-label-location-\";\nvar FIELD_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar FIELD_ITEM_CONTENT_LOCATION_CLASS = \"dx-field-item-content-location-\";\nvar FIELD_ITEM_CONTENT_WRAPPER_CLASS = \"dx-field-item-content-wrapper\";\nvar FIELD_ITEM_HELP_TEXT_CLASS = \"dx-field-item-help-text\";\nvar SINGLE_COLUMN_ITEM_CONTENT = \"dx-single-column-item-content\";\nvar LABEL_HORIZONTAL_ALIGNMENT_CLASS = \"dx-label-h-align\";\nvar LABEL_VERTICAL_ALIGNMENT_CLASS = \"dx-label-v-align\";\nvar FORM_LAYOUT_MANAGER_CLASS = \"dx-layout-manager\";\nvar LAYOUT_MANAGER_FIRST_ROW_CLASS = \"dx-first-row\";\nvar LAYOUT_MANAGER_FIRST_COL_CLASS = \"dx-first-col\";\nvar LAYOUT_MANAGER_LAST_COL_CLASS = \"dx-last-col\";\nvar LAYOUT_MANAGER_ONE_COLUMN = \"dx-layout-manager-one-col\";\nvar FLEX_LAYOUT_CLASS = \"dx-flex-layout\";\nvar INVALID_CLASS = \"dx-invalid\";\nvar LAYOUT_STRATEGY_FLEX = \"flex\";\nvar LAYOUT_STRATEGY_FALLBACK = \"fallback\";\nvar SIMPLE_ITEM_TYPE = \"simple\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar DATA_OPTIONS = [\"dataSource\", \"items\"];\nvar EDITORS_WITH_ARRAY_VALUE = [\"dxTagBox\", \"dxRangeSlider\"];\nvar LayoutManager = _ui4.default.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      layoutData: {},\n      readOnly: false,\n      colCount: 1,\n      colCountByScreen: void 0,\n      labelLocation: \"left\",\n      onFieldDataChanged: null,\n      onEditorEnterKey: null,\n      customizeItem: null,\n      alignItemLabels: true,\n      minColWidth: 200,\n      showRequiredMark: true,\n      screenByWidth: null,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      optionalMark: _message2.default.format(\"dxForm-optionalMark\"),\n      requiredMessage: _message2.default.getFormatter(\"dxForm-requiredMessage\")\n    });\n  },\n  _setOptionsByReference: function _setOptionsByReference() {\n    this.callBase();\n    (0, _extend.extend)(this._optionsByReference, {\n      layoutData: true,\n      validationGroup: true\n    });\n  },\n  _init: function _init() {\n    var layoutData = this.option(\"layoutData\");\n    this.callBase();\n    this._itemWatchers = [];\n    this._itemsRunTimeInfo = new _uiForm2.default();\n    this._updateReferencedOptions(layoutData);\n    this._initDataAndItems(layoutData);\n  },\n  _dispose: function _dispose() {\n    this.callBase();\n    this._cleanItemWatchers();\n  },\n  _initDataAndItems: function _initDataAndItems(initialData) {\n    this._syncDataWithItems();\n    this._updateItems(initialData);\n  },\n  _syncDataWithItems: function _syncDataWithItems() {\n    var that = this,\n      userItems = that.option(\"items\");\n    if (_type2.default.isDefined(userItems)) {\n      (0, _iterator.each)(userItems, function (index, item) {\n        var value;\n        if (item.dataField && void 0 === that._getDataByField(item.dataField)) {\n          if (item.editorOptions) {\n            value = item.editorOptions.value;\n          }\n          that._updateFieldValue(item.dataField, value);\n        }\n      });\n    }\n  },\n  _getDataByField: function _getDataByField(dataField) {\n    return dataField ? this.option(\"layoutData.\" + dataField) : null;\n  },\n  _updateFieldValue: function _updateFieldValue(dataField, value) {\n    var layoutData = this.option(\"layoutData\"),\n      newValue = value;\n    if (!(0, _variable_wrapper.isWrapped)(layoutData[dataField]) && _type2.default.isDefined(dataField)) {\n      this.option(\"layoutData.\" + dataField, newValue);\n    } else {\n      if ((0, _variable_wrapper.isWritableWrapped)(layoutData[dataField])) {\n        newValue = _type2.default.isFunction(newValue) ? newValue() : newValue;\n        layoutData[dataField](newValue);\n      }\n    }\n    this._triggerOnFieldDataChanged({\n      dataField: dataField,\n      value: newValue\n    });\n  },\n  _triggerOnFieldDataChanged: function _triggerOnFieldDataChanged(args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  },\n  _updateItems: function _updateItems(layoutData) {\n    var items,\n      processedItems,\n      that = this,\n      userItems = this.option(\"items\"),\n      isUserItemsExist = _type2.default.isDefined(userItems),\n      customizeItem = that.option(\"customizeItem\");\n    items = isUserItemsExist ? userItems : this._generateItemsByData(layoutData);\n    if (_type2.default.isDefined(items)) {\n      processedItems = [];\n      (0, _iterator.each)(items, function (index, item) {\n        if (that._isAcceptableItem(item)) {\n          item = that._processItem(item);\n          customizeItem && customizeItem(item);\n          if (_type2.default.isObject(item) && false !== (0, _variable_wrapper.unwrap)(item.visible)) {\n            processedItems.push(item);\n          }\n        }\n      });\n      if (!that._itemWatchers.length || !isUserItemsExist) {\n        that._updateItemWatchers(items);\n      }\n      this._items = processedItems;\n      this._sortItems();\n    }\n  },\n  _cleanItemWatchers: function _cleanItemWatchers() {\n    this._itemWatchers.forEach(function (dispose) {\n      dispose();\n    });\n    this._itemWatchers = [];\n  },\n  _updateItemWatchers: function _updateItemWatchers(items) {\n    var that = this,\n      watch = that._getWatch();\n    items.forEach(function (item) {\n      if (_type2.default.isObject(item) && _type2.default.isDefined(item.visible) && _type2.default.isFunction(watch)) {\n        that._itemWatchers.push(watch(function () {\n          return (0, _variable_wrapper.unwrap)(item.visible);\n        }, function () {\n          that._updateItems(that.option(\"layoutData\"));\n          that.repaint();\n        }, {\n          skipImmediate: true\n        }));\n      }\n    });\n  },\n  _generateItemsByData: function _generateItemsByData(layoutData) {\n    var result = [];\n    if (_type2.default.isDefined(layoutData)) {\n      (0, _iterator.each)(layoutData, function (dataField) {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n    return result;\n  },\n  _isAcceptableItem: function _isAcceptableItem(item) {\n    var itemField = item.dataField || item,\n      itemData = this._getDataByField(itemField);\n    return !(_type2.default.isFunction(itemData) && !(0, _variable_wrapper.isWrapped)(itemData));\n  },\n  _processItem: function _processItem(item) {\n    if (\"string\" === typeof item) {\n      item = {\n        dataField: item\n      };\n    }\n    if (\"object\" === (\"undefined\" === typeof item ? \"undefined\" : _typeof(item)) && !item.itemType) {\n      item.itemType = SIMPLE_ITEM_TYPE;\n    }\n    if (!_type2.default.isDefined(item.editorType) && _type2.default.isDefined(item.dataField)) {\n      var value = this._getDataByField(item.dataField);\n      item.editorType = _type2.default.isDefined(value) ? this._getEditorTypeByDataType(_type2.default.type(value)) : FORM_EDITOR_BY_DEFAULT;\n    }\n    return item;\n  },\n  _getEditorTypeByDataType: function _getEditorTypeByDataType(dataType) {\n    switch (dataType) {\n      case \"number\":\n        return \"dxNumberBox\";\n      case \"date\":\n        return \"dxDateBox\";\n      case \"boolean\":\n        return \"dxCheckBox\";\n      default:\n        return \"dxTextBox\";\n    }\n  },\n  _sortItems: function _sortItems() {\n    (0, _array.normalizeIndexes)(this._items, \"visibleIndex\");\n    this._sortIndexes();\n  },\n  _sortIndexes: function _sortIndexes() {\n    this._items.sort(function (itemA, itemB) {\n      var result,\n        indexA = itemA.visibleIndex,\n        indexB = itemB.visibleIndex;\n      if (indexA > indexB) {\n        result = 1;\n      } else {\n        if (indexA < indexB) {\n          result = -1;\n        } else {\n          result = 0;\n        }\n      }\n      return result;\n    });\n  },\n  _initMarkup: function _initMarkup() {\n    this._itemsRunTimeInfo.clear();\n    this.$element().addClass(FORM_LAYOUT_MANAGER_CLASS);\n    this.callBase();\n    this._renderResponsiveBox();\n  },\n  _hasBrowserFlex: function _hasBrowserFlex() {\n    return _style2.default.styleProp(LAYOUT_STRATEGY_FLEX) === LAYOUT_STRATEGY_FLEX;\n  },\n  _renderResponsiveBox: function _renderResponsiveBox() {\n    var that = this,\n      templatesInfo = [];\n    if (that._items && that._items.length) {\n      var layoutItems,\n        colCount = that._getColCount(),\n        $container = (0, _renderer2.default)(\"<div>\").appendTo(that.$element());\n      that._prepareItemsWithMerging(colCount);\n      layoutItems = that._generateLayoutItems();\n      that._extendItemsWithDefaultTemplateOptions(layoutItems, that._items);\n      that._responsiveBox = that._createComponent($container, _responsive_box2.default, that._getResponsiveBoxConfig(layoutItems, colCount, templatesInfo));\n      if (!_window2.default.hasWindow()) {\n        that._renderTemplates(templatesInfo);\n      }\n    }\n  },\n  _extendItemsWithDefaultTemplateOptions: function _extendItemsWithDefaultTemplateOptions(targetItems, sourceItems) {\n    sourceItems.forEach(function (item) {\n      if (!item.merged) {\n        if (_type2.default.isDefined(item.disabled)) {\n          targetItems[item.visibleIndex].disabled = item.disabled;\n        }\n        if (_type2.default.isDefined(item.visible)) {\n          targetItems[item.visibleIndex].visible = item.visible;\n        }\n      }\n    });\n  },\n  _itemStateChangedHandler: function _itemStateChangedHandler(e) {\n    this._refresh();\n  },\n  _renderTemplate: function _renderTemplate($container, item) {\n    switch (item.itemType) {\n      case \"empty\":\n        this._renderEmptyItem($container);\n        break;\n      case \"button\":\n        this._renderButtonItem(item, $container);\n        break;\n      default:\n        this._renderFieldItem(item, $container);\n    }\n  },\n  _renderTemplates: function _renderTemplates(templatesInfo) {\n    var that = this;\n    (0, _iterator.each)(templatesInfo, function (index, info) {\n      that._renderTemplate(info.container, info.formItem);\n    });\n  },\n  _getResponsiveBoxConfig: function _getResponsiveBoxConfig(layoutItems, colCount, templatesInfo) {\n    var that = this,\n      colCountByScreen = that.option(\"colCountByScreen\"),\n      xsColCount = colCountByScreen && colCountByScreen.xs;\n    return {\n      onItemStateChanged: this._itemStateChangedHandler.bind(this),\n      _layoutStrategy: that._hasBrowserFlex() ? LAYOUT_STRATEGY_FLEX : LAYOUT_STRATEGY_FALLBACK,\n      onLayoutChanged: function onLayoutChanged() {\n        var onLayoutChanged = that.option(\"onLayoutChanged\"),\n          isSingleColumnMode = that.isSingleColumnMode();\n        if (onLayoutChanged) {\n          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, isSingleColumnMode);\n          onLayoutChanged(isSingleColumnMode);\n        }\n      },\n      onContentReady: function onContentReady(e) {\n        if (_window2.default.hasWindow()) {\n          that._renderTemplates(templatesInfo);\n        }\n        if (that.option(\"onLayoutChanged\")) {\n          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, that.isSingleColumnMode(e.component));\n        }\n        that._fireContentReadyAction();\n      },\n      itemTemplate: function itemTemplate(e, itemData, itemElement) {\n        if (!e.location) {\n          return;\n        }\n        var $itemElement = (0, _renderer2.default)(itemElement),\n          itemRenderedCountInPreviousRows = e.location.row * colCount,\n          item = that._items[e.location.col + itemRenderedCountInPreviousRows],\n          $fieldItem = (0, _renderer2.default)(\"<div>\").addClass(item.cssClass).appendTo($itemElement);\n        templatesInfo.push({\n          container: $fieldItem,\n          formItem: item\n        });\n        $itemElement.toggleClass(SINGLE_COLUMN_ITEM_CONTENT, that.isSingleColumnMode(this));\n        if (0 === e.location.row) {\n          $fieldItem.addClass(LAYOUT_MANAGER_FIRST_ROW_CLASS);\n        }\n        if (0 === e.location.col) {\n          $fieldItem.addClass(LAYOUT_MANAGER_FIRST_COL_CLASS);\n        }\n        if (e.location.col === colCount - 1 || e.location.col + e.location.colspan === colCount) {\n          $fieldItem.addClass(LAYOUT_MANAGER_LAST_COL_CLASS);\n        }\n      },\n      cols: that._generateRatio(colCount),\n      rows: that._generateRatio(that._getRowsCount(), true),\n      dataSource: layoutItems,\n      screenByWidth: that.option(\"screenByWidth\"),\n      singleColumnScreen: xsColCount ? false : \"xs\"\n    };\n  },\n  _getColCount: function _getColCount() {\n    var colCount = this.option(\"colCount\"),\n      colCountByScreen = this.option(\"colCountByScreen\");\n    if (colCountByScreen) {\n      var screenFactor = this.option(\"form\").getTargetScreenFactor();\n      if (!screenFactor) {\n        screenFactor = _window2.default.hasWindow() ? _window2.default.getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n      }\n      colCount = colCountByScreen[screenFactor] || colCount;\n    }\n    if (\"auto\" === colCount) {\n      if (this._cashedColCount) {\n        return this._cashedColCount;\n      }\n      this._cashedColCount = colCount = this._getMaxColCount();\n    }\n    return colCount < 1 ? 1 : colCount;\n  },\n  _getMaxColCount: function _getMaxColCount() {\n    if (!_window2.default.hasWindow()) {\n      return 1;\n    }\n    var minColWidth = this.option(\"minColWidth\"),\n      width = this.$element().width(),\n      itemsCount = this._items.length,\n      maxColCount = Math.floor(width / minColWidth) || 1;\n    return itemsCount < maxColCount ? itemsCount : maxColCount;\n  },\n  isCachedColCountObsolete: function isCachedColCountObsolete() {\n    return this._cashedColCount && this._getMaxColCount() !== this._cashedColCount;\n  },\n  _prepareItemsWithMerging: function _prepareItemsWithMerging(colCount) {\n    var item,\n      itemsMergedByCol,\n      j,\n      i,\n      items = this._items.slice(0),\n      result = [];\n    for (i = 0; i < items.length; i++) {\n      item = items[i];\n      result.push(item);\n      if (this.option(\"alignItemLabels\") || item.alignItemLabels || item.colSpan) {\n        item.col = this._getColByIndex(result.length - 1, colCount);\n      }\n      if (item.colSpan > 1 && item.col + item.colSpan <= colCount) {\n        itemsMergedByCol = [];\n        for (j = 0; j < item.colSpan - 1; j++) {\n          itemsMergedByCol.push({\n            merged: true\n          });\n        }\n        result = result.concat(itemsMergedByCol);\n      } else {\n        delete item.colSpan;\n      }\n    }\n    this._items = result;\n  },\n  _getColByIndex: function _getColByIndex(index, colCount) {\n    return index % colCount;\n  },\n  _generateLayoutItems: function _generateLayoutItems() {\n    var item,\n      i,\n      items = this._items,\n      colCount = this._getColCount(),\n      result = [];\n    for (i = 0; i < items.length; i++) {\n      item = items[i];\n      if (!item.merged) {\n        var generatedItem = {\n          location: {\n            row: parseInt(i / colCount),\n            col: this._getColByIndex(i, colCount)\n          }\n        };\n        if (_type2.default.isDefined(item.colSpan)) {\n          generatedItem.location.colspan = item.colSpan;\n        }\n        if (_type2.default.isDefined(item.rowSpan)) {\n          generatedItem.location.rowspan = item.rowSpan;\n        }\n        result.push(generatedItem);\n      }\n    }\n    return result;\n  },\n  _renderEmptyItem: function _renderEmptyItem($container) {\n    return $container.addClass(FIELD_EMPTY_ITEM_CLASS).html(\"&nbsp;\");\n  },\n  _getButtonHorizontalAlignment: function _getButtonHorizontalAlignment(item) {\n    if (_type2.default.isDefined(item.horizontalAlignment)) {\n      return item.horizontalAlignment;\n    }\n    if (_type2.default.isDefined(item.alignment)) {\n      _ui2.default.log(\"W0001\", \"dxForm\", \"alignment\", \"18.1\", \"Use the 'horizontalAlignment' option in button items instead.\");\n      return item.alignment;\n    }\n    return \"right\";\n  },\n  _getButtonVerticalAlignment: function _getButtonVerticalAlignment(item) {\n    switch (item.verticalAlignment) {\n      case \"center\":\n        return \"center\";\n      case \"bottom\":\n        return \"flex-end\";\n      default:\n        return \"flex-start\";\n    }\n  },\n  _renderButtonItem: function _renderButtonItem(item, $container) {\n    var $button = (0, _renderer2.default)(\"<div>\").appendTo($container),\n      defaultOptions = {\n        validationGroup: this.option(\"validationGroup\")\n      };\n    $container.addClass(FIELD_BUTTON_ITEM_CLASS).css(\"textAlign\", this._getButtonHorizontalAlignment(item));\n    $container.parent().css(\"justifyContent\", this._getButtonVerticalAlignment(item));\n    var instance = this._createComponent($button, \"dxButton\", (0, _extend.extend)(defaultOptions, item.buttonOptions));\n    this._itemsRunTimeInfo.add({\n      item: item,\n      widgetInstance: instance,\n      guid: item.guid,\n      $itemContainer: $container\n    });\n    this._addItemClasses($container, item.col);\n    return $button;\n  },\n  _addItemClasses: function _addItemClasses($item, column) {\n    $item.addClass(FIELD_ITEM_CLASS).addClass(this.option(\"cssItemClass\")).addClass(_type2.default.isDefined(column) ? \"dx-col-\" + column : \"\");\n  },\n  _renderFieldItem: function _renderFieldItem(item, $container) {\n    var $label,\n      that = this,\n      name = that._getName(item),\n      id = that.getItemID(name),\n      isRequired = _type2.default.isDefined(item.isRequired) ? item.isRequired : !!that._hasRequiredRuleInSet(item.validationRules),\n      labelOptions = that._getLabelOptions(item, id, isRequired),\n      $editor = (0, _renderer2.default)(\"<div>\"),\n      helpID = item.helpText ? \"dx-\" + new _guid2.default() : null;\n    this._addItemClasses($container, item.col);\n    $container.addClass(isRequired ? FIELD_ITEM_REQUIRED_CLASS : FIELD_ITEM_OPTIONAL_CLASS);\n    if (labelOptions.visible && labelOptions.text) {\n      $label = that._renderLabel(labelOptions).appendTo($container);\n    }\n    if (item.itemType === SIMPLE_ITEM_TYPE) {\n      if (that._isLabelNeedBaselineAlign(item) && \"top\" !== labelOptions.location) {\n        $container.addClass(FIELD_ITEM_LABEL_ALIGN_CLASS);\n      }\n      that._hasBrowserFlex() && $container.addClass(FLEX_LAYOUT_CLASS);\n    }\n    $editor.data(\"dx-form-item\", item);\n    that._appendEditorToField({\n      $fieldItem: $container,\n      $label: $label,\n      $editor: $editor,\n      labelOptions: labelOptions\n    });\n    var instance = that._renderEditor({\n      $container: $editor,\n      dataField: item.dataField,\n      name: item.name,\n      editorType: item.editorType,\n      editorOptions: item.editorOptions,\n      template: that._getTemplateByFieldItem(item),\n      isRequired: isRequired,\n      helpID: helpID,\n      labelID: labelOptions.labelID,\n      id: id,\n      validationBoundary: that.option(\"validationBoundary\")\n    });\n    this._itemsRunTimeInfo.add({\n      item: item,\n      widgetInstance: instance,\n      guid: item.guid,\n      $itemContainer: $container\n    });\n    var editorElem = $editor.children().first();\n    var $validationTarget = editorElem.hasClass(TEMPLATE_WRAPPER_CLASS) ? editorElem.children().first() : editorElem;\n    if ($validationTarget && $validationTarget.data(\"dx-validation-target\")) {\n      that._renderValidator($validationTarget, item);\n    }\n    that._renderHelpText(item, $editor, helpID);\n    that._attachClickHandler($label, $editor, item.editorType);\n  },\n  _hasRequiredRuleInSet: function _hasRequiredRuleInSet(rules) {\n    var hasRequiredRule;\n    if (rules && rules.length) {\n      (0, _iterator.each)(rules, function (index, rule) {\n        if (\"required\" === rule.type) {\n          hasRequiredRule = true;\n          return false;\n        }\n      });\n    }\n    return hasRequiredRule;\n  },\n  _getName: function _getName(item) {\n    return item.dataField || item.name;\n  },\n  _isLabelNeedBaselineAlign: function _isLabelNeedBaselineAlign(item) {\n    var largeEditors = [\"dxTextArea\", \"dxRadioGroup\", \"dxCalendar\"];\n    return !!item.helpText && !this._hasBrowserFlex() || (0, _array.inArray)(item.editorType, largeEditors) !== -1;\n  },\n  _isLabelNeedId: function _isLabelNeedId(item) {\n    var editorsRequiringIdForLabel = [\"dxRadioGroup\", \"dxCheckBox\", \"dxLookup\", \"dxSlider\", \"dxRangeSlider\", \"dxSwitch\"];\n    return (0, _array.inArray)(item.editorType, editorsRequiringIdForLabel) !== -1;\n  },\n  _getLabelOptions: function _getLabelOptions(item, id, isRequired) {\n    var labelOptions = (0, _extend.extend)({\n      showColon: this.option(\"showColonAfterLabel\"),\n      location: this.option(\"labelLocation\"),\n      id: id,\n      visible: true,\n      isRequired: isRequired\n    }, item ? item.label : {});\n    if (this._isLabelNeedId(item)) {\n      labelOptions.labelID = \"dx-label-\" + new _guid2.default();\n    }\n    if (!labelOptions.text && item.dataField) {\n      labelOptions.text = _inflector2.default.captionize(item.dataField);\n    }\n    if (labelOptions.text) {\n      labelOptions.text += labelOptions.showColon ? \":\" : \"\";\n    }\n    return labelOptions;\n  },\n  _renderLabel: function _renderLabel(options) {\n    var text = options.text,\n      id = options.id,\n      location = options.location,\n      alignment = options.alignment,\n      isRequired = options.isRequired,\n      _options$labelID = options.labelID,\n      labelID = void 0 === _options$labelID ? null : _options$labelID;\n    if (_type2.default.isDefined(text) && text.length > 0) {\n      var labelClasses = FIELD_ITEM_LABEL_CLASS + \" \" + FIELD_ITEM_LABEL_LOCATION_CLASS + location;\n      var $label = (0, _renderer2.default)(\"<label>\").addClass(labelClasses).attr(\"for\", id).attr(\"id\", labelID);\n      var $labelContent = (0, _renderer2.default)(\"<span>\").addClass(FIELD_ITEM_LABEL_CONTENT_CLASS).appendTo($label);\n      (0, _renderer2.default)(\"<span>\").addClass(FIELD_ITEM_LABEL_TEXT_CLASS).text(text).appendTo($labelContent);\n      if (alignment) {\n        $label.css(\"textAlign\", alignment);\n      }\n      $labelContent.append(this._renderLabelMark(isRequired));\n      return $label;\n    }\n  },\n  _renderLabelMark: function _renderLabelMark(isRequired) {\n    var $mark,\n      requiredMarksConfig = this._getRequiredMarksConfig(),\n      isRequiredMark = requiredMarksConfig.showRequiredMark && isRequired,\n      isOptionalMark = requiredMarksConfig.showOptionalMark && !isRequired;\n    if (isRequiredMark || isOptionalMark) {\n      var markClass = isRequiredMark ? FIELD_ITEM_REQUIRED_MARK_CLASS : FIELD_ITEM_OPTIONAL_MARK_CLASS,\n        markText = isRequiredMark ? requiredMarksConfig.requiredMark : requiredMarksConfig.optionalMark;\n      $mark = (0, _renderer2.default)(\"<span>\").addClass(markClass).html(\"&nbsp\" + markText);\n    }\n    return $mark;\n  },\n  _getRequiredMarksConfig: function _getRequiredMarksConfig() {\n    if (!this._cashedRequiredConfig) {\n      this._cashedRequiredConfig = {\n        showRequiredMark: this.option(\"showRequiredMark\"),\n        showOptionalMark: this.option(\"showOptionalMark\"),\n        requiredMark: this.option(\"requiredMark\"),\n        optionalMark: this.option(\"optionalMark\")\n      };\n    }\n    return this._cashedRequiredConfig;\n  },\n  _renderEditor: function _renderEditor(options) {\n    var editorOptions,\n      dataValue = this._getDataByField(options.dataField),\n      defaultEditorOptions = void 0 !== dataValue ? {\n        value: dataValue\n      } : {},\n      isDeepExtend = true;\n    if (EDITORS_WITH_ARRAY_VALUE.indexOf(options.editorType) !== -1) {\n      defaultEditorOptions.value = defaultEditorOptions.value || [];\n    }\n    var formInstance = this.option(\"form\");\n    editorOptions = (0, _extend.extend)(isDeepExtend, defaultEditorOptions, options.editorOptions, {\n      inputAttr: {\n        id: options.id\n      },\n      validationBoundary: options.validationBoundary,\n      stylingMode: formInstance && formInstance.option(\"stylingMode\")\n    });\n    this._replaceDataOptions(options.editorOptions, editorOptions);\n    var renderOptions = {\n      editorType: options.editorType,\n      dataField: options.dataField,\n      template: options.template,\n      name: options.name,\n      helpID: options.helpID,\n      labelID: options.labelID,\n      isRequired: options.isRequired\n    };\n    return this._createEditor(options.$container, renderOptions, editorOptions);\n  },\n  _replaceDataOptions: function _replaceDataOptions(originalOptions, resultOptions) {\n    if (originalOptions) {\n      DATA_OPTIONS.forEach(function (item) {\n        if (resultOptions[item]) {\n          resultOptions[item] = originalOptions[item];\n        }\n      });\n    }\n  },\n  _renderValidator: function _renderValidator($editor, item) {\n    var fieldName = this._getFieldLabelName(item),\n      validationRules = this._prepareValidationRules(item.validationRules, item.isRequired, item.itemType, fieldName);\n    if (Array.isArray(validationRules) && validationRules.length) {\n      this._createComponent($editor, _validator2.default, {\n        validationRules: validationRules,\n        validationGroup: this.option(\"validationGroup\")\n      });\n    }\n  },\n  _getFieldLabelName: function _getFieldLabelName(item) {\n    var isItemHaveCustomLabel = item.label && item.label.text,\n      itemName = isItemHaveCustomLabel ? null : this._getName(item);\n    return isItemHaveCustomLabel ? item.label.text : itemName && _inflector2.default.captionize(itemName);\n  },\n  _prepareValidationRules: function _prepareValidationRules(userValidationRules, isItemRequired, itemType, itemName) {\n    var validationRules,\n      isSimpleItem = itemType === SIMPLE_ITEM_TYPE;\n    if (isSimpleItem) {\n      if (userValidationRules) {\n        validationRules = userValidationRules;\n      } else {\n        var requiredMessage = _string2.default.format(this.option(\"requiredMessage\"), itemName || \"\");\n        validationRules = isItemRequired ? [{\n          type: \"required\",\n          message: requiredMessage\n        }] : null;\n      }\n    }\n    return validationRules;\n  },\n  _addWrapperInvalidClass: function _addWrapperInvalidClass(editorInstance) {\n    var wrapperClass = \".\" + FIELD_ITEM_CONTENT_WRAPPER_CLASS,\n      toggleInvalidClass = function toggleInvalidClass(e) {\n        (0, _renderer2.default)(e.element).parents(wrapperClass).toggleClass(INVALID_CLASS, e.component._isFocused() && false === e.component.option(\"isValid\"));\n      };\n    editorInstance.on(\"focusIn\", toggleInvalidClass).on(\"focusOut\", toggleInvalidClass).on(\"enterKey\", toggleInvalidClass);\n  },\n  _createEditor: function _createEditor($container, renderOptions, editorOptions) {\n    var editorInstance,\n      that = this,\n      template = renderOptions.template;\n    if (renderOptions.dataField && !editorOptions.name) {\n      editorOptions.name = renderOptions.dataField;\n    }\n    that._addItemContentClasses($container);\n    if (template) {\n      var data = {\n        dataField: renderOptions.dataField,\n        editorType: renderOptions.editorType,\n        editorOptions: editorOptions,\n        component: that._getComponentOwner(),\n        name: renderOptions.name\n      };\n      template.render({\n        model: data,\n        container: _dom2.default.getPublicElement($container)\n      });\n    } else {\n      var $editor = (0, _renderer2.default)(\"<div>\").appendTo($container);\n      try {\n        editorInstance = that._createComponent($editor, renderOptions.editorType, editorOptions);\n        editorInstance.setAria(\"describedby\", renderOptions.helpID);\n        editorInstance.setAria(\"labelledby\", renderOptions.labelID);\n        editorInstance.setAria(\"required\", renderOptions.isRequired);\n        if (_themes2.default.isMaterial()) {\n          that._addWrapperInvalidClass(editorInstance);\n        }\n        if (renderOptions.dataField) {\n          that._bindDataField(editorInstance, renderOptions, $container);\n        }\n      } catch (e) {\n        _ui2.default.log(\"E1035\", e.message);\n      }\n    }\n    return editorInstance;\n  },\n  _getComponentOwner: function _getComponentOwner() {\n    return this.option(\"form\") || this;\n  },\n  _bindDataField: function _bindDataField(editorInstance, renderOptions, $container) {\n    var componentOwner = this._getComponentOwner();\n    editorInstance.on(\"enterKey\", function (args) {\n      componentOwner._createActionByOption(\"onEditorEnterKey\")((0, _extend.extend)(args, {\n        dataField: renderOptions.dataField\n      }));\n    });\n    this._createWatcher(editorInstance, $container, renderOptions);\n    this.linkEditorToDataField(editorInstance, renderOptions.dataField, renderOptions.editorType);\n  },\n  _createWatcher: function _createWatcher(editorInstance, $container, renderOptions) {\n    var that = this,\n      watch = that._getWatch();\n    if (!_type2.default.isFunction(watch)) {\n      return;\n    }\n    var dispose = watch(function () {\n      return that._getDataByField(renderOptions.dataField);\n    }, function () {\n      editorInstance.option(\"value\", that._getDataByField(renderOptions.dataField));\n    }, {\n      deep: true,\n      skipImmediate: true\n    });\n    _events_engine2.default.on($container, _remove_event2.default, dispose);\n  },\n  _getWatch: function _getWatch() {\n    if (!_type2.default.isDefined(this._watch)) {\n      var formInstance = this.option(\"form\");\n      this._watch = formInstance && formInstance.option(\"integrationOptions.watchMethod\");\n    }\n    return this._watch;\n  },\n  _addItemContentClasses: function _addItemContentClasses($itemContent) {\n    var locationSpecificClass = this._getItemContentLocationSpecificClass();\n    $itemContent.addClass([FIELD_ITEM_CONTENT_CLASS, locationSpecificClass].join(\" \"));\n  },\n  _getItemContentLocationSpecificClass: function _getItemContentLocationSpecificClass() {\n    var labelLocation = this.option(\"labelLocation\"),\n      oppositeClasses = {\n        right: \"left\",\n        left: \"right\",\n        top: \"bottom\"\n      };\n    return FIELD_ITEM_CONTENT_LOCATION_CLASS + oppositeClasses[labelLocation];\n  },\n  _createComponent: function _createComponent($editor, type, editorOptions) {\n    var instance,\n      that = this,\n      readOnlyState = this.option(\"readOnly\");\n    instance = that.callBase($editor, type, editorOptions);\n    readOnlyState && instance.option(\"readOnly\", readOnlyState);\n    that.on(\"optionChanged\", function (args) {\n      if (\"readOnly\" === args.name && !_type2.default.isDefined(editorOptions.readOnly)) {\n        instance.option(args.name, args.value);\n      }\n    });\n    return instance;\n  },\n  _getTemplateByFieldItem: function _getTemplateByFieldItem(fieldItem) {\n    return fieldItem.template ? this._getTemplate(fieldItem.template) : null;\n  },\n  _appendEditorToField: function _appendEditorToField(params) {\n    if (params.$label) {\n      var location = params.labelOptions.location;\n      if (\"top\" === location || \"left\" === location) {\n        params.$fieldItem.append(params.$editor);\n      }\n      if (\"right\" === location) {\n        params.$fieldItem.prepend(params.$editor);\n      }\n      this._addInnerItemAlignmentClass(params.$fieldItem, location);\n    } else {\n      params.$fieldItem.append(params.$editor);\n    }\n  },\n  _addInnerItemAlignmentClass: function _addInnerItemAlignmentClass($fieldItem, location) {\n    if (\"top\" === location) {\n      $fieldItem.addClass(LABEL_VERTICAL_ALIGNMENT_CLASS);\n    } else {\n      $fieldItem.addClass(LABEL_HORIZONTAL_ALIGNMENT_CLASS);\n    }\n  },\n  _renderHelpText: function _renderHelpText(fieldItem, $editor, helpID) {\n    var helpText = fieldItem.helpText,\n      isSimpleItem = fieldItem.itemType === SIMPLE_ITEM_TYPE;\n    if (helpText && isSimpleItem) {\n      var $editorWrapper = (0, _renderer2.default)(\"<div>\").addClass(FIELD_ITEM_CONTENT_WRAPPER_CLASS);\n      $editor.wrap($editorWrapper);\n      (0, _renderer2.default)(\"<div>\").addClass(FIELD_ITEM_HELP_TEXT_CLASS).attr(\"id\", helpID).text(helpText).appendTo($editor.parent());\n    }\n  },\n  _attachClickHandler: function _attachClickHandler($label, $editor, editorType) {\n    var isBooleanEditors = \"dxCheckBox\" === editorType || \"dxSwitch\" === editorType;\n    if ($label && isBooleanEditors) {\n      _events_engine2.default.on($label, _click2.default.name, function () {\n        _events_engine2.default.trigger($editor.children(), _click2.default.name);\n      });\n    }\n  },\n  _generateRatio: function _generateRatio(count, isAutoSize) {\n    var ratio,\n      i,\n      result = [];\n    for (i = 0; i < count; i++) {\n      ratio = {\n        ratio: 1\n      };\n      if (isAutoSize) {\n        ratio.baseSize = \"auto\";\n      }\n      result.push(ratio);\n    }\n    return result;\n  },\n  _getRowsCount: function _getRowsCount() {\n    return Math.ceil(this._items.length / this._getColCount());\n  },\n  _updateReferencedOptions: function _updateReferencedOptions(newLayoutData) {\n    var _this = this;\n    var layoutData = this.option(\"layoutData\");\n    if (_type2.default.isObject(layoutData)) {\n      Object.getOwnPropertyNames(layoutData).forEach(function (property) {\n        return delete _this._optionsByReference[\"layoutData.\" + property];\n      });\n    }\n    if (_type2.default.isObject(newLayoutData)) {\n      Object.getOwnPropertyNames(newLayoutData).forEach(function (property) {\n        return _this._optionsByReference[\"layoutData.\" + property] = true;\n      });\n    }\n  },\n  _resetWidget: function _resetWidget(instance) {\n    var defaultOptions = instance._getDefaultOptions();\n    instance._setOptionSilent(\"value\", defaultOptions.value);\n    instance.option(\"isValid\", true);\n  },\n  _optionChanged: function _optionChanged(args) {\n    var _this2 = this;\n    if (0 === args.fullName.search(\"layoutData.\")) {\n      return;\n    }\n    switch (args.name) {\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n        this._cashedRequiredConfig = null;\n        this._invalidate();\n        break;\n      case \"layoutData\":\n        this._updateReferencedOptions(args.value);\n        if (this.option(\"items\")) {\n          if (!_type2.default.isEmptyObject(args.value)) {\n            this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n              if (_type2.default.isDefined(itemRunTimeInfo.item)) {\n                var dataField = itemRunTimeInfo.item.dataField;\n                if (dataField && _type2.default.isDefined(itemRunTimeInfo.widgetInstance)) {\n                  var valueGetter = _data2.default.compileGetter(dataField);\n                  var dataValue = valueGetter(args.value);\n                  if (void 0 === dataValue) {\n                    _this2._resetWidget(itemRunTimeInfo.widgetInstance);\n                  } else {\n                    itemRunTimeInfo.widgetInstance.option(\"value\", dataValue);\n                  }\n                }\n              }\n            });\n          }\n        } else {\n          this._initDataAndItems(args.value);\n          this._invalidate();\n        }\n        break;\n      case \"items\":\n        this._cleanItemWatchers();\n        this._initDataAndItems(args.value);\n        this._invalidate();\n        break;\n      case \"alignItemLabels\":\n      case \"labelLocation\":\n      case \"requiredMessage\":\n        this._invalidate();\n        break;\n      case \"customizeItem\":\n        this._updateItems(this.option(\"layoutData\"));\n        this._invalidate();\n        break;\n      case \"colCount\":\n        this._resetColCount();\n        break;\n      case \"minColWidth\":\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._resetColCount();\n        }\n        break;\n      case \"readOnly\":\n        break;\n      case \"width\":\n        this.callBase(args);\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._resetColCount();\n        }\n        break;\n      case \"onFieldDataChanged\":\n        break;\n      default:\n        this.callBase(args);\n    }\n  },\n  _resetColCount: function _resetColCount() {\n    this._cashedColCount = null;\n    this._invalidate();\n  },\n  linkEditorToDataField: function linkEditorToDataField(editorInstance, dataField, editorType) {\n    var isDataUpdating,\n      fullFieldName = \"layoutData.\" + dataField,\n      that = this;\n    that.on(\"optionChanged\", function (args) {\n      if (args.fullName === fullFieldName) {\n        isDataUpdating = true;\n        if (\"object\" === _typeof(args.value)) {\n          that._managedUpdateEditorOption(editorInstance, \"value\", args.value);\n        } else {\n          editorInstance.option(\"value\", args.value);\n        }\n        isDataUpdating = false;\n      }\n    });\n    editorInstance.on(\"valueChanged\", function (args) {\n      var isObjectValue = \"object\" === _typeof(args.value),\n        isSameObjectValue = isObjectValue && args.value === args.previousValue;\n      if (!isDataUpdating && !isSameObjectValue) {\n        if (isObjectValue) {\n          that._managedUpdateFieldValue(dataField, args.value);\n        } else {\n          that._updateFieldValue(dataField, args.value);\n        }\n      }\n    });\n  },\n  _managedUpdateEditorOption: function _managedUpdateEditorOption(editorInstance, optionName, value) {\n    if (!this._isValueChangedCalled) {\n      this._isFieldValueChanged = true;\n      editorInstance.option(optionName, value);\n      this._isFieldValueChanged = false;\n    }\n  },\n  _managedUpdateFieldValue: function _managedUpdateFieldValue(dataField, value) {\n    this._isValueChangedCalled = true;\n    if (!this._isFieldValueChanged) {\n      this._updateFieldValue(dataField, value);\n    }\n    this._isValueChangedCalled = false;\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    if (\"auto\" === this.option(\"colCount\") && this.isCachedColCountObsolete()) {\n      this.fireEvent(\"autoColCountChanged\");\n    }\n  },\n  getItemID: function getItemID(name) {\n    var formInstance = this.option(\"form\");\n    return formInstance && formInstance.getItemID(name);\n  },\n  updateData: function updateData(data, value) {\n    var that = this;\n    if (_type2.default.isObject(data)) {\n      (0, _iterator.each)(data, function (dataField, fieldValue) {\n        that._updateFieldValue(dataField, fieldValue);\n      });\n    } else {\n      if (\"string\" === typeof data) {\n        that._updateFieldValue(data, value);\n      }\n    }\n  },\n  getEditor: function getEditor(field) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(field) || this._itemsRunTimeInfo.findWidgetInstanceByName(field);\n  },\n  isSingleColumnMode: function isSingleColumnMode(component) {\n    var responsiveBox = this._responsiveBox || component;\n    if (responsiveBox) {\n      return responsiveBox.option(\"currentScreenFactor\") === responsiveBox.option(\"singleColumnScreen\");\n    }\n  },\n  getItemsRunTimeInfo: function getItemsRunTimeInfo() {\n    return this._itemsRunTimeInfo;\n  }\n});\n(0, _component_registrator2.default)(\"dxLayoutManager\", LayoutManager);\nmodule.exports = LayoutManager;","map":null,"metadata":{},"sourceType":"script"}