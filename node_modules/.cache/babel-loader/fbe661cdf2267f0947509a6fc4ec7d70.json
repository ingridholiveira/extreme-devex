{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.list.js)\r\n * Version: 19.2.2\r\n * Build date: Tue Oct 01 2019\r\n *\r\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\"),\n  window = require(\"../../core/utils/window\").getWindow(),\n  List = require(\"../list\"),\n  DateBoxStrategy = require(\"./ui.date_box.strategy\"),\n  noop = require(\"../../core/utils/common\").noop,\n  ensureDefined = require(\"../../core/utils/common\").ensureDefined,\n  isDate = require(\"../../core/utils/type\").isDate,\n  extend = require(\"../../core/utils/extend\").extend,\n  dateUtils = require(\"./ui.date_utils\"),\n  dateLocalization = require(\"../../localization/date\");\nvar DATE_FORMAT = \"date\";\nvar BOUNDARY_VALUES = {\n  min: new Date(0, 0, 0, 0, 0),\n  max: new Date(0, 0, 0, 23, 59)\n};\nvar ListStrategy = DateBoxStrategy.inherit({\n  NAME: \"List\",\n  supportedKeys: function supportedKeys() {\n    return {\n      tab: function tab() {\n        if (this.option(\"opened\")) {\n          this.close();\n        }\n      },\n      space: noop,\n      home: noop,\n      end: noop\n    };\n  },\n  getDefaultOptions: function getDefaultOptions() {\n    return extend(this.callBase(), {\n      applyValueMode: \"instantly\"\n    });\n  },\n  getDisplayFormat: function getDisplayFormat(displayFormat) {\n    return displayFormat || \"shorttime\";\n  },\n  popupConfig: function popupConfig(_popupConfig) {\n    return extend(_popupConfig, {\n      width: this._getPopupWidth()\n    });\n  },\n  useCurrentDateByDefault: function useCurrentDateByDefault() {\n    return true;\n  },\n  getDefaultDate: function getDefaultDate() {\n    return new Date(null);\n  },\n  _getPopupWidth: function _getPopupWidth() {\n    return this.dateBox.$element().outerWidth();\n  },\n  popupShowingHandler: function popupShowingHandler() {\n    this._dimensionChanged();\n  },\n  _renderWidget: function _renderWidget() {\n    this.callBase();\n    this._refreshItems();\n  },\n  _getWidgetName: function _getWidgetName() {\n    return List;\n  },\n  _getWidgetOptions: function _getWidgetOptions() {\n    var keyboardProcessor = this.dateBox._keyboardProcessor;\n    return {\n      _keyboardProcessor: keyboardProcessor ? keyboardProcessor.attachChildProcessor() : null,\n      itemTemplate: this._timeListItemTemplate.bind(this),\n      onItemClick: this._listItemClickHandler.bind(this),\n      tabIndex: -1,\n      onFocusedItemChanged: this._refreshActiveDescendant.bind(this),\n      selectionMode: \"single\"\n    };\n  },\n  _refreshActiveDescendant: function _refreshActiveDescendant(e) {\n    this.dateBox.setAria(\"activedescendant\", \"\");\n    this.dateBox.setAria(\"activedescendant\", e.actionValue);\n  },\n  _refreshItems: function _refreshItems() {\n    this._widgetItems = this._getTimeListItems();\n    this._widget.option(\"items\", this._widgetItems);\n  },\n  renderOpenedState: function renderOpenedState() {\n    if (!this._widget) {\n      return;\n    }\n    this._widget.option(\"focusedElement\", null);\n    this._setSelectedItemsByValue();\n    if (this._widget.option(\"templatesRenderAsynchronously\")) {\n      this._asyncScrollTimeout = setTimeout(this._scrollToSelectedItem.bind(this));\n    } else {\n      this._scrollToSelectedItem();\n    }\n  },\n  dispose: function dispose() {\n    this.callBase();\n    clearTimeout(this._asyncScrollTimeout);\n  },\n  _updateValue: function _updateValue() {\n    if (!this._widget) {\n      return;\n    }\n    this._refreshItems();\n    this._setSelectedItemsByValue();\n    this._scrollToSelectedItem();\n  },\n  _setSelectedItemsByValue: function _setSelectedItemsByValue() {\n    var value = this.dateBoxValue();\n    var dateIndex = this._getDateIndex(value);\n    if (dateIndex === -1) {\n      this._widget.option(\"selectedItems\", []);\n    } else {\n      this._widget.option(\"selectedIndex\", dateIndex);\n    }\n  },\n  _scrollToSelectedItem: function _scrollToSelectedItem() {\n    this._widget.scrollToItem(this._widget.option(\"selectedIndex\"));\n  },\n  _getDateIndex: function _getDateIndex(date) {\n    var result = -1;\n    for (var i = 0, n = this._widgetItems.length; i < n; i++) {\n      if (this._areDatesEqual(date, this._widgetItems[i])) {\n        result = i;\n        break;\n      }\n    }\n    return result;\n  },\n  _areDatesEqual: function _areDatesEqual(first, second) {\n    return isDate(first) && isDate(second) && first.getHours() === second.getHours() && first.getMinutes() === second.getMinutes();\n  },\n  _getTimeListItems: function _getTimeListItems() {\n    var min = this.dateBox.dateOption(\"min\") || this._getBoundaryDate(\"min\"),\n      max = this.dateBox.dateOption(\"max\") || this._getBoundaryDate(\"max\"),\n      value = this.dateBox.dateOption(\"value\") || null,\n      delta = max - min,\n      minutes = min.getMinutes() % this.dateBox.option(\"interval\");\n    if (delta < 0) {\n      return [];\n    }\n    if (delta > dateUtils.ONE_DAY) {\n      delta = dateUtils.ONE_DAY;\n    }\n    if (value - min < dateUtils.ONE_DAY) {\n      return this._getRangeItems(min, new Date(min), delta);\n    }\n    min = this._getBoundaryDate(\"min\");\n    min.setMinutes(minutes);\n    if (value && Math.abs(value - max) < dateUtils.ONE_DAY) {\n      delta = (60 * max.getHours() + Math.abs(max.getMinutes() - minutes)) * dateUtils.ONE_MINUTE;\n    }\n    return this._getRangeItems(min, new Date(min), delta);\n  },\n  _getRangeItems: function _getRangeItems(startValue, currentValue, rangeDuration) {\n    var rangeItems = [];\n    var interval = this.dateBox.option(\"interval\");\n    while (currentValue - startValue < rangeDuration) {\n      rangeItems.push(new Date(currentValue));\n      currentValue.setMinutes(currentValue.getMinutes() + interval);\n    }\n    return rangeItems;\n  },\n  _getBoundaryDate: function _getBoundaryDate(boundary) {\n    var boundaryValue = BOUNDARY_VALUES[boundary],\n      currentValue = new Date(ensureDefined(this.dateBox.dateOption(\"value\"), 0));\n    return new Date(currentValue.getFullYear(), currentValue.getMonth(), currentValue.getDate(), boundaryValue.getHours(), boundaryValue.getMinutes());\n  },\n  _timeListItemTemplate: function _timeListItemTemplate(itemData) {\n    var displayFormat = this.dateBox.option(\"displayFormat\");\n    return dateLocalization.format(itemData, this.getDisplayFormat(displayFormat));\n  },\n  _listItemClickHandler: function _listItemClickHandler(e) {\n    this.dateBox.option(\"opened\", false);\n    var date = this.dateBox.option(\"value\");\n    var itemData = e.itemData;\n    var hours = itemData.getHours();\n    var minutes = itemData.getMinutes();\n    var seconds = itemData.getSeconds();\n    var year = itemData.getFullYear();\n    var month = itemData.getMonth();\n    var day = itemData.getDate();\n    if (date) {\n      date = new Date(date);\n      date.setHours(hours);\n      date.setMinutes(minutes);\n      date.setSeconds(seconds);\n      date.setFullYear(year);\n      date.setMonth(month);\n      date.setDate(day);\n    } else {\n      date = new Date(year, month, day, hours, minutes, 0, 0);\n    }\n    this.dateBoxValue(date);\n  },\n  attachKeyboardEvents: function attachKeyboardEvents(keyboardProcessor) {\n    var child = keyboardProcessor.attachChildProcessor();\n    if (this._widget) {\n      this._widget.option(\"_keyboardProcessor\", child);\n    }\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this._getPopup() && this._updatePopupDimensions();\n  },\n  _updatePopupDimensions: function _updatePopupDimensions() {\n    this._updatePopupWidth();\n    this._updatePopupHeight();\n  },\n  _updatePopupWidth: function _updatePopupWidth() {\n    this.dateBox._setPopupOption(\"width\", this._getPopupWidth());\n  },\n  _updatePopupHeight: function _updatePopupHeight() {\n    this.dateBox._setPopupOption(\"height\", \"auto\");\n    var popupHeight = this._widget.$element().outerHeight();\n    var maxHeight = .45 * $(window).height();\n    this.dateBox._setPopupOption(\"height\", Math.min(popupHeight, maxHeight));\n    this.dateBox._timeList && this.dateBox._timeList.updateDimensions();\n  },\n  getParsedText: function getParsedText(text, format) {\n    var value = this.callBase(text, format);\n    if (value) {\n      value = dateUtils.mergeDates(value, new Date(null), DATE_FORMAT);\n    }\n    return value;\n  }\n});\nmodule.exports = ListStrategy;","map":null,"metadata":{},"sourceType":"script"}