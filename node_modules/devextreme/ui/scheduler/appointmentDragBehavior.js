/**
 * DevExtreme (ui/scheduler/appointmentDragBehavior.js)
 * Version: 19.2.2
 * Build date: Tue Oct 01 2019
 *
 * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) {
                descriptor.writable = true
            }
            Object.defineProperty(target, descriptor.key, descriptor)
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) {
            defineProperties(Constructor.prototype, protoProps)
        }
        if (staticProps) {
            defineProperties(Constructor, staticProps)
        }
        return Constructor
    }
}();
var _renderer = require("../../core/renderer");
var _renderer2 = _interopRequireDefault(_renderer);
var _draggable = require("../draggable");
var _draggable2 = _interopRequireDefault(_draggable);
var _translator = require("../../animation/translator");
var _translator2 = _interopRequireDefault(_translator);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}
var FIXED_CONTAINER_PROP_NAME = "fixedContainer";
var AppointmentDragBehavior = function() {
    function AppointmentDragBehavior(scheduler) {
        _classCallCheck(this, AppointmentDragBehavior);
        this.scheduler = scheduler;
        this.initialPosition = {
            left: 0,
            top: 0
        };
        this.currentAppointment = null
    }
    _createClass(AppointmentDragBehavior, [{
        key: "isAllDay",
        value: function(appointment) {
            return appointment.data("dxAppointmentSettings").allDay
        }
    }, {
        key: "getDraggableArea",
        value: function() {
            var result = null;
            this.scheduler.notifyObserver("getDraggableAppointmentArea", {
                callback: function(appointmentArea) {
                    return result = appointmentArea
                }
            });
            return result
        }
    }, {
        key: "getContainerShift",
        value: function(isAllDay) {
            var appointmentContainer = this.scheduler._getAppointmentContainer(isAllDay);
            var dragAndDropContainer = this.scheduler.option(FIXED_CONTAINER_PROP_NAME);
            var appointmentContainerRect = appointmentContainer[0].getBoundingClientRect();
            var dragAndDropContainerRect = dragAndDropContainer[0].getBoundingClientRect();
            return {
                left: appointmentContainerRect.left - dragAndDropContainerRect.left,
                top: appointmentContainerRect.top - dragAndDropContainerRect.top
            }
        }
    }, {
        key: "onDragStart",
        value: function(e) {
            var appointment = (0, _renderer2.default)(e.element);
            this.onDragStartCore(appointment, this.isAllDay(appointment))
        }
    }, {
        key: "onDragStartCore",
        value: function(appointment, isAllDay) {
            this.initialPosition = _translator2.default.locate(appointment);
            this.scheduler.option(FIXED_CONTAINER_PROP_NAME).append(appointment);
            this.scheduler.notifyObserver("hideAppointmentTooltip");
            this.containerShift = this.getContainerShift(isAllDay);
            this.onDragMoveCore(appointment, {
                x: 0,
                y: 0
            })
        }
    }, {
        key: "onDragMove",
        value: function(e) {
            this.onDragMoveCore((0, _renderer2.default)(e.element), e.event.offset)
        }
    }, {
        key: "onDragMoveCore",
        value: function(appointment, mouseOffset) {
            _translator2.default.move(appointment, {
                left: this.initialPosition.left + this.containerShift.left + mouseOffset.x,
                top: this.initialPosition.top + this.containerShift.top + mouseOffset.y
            })
        }
    }, {
        key: "onDragEnd",
        value: function(e) {
            this.onDragEndCore((0, _renderer2.default)(e.element), e)
        }
    }, {
        key: "onDragEndCore",
        value: function(appointment, e) {
            var container = this.scheduler._getAppointmentContainer(this.isAllDay(appointment));
            container.append(appointment);
            this.currentAppointment = appointment;
            if (this.scheduler._escPressed) {
                e.event.cancel = true
            } else {
                this.scheduler.notifyObserver("updateAppointmentAfterDrag", {
                    data: this.scheduler._getItemData(appointment),
                    $appointment: appointment,
                    coordinates: this.initialPosition
                })
            }
        }
    }, {
        key: "addTo",
        value: function(appointment) {
            var _this = this;
            this.scheduler._createComponent(appointment, _draggable2.default, {
                boundary: this.getDraggableArea(),
                boundOffset: this.scheduler._calculateBoundOffset(),
                immediate: false,
                onDragStart: function(e) {
                    return _this.onDragStart(e)
                },
                onDragMove: function(e) {
                    return _this.onDragMove(e)
                },
                onDragEnd: function(e) {
                    return _this.onDragEnd(e)
                }
            })
        }
    }, {
        key: "moveBack",
        value: function() {
            if (this.currentAppointment && void 0 !== this.initialPosition.left && void 0 !== this.initialPosition.top) {
                _translator2.default.move(this.currentAppointment, this.initialPosition)
            }
        }
    }]);
    return AppointmentDragBehavior
}();
exports.default = AppointmentDragBehavior;
